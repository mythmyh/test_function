
test_function.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000211e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005a07c  08021374  08021374  00031374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807b3f0  0807b3f0  000900a4  2**0
                  CONTENTS
  4 .ARM          00000008  0807b3f0  0807b3f0  0008b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807b3f8  0807b3f8  000900a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807b3f8  0807b3f8  0008b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807b3fc  0807b3fc  0008b3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0807b400  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000900a4  2**0
                  CONTENTS
 10 .bss          00014b40  200000a4  200000a4  000900a4  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  20014be4  20014be4  000900a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000900a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000580ee  00000000  00000000  000900d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a7a4  00000000  00000000  000e81c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e48  00000000  00000000  000f2968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c38  00000000  00000000  000f57b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000378e1  00000000  00000000  000f83e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c02a  00000000  00000000  0012fcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd67a  00000000  00000000  0017bcf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0027936d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cdb0  00000000  00000000  002793c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802135c 	.word	0x0802135c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0802135c 	.word	0x0802135c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <WM8978_Register_Wirter>:
static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma);
static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size);

HAL_StatusTypeDef WM8978_Register_Wirter(uint8_t reg_addr, uint16_t data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
	uint8_t pData[10] =	{ 0 };
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	b25a      	sxtb	r2, r3
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c1, WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005d8:	f107 020c 	add.w	r2, r7, #12
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2302      	movs	r3, #2
 80005e4:	2134      	movs	r1, #52	; 0x34
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <WM8978_Register_Wirter+0x60>)
 80005e8:	f005 f86c 	bl	80056c4 <HAL_I2C_Master_Transmit>
 80005ec:	4603      	mov	r3, r0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000ccc4 	.word	0x2000ccc4

080005fc <WAV_FileInit>:



void WAV_FileInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <WAV_FileInit+0x1c>)
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <WAV_FileInit+0x20>)
 8000604:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <WAV_FileInit+0x24>)
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <WAV_FileInit+0x28>)
 800060a:	601a      	str	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000c0 	.word	0x200000c0
 800061c:	00029e7c 	.word	0x00029e7c
 8000620:	08024360 	.word	0x08024360
 8000624:	200000c4 	.word	0x200000c4

08000628 <WAV_FileRead2>:
	return Playing_End;
}


uint32_t WAV_FileRead2(uint8_t *buf, uint32_t size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	UINT bw;
    int i;
	 f_read(&abc,buf,size,&bw);//16bit音频,直接读取数据
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <WAV_FileRead2+0x68>)
 800063c:	f00e f904 	bl	800e848 <f_read>
	 if(bw==0){
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d11f      	bne.n	8000686 <WAV_FileRead2+0x5e>
			 if(bw<BUFFER_SIZE)//不够数据了,补充0
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800064c:	d210      	bcs.n	8000670 <WAV_FileRead2+0x48>
			 		{
			 			for(i=bw;i<BUFFER_SIZE-bw;i++)buf[i]=0;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e007      	b.n	8000664 <WAV_FileRead2+0x3c>
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	d8f1      	bhi.n	8000654 <WAV_FileRead2+0x2c>
			 		}
			 f_close(&abc);
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <WAV_FileRead2+0x68>)
 8000672:	f00e fc84 	bl	800ef7e <f_close>
			  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <WAV_FileRead2+0x6c>)
 800067e:	f004 fea9 	bl	80053d4 <HAL_GPIO_WritePin>

			 return 0;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <WAV_FileRead2+0x60>
//	{
//		memcpy(buf, DataAddress, DataLength);
//		Playing_End = 0;
//	}

	return 1;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000cd24 	.word	0x2000cd24
 8000694:	40021800 	.word	0x40021800

08000698 <HAL_I2S_Transmit_DMAEx>:

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b089      	sub	sp, #36	; 0x24
 800069c:	af02      	add	r7, sp, #8
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;

	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U))
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <HAL_I2S_Transmit_DMAEx+0x20>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <HAL_I2S_Transmit_DMAEx+0x20>
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <HAL_I2S_Transmit_DMAEx+0x24>
	{
		return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e09c      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d101      	bne.n	80006cc <HAL_I2S_Transmit_DMAEx+0x34>
 80006c8:	2302      	movs	r3, #2
 80006ca:	e094      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2201      	movs	r2, #1
 80006d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d005      	beq.n	80006ec <HAL_I2S_Transmit_DMAEx+0x54>
	{
		__HAL_UNLOCK(hi2s);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 80006e8:	2302      	movs	r3, #2
 80006ea:	e084      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2203      	movs	r2, #3
 80006f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2200      	movs	r2, #0
 80006f8:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d002      	beq.n	8000718 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2b05      	cmp	r3, #5
 8000716:	d10a      	bne.n	800072e <HAL_I2S_Transmit_DMAEx+0x96>
	{
		hi2s->TxXferSize = (Size << 1U);
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b29a      	uxth	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 8000722:	887b      	ldrh	r3, [r7, #2]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800072c:	e005      	b.n	800073a <HAL_I2S_Transmit_DMAEx+0xa2>
	}
	else
	{
		hi2s->TxXferSize = Size;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	887a      	ldrh	r2, [r7, #2]
 8000732:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	887a      	ldrh	r2, [r7, #2]
 8000738:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800073e:	2200      	movs	r2, #0
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000746:	2200      	movs	r2, #0
 8000748:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <HAL_I2S_Transmit_DMAEx+0x168>)
 8000750:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000758:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <HAL_I2S_Transmit_DMAEx+0x170>)
 8000760:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000766:	2200      	movs	r2, #0
 8000768:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx, (uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR, (uint32_t) SecondBuffer,	hi2s->TxXferSize))
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	330c      	adds	r3, #12
 8000776:	461c      	mov	r4, r3
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800077e:	b29b      	uxth	r3, r3
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	4613      	mov	r3, r2
 8000784:	4622      	mov	r2, r4
 8000786:	f002 f95d 	bl	8002a44 <HAL_DMAEx_MultiBufferStart_IT>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00f      	beq.n	80007b0 <HAL_I2S_Transmit_DMAEx+0x118>
	{
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	f043 0208 	orr.w	r2, r3, #8
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e022      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d107      	bne.n	80007ce <HAL_I2S_Transmit_DMAEx+0x136>
	{
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007cc:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d107      	bne.n	80007ec <HAL_I2S_Transmit_DMAEx+0x154>
	{
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0202 	orr.w	r2, r2, #2
 80007ea:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	371c      	adds	r7, #28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop
 8000800:	0800080d 	.word	0x0800080d
 8000804:	08000845 	.word	0x08000845
 8000808:	0800086d 	.word	0x0800086d

0800080c <DMAEx_XferCpltCallback>:




static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

	if(DMA1_Stream4->CR&(1<<19)){
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <DMAEx_XferCpltCallback+0x30>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d009      	beq.n	8000834 <DMAEx_XferCpltCallback+0x28>
		if (WAV_FileRead2((uint8_t*)I2S_Buf0,sizeof(I2S_Buf0)) == 0)
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <DMAEx_XferCpltCallback+0x34>)
 8000826:	f7ff feff 	bl	8000628 <WAV_FileRead2>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <DMAEx_XferCpltCallback+0x28>
			{
				Audio_Player_Stop();
 8000830:	f000 f8fa 	bl	8000a28 <Audio_Player_Stop>
			}

	}

}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40026070 	.word	0x40026070
 8000840:	200000c8 	.word	0x200000c8

08000844 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

		if (WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0)
 800084c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <DMAEx_XferM1CpltCallback+0x24>)
 8000852:	f7ff fee9 	bl	8000628 <WAV_FileRead2>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d101      	bne.n	8000860 <DMAEx_XferM1CpltCallback+0x1c>
			{
				Audio_Player_Stop();
 800085c:	f000 f8e4 	bl	8000a28 <Audio_Player_Stop>





}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200004c8 	.word	0x200004c8

0800086c <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <Audio_Player_Init>:

void Audio_Player_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	WM8978_Register_Wirter(0, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fe86 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(1, 0x0F);
 800088c:	210f      	movs	r1, #15
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fe82 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 8000894:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fe7d 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(3, 0x7F);
 800089e:	217f      	movs	r1, #127	; 0x7f
 80008a0:	2003      	movs	r0, #3
 80008a2:	f7ff fe79 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(4, 0x10);
 80008a6:	2110      	movs	r1, #16
 80008a8:	2004      	movs	r0, #4
 80008aa:	f7ff fe75 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(6, 0);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2006      	movs	r0, #6
 80008b2:	f7ff fe71 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(10, 0x08);
 80008b6:	2108      	movs	r1, #8
 80008b8:	200a      	movs	r0, #10
 80008ba:	f7ff fe6d 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(43, 0x10);
 80008be:	2110      	movs	r1, #16
 80008c0:	202b      	movs	r0, #43	; 0x2b
 80008c2:	f7ff fe69 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(52,40);		// 设置LOUT2左声道音�????
 80008c6:	2128      	movs	r1, #40	; 0x28
 80008c8:	2034      	movs	r0, #52	; 0x34
 80008ca:	f7ff fe65 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(53,40|(1<<8));
 80008ce:	f44f 7194 	mov.w	r1, #296	; 0x128
 80008d2:	2035      	movs	r0, #53	; 0x35
 80008d4:	f7ff fe60 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(54, 50);
 80008d8:	2132      	movs	r1, #50	; 0x32
 80008da:	2036      	movs	r0, #54	; 0x36
 80008dc:	f7ff fe5c 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(55, 50 | (1 << 8));
 80008e0:	f44f 7199 	mov.w	r1, #306	; 0x132
 80008e4:	2037      	movs	r0, #55	; 0x37
 80008e6:	f7ff fe57 	bl	8000598 <WM8978_Register_Wirter>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}

080008ee <Audio_Set_Volume>:

void Audio_Set_Volume(int num)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	WM8978_Register_Wirter(0, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fe4d 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(1, 0x0F);
 80008fe:	210f      	movs	r1, #15
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fe49 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 8000906:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff fe44 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(3, 0x7F);
 8000910:	217f      	movs	r1, #127	; 0x7f
 8000912:	2003      	movs	r0, #3
 8000914:	f7ff fe40 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(4, 0x10);
 8000918:	2110      	movs	r1, #16
 800091a:	2004      	movs	r0, #4
 800091c:	f7ff fe3c 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(6, 0);
 8000920:	2100      	movs	r1, #0
 8000922:	2006      	movs	r0, #6
 8000924:	f7ff fe38 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(10, 0x08);
 8000928:	2108      	movs	r1, #8
 800092a:	200a      	movs	r0, #10
 800092c:	f7ff fe34 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(43, 0x10);
 8000930:	2110      	movs	r1, #16
 8000932:	202b      	movs	r0, #43	; 0x2b
 8000934:	f7ff fe30 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(52,num);		// 设置LOUT2左声道音�????
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b29b      	uxth	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	2034      	movs	r0, #52	; 0x34
 8000940:	f7ff fe2a 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(53,num|(1<<8));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	b21b      	sxth	r3, r3
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	b21b      	sxth	r3, r3
 800094e:	b29b      	uxth	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	2035      	movs	r0, #53	; 0x35
 8000954:	f7ff fe20 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(54, num);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b29b      	uxth	r3, r3
 800095c:	4619      	mov	r1, r3
 800095e:	2036      	movs	r0, #54	; 0x36
 8000960:	f7ff fe1a 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(55, num | (1 << 8));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	b21b      	sxth	r3, r3
 8000968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096c:	b21b      	sxth	r3, r3
 800096e:	b29b      	uxth	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	2037      	movs	r0, #55	; 0x37
 8000974:	f7ff fe10 	bl	8000598 <WM8978_Register_Wirter>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <Audio_Player_Start>:

void Audio_Player_Start(const char* filename[])
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
		memset(audioname, '\0', 30);
 8000988:	221e      	movs	r2, #30
 800098a:	2100      	movs	r1, #0
 800098c:	481d      	ldr	r0, [pc, #116]	; (8000a04 <Audio_Player_Start+0x84>)
 800098e:	f01e fd1d 	bl	801f3cc <memset>
		strcat(audioname,file_prefix);
 8000992:	491d      	ldr	r1, [pc, #116]	; (8000a08 <Audio_Player_Start+0x88>)
 8000994:	481b      	ldr	r0, [pc, #108]	; (8000a04 <Audio_Player_Start+0x84>)
 8000996:	f01e feb4 	bl	801f702 <strcat>
		strcat(audioname,filename);
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	4819      	ldr	r0, [pc, #100]	; (8000a04 <Audio_Player_Start+0x84>)
 800099e:	f01e feb0 	bl	801f702 <strcat>
		strcat(audioname,end);
 80009a2:	491a      	ldr	r1, [pc, #104]	; (8000a0c <Audio_Player_Start+0x8c>)
 80009a4:	4817      	ldr	r0, [pc, #92]	; (8000a04 <Audio_Player_Start+0x84>)
 80009a6:	f01e feac 	bl	801f702 <strcat>
		HAL_UART_Transmit(&huart1,"zzz",30,100);
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	221e      	movs	r2, #30
 80009ae:	4918      	ldr	r1, [pc, #96]	; (8000a10 <Audio_Player_Start+0x90>)
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <Audio_Player_Start+0x94>)
 80009b2:	f008 fd0a 	bl	80093ca <HAL_UART_Transmit>
	    f_open(&abc,audioname, FA_READ);
 80009b6:	2201      	movs	r2, #1
 80009b8:	4912      	ldr	r1, [pc, #72]	; (8000a04 <Audio_Player_Start+0x84>)
 80009ba:	4817      	ldr	r0, [pc, #92]	; (8000a18 <Audio_Player_Start+0x98>)
 80009bc:	f00d fcf2 	bl	800e3a4 <f_open>
		f_lseek(&abc,600);
 80009c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <Audio_Player_Start+0x98>)
 80009c6:	f00e fb09 	bl	800efdc <f_lseek>
		WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0));
 80009ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <Audio_Player_Start+0x9c>)
 80009d0:	f7ff fe2a 	bl	8000628 <WAV_FileRead2>
		WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1));
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <Audio_Player_Start+0xa0>)
 80009da:	f7ff fe25 	bl	8000628 <WAV_FileRead2>
		HAL_I2S_Transmit_DMAEx(&hi2s2, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 80009de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <Audio_Player_Start+0xa0>)
 80009e4:	490d      	ldr	r1, [pc, #52]	; (8000a1c <Audio_Player_Start+0x9c>)
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <Audio_Player_Start+0xa4>)
 80009e8:	f7ff fe56 	bl	8000698 <HAL_I2S_Transmit_DMAEx>
	HAL_I2S_Transmit_DMAEx(&hi2s2, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <Audio_Player_Start+0xa0>)
 80009f2:	490a      	ldr	r1, [pc, #40]	; (8000a1c <Audio_Player_Start+0x9c>)
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <Audio_Player_Start+0xa4>)
 80009f6:	f7ff fe4f 	bl	8000698 <HAL_I2S_Transmit_DMAEx>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000c940 	.word	0x2000c940
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	08021390 	.word	0x08021390
 8000a14:	2000cf58 	.word	0x2000cf58
 8000a18:	2000cd24 	.word	0x2000cd24
 8000a1c:	200000c8 	.word	0x200000c8
 8000a20:	200004c8 	.word	0x200004c8
 8000a24:	2000d544 	.word	0x2000d544

08000a28 <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	WAV_FileInit();
 8000a2c:	f7ff fde6 	bl	80005fc <WAV_FileInit>
	HAL_I2S_DMAStop(&hi2s2);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <Audio_Player_Stop+0x14>)
 8000a32:	f005 fa8f 	bl	8005f54 <HAL_I2S_DMAStop>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000d544 	.word	0x2000d544

08000a40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <vApplicationGetIdleTaskMemory+0x30>)
 8000a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200008c8 	.word	0x200008c8
 8000a70:	2000091c 	.word	0x2000091c

08000a74 <write_data>:

	return 0;
}

void write_data(unsigned char *data)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	6018      	str	r0, [r3, #0]
	FIL File;
	UINT bw;
	int ret;
	char i;
	f_unlink("0:\\Shiyan\\tianqi.dat");
 8000a80:	482c      	ldr	r0, [pc, #176]	; (8000b34 <write_data+0xc0>)
 8000a82:	f00e fcfe 	bl	800f482 <f_unlink>
	ret = f_open(&File, "0:\\Shiyan\\tianqi.dat", FA_CREATE_NEW | FA_WRITE);
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2206      	movs	r2, #6
 8000a8c:	4929      	ldr	r1, [pc, #164]	; (8000b34 <write_data+0xc0>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00d fc88 	bl	800e3a4 <f_open>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	ret |= f_lseek(&File, 0);
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00e fa9b 	bl	800efdc <f_lseek>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	for(i=0;i<12;i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
 8000aba:	e026      	b.n	8000b0a <write_data+0x96>
	{
		ret |= f_lseek(&File, 0+i);
 8000abc:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f00e fa88 	bl	800efdc <f_lseek>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
		ret |= f_write(&File,data+i,1 , &bw);
 8000ada:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	18d1      	adds	r1, r2, r3
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	f107 0010 	add.w	r0, r7, #16
 8000aec:	2201      	movs	r2, #1
 8000aee:	f00e f819 	bl	800eb24 <f_write>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	for(i=0;i<12;i++)
 8000b00:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000b04:	3301      	adds	r3, #1
 8000b06:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
 8000b0a:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000b0e:	2b0b      	cmp	r3, #11
 8000b10:	d9d4      	bls.n	8000abc <write_data+0x48>
	}
	ret |= f_close(&File);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4618      	mov	r0, r3
 8000b18:	f00e fa31 	bl	800ef7e <f_close>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000b24:	4313      	orrs	r3, r2
 8000b26:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
}
 8000b2a:	bf00      	nop
 8000b2c:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	080213a4 	.word	0x080213a4

08000b38 <CGIForm_Handler>:
char circule[10];
tCGI CGI_TAB[3];


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]

	//Audio_Set_Volume(20);

	//  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_RESET);

	if (iIndex == 0)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d175      	bne.n	8000c38 <CGIForm_Handler+0x100>
	{
		for (int i=0; i<iNumParams; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e048      	b.n	8000be4 <CGIForm_Handler+0xac>
		{
			if (strcmp(pcParam[i], "cmd") == 0)  // if the fname string is found
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4939      	ldr	r1, [pc, #228]	; (8000c44 <CGIForm_Handler+0x10c>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb36 	bl	80001d0 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10e      	bne.n	8000b88 <CGIForm_Handler+0x50>
			{
				memset(name, '\0', 30);
 8000b6a:	221e      	movs	r2, #30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4836      	ldr	r0, [pc, #216]	; (8000c48 <CGIForm_Handler+0x110>)
 8000b70:	f01e fc2c 	bl	801f3cc <memset>
				strcpy(name, pcValue[i]);
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4831      	ldr	r0, [pc, #196]	; (8000c48 <CGIForm_Handler+0x110>)
 8000b82:	f01e fdda 	bl	801f73a <strcpy>
 8000b86:	e02a      	b.n	8000bde <CGIForm_Handler+0xa6>


			}

			else if (strcmp(pcParam[i], "interrupt") == 0)  // if the fname string is found
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	492e      	ldr	r1, [pc, #184]	; (8000c4c <CGIForm_Handler+0x114>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb1b 	bl	80001d0 <strcmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <CGIForm_Handler+0x7c>
					{
						strcpy(interrupt, pcValue[i]);
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4828      	ldr	r0, [pc, #160]	; (8000c50 <CGIForm_Handler+0x118>)
 8000bae:	f01e fdc4 	bl	801f73a <strcpy>
 8000bb2:	e014      	b.n	8000bde <CGIForm_Handler+0xa6>
					}



			else if (strcmp(pcParam[i], "circule") == 0)  // if the fname string is found
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4925      	ldr	r1, [pc, #148]	; (8000c54 <CGIForm_Handler+0x11c>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb05 	bl	80001d0 <strcmp>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d108      	bne.n	8000bde <CGIForm_Handler+0xa6>
					{
						strcpy(circule, pcValue[i]);
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <CGIForm_Handler+0x120>)
 8000bda:	f01e fdae 	bl	801f73a <strcpy>
		for (int i=0; i<iNumParams; i++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbb2      	blt.n	8000b52 <CGIForm_Handler+0x1a>
					}

		}
		if(circule[0]=='1'){
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <CGIForm_Handler+0x120>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b31      	cmp	r3, #49	; 0x31
 8000bf2:	d102      	bne.n	8000bfa <CGIForm_Handler+0xc2>


				Audio_Player_Start(name);
 8000bf4:	4814      	ldr	r0, [pc, #80]	; (8000c48 <CGIForm_Handler+0x110>)
 8000bf6:	f7ff fec3 	bl	8000980 <Audio_Player_Start>





		if(interrupt[0]=='1'){
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <CGIForm_Handler+0x118>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b31      	cmp	r3, #49	; 0x31
 8000c00:	d109      	bne.n	8000c16 <CGIForm_Handler+0xde>
		//置为0 可以打断
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	4814      	ldr	r0, [pc, #80]	; (8000c5c <CGIForm_Handler+0x124>)
 8000c0a:	f004 fbe3 	bl	80053d4 <HAL_GPIO_WritePin>
		Audio_Player_Start(name);
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <CGIForm_Handler+0x110>)
 8000c10:	f7ff feb6 	bl	8000980 <Audio_Player_Start>
 8000c14:	e010      	b.n	8000c38 <CGIForm_Handler+0x100>
		}else{
			  if(HAL_GPIO_ReadPin(GPIOG,GPIO_PIN_9) == 0){
 8000c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1a:	4810      	ldr	r0, [pc, #64]	; (8000c5c <CGIForm_Handler+0x124>)
 8000c1c:	f004 fbc2 	bl	80053a4 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d108      	bne.n	8000c38 <CGIForm_Handler+0x100>

				  //置为0不可以打断
									  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <CGIForm_Handler+0x124>)
 8000c2e:	f004 fbd1 	bl	80053d4 <HAL_GPIO_WritePin>
										Audio_Player_Start(name);
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <CGIForm_Handler+0x110>)
 8000c34:	f7ff fea4 	bl	8000980 <Audio_Player_Start>
//	  /* 网口可以重启,也可以不重启 */
//	  netif_set_down(&gnetif);
//	  netif_set_up(&gnetif);


	return "/play.html";
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <CGIForm_Handler+0x128>)
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	080213ec 	.word	0x080213ec
 8000c48:	2000c99c 	.word	0x2000c99c
 8000c4c:	080213f0 	.word	0x080213f0
 8000c50:	2000c990 	.word	0x2000c990
 8000c54:	080213fc 	.word	0x080213fc
 8000c58:	2000c980 	.word	0x2000c980
 8000c5c:	40021800 	.word	0x40021800
 8000c60:	08021404 	.word	0x08021404

08000c64 <CGIVolume_Handler>:



const char *CGIVolume_Handler(int iIndex, int iNumParams, char *pcP[], char *pcV[])
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	603b      	str	r3, [r7, #0]

		for (int i=0; i<iNumParams; i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e027      	b.n	8000cc8 <CGIVolume_Handler+0x64>
		{
			if (strcmp(pcP[i], "volume2") == 0)  // if the fname string is found
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4916      	ldr	r1, [pc, #88]	; (8000cdc <CGIVolume_Handler+0x78>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff faa3 	bl	80001d0 <strcmp>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d118      	bne.n	8000cc2 <CGIVolume_Handler+0x5e>
			{
				memset(volume, '\0', 30);
 8000c90:	221e      	movs	r2, #30
 8000c92:	2100      	movs	r1, #0
 8000c94:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <CGIVolume_Handler+0x7c>)
 8000c96:	f01e fb99 	bl	801f3cc <memset>
				strcpy(volume, pcV[i]);
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <CGIVolume_Handler+0x7c>)
 8000ca8:	f01e fd47 	bl	801f73a <strcpy>
				num=atoi(volume);
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <CGIVolume_Handler+0x7c>)
 8000cae:	f01e fb2f 	bl	801f310 <atoi>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <CGIVolume_Handler+0x80>)
 8000cb6:	6013      	str	r3, [r2, #0]
				Audio_Set_Volume(num);
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <CGIVolume_Handler+0x80>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe16 	bl	80008ee <Audio_Set_Volume>
		for (int i=0; i<iNumParams; i++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbd3      	blt.n	8000c78 <CGIVolume_Handler+0x14>

		}



	return "/play.html";
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <CGIVolume_Handler+0x84>)
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08021410 	.word	0x08021410
 8000ce0:	2000c960 	.word	0x2000c960
 8000ce4:	2000c98c 	.word	0x2000c98c
 8000ce8:	08021404 	.word	0x08021404

08000cec <CGISetIP_Handler>:




const char *CGISetIP_Handler(int iIndex, int iNumParams, char *pcP[], char *pcV[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b098      	sub	sp, #96	; 0x60
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	603b      	str	r3, [r7, #0]
    unsigned char *cf ;
    unsigned char *cg;
    unsigned char *ch ;


	for (int i=0; i<iNumParams; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8000cfe:	e0af      	b.n	8000e60 <CGISetIP_Handler+0x174>
		{
			if (strcmp(pcP[i], "ip") == 0)  // if the fname string is found
 8000d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4935      	ldr	r1, [pc, #212]	; (8000de0 <CGISetIP_Handler+0xf4>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fa5f 	bl	80001d0 <strcmp>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d12b      	bne.n	8000d70 <CGISetIP_Handler+0x84>
			{
				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	460b      	mov	r3, r1
 8000d38:	492a      	ldr	r1, [pc, #168]	; (8000de4 <CGISetIP_Handler+0xf8>)
 8000d3a:	f01e fc71 	bl	801f620 <siscanf>

				   ce = (unsigned char *)a;
 8000d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
				 cf = (unsigned char *)b;
 8000d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
			cg = (unsigned char *)c;
 8000d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
				  ch = (unsigned char *)d;
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
				ip[0]=ce;
 8000d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				ip[1]=cf;
 8000d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				ip[2]=cg;
 8000d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				ip[3]=ch;
 8000d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000d6e:	e074      	b.n	8000e5a <CGISetIP_Handler+0x16e>

			}

			else if (strcmp(pcP[i], "mask") == 0)  // if the fname string is found
 8000d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	491b      	ldr	r1, [pc, #108]	; (8000de8 <CGISetIP_Handler+0xfc>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa27 	bl	80001d0 <strcmp>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d131      	bne.n	8000dec <CGISetIP_Handler+0x100>
			{
				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d96:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	460b      	mov	r3, r1
 8000da8:	490e      	ldr	r1, [pc, #56]	; (8000de4 <CGISetIP_Handler+0xf8>)
 8000daa:	f01e fc39 	bl	801f620 <siscanf>
				   ce = (unsigned char *)a;
 8000dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
							 cf = (unsigned char *)b;
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
						cg = (unsigned char *)c;
 8000db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db8:	64bb      	str	r3, [r7, #72]	; 0x48
							  ch = (unsigned char *)d;
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	647b      	str	r3, [r7, #68]	; 0x44
							ip[4]=ce;
 8000dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							ip[5]=cf;
 8000dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							ip[6]=cg;
 8000dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							ip[7]=ch;
 8000dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000dde:	e03c      	b.n	8000e5a <CGISetIP_Handler+0x16e>
 8000de0:	08021418 	.word	0x08021418
 8000de4:	0802141c 	.word	0x0802141c
 8000de8:	08021428 	.word	0x08021428

			}else if(strcmp(pcP[i],"gateway")==0){
 8000dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	498c      	ldr	r1, [pc, #560]	; (8001028 <CGISetIP_Handler+0x33c>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9e9 	bl	80001d0 <strcmp>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d12a      	bne.n	8000e5a <CGISetIP_Handler+0x16e>

				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e12:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	460b      	mov	r3, r1
 8000e24:	4981      	ldr	r1, [pc, #516]	; (800102c <CGISetIP_Handler+0x340>)
 8000e26:	f01e fbfb 	bl	801f620 <siscanf>
				   ce = (unsigned char *)a;
 8000e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2c:	653b      	str	r3, [r7, #80]	; 0x50
							 cf = (unsigned char *)b;
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
						cg = (unsigned char *)c;
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	64bb      	str	r3, [r7, #72]	; 0x48
							  ch = (unsigned char *)d;
 8000e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e38:	647b      	str	r3, [r7, #68]	; 0x44
							ip[8]=ce;
 8000e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
							ip[9]=cf;
 8000e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
							ip[10]=cg;
 8000e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
							ip[11]=ch;
 8000e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (int i=0; i<iNumParams; i++)
 8000e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8000e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f6ff af4b 	blt.w	8000d00 <CGISetIP_Handler+0x14>
		  	ip4_addr_t netmask;
		  	ip4_addr_t gw;
		  	uint8_t IP_ADDRESS[4];
		  	uint8_t NETMASK_ADDRESS[4];
		  	uint8_t GATEWAY_ADDRESS[4];
		  	  IP_ADDRESS[0] = ip[0];
 8000e6a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e6e:	763b      	strb	r3, [r7, #24]
		  	  IP_ADDRESS[1] = ip[1];
 8000e70:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000e74:	767b      	strb	r3, [r7, #25]
		  	  IP_ADDRESS[2] = ip[2];
 8000e76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000e7a:	76bb      	strb	r3, [r7, #26]
		  	  IP_ADDRESS[3] = ip[3];
 8000e7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e80:	76fb      	strb	r3, [r7, #27]
		  	  NETMASK_ADDRESS[0] = ip[4];
 8000e82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000e86:	753b      	strb	r3, [r7, #20]
		  	  NETMASK_ADDRESS[1] = ip[5];
 8000e88:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000e8c:	757b      	strb	r3, [r7, #21]
		  	  NETMASK_ADDRESS[2] =ip[6];
 8000e8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e92:	75bb      	strb	r3, [r7, #22]
		  	  NETMASK_ADDRESS[3] = ip[7];
 8000e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e98:	75fb      	strb	r3, [r7, #23]
		  	  GATEWAY_ADDRESS[0] = ip[8];
 8000e9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e9e:	743b      	strb	r3, [r7, #16]
		  	  GATEWAY_ADDRESS[1] = ip[9];
 8000ea0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000ea4:	747b      	strb	r3, [r7, #17]
		  	  GATEWAY_ADDRESS[2] = ip[10];
 8000ea6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000eaa:	74bb      	strb	r3, [r7, #18]
		  	  GATEWAY_ADDRESS[3] = ip[11];
 8000eac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000eb0:	74fb      	strb	r3, [r7, #19]
		  	  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8000eb2:	7e3b      	ldrb	r3, [r7, #24]
 8000eb4:	061a      	lsls	r2, r3, #24
 8000eb6:	7e7b      	ldrb	r3, [r7, #25]
 8000eb8:	041b      	lsls	r3, r3, #16
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	7ebb      	ldrb	r3, [r7, #26]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	7efa      	ldrb	r2, [r7, #27]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	061a      	lsls	r2, r3, #24
 8000ec8:	7e3b      	ldrb	r3, [r7, #24]
 8000eca:	0619      	lsls	r1, r3, #24
 8000ecc:	7e7b      	ldrb	r3, [r7, #25]
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	4319      	orrs	r1, r3
 8000ed2:	7ebb      	ldrb	r3, [r7, #26]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	7ef9      	ldrb	r1, [r7, #27]
 8000eda:	430b      	orrs	r3, r1
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	7e3b      	ldrb	r3, [r7, #24]
 8000ee6:	0619      	lsls	r1, r3, #24
 8000ee8:	7e7b      	ldrb	r3, [r7, #25]
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	4319      	orrs	r1, r3
 8000eee:	7ebb      	ldrb	r3, [r7, #26]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	430b      	orrs	r3, r1
 8000ef4:	7ef9      	ldrb	r1, [r7, #27]
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000efe:	431a      	orrs	r2, r3
 8000f00:	7e3b      	ldrb	r3, [r7, #24]
 8000f02:	0619      	lsls	r1, r3, #24
 8000f04:	7e7b      	ldrb	r3, [r7, #25]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	4319      	orrs	r1, r3
 8000f0a:	7ebb      	ldrb	r3, [r7, #26]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	7ef9      	ldrb	r1, [r7, #27]
 8000f12:	430b      	orrs	r3, r1
 8000f14:	0e1b      	lsrs	r3, r3, #24
 8000f16:	4313      	orrs	r3, r2
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
		  	  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8000f1a:	7d3b      	ldrb	r3, [r7, #20]
 8000f1c:	061a      	lsls	r2, r3, #24
 8000f1e:	7d7b      	ldrb	r3, [r7, #21]
 8000f20:	041b      	lsls	r3, r3, #16
 8000f22:	431a      	orrs	r2, r3
 8000f24:	7dbb      	ldrb	r3, [r7, #22]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	061a      	lsls	r2, r3, #24
 8000f30:	7d3b      	ldrb	r3, [r7, #20]
 8000f32:	0619      	lsls	r1, r3, #24
 8000f34:	7d7b      	ldrb	r3, [r7, #21]
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	4319      	orrs	r1, r3
 8000f3a:	7dbb      	ldrb	r3, [r7, #22]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	7df9      	ldrb	r1, [r7, #23]
 8000f42:	430b      	orrs	r3, r1
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	7d3b      	ldrb	r3, [r7, #20]
 8000f4e:	0619      	lsls	r1, r3, #24
 8000f50:	7d7b      	ldrb	r3, [r7, #21]
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	4319      	orrs	r1, r3
 8000f56:	7dbb      	ldrb	r3, [r7, #22]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	7df9      	ldrb	r1, [r7, #23]
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f66:	431a      	orrs	r2, r3
 8000f68:	7d3b      	ldrb	r3, [r7, #20]
 8000f6a:	0619      	lsls	r1, r3, #24
 8000f6c:	7d7b      	ldrb	r3, [r7, #21]
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	4319      	orrs	r1, r3
 8000f72:	7dbb      	ldrb	r3, [r7, #22]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	430b      	orrs	r3, r1
 8000f78:	7df9      	ldrb	r1, [r7, #23]
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	0e1b      	lsrs	r3, r3, #24
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]
		  	  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8000f82:	7c3b      	ldrb	r3, [r7, #16]
 8000f84:	061a      	lsls	r2, r3, #24
 8000f86:	7c7b      	ldrb	r3, [r7, #17]
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	7cbb      	ldrb	r3, [r7, #18]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	4313      	orrs	r3, r2
 8000f92:	7cfa      	ldrb	r2, [r7, #19]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	7c3b      	ldrb	r3, [r7, #16]
 8000f9a:	0619      	lsls	r1, r3, #24
 8000f9c:	7c7b      	ldrb	r3, [r7, #17]
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	7cbb      	ldrb	r3, [r7, #18]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	7cf9      	ldrb	r1, [r7, #19]
 8000faa:	430b      	orrs	r3, r1
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	7c3b      	ldrb	r3, [r7, #16]
 8000fb6:	0619      	lsls	r1, r3, #24
 8000fb8:	7c7b      	ldrb	r3, [r7, #17]
 8000fba:	041b      	lsls	r3, r3, #16
 8000fbc:	4319      	orrs	r1, r3
 8000fbe:	7cbb      	ldrb	r3, [r7, #18]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	7cf9      	ldrb	r1, [r7, #19]
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	7c3b      	ldrb	r3, [r7, #16]
 8000fd2:	0619      	lsls	r1, r3, #24
 8000fd4:	7c7b      	ldrb	r3, [r7, #17]
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	4319      	orrs	r1, r3
 8000fda:	7cbb      	ldrb	r3, [r7, #18]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	7cf9      	ldrb	r1, [r7, #19]
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	0e1b      	lsrs	r3, r3, #24
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61fb      	str	r3, [r7, #28]
		  	  netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	f107 0220 	add.w	r2, r7, #32
 8000ff2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <CGISetIP_Handler+0x344>)
 8000ff8:	f014 fa74 	bl	80154e4 <netif_set_addr>
		  	  /* 网口可以重启,也可以不重启 */
		  	  netif_set_down(&gnetif);
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <CGISetIP_Handler+0x344>)
 8000ffe:	f014 fb37 	bl	8015670 <netif_set_down>
		  	  netif_set_up(&gnetif);
 8001002:	480b      	ldr	r0, [pc, #44]	; (8001030 <CGISetIP_Handler+0x344>)
 8001004:	f014 fac8 	bl	8015598 <netif_set_up>
	 	  f_mount(&fs,"0:",1);
 8001008:	2201      	movs	r2, #1
 800100a:	490a      	ldr	r1, [pc, #40]	; (8001034 <CGISetIP_Handler+0x348>)
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <CGISetIP_Handler+0x34c>)
 800100e:	f00d f965 	bl	800e2dc <f_mount>


	 	  write_data(ip);
 8001012:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fd2c 	bl	8000a74 <write_data>


	return "/play.html";
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <CGISetIP_Handler+0x350>)
}
 800101e:	4618      	mov	r0, r3
 8001020:	3758      	adds	r7, #88	; 0x58
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	08021430 	.word	0x08021430
 800102c:	0802141c 	.word	0x0802141c
 8001030:	2000dc84 	.word	0x2000dc84
 8001034:	08021438 	.word	0x08021438
 8001038:	2000ca88 	.word	0x2000ca88
 800103c:	08021404 	.word	0x08021404

08001040 <http_server_init>:




void http_server_init (void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	httpd_init();
 8001044:	f013 fb26 	bl	8014694 <httpd_init>
	CGI_TAB[0] = FORM_CGI;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <http_server_init+0x3c>)
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <http_server_init+0x40>)
 800104c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001050:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = VOLUME_CGI;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <http_server_init+0x3c>)
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <http_server_init+0x44>)
 8001058:	3308      	adds	r3, #8
 800105a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105e:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[2] = SETIP_CGI;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <http_server_init+0x3c>)
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <http_server_init+0x48>)
 8001066:	3310      	adds	r3, #16
 8001068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800106c:	e883 0003 	stmia.w	r3, {r0, r1}
	http_set_cgi_handlers (CGI_TAB, 3);
 8001070:	2103      	movs	r1, #3
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <http_server_init+0x3c>)
 8001074:	f013 fb2e 	bl	80146d4 <http_set_cgi_handlers>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000ca00 	.word	0x2000ca00
 8001080:	0804e1dc 	.word	0x0804e1dc
 8001084:	0804e1e4 	.word	0x0804e1e4
 8001088:	0804e1ec 	.word	0x0804e1ec

0800108c <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    //注意下面第一个参数是&husart1，因为cubemx配置了串�???1自动生成�???
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001094:	1d39      	adds	r1, r7, #4
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2201      	movs	r2, #1
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <__io_putchar+0x20>)
 800109e:	f008 f994 	bl	80093ca <HAL_UART_Transmit>
    return ch;
 80010a2:	687b      	ldr	r3, [r7, #4]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000cf58 	.word	0x2000cf58

080010b0 <read_data>:
#endif

unsigned char data_re[12];

void read_data(uint8_t *data) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	6018      	str	r0, [r3, #0]
	FIL File;
	UINT bw;
	int i;
	int ret;
	ret = f_open(&File, "0:\\Shiyan\\tianqi.dat", FA_OPEN_ALWAYS | FA_READ);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2211      	movs	r2, #17
 80010c2:	4923      	ldr	r1, [pc, #140]	; (8001150 <read_data+0xa0>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00d f96d 	bl	800e3a4 <f_open>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	for (i = 0; i < 12; i++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80010d6:	e026      	b.n	8001126 <read_data+0x76>
		ret |= f_lseek(&File, 0 + i);
 80010d8:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00d ff7a 	bl	800efdc <f_lseek>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80010f0:	4313      	orrs	r3, r2
 80010f2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		ret |= f_read(&File, data + i, 1, &bw);
 80010f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80010fa:	1d3a      	adds	r2, r7, #4
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	18d1      	adds	r1, r2, r3
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	f107 0010 	add.w	r0, r7, #16
 8001108:	2201      	movs	r2, #1
 800110a:	f00d fb9d 	bl	800e848 <f_read>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001116:	4313      	orrs	r3, r2
 8001118:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	for (i = 0; i < 12; i++) {
 800111c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001120:	3301      	adds	r3, #1
 8001122:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8001126:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800112a:	2b0b      	cmp	r3, #11
 800112c:	ddd4      	ble.n	80010d8 <read_data+0x28>
	}
	ret |= f_close(&File);
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4618      	mov	r0, r3
 8001134:	f00d ff23 	bl	800ef7e <f_close>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001140:	4313      	orrs	r3, r2
 8001142:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
}
 8001146:	bf00      	nop
 8001148:	f507 7712 	add.w	r7, r7, #584	; 0x248
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	08021454 	.word	0x08021454

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f000 ff1d 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f851 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 f9c1 	bl	80014e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001166:	f000 f957 	bl	8001418 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800116a:	f000 f97f 	bl	800146c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800116e:	f000 f933 	bl	80013d8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001172:	f009 fdb9 	bl	800ace8 <MX_FATFS_Init>
  MX_I2S2_Init();
 8001176:	f000 f8e7 	bl	8001348 <MX_I2S2_Init>
  MX_IWDG_Init();
 800117a:	f000 f913 	bl	80013a4 <MX_IWDG_Init>
  MX_I2C1_Init();
 800117e:	f000 f8b5 	bl	80012ec <MX_I2C1_Init>
	//  read_data(data_re);
	// Audio_Player_Init();
	// MX_LWIP_Init();
	// http_server_init();

	printf("111111\r\n");
 8001182:	4819      	ldr	r0, [pc, #100]	; (80011e8 <main+0x94>)
 8001184:	f01e f9b0 	bl	801f4e8 <puts>
	printf("222222\r\n");
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <main+0x98>)
 800118a:	f01e f9ad 	bl	801f4e8 <puts>
	  Event_Handle=xEventGroupCreate();
 800118e:	f00e fec1 	bl	800ff14 <xEventGroupCreate>
 8001192:	4603      	mov	r3, r0
 8001194:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <main+0x9c>)
 8001196:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 3000);
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <main+0xa0>)
 800119a:	f107 041c 	add.w	r4, r7, #28
 800119e:	461d      	mov	r5, r3
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00e fc0b 	bl	800f9ce <osThreadCreate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <main+0xa4>)
 80011bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 512);
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <main+0xa8>)
 80011c0:	463c      	mov	r4, r7
 80011c2:	461d      	mov	r5, r3
 80011c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80011d0:	463b      	mov	r3, r7
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00e fbfa 	bl	800f9ce <osThreadCreate>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <main+0xac>)
 80011de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011e0:	f00e fbd2 	bl	800f988 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011e4:	e7fe      	b.n	80011e4 <main+0x90>
 80011e6:	bf00      	nop
 80011e8:	0802146c 	.word	0x0802146c
 80011ec:	08021474 	.word	0x08021474
 80011f0:	20000b1c 	.word	0x20000b1c
 80011f4:	0802147c 	.word	0x0802147c
 80011f8:	2000ca78 	.word	0x2000ca78
 80011fc:	08021498 	.word	0x08021498
 8001200:	2000cf9c 	.word	0x2000cf9c

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	; 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2230      	movs	r2, #48	; 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f01e f8da 	bl	801f3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <SystemClock_Config+0xe0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <SystemClock_Config+0xe0>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <SystemClock_Config+0xe0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <SystemClock_Config+0xe4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <SystemClock_Config+0xe4>)
 800124e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <SystemClock_Config+0xe4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001260:	230b      	movs	r3, #11
 8001262:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126a:	2301      	movs	r3, #1
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126e:	2310      	movs	r3, #16
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001272:	2301      	movs	r3, #1
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001280:	2304      	movs	r3, #4
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001284:	23a8      	movs	r3, #168	; 0xa8
 8001286:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800128c:	2307      	movs	r3, #7
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f005 fc21 	bl	8006adc <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012a0:	f000 fa42 	bl	8001728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2105      	movs	r1, #5
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fe82 	bl	8006fcc <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80012ce:	f000 fa2b 	bl	8001728 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2000      	movs	r0, #0
 80012d8:	f005 ff5e 	bl	8007198 <HAL_RCC_MCOConfig>
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	; 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C1_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <MX_I2C1_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_I2C1_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_I2C1_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_I2C1_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2C1_Init+0x50>)
 800132a:	f004 f887 	bl	800543c <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f9f8 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000ccc4 	.word	0x2000ccc4
 8001340:	40005400 	.word	0x40005400
 8001344:	000186a0 	.word	0x000186a0

08001348 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_I2S2_Init+0x54>)
 800134e:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <MX_I2S2_Init+0x58>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_I2S2_Init+0x54>)
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_I2S2_Init+0x54>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_I2S2_Init+0x54>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_I2S2_Init+0x54>)
 8001368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_I2S2_Init+0x54>)
 8001370:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001374:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_I2S2_Init+0x54>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_I2S2_Init+0x54>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_I2S2_Init+0x54>)
 8001384:	2201      	movs	r2, #1
 8001386:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_I2S2_Init+0x54>)
 800138a:	f004 fca3 	bl	8005cd4 <HAL_I2S_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001394:	f000 f9c8 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000d544 	.word	0x2000d544
 80013a0:	40003800 	.word	0x40003800

080013a4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <MX_IWDG_Init+0x30>)
 80013ac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80013ba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_IWDG_Init+0x2c>)
 80013be:	f005 fb3b 	bl	8006a38 <HAL_IWDG_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80013c8:	f000 f9ae 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000cd18 	.word	0x2000cd18
 80013d4:	40003000 	.word	0x40003000

080013d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013de:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <MX_SDIO_SD_Init+0x3c>)
 80013e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 8001402:	2202      	movs	r2, #2
 8001404:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	2000d230 	.word	0x2000d230
 8001414:	40012c00 	.word	0x40012c00

08001418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART1_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001450:	f007 ff6e 	bl	8009330 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f965 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000cf58 	.word	0x2000cf58
 8001468:	40011000 	.word	0x40011000

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_DMA_Init+0x78>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a1a      	ldr	r2, [pc, #104]	; (80014e4 <MX_DMA_Init+0x78>)
 800147c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_DMA_Init+0x78>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_DMA_Init+0x78>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <MX_DMA_Init+0x78>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_DMA_Init+0x78>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 9, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2109      	movs	r1, #9
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 fe90 	bl	80021d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014b4:	200f      	movs	r0, #15
 80014b6:	f000 fea9 	bl	800220c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2107      	movs	r1, #7
 80014be:	203b      	movs	r0, #59	; 0x3b
 80014c0:	f000 fe88 	bl	80021d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014c4:	203b      	movs	r0, #59	; 0x3b
 80014c6:	f000 fea1 	bl	800220c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2107      	movs	r1, #7
 80014ce:	2045      	movs	r0, #69	; 0x45
 80014d0:	f000 fe80 	bl	80021d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014d4:	2045      	movs	r0, #69	; 0x45
 80014d6:	f000 fe99 	bl	800220c <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <MX_GPIO_Init+0x154>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a4d      	ldr	r2, [pc, #308]	; (800163c <MX_GPIO_Init+0x154>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <MX_GPIO_Init+0x154>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <MX_GPIO_Init+0x154>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a46      	ldr	r2, [pc, #280]	; (800163c <MX_GPIO_Init+0x154>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b44      	ldr	r3, [pc, #272]	; (800163c <MX_GPIO_Init+0x154>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_GPIO_Init+0x154>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a3f      	ldr	r2, [pc, #252]	; (800163c <MX_GPIO_Init+0x154>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <MX_GPIO_Init+0x154>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_GPIO_Init+0x154>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a38      	ldr	r2, [pc, #224]	; (800163c <MX_GPIO_Init+0x154>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <MX_GPIO_Init+0x154>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <MX_GPIO_Init+0x154>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a31      	ldr	r2, [pc, #196]	; (800163c <MX_GPIO_Init+0x154>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <MX_GPIO_Init+0x154>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_GPIO_Init+0x154>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a2a      	ldr	r2, [pc, #168]	; (800163c <MX_GPIO_Init+0x154>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_GPIO_Init+0x154>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <MX_GPIO_Init+0x154>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <MX_GPIO_Init+0x154>)
 80015b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_GPIO_Init+0x154>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2110      	movs	r1, #16
 80015c6:	481e      	ldr	r0, [pc, #120]	; (8001640 <MX_GPIO_Init+0x158>)
 80015c8:	f003 ff04 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <MX_GPIO_Init+0x15c>)
 80015d4:	f003 fefe 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015d8:	2310      	movs	r3, #16
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <MX_GPIO_Init+0x158>)
 80015f0:	f003 fd3c 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_GPIO_Init+0x160>)
 8001612:	f003 fd2b 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_GPIO_Init+0x15c>)
 8001630:	f003 fd1c 	bl	800506c <HAL_GPIO_Init>

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40021000 	.word	0x40021000
 8001644:	40021800 	.word	0x40021800
 8001648:	40020000 	.word	0x40020000

0800164c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN 5 */
	unsigned char data_wr[12] = { 192, 168, 3, 246, 255, 255, 255, 0, 192, 168,
 8001654:	4a10      	ldr	r2, [pc, #64]	; (8001698 <StartDefaultTask+0x4c>)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	ca07      	ldmia	r2, {r0, r1, r2}
 800165c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			3, 1 };
	f_mount(&fs,"0:",1);
 8001660:	2201      	movs	r2, #1
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <StartDefaultTask+0x50>)
 8001664:	480e      	ldr	r0, [pc, #56]	; (80016a0 <StartDefaultTask+0x54>)
 8001666:	f00c fe39 	bl	800e2dc <f_mount>
	write_data(data_wr);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fa00 	bl	8000a74 <write_data>
	read_data(data_re);
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <StartDefaultTask+0x58>)
 8001676:	f7ff fd1b 	bl	80010b0 <read_data>
	Audio_Player_Init();
 800167a:	f7ff f901 	bl	8000880 <Audio_Player_Init>
	MX_LWIP_Init();
 800167e:	f009 fd99 	bl	800b1b4 <MX_LWIP_Init>
	http_server_init();
 8001682:	f7ff fcdd 	bl	8001040 <http_server_init>
	/* Infinite loop */
	for (;;) {
		//不用dma会有噪音
		//WM8978_Palyer3("52.wav");
		//Audio_Player_Start("52");
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
 8001686:	2110      	movs	r1, #16
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <StartDefaultTask+0x5c>)
 800168a:	f003 febc 	bl	8005406 <HAL_GPIO_TogglePin>
    //	xEventGroupSetBits(Event_Handle,KEY1_EVENT);
		osDelay(2000);
 800168e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001692:	f00e f9e8 	bl	800fa66 <osDelay>
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
 8001696:	e7f6      	b.n	8001686 <StartDefaultTask+0x3a>
 8001698:	080214b8 	.word	0x080214b8
 800169c:	080214b4 	.word	0x080214b4
 80016a0:	2000ca88 	.word	0x2000ca88
 80016a4:	2000ca7c 	.word	0x2000ca7c
 80016a8:	40021000 	.word	0x40021000

080016ac <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	EventBits_t r_event;

	/* Infinite loop */
	for (;;) {
		osDelay(3000);//拉长
 80016b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016b8:	f00e f9d5 	bl	800fa66 <osDelay>
		//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
		HAL_IWDG_Refresh(&hiwdg);
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <StartTask02+0x48>)
 80016be:	f005 f9fd 	bl	8006abc <HAL_IWDG_Refresh>
		   r_event=xEventGroupWaitBits(Event_Handle,KEY1_EVENT,pdTRUE,pdTRUE,osWaitForever);
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <StartTask02+0x4c>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	2201      	movs	r2, #1
 80016d0:	2101      	movs	r1, #1
 80016d2:	f00e fc39 	bl	800ff48 <xEventGroupWaitBits>
 80016d6:	60f8      	str	r0, [r7, #12]
			    if((r_event&(KEY1_EVENT))==(KEY1_EVENT)){
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <StartTask02+0x3e>
			    	printf("run normally !!\r\n");
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <StartTask02+0x50>)
 80016e4:	f01d ff00 	bl	801f4e8 <puts>
 80016e8:	e7e4      	b.n	80016b4 <StartTask02+0x8>
			    }else{

			    	printf("EVENT error!\r\n");
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <StartTask02+0x54>)
 80016ec:	f01d fefc 	bl	801f4e8 <puts>
		osDelay(3000);//拉长
 80016f0:	e7e0      	b.n	80016b4 <StartTask02+0x8>
 80016f2:	bf00      	nop
 80016f4:	2000cd18 	.word	0x2000cd18
 80016f8:	20000b1c 	.word	0x20000b1c
 80016fc:	080214c4 	.word	0x080214c4
 8001700:	080214d8 	.word	0x080214d8

08001704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001716:	f000 fc61 	bl	8001fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40010000 	.word	0x40010000

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001730:	e7fe      	b.n	8001730 <Error_Handler+0x8>
	...

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_MspInit+0x54>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_MspInit+0x54>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x54>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_MspInit+0x54>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_MspInit+0x54>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_MspInit+0x54>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	210f      	movs	r1, #15
 8001776:	f06f 0001 	mvn.w	r0, #1
 800177a:	f000 fd2b 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_I2C_MspInit+0x84>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d12b      	bne.n	8001806 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ca:	23c0      	movs	r3, #192	; 0xc0
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ce:	2312      	movs	r3, #18
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017da:	2304      	movs	r3, #4
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <HAL_I2C_MspInit+0x8c>)
 80017e6:	f003 fc41 	bl	800506c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_I2C_MspInit+0x88>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40005400 	.word	0x40005400
 8001814:	40023800 	.word	0x40023800
 8001818:	40020400 	.word	0x40020400

0800181c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	; 0x38
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a51      	ldr	r2, [pc, #324]	; (800198c <HAL_I2S_MspInit+0x170>)
 8001848:	4293      	cmp	r3, r2
 800184a:	f040 809a 	bne.w	8001982 <HAL_I2S_MspInit+0x166>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001852:	23c0      	movs	r3, #192	; 0xc0
 8001854:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001856:	2302      	movs	r3, #2
 8001858:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4618      	mov	r0, r3
 8001860:	f005 fe4a 	bl	80074f8 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800186a:	f7ff ff5d 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_I2S_MspInit+0x174>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a46      	ldr	r2, [pc, #280]	; (8001990 <HAL_I2S_MspInit+0x174>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b44      	ldr	r3, [pc, #272]	; (8001990 <HAL_I2S_MspInit+0x174>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_I2S_MspInit+0x174>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a3f      	ldr	r2, [pc, #252]	; (8001990 <HAL_I2S_MspInit+0x174>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_I2S_MspInit+0x174>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_I2S_MspInit+0x174>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a38      	ldr	r2, [pc, #224]	; (8001990 <HAL_I2S_MspInit+0x174>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_I2S_MspInit+0x174>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018c2:	2304      	movs	r3, #4
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80018d2:	2306      	movs	r3, #6
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	4619      	mov	r1, r3
 80018dc:	482d      	ldr	r0, [pc, #180]	; (8001994 <HAL_I2S_MspInit+0x178>)
 80018de:	f003 fbc5 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80018e2:	2348      	movs	r3, #72	; 0x48
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f2:	2305      	movs	r3, #5
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	4825      	ldr	r0, [pc, #148]	; (8001994 <HAL_I2S_MspInit+0x178>)
 80018fe:	f003 fbb5 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001902:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001914:	2305      	movs	r3, #5
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	481e      	ldr	r0, [pc, #120]	; (8001998 <HAL_I2S_MspInit+0x17c>)
 8001920:	f003 fba4 	bl	800506c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_I2S_MspInit+0x180>)
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_I2S_MspInit+0x184>)
 8001928:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_I2S_MspInit+0x180>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_I2S_MspInit+0x180>)
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_I2S_MspInit+0x180>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_I2S_MspInit+0x180>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_I2S_MspInit+0x180>)
 8001946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800194a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_I2S_MspInit+0x180>)
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_I2S_MspInit+0x180>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_I2S_MspInit+0x180>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_I2S_MspInit+0x180>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001966:	480d      	ldr	r0, [pc, #52]	; (800199c <HAL_I2S_MspInit+0x180>)
 8001968:	f000 fc5e 	bl	8002228 <HAL_DMA_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 8001972:	f7ff fed9 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_I2S_MspInit+0x180>)
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_I2S_MspInit+0x180>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3738      	adds	r7, #56	; 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40003800 	.word	0x40003800
 8001990:	40023800 	.word	0x40023800
 8001994:	40020800 	.word	0x40020800
 8001998:	40020400 	.word	0x40020400
 800199c:	2000d2b4 	.word	0x2000d2b4
 80019a0:	40026070 	.word	0x40026070

080019a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a67      	ldr	r2, [pc, #412]	; (8001b60 <HAL_SD_MspInit+0x1bc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	f040 80c7 	bne.w	8001b56 <HAL_SD_MspInit+0x1b2>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	4a64      	ldr	r2, [pc, #400]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 80019d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d6:	6453      	str	r3, [r2, #68]	; 0x44
 80019d8:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4a5d      	ldr	r2, [pc, #372]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6313      	str	r3, [r2, #48]	; 0x30
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	4a56      	ldr	r2, [pc, #344]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a10:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_SD_MspInit+0x1c0>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a1c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a2e:	230c      	movs	r3, #12
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	484b      	ldr	r0, [pc, #300]	; (8001b68 <HAL_SD_MspInit+0x1c4>)
 8001a3a:	f003 fb17 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a4e:	230c      	movs	r3, #12
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4844      	ldr	r0, [pc, #272]	; (8001b6c <HAL_SD_MspInit+0x1c8>)
 8001a5a:	f003 fb07 	bl	800506c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001a5e:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a60:	4a44      	ldr	r2, [pc, #272]	; (8001b74 <HAL_SD_MspInit+0x1d0>)
 8001a62:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a6a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a78:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a86:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aa0:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC8;
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001ab0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001ab6:	482e      	ldr	r0, [pc, #184]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001ab8:	f000 fbb6 	bl	8002228 <HAL_DMA_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_SD_MspInit+0x122>
    {
      Error_Handler();
 8001ac2:	f7ff fe31 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
 8001acc:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <HAL_SD_MspInit+0x1cc>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001ad4:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <HAL_SD_MspInit+0x1d8>)
 8001ad6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ade:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001af6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001afa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b04:	2220      	movs	r2, #32
 8001b06:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b10:	2204      	movs	r2, #4
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b16:	2203      	movs	r2, #3
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC8;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001b2a:	4813      	ldr	r0, [pc, #76]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b2c:	f000 fb7c 	bl	8002228 <HAL_DMA_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_SD_MspInit+0x196>
    {
      Error_Handler();
 8001b36:	f7ff fdf7 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_SD_MspInit+0x1d4>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	2031      	movs	r0, #49	; 0x31
 8001b4c:	f000 fb42 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001b50:	2031      	movs	r0, #49	; 0x31
 8001b52:	f000 fb5b 	bl	800220c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40012c00 	.word	0x40012c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	2000ca18 	.word	0x2000ca18
 8001b74:	40026458 	.word	0x40026458
 8001b78:	2000cfa0 	.word	0x2000cfa0
 8001b7c:	400264a0 	.word	0x400264a0

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d134      	bne.n	8001c0c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_UART_MspInit+0x98>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <HAL_UART_MspInit+0x98>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_UART_MspInit+0x98>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_UART_MspInit+0x98>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_UART_MspInit+0x98>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_UART_MspInit+0x98>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bec:	2307      	movs	r3, #7
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <HAL_UART_MspInit+0x9c>)
 8001bf8:	f003 fa38 	bl	800506c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2106      	movs	r1, #6
 8001c00:	2025      	movs	r0, #37	; 0x25
 8001c02:	f000 fae7 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c06:	2025      	movs	r0, #37	; 0x25
 8001c08:	f000 fb00 	bl	800220c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	; 0x30
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	2019      	movs	r0, #25
 8001c36:	f000 facd 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c3a:	2019      	movs	r0, #25
 8001c3c:	f000 fae6 	bl	800220c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_InitTick+0xa4>)
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_InitTick+0xa4>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_InitTick+0xa4>)
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c5c:	f107 0210 	add.w	r2, r7, #16
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 fc14 	bl	8007494 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c6c:	f005 fbfe 	bl	800746c <HAL_RCC_GetPCLK2Freq>
 8001c70:	4603      	mov	r3, r0
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_InitTick+0xa8>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9b      	lsrs	r3, r3, #18
 8001c80:	3b01      	subs	r3, #1
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_InitTick+0xac>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_InitTick+0xb0>)
 8001c88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_InitTick+0xac>)
 8001c8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_InitTick+0xac>)
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_InitTick+0xac>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_InitTick+0xac>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ca4:	4809      	ldr	r0, [pc, #36]	; (8001ccc <HAL_InitTick+0xac>)
 8001ca6:	f007 f896 	bl	8008dd6 <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001cb0:	4806      	ldr	r0, [pc, #24]	; (8001ccc <HAL_InitTick+0xac>)
 8001cb2:	f007 f8e9 	bl	8008e88 <HAL_TIM_Base_Start_IT>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3730      	adds	r7, #48	; 0x30
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	431bde83 	.word	0x431bde83
 8001ccc:	2000d7bc 	.word	0x2000d7bc
 8001cd0:	40010000 	.word	0x40010000

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA1_Stream4_IRQHandler+0x10>)
 8001d06:	f000 fc27 	bl	8002558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000d2b4 	.word	0x2000d2b4

08001d14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d1a:	f007 f925 	bl	8008f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000d7bc 	.word	0x2000d7bc

08001d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <USART1_IRQHandler+0x10>)
 8001d2e:	f007 fbdf 	bl	80094f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000cf58 	.word	0x2000cf58

08001d3c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <SDIO_IRQHandler+0x10>)
 8001d42:	f005 ff8f 	bl	8007c64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000d230 	.word	0x2000d230

08001d50 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <DMA2_Stream3_IRQHandler+0x10>)
 8001d56:	f000 fbff 	bl	8002558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000ca18 	.word	0x2000ca18

08001d64 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <ETH_IRQHandler+0x10>)
 8001d6a:	f002 fbbd 	bl	80044e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000f59c 	.word	0x2000f59c

08001d78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <DMA2_Stream6_IRQHandler+0x10>)
 8001d7e:	f000 fbeb 	bl	8002558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000cfa0 	.word	0x2000cfa0

08001d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
	return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_kill>:

int _kill(int pid, int sig)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <_kill+0x20>)
 8001da8:	2216      	movs	r2, #22
 8001daa:	601a      	str	r2, [r3, #0]
	return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	20014bd0 	.word	0x20014bd0

08001dc0 <_exit>:

void _exit (int status)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffe5 	bl	8001d9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dd2:	e7fe      	b.n	8001dd2 <_exit+0x12>

08001dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001de6:	f3af 8000 	nop.w
 8001dea:	4601      	mov	r1, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf0      	blt.n	8001de6 <_read+0x12>
	}

return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e009      	b.n	8001e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f92f 	bl	800108c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf1      	blt.n	8001e20 <_write+0x12>
	}
	return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_close>:

int _close(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_isatty>:

int _isatty(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d205      	bcs.n	8001eec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <_sbrk+0x6c>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20020000 	.word	0x20020000
 8001f10:	00001000 	.word	0x00001000
 8001f14:	20000b20 	.word	0x20000b20
 8001f18:	20014be8 	.word	0x20014be8
 8001f1c:	20014bd0 	.word	0x20014bd0

08001f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <SystemInit+0x20>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <SystemInit+0x20>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <Reset_Handler>:
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f7c <LoopFillZerobss+0x12>
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <LoopFillZerobss+0x16>)
 8001f4a:	490e      	ldr	r1, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1a>)
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <LoopFillZerobss+0x1e>)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:
 8001f52:	58d4      	ldr	r4, [r2, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:
 8001f58:	18c4      	adds	r4, r0, r3
 8001f5a:	428c      	cmp	r4, r1
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <LoopFillZerobss+0x22>)
 8001f60:	4c0b      	ldr	r4, [pc, #44]	; (8001f90 <LoopFillZerobss+0x26>)
 8001f62:	2300      	movs	r3, #0
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:
 8001f6a:	42a2      	cmp	r2, r4
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>
 8001f6e:	f7ff ffd7 	bl	8001f20 <SystemInit>
 8001f72:	f01d f9d1 	bl	801f318 <__libc_init_array>
 8001f76:	f7ff f8ed 	bl	8001154 <main>
 8001f7a:	4770      	bx	lr
 8001f7c:	20020000 	.word	0x20020000
 8001f80:	20000000 	.word	0x20000000
 8001f84:	200000a4 	.word	0x200000a4
 8001f88:	0807b400 	.word	0x0807b400
 8001f8c:	200000a4 	.word	0x200000a4
 8001f90:	20014be4 	.word	0x20014be4

08001f94 <ADC_IRQHandler>:
 8001f94:	e7fe      	b.n	8001f94 <ADC_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <HAL_Init+0x40>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_Init+0x40>)
 8001fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_Init+0x40>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 f8fc 	bl	80021be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f7ff fe2a 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fcc:	f7ff fbb2 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023c00 	.word	0x40023c00

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000018 	.word	0x20000018
 8002000:	2000d804 	.word	0x2000d804

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2000d804 	.word	0x2000d804

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000018 	.word	0x20000018

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	; (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff4c 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e6:	f7ff ff61 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f7ff ffb1 	bl	8002158 <NVIC_EncodePriority>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff80 	bl	8002104 <__NVIC_SetPriority>
}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff54 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fee6 	bl	8002004 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff fecd 	bl	8002004 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fb0d 	bl	800294c <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fac4 	bl	80028e0 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x26>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e040      	b.n	800242c <HAL_DMA_Start_IT+0xa8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12f      	bne.n	800241e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa56 	bl	8002884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	223f      	movs	r2, #63	; 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0216 	orr.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e005      	b.n	800242a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002442:	f7ff fddf 	bl	8002004 <HAL_GetTick>
 8002446:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d008      	beq.n	8002466 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e052      	b.n	800250c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_Abort+0x62>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0201 	bic.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b6:	e013      	b.n	80024e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b8:	f7ff fda4 	bl	8002004 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d90c      	bls.n	80024e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e015      	b.n	800250c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e4      	bne.n	80024b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	223f      	movs	r2, #63	; 0x3f
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d004      	beq.n	8002532 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00c      	b.n	800254c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2205      	movs	r2, #5
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002564:	4b92      	ldr	r3, [pc, #584]	; (80027b0 <HAL_DMA_IRQHandler+0x258>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a92      	ldr	r2, [pc, #584]	; (80027b4 <HAL_DMA_IRQHandler+0x25c>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0a9b      	lsrs	r3, r3, #10
 8002570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2208      	movs	r2, #8
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01a      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0204 	bic.w	r2, r2, #4
 80025aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	2208      	movs	r2, #8
 80025b2:	409a      	lsls	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	2201      	movs	r2, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d012      	beq.n	80025fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	2201      	movs	r2, #1
 80025e8:	409a      	lsls	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f043 0202 	orr.w	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	2204      	movs	r2, #4
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2204      	movs	r2, #4
 800261e:	409a      	lsls	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f043 0204 	orr.w	r2, r3, #4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2210      	movs	r2, #16
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d043      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03c      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	2210      	movs	r2, #16
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d024      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
 8002686:	e01f      	b.n	80026c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e016      	b.n	80026c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0208 	bic.w	r2, r2, #8
 80026b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	2220      	movs	r2, #32
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 808e 	beq.w	80027f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8086 	beq.w	80027f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	2220      	movs	r2, #32
 80026f0:	409a      	lsls	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d136      	bne.n	8002770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0216 	bic.w	r2, r2, #22
 8002710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_DMA_IRQHandler+0x1da>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0208 	bic.w	r2, r2, #8
 8002740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	223f      	movs	r2, #63	; 0x3f
 8002748:	409a      	lsls	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	2b00      	cmp	r3, #0
 8002764:	d07d      	beq.n	8002862 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
        }
        return;
 800276e:	e078      	b.n	8002862 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01c      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d108      	bne.n	800279e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	2b00      	cmp	r3, #0
 8002792:	d030      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
 800279c:	e02b      	b.n	80027f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d027      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	4798      	blx	r3
 80027ae:	e022      	b.n	80027f6 <HAL_DMA_IRQHandler+0x29e>
 80027b0:	20000010 	.word	0x20000010
 80027b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0210 	bic.w	r2, r2, #16
 80027d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d032      	beq.n	8002864 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d022      	beq.n	8002850 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2205      	movs	r2, #5
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	429a      	cmp	r2, r3
 800282c:	d307      	bcc.n	800283e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f2      	bne.n	8002822 <HAL_DMA_IRQHandler+0x2ca>
 800283c:	e000      	b.n	8002840 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800283e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e000      	b.n	8002864 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002862:	bf00      	nop
    }
  }
}
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop

0800286c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d108      	bne.n	80028c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028c2:	e007      	b.n	80028d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	60da      	str	r2, [r3, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3b10      	subs	r3, #16
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <DMA_CalcBaseAndBitshift+0x64>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <DMA_CalcBaseAndBitshift+0x68>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d909      	bls.n	8002922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	1d1a      	adds	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	659a      	str	r2, [r3, #88]	; 0x58
 8002920:	e007      	b.n	8002932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	aaaaaaab 	.word	0xaaaaaaab
 8002948:	0804e20c 	.word	0x0804e20c

0800294c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11f      	bne.n	80029a6 <DMA_CheckFifoParam+0x5a>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d856      	bhi.n	8002a1a <DMA_CheckFifoParam+0xce>
 800296c:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <DMA_CheckFifoParam+0x28>)
 800296e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002972:	bf00      	nop
 8002974:	08002985 	.word	0x08002985
 8002978:	08002997 	.word	0x08002997
 800297c:	08002985 	.word	0x08002985
 8002980:	08002a1b 	.word	0x08002a1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d046      	beq.n	8002a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e043      	b.n	8002a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800299e:	d140      	bne.n	8002a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a4:	e03d      	b.n	8002a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d121      	bne.n	80029f4 <DMA_CheckFifoParam+0xa8>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d837      	bhi.n	8002a26 <DMA_CheckFifoParam+0xda>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <DMA_CheckFifoParam+0x70>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029d3 	.word	0x080029d3
 80029c4:	080029cd 	.word	0x080029cd
 80029c8:	080029e5 	.word	0x080029e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e030      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d025      	beq.n	8002a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e2:	e022      	b.n	8002a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ec:	d11f      	bne.n	8002a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029f2:	e01c      	b.n	8002a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d903      	bls.n	8002a02 <DMA_CheckFifoParam+0xb6>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d003      	beq.n	8002a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a00:	e018      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      break;
 8002a06:	e015      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      break;
 8002a18:	e00b      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e00a      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e008      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
 8002a24:	e006      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e004      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
    }
  } 
  
  return status; 
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop

08002a44 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d106      	bne.n	8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f001 b913 	b.w	8003c92 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f001 b901 	b.w	8003c92 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f001 b8f9 	b.w	8003c92 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f041 80e7 	bne.w	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ad2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f001 f8f6 	bl	8003cd4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b99      	ldr	r3, [pc, #612]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d960      	bls.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a97      	ldr	r2, [pc, #604]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d057      	beq.n	8002bae <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a96      	ldr	r2, [pc, #600]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d050      	beq.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a94      	ldr	r2, [pc, #592]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d049      	beq.n	8002ba6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a93      	ldr	r2, [pc, #588]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d042      	beq.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a91      	ldr	r2, [pc, #580]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d03a      	beq.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a90      	ldr	r2, [pc, #576]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d032      	beq.n	8002b96 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a8e      	ldr	r2, [pc, #568]	; (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02a      	beq.n	8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a8d      	ldr	r2, [pc, #564]	; (8002d74 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d022      	beq.n	8002b8a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a8b      	ldr	r2, [pc, #556]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01a      	beq.n	8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a8a      	ldr	r2, [pc, #552]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d012      	beq.n	8002b7e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a88      	ldr	r2, [pc, #544]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00a      	beq.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a87      	ldr	r2, [pc, #540]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d102      	bne.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002b6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b70:	e01e      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b76:	e01b      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b7c:	e018      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b82:	e015      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b88:	e012      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b8e:	e00f      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b94:	e00c      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b9a:	e009      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ba0:	e006      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e004      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e002      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002baa:	2320      	movs	r3, #32
 8002bac:	e000      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bae:	2320      	movs	r3, #32
 8002bb0:	4a75      	ldr	r2, [pc, #468]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002bb2:	60d3      	str	r3, [r2, #12]
 8002bb4:	e150      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d960      	bls.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a64      	ldr	r2, [pc, #400]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d057      	beq.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a62      	ldr	r2, [pc, #392]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d050      	beq.n	8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a61      	ldr	r2, [pc, #388]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d049      	beq.n	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5f      	ldr	r2, [pc, #380]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d042      	beq.n	8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5e      	ldr	r2, [pc, #376]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d03a      	beq.n	8002c6a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5c      	ldr	r2, [pc, #368]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d032      	beq.n	8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5b      	ldr	r2, [pc, #364]	; (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02a      	beq.n	8002c5e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a59      	ldr	r2, [pc, #356]	; (8002d74 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d022      	beq.n	8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d01a      	beq.n	8002c52 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a56      	ldr	r2, [pc, #344]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d012      	beq.n	8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a55      	ldr	r2, [pc, #340]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00a      	beq.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a53      	ldr	r2, [pc, #332]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d102      	bne.n	8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002c3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c3e:	e01e      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c44:	e01b      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c4a:	e018      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c50:	e015      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c56:	e012      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c5c:	e00f      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c62:	e00c      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c68:	e009      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c6e:	e006      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c70:	2320      	movs	r3, #32
 8002c72:	e004      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c74:	2320      	movs	r3, #32
 8002c76:	e002      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e000      	b.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	4a42      	ldr	r2, [pc, #264]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002c80:	6093      	str	r3, [r2, #8]
 8002c82:	e0e9      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	f240 8083 	bls.w	8002d98 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a30      	ldr	r2, [pc, #192]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d057      	beq.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2e      	ldr	r2, [pc, #184]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d050      	beq.n	8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2d      	ldr	r2, [pc, #180]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d049      	beq.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d042      	beq.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d03a      	beq.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d032      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d02a      	beq.n	8002d2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d022      	beq.n	8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01a      	beq.n	8002d22 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d012      	beq.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00a      	beq.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1f      	ldr	r2, [pc, #124]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d102      	bne.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002d0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d0e:	e01e      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d14:	e01b      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d1a:	e018      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d20:	e015      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d26:	e012      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d2c:	e00f      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d32:	e00c      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d38:	e009      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d3e:	e006      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d40:	2320      	movs	r3, #32
 8002d42:	e004      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d44:	2320      	movs	r3, #32
 8002d46:	e002      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e000      	b.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002d50:	60d3      	str	r3, [r2, #12]
 8002d52:	e081      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002d54:	40026458 	.word	0x40026458
 8002d58:	40026010 	.word	0x40026010
 8002d5c:	40026410 	.word	0x40026410
 8002d60:	40026070 	.word	0x40026070
 8002d64:	40026470 	.word	0x40026470
 8002d68:	40026028 	.word	0x40026028
 8002d6c:	40026428 	.word	0x40026428
 8002d70:	40026088 	.word	0x40026088
 8002d74:	40026488 	.word	0x40026488
 8002d78:	40026040 	.word	0x40026040
 8002d7c:	40026440 	.word	0x40026440
 8002d80:	400260a0 	.word	0x400260a0
 8002d84:	400264a0 	.word	0x400264a0
 8002d88:	40026400 	.word	0x40026400
 8002d8c:	400260b8 	.word	0x400260b8
 8002d90:	40026058 	.word	0x40026058
 8002d94:	40026000 	.word	0x40026000
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a96      	ldr	r2, [pc, #600]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d057      	beq.n	8002e52 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a95      	ldr	r2, [pc, #596]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d050      	beq.n	8002e4e <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a93      	ldr	r2, [pc, #588]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d049      	beq.n	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a92      	ldr	r2, [pc, #584]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d042      	beq.n	8002e46 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a90      	ldr	r2, [pc, #576]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d03a      	beq.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a8f      	ldr	r2, [pc, #572]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d032      	beq.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a8d      	ldr	r2, [pc, #564]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02a      	beq.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a8c      	ldr	r2, [pc, #560]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a8a      	ldr	r2, [pc, #552]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01a      	beq.n	8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a89      	ldr	r2, [pc, #548]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d012      	beq.n	8002e22 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a87      	ldr	r2, [pc, #540]	; (8003020 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00a      	beq.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a86      	ldr	r2, [pc, #536]	; (8003024 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d102      	bne.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002e10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e14:	e01e      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e1a:	e01b      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e20:	e018      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e26:	e015      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e2c:	e012      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e32:	e00f      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e38:	e00c      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e3e:	e009      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e44:	e006      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e46:	2320      	movs	r3, #32
 8002e48:	e004      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e002      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e000      	b.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e52:	2320      	movs	r3, #32
 8002e54:	4a74      	ldr	r2, [pc, #464]	; (8003028 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002e56:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d960      	bls.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d057      	beq.n	8002f1e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a62      	ldr	r2, [pc, #392]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d050      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a60      	ldr	r2, [pc, #384]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d049      	beq.n	8002f16 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5f      	ldr	r2, [pc, #380]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d042      	beq.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5d      	ldr	r2, [pc, #372]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d03a      	beq.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a5c      	ldr	r2, [pc, #368]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d032      	beq.n	8002f06 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5a      	ldr	r2, [pc, #360]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02a      	beq.n	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a59      	ldr	r2, [pc, #356]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a57      	ldr	r2, [pc, #348]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01a      	beq.n	8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a56      	ldr	r2, [pc, #344]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d012      	beq.n	8002eee <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a53      	ldr	r2, [pc, #332]	; (8003024 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002edc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ee0:	e01e      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ee2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ee6:	e01b      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ee8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eec:	e018      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002eee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ef2:	e015      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ef4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ef8:	e012      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002efe:	e00f      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f04:	e00c      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0a:	e009      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f10:	e006      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f12:	2310      	movs	r3, #16
 8002f14:	e004      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f16:	2310      	movs	r3, #16
 8002f18:	e002      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	e000      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f1e:	2310      	movs	r3, #16
 8002f20:	4a43      	ldr	r2, [pc, #268]	; (8003030 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002f22:	60d3      	str	r3, [r2, #12]
 8002f24:	e14f      	b.n	80031c6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	f240 8082 	bls.w	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2f      	ldr	r2, [pc, #188]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d057      	beq.n	8002fee <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2e      	ldr	r2, [pc, #184]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d050      	beq.n	8002fea <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d049      	beq.n	8002fe6 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d042      	beq.n	8002fe2 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03a      	beq.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d032      	beq.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02a      	beq.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01a      	beq.n	8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d012      	beq.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a20      	ldr	r2, [pc, #128]	; (8003020 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d102      	bne.n	8002fb2 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002fac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fb0:	e01e      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fb6:	e01b      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fbc:	e018      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fc2:	e015      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fc8:	e012      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fce:	e00f      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd4:	e00c      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fda:	e009      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe0:	e006      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	e004      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	e002      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fea:	2310      	movs	r3, #16
 8002fec:	e000      	b.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fee:	2310      	movs	r3, #16
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002ff2:	6093      	str	r3, [r2, #8]
 8002ff4:	e0e7      	b.n	80031c6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002ff6:	bf00      	nop
 8002ff8:	40026010 	.word	0x40026010
 8002ffc:	40026410 	.word	0x40026410
 8003000:	40026070 	.word	0x40026070
 8003004:	40026470 	.word	0x40026470
 8003008:	40026028 	.word	0x40026028
 800300c:	40026428 	.word	0x40026428
 8003010:	40026088 	.word	0x40026088
 8003014:	40026488 	.word	0x40026488
 8003018:	40026040 	.word	0x40026040
 800301c:	40026440 	.word	0x40026440
 8003020:	400260a0 	.word	0x400260a0
 8003024:	400264a0 	.word	0x400264a0
 8003028:	40026000 	.word	0x40026000
 800302c:	40026458 	.word	0x40026458
 8003030:	40026400 	.word	0x40026400
 8003034:	400260b8 	.word	0x400260b8
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b96      	ldr	r3, [pc, #600]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003040:	429a      	cmp	r2, r3
 8003042:	d960      	bls.n	8003106 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a94      	ldr	r2, [pc, #592]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d057      	beq.n	80030fe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a93      	ldr	r2, [pc, #588]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d050      	beq.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a91      	ldr	r2, [pc, #580]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d049      	beq.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a90      	ldr	r2, [pc, #576]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d042      	beq.n	80030f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a8e      	ldr	r2, [pc, #568]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d03a      	beq.n	80030ec <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a8d      	ldr	r2, [pc, #564]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d032      	beq.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a8b      	ldr	r2, [pc, #556]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02a      	beq.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a88      	ldr	r2, [pc, #544]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01a      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d012      	beq.n	80030ce <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a85      	ldr	r2, [pc, #532]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00a      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a84      	ldr	r2, [pc, #528]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d102      	bne.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80030bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030c0:	e01e      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030c6:	e01b      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030cc:	e018      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030d2:	e015      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030d8:	e012      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030de:	e00f      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e4:	e00c      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ea:	e009      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f0:	e006      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030f2:	2310      	movs	r3, #16
 80030f4:	e004      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030f6:	2310      	movs	r3, #16
 80030f8:	e002      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030fa:	2310      	movs	r3, #16
 80030fc:	e000      	b.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030fe:	2310      	movs	r3, #16
 8003100:	4a72      	ldr	r2, [pc, #456]	; (80032cc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003102:	60d3      	str	r3, [r2, #12]
 8003104:	e05f      	b.n	80031c6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a64      	ldr	r2, [pc, #400]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d057      	beq.n	80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a62      	ldr	r2, [pc, #392]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d050      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a61      	ldr	r2, [pc, #388]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d049      	beq.n	80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5f      	ldr	r2, [pc, #380]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d042      	beq.n	80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5e      	ldr	r2, [pc, #376]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d03a      	beq.n	80031ae <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5c      	ldr	r2, [pc, #368]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d032      	beq.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5b      	ldr	r2, [pc, #364]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d02a      	beq.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d022      	beq.n	800319c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a58      	ldr	r2, [pc, #352]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d01a      	beq.n	8003196 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a56      	ldr	r2, [pc, #344]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d012      	beq.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a55      	ldr	r2, [pc, #340]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00a      	beq.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d102      	bne.n	8003184 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800317e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003182:	e01e      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003184:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003188:	e01b      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800318a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800318e:	e018      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003190:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003194:	e015      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003196:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319a:	e012      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800319c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a0:	e00f      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a6:	e00c      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ac:	e009      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b2:	e006      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031b4:	2310      	movs	r3, #16
 80031b6:	e004      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031b8:	2310      	movs	r3, #16
 80031ba:	e002      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031bc:	2310      	movs	r3, #16
 80031be:	e000      	b.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031c0:	2310      	movs	r3, #16
 80031c2:	4a42      	ldr	r2, [pc, #264]	; (80032cc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80031c4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80031ce:	429a      	cmp	r2, r3
 80031d0:	f240 8082 	bls.w	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d057      	beq.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2f      	ldr	r2, [pc, #188]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d050      	beq.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2d      	ldr	r2, [pc, #180]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d049      	beq.n	8003286 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d042      	beq.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d03a      	beq.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d032      	beq.n	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02a      	beq.n	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01a      	beq.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d012      	beq.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00a      	beq.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800324c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003250:	e01e      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003256:	e01b      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003258:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800325c:	e018      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800325e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003262:	e015      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003264:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003268:	e012      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800326a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326e:	e00f      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003274:	e00c      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800327a:	e009      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800327c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003280:	e006      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003282:	2308      	movs	r3, #8
 8003284:	e004      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003286:	2308      	movs	r3, #8
 8003288:	e002      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800328a:	2308      	movs	r3, #8
 800328c:	e000      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800328e:	2308      	movs	r3, #8
 8003290:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8003292:	60d3      	str	r3, [r2, #12]
 8003294:	e16f      	b.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003296:	bf00      	nop
 8003298:	40026058 	.word	0x40026058
 800329c:	40026010 	.word	0x40026010
 80032a0:	40026410 	.word	0x40026410
 80032a4:	40026070 	.word	0x40026070
 80032a8:	40026470 	.word	0x40026470
 80032ac:	40026028 	.word	0x40026028
 80032b0:	40026428 	.word	0x40026428
 80032b4:	40026088 	.word	0x40026088
 80032b8:	40026488 	.word	0x40026488
 80032bc:	40026040 	.word	0x40026040
 80032c0:	40026440 	.word	0x40026440
 80032c4:	400260a0 	.word	0x400260a0
 80032c8:	400264a0 	.word	0x400264a0
 80032cc:	40026000 	.word	0x40026000
 80032d0:	40026458 	.word	0x40026458
 80032d4:	40026400 	.word	0x40026400
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	4b94      	ldr	r3, [pc, #592]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d960      	bls.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a92      	ldr	r2, [pc, #584]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d057      	beq.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a91      	ldr	r2, [pc, #580]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d050      	beq.n	800339a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a8f      	ldr	r2, [pc, #572]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d049      	beq.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a8e      	ldr	r2, [pc, #568]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d042      	beq.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a8c      	ldr	r2, [pc, #560]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03a      	beq.n	800338c <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a8b      	ldr	r2, [pc, #556]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d032      	beq.n	8003386 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a89      	ldr	r2, [pc, #548]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02a      	beq.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a88      	ldr	r2, [pc, #544]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a86      	ldr	r2, [pc, #536]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01a      	beq.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a85      	ldr	r2, [pc, #532]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d012      	beq.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a83      	ldr	r2, [pc, #524]	; (800355c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00a      	beq.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a82      	ldr	r2, [pc, #520]	; (8003560 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d102      	bne.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 800335c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003360:	e01e      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003366:	e01b      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003368:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800336c:	e018      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800336e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003372:	e015      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003374:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003378:	e012      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800337a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800337e:	e00f      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003384:	e00c      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338a:	e009      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800338c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003390:	e006      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003392:	2308      	movs	r3, #8
 8003394:	e004      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003396:	2308      	movs	r3, #8
 8003398:	e002      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800339a:	2308      	movs	r3, #8
 800339c:	e000      	b.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800339e:	2308      	movs	r3, #8
 80033a0:	4a70      	ldr	r2, [pc, #448]	; (8003564 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80033a2:	6093      	str	r3, [r2, #8]
 80033a4:	e0e7      	b.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b6e      	ldr	r3, [pc, #440]	; (8003568 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d960      	bls.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5f      	ldr	r2, [pc, #380]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d057      	beq.n	800346c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d050      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5c      	ldr	r2, [pc, #368]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d049      	beq.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d042      	beq.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a59      	ldr	r2, [pc, #356]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d03a      	beq.n	800345a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a57      	ldr	r2, [pc, #348]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d032      	beq.n	8003454 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02a      	beq.n	800344e <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a54      	ldr	r2, [pc, #336]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a53      	ldr	r2, [pc, #332]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01a      	beq.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a51      	ldr	r2, [pc, #324]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d012      	beq.n	800343c <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a50      	ldr	r2, [pc, #320]	; (800355c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00a      	beq.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d102      	bne.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800342a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800342e:	e01e      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003430:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003434:	e01b      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003436:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800343a:	e018      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800343c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003440:	e015      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003442:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003446:	e012      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800344c:	e00f      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800344e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003452:	e00c      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	e009      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800345a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800345e:	e006      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003460:	2308      	movs	r3, #8
 8003462:	e004      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003464:	2308      	movs	r3, #8
 8003466:	e002      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003468:	2308      	movs	r3, #8
 800346a:	e000      	b.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800346c:	2308      	movs	r3, #8
 800346e:	4a3f      	ldr	r2, [pc, #252]	; (800356c <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8003470:	60d3      	str	r3, [r2, #12]
 8003472:	e080      	b.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2e      	ldr	r2, [pc, #184]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d078      	beq.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d050      	beq.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d049      	beq.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2a      	ldr	r2, [pc, #168]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d042      	beq.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d03a      	beq.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a27      	ldr	r2, [pc, #156]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d032      	beq.n	8003516 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d02a      	beq.n	8003510 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a24      	ldr	r2, [pc, #144]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a22      	ldr	r2, [pc, #136]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01a      	beq.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d012      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00a      	beq.n	80034f8 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d102      	bne.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80034ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034f0:	e03f      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f6:	e03c      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034fc:	e039      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003502:	e036      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003504:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003508:	e033      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800350a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350e:	e030      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003514:	e02d      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800351a:	e02a      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800351c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003520:	e027      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003522:	2308      	movs	r3, #8
 8003524:	e025      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003526:	2308      	movs	r3, #8
 8003528:	e023      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800352a:	2308      	movs	r3, #8
 800352c:	e021      	b.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800352e:	bf00      	nop
 8003530:	400260b8 	.word	0x400260b8
 8003534:	40026010 	.word	0x40026010
 8003538:	40026410 	.word	0x40026410
 800353c:	40026070 	.word	0x40026070
 8003540:	40026470 	.word	0x40026470
 8003544:	40026028 	.word	0x40026028
 8003548:	40026428 	.word	0x40026428
 800354c:	40026088 	.word	0x40026088
 8003550:	40026488 	.word	0x40026488
 8003554:	40026040 	.word	0x40026040
 8003558:	40026440 	.word	0x40026440
 800355c:	400260a0 	.word	0x400260a0
 8003560:	400264a0 	.word	0x400264a0
 8003564:	40026400 	.word	0x40026400
 8003568:	40026058 	.word	0x40026058
 800356c:	40026000 	.word	0x40026000
 8003570:	2308      	movs	r3, #8
 8003572:	4a9a      	ldr	r2, [pc, #616]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003574:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	4b98      	ldr	r3, [pc, #608]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800357e:	429a      	cmp	r2, r3
 8003580:	d960      	bls.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a97      	ldr	r2, [pc, #604]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d057      	beq.n	800363c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a95      	ldr	r2, [pc, #596]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d050      	beq.n	8003638 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a94      	ldr	r2, [pc, #592]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d049      	beq.n	8003634 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a92      	ldr	r2, [pc, #584]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d042      	beq.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a91      	ldr	r2, [pc, #580]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d03a      	beq.n	800362a <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a8f      	ldr	r2, [pc, #572]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d032      	beq.n	8003624 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a8e      	ldr	r2, [pc, #568]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d02a      	beq.n	800361e <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a8c      	ldr	r2, [pc, #560]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d022      	beq.n	8003618 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a8b      	ldr	r2, [pc, #556]	; (8003804 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01a      	beq.n	8003612 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a89      	ldr	r2, [pc, #548]	; (8003808 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d012      	beq.n	800360c <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a88      	ldr	r2, [pc, #544]	; (800380c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00a      	beq.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a86      	ldr	r2, [pc, #536]	; (8003810 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d102      	bne.n	8003600 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80035fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035fe:	e01e      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003604:	e01b      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003606:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800360a:	e018      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800360c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003610:	e015      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003612:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003616:	e012      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800361c:	e00f      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800361e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003622:	e00c      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003628:	e009      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800362a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800362e:	e006      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003630:	2304      	movs	r3, #4
 8003632:	e004      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003634:	2304      	movs	r3, #4
 8003636:	e002      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003638:	2304      	movs	r3, #4
 800363a:	e000      	b.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800363c:	2304      	movs	r3, #4
 800363e:	4a75      	ldr	r2, [pc, #468]	; (8003814 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003640:	60d3      	str	r3, [r2, #12]
 8003642:	e151      	b.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	4b73      	ldr	r3, [pc, #460]	; (8003818 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 800364c:	429a      	cmp	r2, r3
 800364e:	d960      	bls.n	8003712 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a63      	ldr	r2, [pc, #396]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d057      	beq.n	800370a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a62      	ldr	r2, [pc, #392]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d050      	beq.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a60      	ldr	r2, [pc, #384]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d049      	beq.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d042      	beq.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d03a      	beq.n	80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d032      	beq.n	80036f2 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5a      	ldr	r2, [pc, #360]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d02a      	beq.n	80036ec <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a59      	ldr	r2, [pc, #356]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a57      	ldr	r2, [pc, #348]	; (8003804 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01a      	beq.n	80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a56      	ldr	r2, [pc, #344]	; (8003808 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d012      	beq.n	80036da <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a54      	ldr	r2, [pc, #336]	; (800380c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00a      	beq.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a53      	ldr	r2, [pc, #332]	; (8003810 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d102      	bne.n	80036ce <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80036c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036cc:	e01e      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d2:	e01b      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036d8:	e018      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036de:	e015      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036e4:	e012      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ea:	e00f      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f0:	e00c      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f6:	e009      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fc:	e006      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036fe:	2304      	movs	r3, #4
 8003700:	e004      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003702:	2304      	movs	r3, #4
 8003704:	e002      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003706:	2304      	movs	r3, #4
 8003708:	e000      	b.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800370a:	2304      	movs	r3, #4
 800370c:	4a41      	ldr	r2, [pc, #260]	; (8003814 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800370e:	6093      	str	r3, [r2, #8]
 8003710:	e0ea      	b.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b40      	ldr	r3, [pc, #256]	; (800381c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 800371a:	429a      	cmp	r2, r3
 800371c:	f240 8084 	bls.w	8003828 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2f      	ldr	r2, [pc, #188]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d07a      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d050      	beq.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d049      	beq.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d042      	beq.n	80037ce <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d03a      	beq.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d032      	beq.n	80037c2 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02a      	beq.n	80037bc <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a23      	ldr	r2, [pc, #140]	; (8003804 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01a      	beq.n	80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d012      	beq.n	80037aa <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a20      	ldr	r2, [pc, #128]	; (800380c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00a      	beq.n	80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d102      	bne.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800379c:	e041      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800379e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a2:	e03e      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037a8:	e03b      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037ae:	e038      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037b4:	e035      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ba:	e032      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c0:	e02f      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c6:	e02c      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037cc:	e029      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037ce:	2304      	movs	r3, #4
 80037d0:	e027      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037d2:	2304      	movs	r3, #4
 80037d4:	e025      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037d6:	2304      	movs	r3, #4
 80037d8:	e023      	b.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037da:	bf00      	nop
 80037dc:	40026000 	.word	0x40026000
 80037e0:	40026458 	.word	0x40026458
 80037e4:	40026010 	.word	0x40026010
 80037e8:	40026410 	.word	0x40026410
 80037ec:	40026070 	.word	0x40026070
 80037f0:	40026470 	.word	0x40026470
 80037f4:	40026028 	.word	0x40026028
 80037f8:	40026428 	.word	0x40026428
 80037fc:	40026088 	.word	0x40026088
 8003800:	40026488 	.word	0x40026488
 8003804:	40026040 	.word	0x40026040
 8003808:	40026440 	.word	0x40026440
 800380c:	400260a0 	.word	0x400260a0
 8003810:	400264a0 	.word	0x400264a0
 8003814:	40026400 	.word	0x40026400
 8003818:	400260b8 	.word	0x400260b8
 800381c:	40026058 	.word	0x40026058
 8003820:	2304      	movs	r3, #4
 8003822:	4a94      	ldr	r2, [pc, #592]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003824:	60d3      	str	r3, [r2, #12]
 8003826:	e05f      	b.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a92      	ldr	r2, [pc, #584]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d057      	beq.n	80038e2 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a91      	ldr	r2, [pc, #580]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d050      	beq.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a8f      	ldr	r2, [pc, #572]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d049      	beq.n	80038da <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a8e      	ldr	r2, [pc, #568]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d042      	beq.n	80038d6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a8c      	ldr	r2, [pc, #560]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d03a      	beq.n	80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a8b      	ldr	r2, [pc, #556]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d032      	beq.n	80038ca <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a89      	ldr	r2, [pc, #548]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02a      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a88      	ldr	r2, [pc, #544]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a86      	ldr	r2, [pc, #536]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01a      	beq.n	80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a85      	ldr	r2, [pc, #532]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d012      	beq.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a83      	ldr	r2, [pc, #524]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00a      	beq.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a82      	ldr	r2, [pc, #520]	; (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d102      	bne.n	80038a6 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80038a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038a4:	e01e      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038aa:	e01b      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038b0:	e018      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038b6:	e015      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038bc:	e012      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c2:	e00f      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c8:	e00c      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ce:	e009      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d4:	e006      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038d6:	2304      	movs	r3, #4
 80038d8:	e004      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038da:	2304      	movs	r3, #4
 80038dc:	e002      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038de:	2304      	movs	r3, #4
 80038e0:	e000      	b.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038e2:	2304      	movs	r3, #4
 80038e4:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80038e6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b6e      	ldr	r3, [pc, #440]	; (8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d95c      	bls.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a5f      	ldr	r2, [pc, #380]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d053      	beq.n	80039a6 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d04c      	beq.n	80039a2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5c      	ldr	r2, [pc, #368]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d045      	beq.n	800399e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a5b      	ldr	r2, [pc, #364]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d03e      	beq.n	800399a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a59      	ldr	r2, [pc, #356]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d037      	beq.n	8003996 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a58      	ldr	r2, [pc, #352]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d030      	beq.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d029      	beq.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a55      	ldr	r2, [pc, #340]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d022      	beq.n	800398a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a53      	ldr	r2, [pc, #332]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01a      	beq.n	8003984 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d012      	beq.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a50      	ldr	r2, [pc, #320]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00a      	beq.n	8003978 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4f      	ldr	r2, [pc, #316]	; (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d102      	bne.n	8003972 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800396c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003970:	e01a      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003976:	e017      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397c:	e014      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800397e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003982:	e011      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003988:	e00e      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800398a:	2340      	movs	r3, #64	; 0x40
 800398c:	e00c      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800398e:	2340      	movs	r3, #64	; 0x40
 8003990:	e00a      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003992:	2340      	movs	r3, #64	; 0x40
 8003994:	e008      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	e006      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800399a:	2301      	movs	r3, #1
 800399c:	e004      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800399e:	2301      	movs	r3, #1
 80039a0:	e002      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4a40      	ldr	r2, [pc, #256]	; (8003aac <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80039aa:	60d3      	str	r3, [r2, #12]
 80039ac:	e141      	b.n	8003c32 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d97c      	bls.n	8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d053      	beq.n	8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04c      	beq.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2b      	ldr	r2, [pc, #172]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d03e      	beq.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d037      	beq.n	8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d030      	beq.n	8003a58 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d029      	beq.n	8003a54 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d022      	beq.n	8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d01a      	beq.n	8003a4a <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d012      	beq.n	8003a44 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00a      	beq.n	8003a3e <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d102      	bne.n	8003a38 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a36:	e01a      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a3c:	e017      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a42:	e014      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a48:	e011      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a4e:	e00e      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a50:	2340      	movs	r3, #64	; 0x40
 8003a52:	e00c      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a54:	2340      	movs	r3, #64	; 0x40
 8003a56:	e00a      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a58:	2340      	movs	r3, #64	; 0x40
 8003a5a:	e008      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a5c:	2340      	movs	r3, #64	; 0x40
 8003a5e:	e006      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e004      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e002      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003a70:	6093      	str	r3, [r2, #8]
 8003a72:	e0de      	b.n	8003c32 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003a74:	40026000 	.word	0x40026000
 8003a78:	40026010 	.word	0x40026010
 8003a7c:	40026410 	.word	0x40026410
 8003a80:	40026070 	.word	0x40026070
 8003a84:	40026470 	.word	0x40026470
 8003a88:	40026028 	.word	0x40026028
 8003a8c:	40026428 	.word	0x40026428
 8003a90:	40026088 	.word	0x40026088
 8003a94:	40026488 	.word	0x40026488
 8003a98:	40026040 	.word	0x40026040
 8003a9c:	40026440 	.word	0x40026440
 8003aa0:	400260a0 	.word	0x400260a0
 8003aa4:	400264a0 	.word	0x400264a0
 8003aa8:	40026458 	.word	0x40026458
 8003aac:	40026400 	.word	0x40026400
 8003ab0:	400260b8 	.word	0x400260b8
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b78      	ldr	r3, [pc, #480]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d95c      	bls.n	8003b7a <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a76      	ldr	r2, [pc, #472]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d053      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a75      	ldr	r2, [pc, #468]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04c      	beq.n	8003b6e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a73      	ldr	r2, [pc, #460]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d045      	beq.n	8003b6a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a72      	ldr	r2, [pc, #456]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d03e      	beq.n	8003b66 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a70      	ldr	r2, [pc, #448]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d037      	beq.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6f      	ldr	r2, [pc, #444]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d030      	beq.n	8003b5e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6d      	ldr	r2, [pc, #436]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d029      	beq.n	8003b5a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6c      	ldr	r2, [pc, #432]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6a      	ldr	r2, [pc, #424]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01a      	beq.n	8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a69      	ldr	r2, [pc, #420]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d012      	beq.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a67      	ldr	r2, [pc, #412]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00a      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a66      	ldr	r2, [pc, #408]	; (8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d102      	bne.n	8003b3e <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3c:	e01a      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b42:	e017      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b48:	e014      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b4e:	e011      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b54:	e00e      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b56:	2340      	movs	r3, #64	; 0x40
 8003b58:	e00c      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b5a:	2340      	movs	r3, #64	; 0x40
 8003b5c:	e00a      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	e008      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	e006      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e004      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e002      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4a56      	ldr	r2, [pc, #344]	; (8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003b76:	60d3      	str	r3, [r2, #12]
 8003b78:	e05b      	b.n	8003c32 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a48      	ldr	r2, [pc, #288]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d053      	beq.n	8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a46      	ldr	r2, [pc, #280]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d04c      	beq.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a45      	ldr	r2, [pc, #276]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d045      	beq.n	8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03e      	beq.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d037      	beq.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d030      	beq.n	8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d029      	beq.n	8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01a      	beq.n	8003c0a <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3a      	ldr	r2, [pc, #232]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d012      	beq.n	8003c04 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a39      	ldr	r2, [pc, #228]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00a      	beq.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d102      	bne.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf6:	e01a      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bfc:	e017      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c02:	e014      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c08:	e011      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c0e:	e00e      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	e00c      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c14:	2340      	movs	r3, #64	; 0x40
 8003c16:	e00a      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c18:	2340      	movs	r3, #64	; 0x40
 8003c1a:	e008      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	e006      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e004      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e002      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003c30:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0216 	orr.w	r2, r2, #22
 8003c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0208 	orr.w	r2, r2, #8
 8003c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e005      	b.n	8003c90 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40026058 	.word	0x40026058
 8003ca0:	40026010 	.word	0x40026010
 8003ca4:	40026410 	.word	0x40026410
 8003ca8:	40026070 	.word	0x40026070
 8003cac:	40026470 	.word	0x40026470
 8003cb0:	40026028 	.word	0x40026028
 8003cb4:	40026428 	.word	0x40026428
 8003cb8:	40026088 	.word	0x40026088
 8003cbc:	40026488 	.word	0x40026488
 8003cc0:	40026040 	.word	0x40026040
 8003cc4:	40026440 	.word	0x40026440
 8003cc8:	400260a0 	.word	0x400260a0
 8003ccc:	400264a0 	.word	0x400264a0
 8003cd0:	40026000 	.word	0x40026000

08003cd4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d108      	bne.n	8003d04 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d02:	e007      	b.n	8003d14 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003d30:	4baa      	ldr	r3, [pc, #680]	; (8003fdc <HAL_ETH_Init+0x2bc>)
 8003d32:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e183      	b.n	800404e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f007 fb88 	bl	800b470 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	4b9e      	ldr	r3, [pc, #632]	; (8003fe0 <HAL_ETH_Init+0x2c0>)
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	4a9d      	ldr	r2, [pc, #628]	; (8003fe0 <HAL_ETH_Init+0x2c0>)
 8003d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d70:	4b9b      	ldr	r3, [pc, #620]	; (8003fe0 <HAL_ETH_Init+0x2c0>)
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d7c:	4b99      	ldr	r3, [pc, #612]	; (8003fe4 <HAL_ETH_Init+0x2c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a98      	ldr	r2, [pc, #608]	; (8003fe4 <HAL_ETH_Init+0x2c4>)
 8003d82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d86:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d88:	4b96      	ldr	r3, [pc, #600]	; (8003fe4 <HAL_ETH_Init+0x2c4>)
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4994      	ldr	r1, [pc, #592]	; (8003fe4 <HAL_ETH_Init+0x2c4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003dae:	f7fe f929 	bl	8002004 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003db4:	e011      	b.n	8003dda <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003db6:	f7fe f925 	bl	8002004 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dc4:	d909      	bls.n	8003dda <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e139      	b.n	800404e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e4      	bne.n	8003db6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f023 031c 	bic.w	r3, r3, #28
 8003dfa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003dfc:	f003 fb16 	bl	800742c <HAL_RCC_GetHCLKFreq>
 8003e00:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4a78      	ldr	r2, [pc, #480]	; (8003fe8 <HAL_ETH_Init+0x2c8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d908      	bls.n	8003e1c <HAL_ETH_Init+0xfc>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4a77      	ldr	r2, [pc, #476]	; (8003fec <HAL_ETH_Init+0x2cc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d804      	bhi.n	8003e1c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e027      	b.n	8003e6c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	4a73      	ldr	r2, [pc, #460]	; (8003fec <HAL_ETH_Init+0x2cc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d908      	bls.n	8003e36 <HAL_ETH_Init+0x116>
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	4a6d      	ldr	r2, [pc, #436]	; (8003fdc <HAL_ETH_Init+0x2bc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d204      	bcs.n	8003e36 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f043 030c 	orr.w	r3, r3, #12
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e01a      	b.n	8003e6c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	4a68      	ldr	r2, [pc, #416]	; (8003fdc <HAL_ETH_Init+0x2bc>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d303      	bcc.n	8003e46 <HAL_ETH_Init+0x126>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	4a6b      	ldr	r2, [pc, #428]	; (8003ff0 <HAL_ETH_Init+0x2d0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d911      	bls.n	8003e6a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4a69      	ldr	r2, [pc, #420]	; (8003ff0 <HAL_ETH_Init+0x2d0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d908      	bls.n	8003e60 <HAL_ETH_Init+0x140>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4a68      	ldr	r2, [pc, #416]	; (8003ff4 <HAL_ETH_Init+0x2d4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d804      	bhi.n	8003e60 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e005      	b.n	8003e6c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f043 0310 	orr.w	r3, r3, #16
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	e000      	b.n	8003e6c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003e6a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003e74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e78:	2100      	movs	r1, #0
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fc17 	bl	80046ae <HAL_ETH_WritePHYRegister>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003e8a:	6939      	ldr	r1, [r7, #16]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fdcd 	bl	8004a2c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0d7      	b.n	800404e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003e9e:	20ff      	movs	r0, #255	; 0xff
 8003ea0:	f7fe f8bc 	bl	800201c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a5 	beq.w	8003ff8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eae:	f7fe f8a9 	bl	8002004 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003eb4:	f107 030c 	add.w	r3, r7, #12
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2101      	movs	r1, #1
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fb8e 	bl	80045de <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003ec2:	f7fe f89f 	bl	8002004 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d90f      	bls.n	8003ef4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fda6 	bl	8004a2c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0ac      	b.n	800404e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0da      	beq.n	8003eb4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003efe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fbd2 	bl	80046ae <HAL_ETH_WritePHYRegister>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003f14:	6939      	ldr	r1, [r7, #16]
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fd88 	bl	8004a2c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003f24:	2301      	movs	r3, #1
 8003f26:	e092      	b.n	800404e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f28:	f7fe f86c 	bl	8002004 <HAL_GetTick>
 8003f2c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	461a      	mov	r2, r3
 8003f34:	2101      	movs	r1, #1
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb51 	bl	80045de <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003f3c:	f7fe f862 	bl	8002004 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d90f      	bls.n	8003f6e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003f52:	6939      	ldr	r1, [r7, #16]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fd69 	bl	8004a2c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e06f      	b.n	800404e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0da      	beq.n	8003f2e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2131      	movs	r1, #49	; 0x31
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fb2c 	bl	80045de <HAL_ETH_ReadPHYRegister>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003f90:	6939      	ldr	r1, [r7, #16]
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fd4a 	bl	8004a2c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e054      	b.n	800404e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	e002      	b.n	8003fbe <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	e035      	b.n	800403c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	e030      	b.n	800403c <HAL_ETH_Init+0x31c>
 8003fda:	bf00      	nop
 8003fdc:	03938700 	.word	0x03938700
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	01312cff 	.word	0x01312cff
 8003fec:	02160ebf 	.word	0x02160ebf
 8003ff0:	05f5e0ff 	.word	0x05f5e0ff
 8003ff4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	08db      	lsrs	r3, r3, #3
 8003ffe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004008:	4313      	orrs	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	2100      	movs	r1, #0
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fb4c 	bl	80046ae <HAL_ETH_WritePHYRegister>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004020:	6939      	ldr	r1, [r7, #16]
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fd02 	bl	8004a2c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e00c      	b.n	800404e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004034:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004038:	f7fd fff0 	bl	800201c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800403c:	6939      	ldr	r1, [r7, #16]
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fcf4 	bl	8004a2c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop

08004058 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_ETH_DMATxDescListInit+0x20>
 8004074:	2302      	movs	r3, #2
 8004076:	e052      	b.n	800411e <HAL_ETH_DMATxDescListInit+0xc6>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e030      	b.n	80040f6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	015b      	lsls	r3, r3, #5
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	4413      	add	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040a4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4413      	add	r3, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d208      	bcs.n	80040ea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	015b      	lsls	r3, r3, #5
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4413      	add	r3, r2
 80040e2:	461a      	mov	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	e002      	b.n	80040f0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3ca      	bcc.n	8004094 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004108:	3310      	adds	r3, #16
 800410a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800412a:	b480      	push	{r7}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_ETH_DMARxDescListInit+0x20>
 8004146:	2302      	movs	r3, #2
 8004148:	e056      	b.n	80041f8 <HAL_ETH_DMARxDescListInit+0xce>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e034      	b.n	80041d0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	015b      	lsls	r3, r3, #5
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	4413      	add	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004176:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800417e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	461a      	mov	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d208      	bcs.n	80041c4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3301      	adds	r3, #1
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4413      	add	r3, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	e002      	b.n	80041ca <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	3301      	adds	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d3c6      	bcc.n	8004166 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	330c      	adds	r3, #12
 80041e4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_ETH_TransmitFrame+0x24>
 8004224:	2302      	movs	r3, #2
 8004226:	e0cd      	b.n	80043c4 <HAL_ETH_TransmitFrame+0x1c0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800424e:	2301      	movs	r3, #1
 8004250:	e0b8      	b.n	80043c4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da09      	bge.n	8004270 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2212      	movs	r2, #18
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0a9      	b.n	80043c4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004276:	4293      	cmp	r3, r2
 8004278:	d915      	bls.n	80042a6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	4a54      	ldr	r2, [pc, #336]	; (80043d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800428a:	fba3 1302 	umull	r1, r3, r3, r2
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3301      	adds	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e001      	b.n	80042aa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80042a6:	2301      	movs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d11c      	bne.n	80042ea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80042be:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80042ca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042da:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	461a      	mov	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80042e8:	e04b      	b.n	8004382 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e044      	b.n	800437a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042fe:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004314:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800431e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3b01      	subs	r3, #1
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	429a      	cmp	r2, r3
 8004328:	d116      	bne.n	8004358 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004338:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	4a25      	ldr	r2, [pc, #148]	; (80043d4 <HAL_ETH_TransmitFrame+0x1d0>)
 800433e:	fb02 f203 	mul.w	r2, r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4413      	add	r3, r2
 8004346:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800434a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004356:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004366:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3301      	adds	r3, #1
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	429a      	cmp	r2, r3
 8004380:	d3b6      	bcc.n	80042f0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438a:	3314      	adds	r3, #20
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439e:	3314      	adds	r3, #20
 80043a0:	2204      	movs	r2, #4
 80043a2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	3304      	adds	r3, #4
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	ac02b00b 	.word	0xac02b00b
 80043d4:	fffffa0c 	.word	0xfffffa0c

080043d8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e074      	b.n	80044dc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004402:	e05a      	b.n	80044ba <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d10d      	bne.n	8004436 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
 8004434:	e041      	b.n	80044ba <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	629a      	str	r2, [r3, #40]	; 0x28
 800445a:	e02e      	b.n	80044ba <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	2b01      	cmp	r3, #1
 8004474:	d103      	bne.n	800447e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800448a:	1f1a      	subs	r2, r3, #4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e010      	b.n	80044dc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db02      	blt.n	80044ca <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d99c      	bls.n	8004404 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f8:	3314      	adds	r3, #20
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d112      	bne.n	800452a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f007 f861 	bl	800b5cc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004512:	3314      	adds	r3, #20
 8004514:	2240      	movs	r2, #64	; 0x40
 8004516:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004528:	e01b      	b.n	8004562 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	3314      	adds	r3, #20
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d111      	bne.n	8004562 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f839 	bl	80045b6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454c:	3314      	adds	r3, #20
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	3314      	adds	r3, #20
 800456c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004570:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457a:	3314      	adds	r3, #20
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004586:	d112      	bne.n	80045ae <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f81e 	bl	80045ca <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004596:	3314      	adds	r3, #20
 8004598:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800459c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b086      	sub	sp, #24
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	460b      	mov	r3, r1
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b82      	cmp	r3, #130	; 0x82
 80045fe:	d101      	bne.n	8004604 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
 8004602:	e050      	b.n	80046a6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2282      	movs	r2, #130	; 0x82
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 031c 	and.w	r3, r3, #28
 800461a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8a1b      	ldrh	r3, [r3, #16]
 8004620:	02db      	lsls	r3, r3, #11
 8004622:	b29b      	uxth	r3, r3
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800462a:	897b      	ldrh	r3, [r7, #10]
 800462c:	019b      	lsls	r3, r3, #6
 800462e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0302 	bic.w	r3, r3, #2
 800463e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004650:	f7fd fcd8 	bl	8002004 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004656:	e015      	b.n	8004684 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004658:	f7fd fcd4 	bl	8002004 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004666:	d309      	bcc.n	800467c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e014      	b.n	80046a6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e4      	bne.n	8004658 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	b29b      	uxth	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	460b      	mov	r3, r1
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b42      	cmp	r3, #66	; 0x42
 80046ce:	d101      	bne.n	80046d4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
 80046d2:	e04e      	b.n	8004772 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2242      	movs	r2, #66	; 0x42
 80046d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f003 031c 	and.w	r3, r3, #28
 80046ea:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8a1b      	ldrh	r3, [r3, #16]
 80046f0:	02db      	lsls	r3, r3, #11
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800472a:	f7fd fc6b 	bl	8002004 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004730:	e015      	b.n	800475e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004732:	f7fd fc67 	bl	8002004 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d309      	bcc.n	8004756 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00d      	b.n	8004772 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e4      	bne.n	8004732 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_ETH_Start+0x16>
 800478c:	2302      	movs	r3, #2
 800478e:	e01f      	b.n	80047d0 <HAL_ETH_Start+0x56>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fb45 	bl	8004e30 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fb7c 	bl	8004ea4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fc13 	bl	8004fd8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fbb0 	bl	8004f18 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fbdd 	bl	8004f78 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_ETH_Stop+0x16>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e01f      	b.n	800482e <HAL_ETH_Stop+0x56>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fba2 	bl	8004f48 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fbcf 	bl	8004fa8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fb67 	bl	8004ede <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fbe1 	bl	8004fd8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fb27 	bl	8004e6a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_ETH_ConfigMAC+0x1c>
 8004850:	2302      	movs	r3, #2
 8004852:	e0e4      	b.n	8004a1e <HAL_ETH_ConfigMAC+0x1e6>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80b1 	beq.w	80049ce <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4b6c      	ldr	r3, [pc, #432]	; (8004a28 <HAL_ETH_ConfigMAC+0x1f0>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004884:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800488a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004890:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004896:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800489c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80048a2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80048a8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80048ae:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80048b4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80048ba:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80048c0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80048c6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048de:	2001      	movs	r0, #1
 80048e0:	f7fd fb9c 	bl	800201c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80048f4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80048fa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004900:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004906:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800490c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004912:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800491e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004920:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800492a:	2001      	movs	r0, #1
 800492c:	f7fd fb76 	bl	800201c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004940:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800494a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	f64f 7341 	movw	r3, #65345	; 0xff41
 800495a:	4013      	ands	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004968:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800496e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004974:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800497a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004980:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004998:	2001      	movs	r0, #1
 800499a:	f7fd fb3f 	bl	800201c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80049be:	2001      	movs	r0, #1
 80049c0:	f7fd fb2c 	bl	800201c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	61da      	str	r2, [r3, #28]
 80049cc:	e01e      	b.n	8004a0c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80049dc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80049fe:	2001      	movs	r0, #1
 8004a00:	f7fd fb0c 	bl	800201c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	ff20810f 	.word	0xff20810f

08004a2c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b0b0      	sub	sp, #192	; 0xc0
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a48:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a76:	663b      	str	r3, [r7, #96]	; 0x60
 8004a78:	e001      	b.n	8004a7e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a82:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004b00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b04:	4bac      	ldr	r3, [pc, #688]	; (8004db8 <ETH_MACDMAConfig+0x38c>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004b10:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004b14:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004b18:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004b1e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004b22:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004b26:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004b2c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004b30:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004b34:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004b38:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004b3c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004b40:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004b42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b54:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b60:	2001      	movs	r0, #1
 8004b62:	f7fd fa5b 	bl	800201c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b6e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b74:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004b78:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004b7e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004b84:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004b8a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004b90:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004b94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004b9c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b9e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004baa:	2001      	movs	r0, #1
 8004bac:	f7fd fa36 	bl	800201c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bb8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bc2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004bcc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004bd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bdc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004be0:	4013      	ands	r3, r2
 8004be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004bec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004bf0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004bf6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004bfc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004c02:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004c04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004c08:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004c0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c1c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c28:	2001      	movs	r0, #1
 8004c2a:	f7fd f9f7 	bl	800201c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c36:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004c38:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004c3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c52:	2001      	movs	r0, #1
 8004c54:	f7fd f9e2 	bl	800201c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c60:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c6a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004c70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c74:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c82:	2300      	movs	r3, #0
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004c86:	2304      	movs	r3, #4
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004caa:	2300      	movs	r3, #0
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004cbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004cc2:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <ETH_MACDMAConfig+0x390>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004cca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004ccc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004cce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004cd0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004cd2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004cd4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004cd6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004cd8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004cda:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004cdc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004cde:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004ce2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004ce6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004cea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004cec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfe:	3318      	adds	r3, #24
 8004d00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0e:	3318      	adds	r3, #24
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d16:	2001      	movs	r0, #1
 8004d18:	f7fd f980 	bl	800201c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d24:	3318      	adds	r3, #24
 8004d26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d2a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004d30:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004d34:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004d38:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004d3c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d40:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004d42:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004d46:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d54:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7fd f959 	bl	800201c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d76:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10f      	bne.n	8004da0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d88:	331c      	adds	r3, #28
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9c:	331c      	adds	r3, #28
 8004d9e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	461a      	mov	r2, r3
 8004da6:	2100      	movs	r1, #0
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f809 	bl	8004dc0 <ETH_MACAddressConfig>
}
 8004dae:	bf00      	nop
 8004db0:	37c0      	adds	r7, #192	; 0xc0
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	ff20810f 	.word	0xff20810f
 8004dbc:	f8de3f23 	.word	0xf8de3f23

08004dc0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3305      	adds	r3, #5
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	3204      	adds	r2, #4
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <ETH_MACAddressConfig+0x68>)
 8004de2:	4413      	add	r3, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3303      	adds	r3, #3
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	061a      	lsls	r2, r3, #24
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3302      	adds	r3, #2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	4313      	orrs	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <ETH_MACAddressConfig+0x6c>)
 8004e12:	4413      	add	r3, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6013      	str	r3, [r2, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40028040 	.word	0x40028040
 8004e2c:	40028044 	.word	0x40028044

08004e30 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0208 	orr.w	r2, r2, #8
 8004e4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e54:	2001      	movs	r0, #1
 8004e56:	f000 f8e9 	bl	800502c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0208 	bic.w	r2, r2, #8
 8004e84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e8e:	2001      	movs	r0, #1
 8004e90:	f000 f8cc 	bl	800502c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0204 	orr.w	r2, r2, #4
 8004ebe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004ec8:	2001      	movs	r0, #1
 8004eca:	f000 f8af 	bl	800502c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0204 	bic.w	r2, r2, #4
 8004ef8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004f02:	2001      	movs	r0, #1
 8004f04:	f000 f892 	bl	800502c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f28:	3318      	adds	r3, #24
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f38:	3318      	adds	r3, #24
 8004f3a:	601a      	str	r2, [r3, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f58:	3318      	adds	r3, #24
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f68:	3318      	adds	r3, #24
 8004f6a:	601a      	str	r2, [r3, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f88:	3318      	adds	r3, #24
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0202 	orr.w	r2, r2, #2
 8004f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f98:	3318      	adds	r3, #24
 8004f9a:	601a      	str	r2, [r3, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb8:	3318      	adds	r3, #24
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0202 	bic.w	r2, r2, #2
 8004fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc8:	3318      	adds	r3, #24
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fec:	3318      	adds	r3, #24
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffc:	3318      	adds	r3, #24
 8004ffe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005008:	3318      	adds	r3, #24
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800500e:	2001      	movs	r0, #1
 8005010:	f000 f80c 	bl	800502c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501e:	3318      	adds	r3, #24
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <ETH_Delay+0x38>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0b      	ldr	r2, [pc, #44]	; (8005068 <ETH_Delay+0x3c>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0a5b      	lsrs	r3, r3, #9
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005048:	bf00      	nop
  } 
  while (Delay --);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	60fa      	str	r2, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f9      	bne.n	8005048 <ETH_Delay+0x1c>
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000010 	.word	0x20000010
 8005068:	10624dd3 	.word	0x10624dd3

0800506c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	; 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e16b      	b.n	8005360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005088:	2201      	movs	r2, #1
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	f040 815a 	bne.w	800535a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d005      	beq.n	80050be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d130      	bne.n	8005120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	2203      	movs	r2, #3
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f4:	2201      	movs	r2, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 0201 	and.w	r2, r3, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	2b03      	cmp	r3, #3
 800512a:	d017      	beq.n	800515c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	2203      	movs	r2, #3
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d123      	bne.n	80051b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	08da      	lsrs	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3208      	adds	r2, #8
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	220f      	movs	r2, #15
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	08da      	lsrs	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3208      	adds	r2, #8
 80051aa:	69b9      	ldr	r1, [r7, #24]
 80051ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2203      	movs	r2, #3
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0203 	and.w	r2, r3, #3
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80b4 	beq.w	800535a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	4b60      	ldr	r3, [pc, #384]	; (8005378 <HAL_GPIO_Init+0x30c>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	4a5f      	ldr	r2, [pc, #380]	; (8005378 <HAL_GPIO_Init+0x30c>)
 80051fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005200:	6453      	str	r3, [r2, #68]	; 0x44
 8005202:	4b5d      	ldr	r3, [pc, #372]	; (8005378 <HAL_GPIO_Init+0x30c>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520e:	4a5b      	ldr	r2, [pc, #364]	; (800537c <HAL_GPIO_Init+0x310>)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	3302      	adds	r3, #2
 8005216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	220f      	movs	r2, #15
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4013      	ands	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a52      	ldr	r2, [pc, #328]	; (8005380 <HAL_GPIO_Init+0x314>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <HAL_GPIO_Init+0x226>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a51      	ldr	r2, [pc, #324]	; (8005384 <HAL_GPIO_Init+0x318>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d025      	beq.n	800528e <HAL_GPIO_Init+0x222>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a50      	ldr	r2, [pc, #320]	; (8005388 <HAL_GPIO_Init+0x31c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <HAL_GPIO_Init+0x21e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a4f      	ldr	r2, [pc, #316]	; (800538c <HAL_GPIO_Init+0x320>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d019      	beq.n	8005286 <HAL_GPIO_Init+0x21a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a4e      	ldr	r2, [pc, #312]	; (8005390 <HAL_GPIO_Init+0x324>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_GPIO_Init+0x216>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a4d      	ldr	r2, [pc, #308]	; (8005394 <HAL_GPIO_Init+0x328>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00d      	beq.n	800527e <HAL_GPIO_Init+0x212>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a4c      	ldr	r2, [pc, #304]	; (8005398 <HAL_GPIO_Init+0x32c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <HAL_GPIO_Init+0x20e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a4b      	ldr	r2, [pc, #300]	; (800539c <HAL_GPIO_Init+0x330>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d101      	bne.n	8005276 <HAL_GPIO_Init+0x20a>
 8005272:	2307      	movs	r3, #7
 8005274:	e00e      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005276:	2308      	movs	r3, #8
 8005278:	e00c      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800527a:	2306      	movs	r3, #6
 800527c:	e00a      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800527e:	2305      	movs	r3, #5
 8005280:	e008      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005282:	2304      	movs	r3, #4
 8005284:	e006      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005286:	2303      	movs	r3, #3
 8005288:	e004      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800528a:	2302      	movs	r3, #2
 800528c:	e002      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005292:	2300      	movs	r3, #0
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	f002 0203 	and.w	r2, r2, #3
 800529a:	0092      	lsls	r2, r2, #2
 800529c:	4093      	lsls	r3, r2
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a4:	4935      	ldr	r1, [pc, #212]	; (800537c <HAL_GPIO_Init+0x310>)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	3302      	adds	r3, #2
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052b2:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <HAL_GPIO_Init+0x334>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052d6:	4a32      	ldr	r2, [pc, #200]	; (80053a0 <HAL_GPIO_Init+0x334>)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <HAL_GPIO_Init+0x334>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4013      	ands	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_GPIO_Init+0x334>)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005354:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	f67f ae90 	bls.w	8005088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	3724      	adds	r7, #36	; 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	40013800 	.word	0x40013800
 8005380:	40020000 	.word	0x40020000
 8005384:	40020400 	.word	0x40020400
 8005388:	40020800 	.word	0x40020800
 800538c:	40020c00 	.word	0x40020c00
 8005390:	40021000 	.word	0x40021000
 8005394:	40021400 	.word	0x40021400
 8005398:	40021800 	.word	0x40021800
 800539c:	40021c00 	.word	0x40021c00
 80053a0:	40013c00 	.word	0x40013c00

080053a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	887b      	ldrh	r3, [r7, #2]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e001      	b.n	80053c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	807b      	strh	r3, [r7, #2]
 80053e0:	4613      	mov	r3, r2
 80053e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e4:	787b      	ldrb	r3, [r7, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053f0:	e003      	b.n	80053fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053f2:	887b      	ldrh	r3, [r7, #2]
 80053f4:	041a      	lsls	r2, r3, #16
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	619a      	str	r2, [r3, #24]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005418:	887a      	ldrh	r2, [r7, #2]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4013      	ands	r3, r2
 800541e:	041a      	lsls	r2, r3, #16
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	43d9      	mvns	r1, r3
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	400b      	ands	r3, r1
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	619a      	str	r2, [r3, #24]
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e12b      	b.n	80056a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc f992 	bl	800178c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	; 0x24
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800548e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800549e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054a0:	f001 ffd0 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4a81      	ldr	r2, [pc, #516]	; (80056b0 <HAL_I2C_Init+0x274>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d807      	bhi.n	80054c0 <HAL_I2C_Init+0x84>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a80      	ldr	r2, [pc, #512]	; (80056b4 <HAL_I2C_Init+0x278>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	bf94      	ite	ls
 80054b8:	2301      	movls	r3, #1
 80054ba:	2300      	movhi	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e006      	b.n	80054ce <HAL_I2C_Init+0x92>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a7d      	ldr	r2, [pc, #500]	; (80056b8 <HAL_I2C_Init+0x27c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	bf94      	ite	ls
 80054c8:	2301      	movls	r3, #1
 80054ca:	2300      	movhi	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e0e7      	b.n	80056a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a78      	ldr	r2, [pc, #480]	; (80056bc <HAL_I2C_Init+0x280>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0c9b      	lsrs	r3, r3, #18
 80054e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a6a      	ldr	r2, [pc, #424]	; (80056b0 <HAL_I2C_Init+0x274>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d802      	bhi.n	8005510 <HAL_I2C_Init+0xd4>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3301      	adds	r3, #1
 800550e:	e009      	b.n	8005524 <HAL_I2C_Init+0xe8>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	4a69      	ldr	r2, [pc, #420]	; (80056c0 <HAL_I2C_Init+0x284>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	3301      	adds	r3, #1
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	430b      	orrs	r3, r1
 800552a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	495c      	ldr	r1, [pc, #368]	; (80056b0 <HAL_I2C_Init+0x274>)
 8005540:	428b      	cmp	r3, r1
 8005542:	d819      	bhi.n	8005578 <HAL_I2C_Init+0x13c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1e59      	subs	r1, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005552:	1c59      	adds	r1, r3, #1
 8005554:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005558:	400b      	ands	r3, r1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_I2C_Init+0x138>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1e59      	subs	r1, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	fbb1 f3f3 	udiv	r3, r1, r3
 800556c:	3301      	adds	r3, #1
 800556e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005572:	e051      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 8005574:	2304      	movs	r3, #4
 8005576:	e04f      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d111      	bne.n	80055a4 <HAL_I2C_Init+0x168>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e58      	subs	r0, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	440b      	add	r3, r1
 800558e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005592:	3301      	adds	r3, #1
 8005594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e012      	b.n	80055ca <HAL_I2C_Init+0x18e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1e58      	subs	r0, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	0099      	lsls	r1, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ba:	3301      	adds	r3, #1
 80055bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Init+0x196>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e022      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10e      	bne.n	80055f8 <HAL_I2C_Init+0x1bc>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1e58      	subs	r0, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	440b      	add	r3, r1
 80055e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ec:	3301      	adds	r3, #1
 80055ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	e00f      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e58      	subs	r0, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	0099      	lsls	r1, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	fbb0 f3f3 	udiv	r3, r0, r3
 800560e:	3301      	adds	r3, #1
 8005610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	6809      	ldr	r1, [r1, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6911      	ldr	r1, [r2, #16]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68d2      	ldr	r2, [r2, #12]
 8005652:	4311      	orrs	r1, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	430b      	orrs	r3, r1
 800565a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	000186a0 	.word	0x000186a0
 80056b4:	001e847f 	.word	0x001e847f
 80056b8:	003d08ff 	.word	0x003d08ff
 80056bc:	431bde83 	.word	0x431bde83
 80056c0:	10624dd3 	.word	0x10624dd3

080056c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	461a      	mov	r2, r3
 80056d0:	460b      	mov	r3, r1
 80056d2:	817b      	strh	r3, [r7, #10]
 80056d4:	4613      	mov	r3, r2
 80056d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056d8:	f7fc fc94 	bl	8002004 <HAL_GetTick>
 80056dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	f040 80e0 	bne.w	80058ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2319      	movs	r3, #25
 80056f2:	2201      	movs	r2, #1
 80056f4:	4970      	ldr	r1, [pc, #448]	; (80058b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f964 	bl	80059c4 <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
 8005704:	e0d3      	b.n	80058ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_I2C_Master_Transmit+0x50>
 8005710:	2302      	movs	r3, #2
 8005712:	e0cc      	b.n	80058ae <HAL_I2C_Master_Transmit+0x1ea>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d007      	beq.n	800573a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005748:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2221      	movs	r2, #33	; 0x21
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2210      	movs	r2, #16
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	893a      	ldrh	r2, [r7, #8]
 800576a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a50      	ldr	r2, [pc, #320]	; (80058bc <HAL_I2C_Master_Transmit+0x1f8>)
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800577c:	8979      	ldrh	r1, [r7, #10]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f89c 	bl	80058c0 <I2C_MasterRequestWrite>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e08d      	b.n	80058ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057a8:	e066      	b.n	8005878 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	6a39      	ldr	r1, [r7, #32]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f9de 	bl	8005b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d107      	bne.n	80057d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06b      	b.n	80058ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	781a      	ldrb	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b04      	cmp	r3, #4
 8005812:	d11b      	bne.n	800584c <HAL_I2C_Master_Transmit+0x188>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	781a      	ldrb	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	6a39      	ldr	r1, [r7, #32]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9ce 	bl	8005bf2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b04      	cmp	r3, #4
 8005862:	d107      	bne.n	8005874 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005872:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e01a      	b.n	80058ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587c:	2b00      	cmp	r3, #0
 800587e:	d194      	bne.n	80057aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e000      	b.n	80058ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058ac:	2302      	movs	r3, #2
  }
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	00100002 	.word	0x00100002
 80058bc:	ffff0000 	.word	0xffff0000

080058c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	460b      	mov	r3, r1
 80058ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d006      	beq.n	80058ea <I2C_MasterRequestWrite+0x2a>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d003      	beq.n	80058ea <I2C_MasterRequestWrite+0x2a>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058e8:	d108      	bne.n	80058fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e00b      	b.n	8005914 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	2b12      	cmp	r3, #18
 8005902:	d107      	bne.n	8005914 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005912:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f84f 	bl	80059c4 <I2C_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00d      	beq.n	8005948 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593a:	d103      	bne.n	8005944 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005942:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e035      	b.n	80059b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005950:	d108      	bne.n	8005964 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005960:	611a      	str	r2, [r3, #16]
 8005962:	e01b      	b.n	800599c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	11db      	asrs	r3, r3, #7
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0306 	and.w	r3, r3, #6
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f063 030f 	orn	r3, r3, #15
 8005974:	b2da      	uxtb	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	490e      	ldr	r1, [pc, #56]	; (80059bc <I2C_MasterRequestWrite+0xfc>)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f875 	bl	8005a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e010      	b.n	80059b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005992:	897b      	ldrh	r3, [r7, #10]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4907      	ldr	r1, [pc, #28]	; (80059c0 <I2C_MasterRequestWrite+0x100>)
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f865 	bl	8005a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	00010008 	.word	0x00010008
 80059c0:	00010002 	.word	0x00010002

080059c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d4:	e025      	b.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d021      	beq.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc fb11 	bl	8002004 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d116      	bne.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0220 	orr.w	r2, r3, #32
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e023      	b.n	8005a6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10d      	bne.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	43da      	mvns	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4013      	ands	r3, r2
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2301      	moveq	r3, #1
 8005a40:	2300      	movne	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	e00c      	b.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	43da      	mvns	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf0c      	ite	eq
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d0b6      	beq.n	80059d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a80:	e051      	b.n	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a90:	d123      	bne.n	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aaa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f043 0204 	orr.w	r2, r3, #4
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e046      	b.n	8005b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d021      	beq.n	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae2:	f7fc fa8f 	bl	8002004 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d116      	bne.n	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e020      	b.n	8005b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10c      	bne.n	8005b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	43da      	mvns	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	e00b      	b.n	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	43da      	mvns	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d18d      	bne.n	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b7c:	e02d      	b.n	8005bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f878 	bl	8005c74 <I2C_IsAcknowledgeFailed>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e02d      	b.n	8005bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d021      	beq.n	8005bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fc fa35 	bl	8002004 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d116      	bne.n	8005bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e007      	b.n	8005bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b80      	cmp	r3, #128	; 0x80
 8005be6:	d1ca      	bne.n	8005b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bfe:	e02d      	b.n	8005c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f837 	bl	8005c74 <I2C_IsAcknowledgeFailed>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e02d      	b.n	8005c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d021      	beq.n	8005c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c18:	f7fc f9f4 	bl	8002004 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d116      	bne.n	8005c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e007      	b.n	8005c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d1ca      	bne.n	8005c00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8a:	d11b      	bne.n	8005cc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	f043 0204 	orr.w	r2, r3, #4
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e128      	b.n	8005f38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a90      	ldr	r2, [pc, #576]	; (8005f40 <HAL_I2S_Init+0x26c>)
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fb fd8b 	bl	800181c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d1c:	f023 030f 	bic.w	r3, r3, #15
 8005d20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2202      	movs	r2, #2
 8005d28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d060      	beq.n	8005df4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e001      	b.n	8005d44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d40:	2320      	movs	r3, #32
 8005d42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d802      	bhi.n	8005d52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d52:	2001      	movs	r0, #1
 8005d54:	f001 fcb2 	bl	80076bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005d58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d62:	d125      	bne.n	8005db0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d010      	beq.n	8005d8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	3305      	adds	r3, #5
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	e01f      	b.n	8005dce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	461a      	mov	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	3305      	adds	r3, #5
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	e00e      	b.n	8005dce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	3305      	adds	r3, #5
 8005dcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4a5c      	ldr	r2, [pc, #368]	; (8005f44 <HAL_I2S_Init+0x270>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	08db      	lsrs	r3, r3, #3
 8005dd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e003      	b.n	8005dfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005df4:	2302      	movs	r3, #2
 8005df6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d902      	bls.n	8005e08 <HAL_I2S_Init+0x134>
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2bff      	cmp	r3, #255	; 0xff
 8005e06:	d907      	bls.n	8005e18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	f043 0210 	orr.w	r2, r3, #16
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e08f      	b.n	8005f38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	ea42 0103 	orr.w	r1, r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e36:	f023 030f 	bic.w	r3, r3, #15
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6851      	ldr	r1, [r2, #4]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6892      	ldr	r2, [r2, #8]
 8005e42:	4311      	orrs	r1, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	68d2      	ldr	r2, [r2, #12]
 8005e48:	4311      	orrs	r1, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6992      	ldr	r2, [r2, #24]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d161      	bne.n	8005f28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a38      	ldr	r2, [pc, #224]	; (8005f48 <HAL_I2S_Init+0x274>)
 8005e68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a37      	ldr	r2, [pc, #220]	; (8005f4c <HAL_I2S_Init+0x278>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d101      	bne.n	8005e78 <HAL_I2S_Init+0x1a4>
 8005e74:	4b36      	ldr	r3, [pc, #216]	; (8005f50 <HAL_I2S_Init+0x27c>)
 8005e76:	e001      	b.n	8005e7c <HAL_I2S_Init+0x1a8>
 8005e78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	4932      	ldr	r1, [pc, #200]	; (8005f4c <HAL_I2S_Init+0x278>)
 8005e84:	428a      	cmp	r2, r1
 8005e86:	d101      	bne.n	8005e8c <HAL_I2S_Init+0x1b8>
 8005e88:	4a31      	ldr	r2, [pc, #196]	; (8005f50 <HAL_I2S_Init+0x27c>)
 8005e8a:	e001      	b.n	8005e90 <HAL_I2S_Init+0x1bc>
 8005e8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005e90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e94:	f023 030f 	bic.w	r3, r3, #15
 8005e98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2b      	ldr	r2, [pc, #172]	; (8005f4c <HAL_I2S_Init+0x278>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d101      	bne.n	8005ea8 <HAL_I2S_Init+0x1d4>
 8005ea4:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <HAL_I2S_Init+0x27c>)
 8005ea6:	e001      	b.n	8005eac <HAL_I2S_Init+0x1d8>
 8005ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eac:	2202      	movs	r2, #2
 8005eae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a25      	ldr	r2, [pc, #148]	; (8005f4c <HAL_I2S_Init+0x278>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2S_Init+0x1ea>
 8005eba:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <HAL_I2S_Init+0x27c>)
 8005ebc:	e001      	b.n	8005ec2 <HAL_I2S_Init+0x1ee>
 8005ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ece:	d003      	beq.n	8005ed8 <HAL_I2S_Init+0x204>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e001      	b.n	8005ee4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	897b      	ldrh	r3, [r7, #10]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <HAL_I2S_Init+0x278>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d101      	bne.n	8005f20 <HAL_I2S_Init+0x24c>
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <HAL_I2S_Init+0x27c>)
 8005f1e:	e001      	b.n	8005f24 <HAL_I2S_Init+0x250>
 8005f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f24:	897a      	ldrh	r2, [r7, #10]
 8005f26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	080063ff 	.word	0x080063ff
 8005f44:	cccccccd 	.word	0xcccccccd
 8005f48:	08006585 	.word	0x08006585
 8005f4c:	40003800 	.word	0x40003800
 8005f50:	40003400 	.word	0x40003400

08005f54 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f68:	d004      	beq.n	8005f74 <HAL_I2S_DMAStop+0x20>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f040 80d1 	bne.w	8006116 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00f      	beq.n	8005f9c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fc fa57 	bl	8002434 <HAL_DMA_Abort>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f90:	f043 0208 	orr.w	r2, r3, #8
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005f9c:	2364      	movs	r3, #100	; 0x64
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fab5 	bl	8006512 <I2S_WaitFlagStateUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	f043 0201 	orr.w	r2, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005fc6:	2364      	movs	r3, #100	; 0x64
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2180      	movs	r1, #128	; 0x80
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 faa0 	bl	8006512 <I2S_WaitFlagStateUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f043 0201 	orr.w	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffe:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0202 	bic.w	r2, r2, #2
 800601c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b05      	cmp	r3, #5
 8006028:	f040 8165 	bne.w	80062f6 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00f      	beq.n	8006054 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006038:	4618      	mov	r0, r3
 800603a:	f7fc f9fb 	bl	8002434 <HAL_DMA_Abort>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006048:	f043 0208 	orr.w	r2, r3, #8
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a8a      	ldr	r2, [pc, #552]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d101      	bne.n	8006062 <HAL_I2S_DMAStop+0x10e>
 800605e:	4b8a      	ldr	r3, [pc, #552]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006060:	e001      	b.n	8006066 <HAL_I2S_DMAStop+0x112>
 8006062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4985      	ldr	r1, [pc, #532]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 800606e:	428b      	cmp	r3, r1
 8006070:	d101      	bne.n	8006076 <HAL_I2S_DMAStop+0x122>
 8006072:	4b85      	ldr	r3, [pc, #532]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006074:	e001      	b.n	800607a <HAL_I2S_DMAStop+0x126>
 8006076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800607a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a7e      	ldr	r2, [pc, #504]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d101      	bne.n	8006092 <HAL_I2S_DMAStop+0x13e>
 800608e:	4b7e      	ldr	r3, [pc, #504]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006090:	e001      	b.n	8006096 <HAL_I2S_DMAStop+0x142>
 8006092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a79      	ldr	r2, [pc, #484]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_I2S_DMAStop+0x154>
 80060a4:	4b78      	ldr	r3, [pc, #480]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 80060a6:	e001      	b.n	80060ac <HAL_I2S_DMAStop+0x158>
 80060a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a73      	ldr	r2, [pc, #460]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <HAL_I2S_DMAStop+0x16c>
 80060bc:	4b72      	ldr	r3, [pc, #456]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 80060be:	e001      	b.n	80060c4 <HAL_I2S_DMAStop+0x170>
 80060c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	496e      	ldr	r1, [pc, #440]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 80060cc:	428b      	cmp	r3, r1
 80060ce:	d101      	bne.n	80060d4 <HAL_I2S_DMAStop+0x180>
 80060d0:	4b6d      	ldr	r3, [pc, #436]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 80060d2:	e001      	b.n	80060d8 <HAL_I2S_DMAStop+0x184>
 80060d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060fe:	e0fa      	b.n	80062f6 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a5f      	ldr	r2, [pc, #380]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <HAL_I2S_DMAStop+0x1ba>
 800610a:	4b5f      	ldr	r3, [pc, #380]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 800610c:	e001      	b.n	8006112 <HAL_I2S_DMAStop+0x1be>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006114:	e0ef      	b.n	80062f6 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800611e:	d005      	beq.n	800612c <HAL_I2S_DMAStop+0x1d8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006128:	f040 80e5 	bne.w	80062f6 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00f      	beq.n	8006154 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006138:	4618      	mov	r0, r3
 800613a:	f7fc f97b 	bl	8002434 <HAL_DMA_Abort>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	f043 0208 	orr.w	r2, r3, #8
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b05      	cmp	r3, #5
 800615e:	f040 809a 	bne.w	8006296 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00f      	beq.n	800618a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	4618      	mov	r0, r3
 8006170:	f7fc f960 	bl	8002434 <HAL_DMA_Abort>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	f043 0208 	orr.w	r2, r3, #8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800618a:	f7fb ff3b 	bl	8002004 <HAL_GetTick>
 800618e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006190:	e012      	b.n	80061b8 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006192:	f7fb ff37 	bl	8002004 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b64      	cmp	r3, #100	; 0x64
 800619e:	d90b      	bls.n	80061b8 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	f043 0201 	orr.w	r2, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a31      	ldr	r2, [pc, #196]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d101      	bne.n	80061c6 <HAL_I2S_DMAStop+0x272>
 80061c2:	4b31      	ldr	r3, [pc, #196]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 80061c4:	e001      	b.n	80061ca <HAL_I2S_DMAStop+0x276>
 80061c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d1de      	bne.n	8006192 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80061d4:	e012      	b.n	80061fc <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80061d6:	f7fb ff15 	bl	8002004 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b64      	cmp	r3, #100	; 0x64
 80061e2:	d90b      	bls.n	80061fc <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	f043 0201 	orr.w	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a20      	ldr	r2, [pc, #128]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d101      	bne.n	800620a <HAL_I2S_DMAStop+0x2b6>
 8006206:	4b20      	ldr	r3, [pc, #128]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006208:	e001      	b.n	800620e <HAL_I2S_DMAStop+0x2ba>
 800620a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b80      	cmp	r3, #128	; 0x80
 8006216:	d0de      	beq.n	80061d6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a19      	ldr	r2, [pc, #100]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d101      	bne.n	8006226 <HAL_I2S_DMAStop+0x2d2>
 8006222:	4b19      	ldr	r3, [pc, #100]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006224:	e001      	b.n	800622a <HAL_I2S_DMAStop+0x2d6>
 8006226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4914      	ldr	r1, [pc, #80]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 8006232:	428b      	cmp	r3, r1
 8006234:	d101      	bne.n	800623a <HAL_I2S_DMAStop+0x2e6>
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006238:	e001      	b.n	800623e <HAL_I2S_DMAStop+0x2ea>
 800623a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a0d      	ldr	r2, [pc, #52]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_I2S_DMAStop+0x302>
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006254:	e001      	b.n	800625a <HAL_I2S_DMAStop+0x306>
 8006256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a07      	ldr	r2, [pc, #28]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d101      	bne.n	800626e <HAL_I2S_DMAStop+0x31a>
 800626a:	4b07      	ldr	r3, [pc, #28]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 800626c:	e001      	b.n	8006272 <HAL_I2S_DMAStop+0x31e>
 800626e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4902      	ldr	r1, [pc, #8]	; (8006284 <HAL_I2S_DMAStop+0x330>)
 800627a:	428b      	cmp	r3, r1
 800627c:	d106      	bne.n	800628c <HAL_I2S_DMAStop+0x338>
 800627e:	4b02      	ldr	r3, [pc, #8]	; (8006288 <HAL_I2S_DMAStop+0x334>)
 8006280:	e006      	b.n	8006290 <HAL_I2S_DMAStop+0x33c>
 8006282:	bf00      	nop
 8006284:	40003800 	.word	0x40003800
 8006288:	40003400 	.word	0x40003400
 800628c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006290:	f022 0202 	bic.w	r2, r2, #2
 8006294:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d4:	d10c      	bne.n	80062f0 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e002      	b.n	80062f6 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80062fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10e      	bne.n	8006398 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006388:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff ffb8 	bl	8006308 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	b292      	uxth	r2, r2
 80063b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10e      	bne.n	80063f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ff93 	bl	800631c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b04      	cmp	r3, #4
 8006418:	d13a      	bne.n	8006490 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b01      	cmp	r3, #1
 8006422:	d109      	bne.n	8006438 <I2S_IRQHandler+0x3a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d102      	bne.n	8006438 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff ffb4 	bl	80063a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d126      	bne.n	8006490 <I2S_IRQHandler+0x92>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b20      	cmp	r3, #32
 800644e:	d11f      	bne.n	8006490 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800645e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	f043 0202 	orr.w	r2, r3, #2
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff ff50 	bl	8006330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b03      	cmp	r3, #3
 800649a:	d136      	bne.n	800650a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d109      	bne.n	80064ba <I2S_IRQHandler+0xbc>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d102      	bne.n	80064ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff45 	bl	8006344 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d122      	bne.n	800650a <I2S_IRQHandler+0x10c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d11b      	bne.n	800650a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fc:	f043 0204 	orr.w	r2, r3, #4
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff13 	bl	8006330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800650a:	bf00      	nop
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	603b      	str	r3, [r7, #0]
 800651e:	4613      	mov	r3, r2
 8006520:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006522:	f7fb fd6f 	bl	8002004 <HAL_GetTick>
 8006526:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006528:	e018      	b.n	800655c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d014      	beq.n	800655c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006532:	f7fb fd67 	bl	8002004 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d902      	bls.n	8006548 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e00f      	b.n	800657c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4013      	ands	r3, r2
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	429a      	cmp	r2, r3
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	429a      	cmp	r2, r3
 8006578:	d1d7      	bne.n	800652a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4aa2      	ldr	r2, [pc, #648]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d101      	bne.n	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800659e:	4ba2      	ldr	r3, [pc, #648]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065a0:	e001      	b.n	80065a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80065a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a9b      	ldr	r2, [pc, #620]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d101      	bne.n	80065c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80065bc:	4b9a      	ldr	r3, [pc, #616]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065be:	e001      	b.n	80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80065c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d004      	beq.n	80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 8099 	bne.w	800670e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d107      	bne.n	80065f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f925 	bl	8006840 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9c8 	bl	80069a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d13a      	bne.n	8006690 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d035      	beq.n	8006690 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a7e      	ldr	r2, [pc, #504]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800662e:	4b7e      	ldr	r3, [pc, #504]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006630:	e001      	b.n	8006636 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4979      	ldr	r1, [pc, #484]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800663e:	428b      	cmp	r3, r1
 8006640:	d101      	bne.n	8006646 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006642:	4b79      	ldr	r3, [pc, #484]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006644:	e001      	b.n	800664a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006646:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800664a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800664e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800665e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	f043 0202 	orr.w	r2, r3, #2
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fe50 	bl	8006330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b08      	cmp	r3, #8
 8006698:	f040 80be 	bne.w	8006818 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80b8 	beq.w	8006818 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a59      	ldr	r2, [pc, #356]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80066c2:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066c4:	e001      	b.n	80066ca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80066c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4954      	ldr	r1, [pc, #336]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066d2:	428b      	cmp	r3, r1
 80066d4:	d101      	bne.n	80066da <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80066d6:	4b54      	ldr	r3, [pc, #336]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066d8:	e001      	b.n	80066de <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80066da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066e2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80066e4:	2300      	movs	r3, #0
 80066e6:	60bb      	str	r3, [r7, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	f043 0204 	orr.w	r2, r3, #4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff fe12 	bl	8006330 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800670c:	e084      	b.n	8006818 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b02      	cmp	r3, #2
 8006716:	d107      	bne.n	8006728 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8be 	bl	80068a4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d107      	bne.n	8006742 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8fd 	bl	800693c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b40      	cmp	r3, #64	; 0x40
 800674a:	d12f      	bne.n	80067ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d02a      	beq.n	80067ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006764:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d101      	bne.n	8006774 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006770:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006772:	e001      	b.n	8006778 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4929      	ldr	r1, [pc, #164]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006780:	428b      	cmp	r3, r1
 8006782:	d101      	bne.n	8006788 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006784:	4b28      	ldr	r3, [pc, #160]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006786:	e001      	b.n	800678c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800678c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006790:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	f043 0202 	orr.w	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fdc2 	bl	8006330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d131      	bne.n	800681a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d02c      	beq.n	800681a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a17      	ldr	r2, [pc, #92]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d101      	bne.n	80067ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80067ca:	4b17      	ldr	r3, [pc, #92]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067cc:	e001      	b.n	80067d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80067ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4912      	ldr	r1, [pc, #72]	; (8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067da:	428b      	cmp	r3, r1
 80067dc:	d101      	bne.n	80067e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067e0:	e001      	b.n	80067e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80067e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067fa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006808:	f043 0204 	orr.w	r2, r3, #4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fd8d 	bl	8006330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006816:	e000      	b.n	800681a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006818:	bf00      	nop
}
 800681a:	bf00      	nop
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40003800 	.word	0x40003800
 8006828:	40003400 	.word	0x40003400

0800682c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	1c99      	adds	r1, r3, #2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6251      	str	r1, [r2, #36]	; 0x24
 8006852:	881a      	ldrh	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d113      	bne.n	800689a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006880:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff ffc9 	bl	800682c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	1c99      	adds	r1, r3, #2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6251      	str	r1, [r2, #36]	; 0x24
 80068b6:	8819      	ldrh	r1, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <I2SEx_TxISR_I2SExt+0x90>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <I2SEx_TxISR_I2SExt+0x22>
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <I2SEx_TxISR_I2SExt+0x94>)
 80068c4:	e001      	b.n	80068ca <I2SEx_TxISR_I2SExt+0x26>
 80068c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ca:	460a      	mov	r2, r1
 80068cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d121      	bne.n	800692a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a12      	ldr	r2, [pc, #72]	; (8006934 <I2SEx_TxISR_I2SExt+0x90>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d101      	bne.n	80068f4 <I2SEx_TxISR_I2SExt+0x50>
 80068f0:	4b11      	ldr	r3, [pc, #68]	; (8006938 <I2SEx_TxISR_I2SExt+0x94>)
 80068f2:	e001      	b.n	80068f8 <I2SEx_TxISR_I2SExt+0x54>
 80068f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	490d      	ldr	r1, [pc, #52]	; (8006934 <I2SEx_TxISR_I2SExt+0x90>)
 8006900:	428b      	cmp	r3, r1
 8006902:	d101      	bne.n	8006908 <I2SEx_TxISR_I2SExt+0x64>
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <I2SEx_TxISR_I2SExt+0x94>)
 8006906:	e001      	b.n	800690c <I2SEx_TxISR_I2SExt+0x68>
 8006908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800690c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006910:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff81 	bl	800682c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40003800 	.word	0x40003800
 8006938:	40003400 	.word	0x40003400

0800693c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68d8      	ldr	r0, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	1c99      	adds	r1, r3, #2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006954:	b282      	uxth	r2, r0
 8006956:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d113      	bne.n	8006998 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800697e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff ff4a 	bl	800682c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a20      	ldr	r2, [pc, #128]	; (8006a30 <I2SEx_RxISR_I2SExt+0x90>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <I2SEx_RxISR_I2SExt+0x16>
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <I2SEx_RxISR_I2SExt+0x94>)
 80069b4:	e001      	b.n	80069ba <I2SEx_RxISR_I2SExt+0x1a>
 80069b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ba:	68d8      	ldr	r0, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	1c99      	adds	r1, r3, #2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80069c6:	b282      	uxth	r2, r0
 80069c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d121      	bne.n	8006a26 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a12      	ldr	r2, [pc, #72]	; (8006a30 <I2SEx_RxISR_I2SExt+0x90>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <I2SEx_RxISR_I2SExt+0x50>
 80069ec:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <I2SEx_RxISR_I2SExt+0x94>)
 80069ee:	e001      	b.n	80069f4 <I2SEx_RxISR_I2SExt+0x54>
 80069f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	490d      	ldr	r1, [pc, #52]	; (8006a30 <I2SEx_RxISR_I2SExt+0x90>)
 80069fc:	428b      	cmp	r3, r1
 80069fe:	d101      	bne.n	8006a04 <I2SEx_RxISR_I2SExt+0x64>
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <I2SEx_RxISR_I2SExt+0x94>)
 8006a02:	e001      	b.n	8006a08 <I2SEx_RxISR_I2SExt+0x68>
 8006a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a0c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff ff03 	bl	800682c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40003800 	.word	0x40003800
 8006a34:	40003400 	.word	0x40003400

08006a38 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e034      	b.n	8006ab4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006a52:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f245 5255 	movw	r2, #21845	; 0x5555
 8006a5c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6852      	ldr	r2, [r2, #4]
 8006a66:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6892      	ldr	r2, [r2, #8]
 8006a70:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006a72:	f7fb fac7 	bl	8002004 <HAL_GetTick>
 8006a76:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a78:	e00f      	b.n	8006a9a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006a7a:	f7fb fac3 	bl	8002004 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b31      	cmp	r3, #49	; 0x31
 8006a86:	d908      	bls.n	8006a9a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e00c      	b.n	8006ab4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e8      	bne.n	8006a7a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006acc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e264      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d075      	beq.n	8006be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006afa:	4ba3      	ldr	r3, [pc, #652]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d00c      	beq.n	8006b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b06:	4ba0      	ldr	r3, [pc, #640]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d112      	bne.n	8006b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b12:	4b9d      	ldr	r3, [pc, #628]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1e:	d10b      	bne.n	8006b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b20:	4b99      	ldr	r3, [pc, #612]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05b      	beq.n	8006be4 <HAL_RCC_OscConfig+0x108>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d157      	bne.n	8006be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e23f      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b40:	d106      	bne.n	8006b50 <HAL_RCC_OscConfig+0x74>
 8006b42:	4b91      	ldr	r3, [pc, #580]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a90      	ldr	r2, [pc, #576]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e01d      	b.n	8006b8c <HAL_RCC_OscConfig+0xb0>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCC_OscConfig+0x98>
 8006b5a:	4b8b      	ldr	r3, [pc, #556]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a8a      	ldr	r2, [pc, #552]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	4b88      	ldr	r3, [pc, #544]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a87      	ldr	r2, [pc, #540]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e00b      	b.n	8006b8c <HAL_RCC_OscConfig+0xb0>
 8006b74:	4b84      	ldr	r3, [pc, #528]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a83      	ldr	r2, [pc, #524]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4b81      	ldr	r3, [pc, #516]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a80      	ldr	r2, [pc, #512]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d013      	beq.n	8006bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b94:	f7fb fa36 	bl	8002004 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b9c:	f7fb fa32 	bl	8002004 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b64      	cmp	r3, #100	; 0x64
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e204      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	4b76      	ldr	r3, [pc, #472]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0f0      	beq.n	8006b9c <HAL_RCC_OscConfig+0xc0>
 8006bba:	e014      	b.n	8006be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbc:	f7fb fa22 	bl	8002004 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bc4:	f7fb fa1e 	bl	8002004 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b64      	cmp	r3, #100	; 0x64
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e1f0      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd6:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0xe8>
 8006be2:	e000      	b.n	8006be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d063      	beq.n	8006cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bf2:	4b65      	ldr	r3, [pc, #404]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bfe:	4b62      	ldr	r3, [pc, #392]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d11c      	bne.n	8006c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c0a:	4b5f      	ldr	r3, [pc, #380]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d116      	bne.n	8006c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c16:	4b5c      	ldr	r3, [pc, #368]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_RCC_OscConfig+0x152>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d001      	beq.n	8006c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e1c4      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2e:	4b56      	ldr	r3, [pc, #344]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	4952      	ldr	r1, [pc, #328]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c42:	e03a      	b.n	8006cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d020      	beq.n	8006c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c4c:	4b4f      	ldr	r3, [pc, #316]	; (8006d8c <HAL_RCC_OscConfig+0x2b0>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fb f9d7 	bl	8002004 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c5a:	f7fb f9d3 	bl	8002004 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e1a5      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6c:	4b46      	ldr	r3, [pc, #280]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c78:	4b43      	ldr	r3, [pc, #268]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4940      	ldr	r1, [pc, #256]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]
 8006c8c:	e015      	b.n	8006cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c8e:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <HAL_RCC_OscConfig+0x2b0>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fb f9b6 	bl	8002004 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c9c:	f7fb f9b2 	bl	8002004 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e184      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d030      	beq.n	8006d28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cce:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <HAL_RCC_OscConfig+0x2b4>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd4:	f7fb f996 	bl	8002004 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cdc:	f7fb f992 	bl	8002004 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e164      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cee:	4b26      	ldr	r3, [pc, #152]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0x200>
 8006cfa:	e015      	b.n	8006d28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cfc:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <HAL_RCC_OscConfig+0x2b4>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d02:	f7fb f97f 	bl	8002004 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d0a:	f7fb f97b 	bl	8002004 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e14d      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f0      	bne.n	8006d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80a0 	beq.w	8006e76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3a:	4b13      	ldr	r3, [pc, #76]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10f      	bne.n	8006d66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	4a0e      	ldr	r2, [pc, #56]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d54:	6413      	str	r3, [r2, #64]	; 0x40
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <HAL_RCC_OscConfig+0x2ac>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	60bb      	str	r3, [r7, #8]
 8006d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <HAL_RCC_OscConfig+0x2b8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d121      	bne.n	8006db6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <HAL_RCC_OscConfig+0x2b8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <HAL_RCC_OscConfig+0x2b8>)
 8006d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d7e:	f7fb f941 	bl	8002004 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d84:	e011      	b.n	8006daa <HAL_RCC_OscConfig+0x2ce>
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	42470000 	.word	0x42470000
 8006d90:	42470e80 	.word	0x42470e80
 8006d94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d98:	f7fb f934 	bl	8002004 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e106      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006daa:	4b85      	ldr	r3, [pc, #532]	; (8006fc0 <HAL_RCC_OscConfig+0x4e4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d106      	bne.n	8006dcc <HAL_RCC_OscConfig+0x2f0>
 8006dbe:	4b81      	ldr	r3, [pc, #516]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4a80      	ldr	r2, [pc, #512]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dca:	e01c      	b.n	8006e06 <HAL_RCC_OscConfig+0x32a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b05      	cmp	r3, #5
 8006dd2:	d10c      	bne.n	8006dee <HAL_RCC_OscConfig+0x312>
 8006dd4:	4b7b      	ldr	r3, [pc, #492]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	4a7a      	ldr	r2, [pc, #488]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006dda:	f043 0304 	orr.w	r3, r3, #4
 8006dde:	6713      	str	r3, [r2, #112]	; 0x70
 8006de0:	4b78      	ldr	r3, [pc, #480]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de4:	4a77      	ldr	r2, [pc, #476]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	6713      	str	r3, [r2, #112]	; 0x70
 8006dec:	e00b      	b.n	8006e06 <HAL_RCC_OscConfig+0x32a>
 8006dee:	4b75      	ldr	r3, [pc, #468]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a74      	ldr	r2, [pc, #464]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfa:	4b72      	ldr	r3, [pc, #456]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	4a71      	ldr	r2, [pc, #452]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006e00:	f023 0304 	bic.w	r3, r3, #4
 8006e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d015      	beq.n	8006e3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0e:	f7fb f8f9 	bl	8002004 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e14:	e00a      	b.n	8006e2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e16:	f7fb f8f5 	bl	8002004 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e0c5      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e2c:	4b65      	ldr	r3, [pc, #404]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0ee      	beq.n	8006e16 <HAL_RCC_OscConfig+0x33a>
 8006e38:	e014      	b.n	8006e64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e3a:	f7fb f8e3 	bl	8002004 <HAL_GetTick>
 8006e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e42:	f7fb f8df 	bl	8002004 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e0af      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e58:	4b5a      	ldr	r3, [pc, #360]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1ee      	bne.n	8006e42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d105      	bne.n	8006e76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e6a:	4b56      	ldr	r3, [pc, #344]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	4a55      	ldr	r2, [pc, #340]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 809b 	beq.w	8006fb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e80:	4b50      	ldr	r3, [pc, #320]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d05c      	beq.n	8006f46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d141      	bne.n	8006f18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e94:	4b4c      	ldr	r3, [pc, #304]	; (8006fc8 <HAL_RCC_OscConfig+0x4ec>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9a:	f7fb f8b3 	bl	8002004 <HAL_GetTick>
 8006e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea2:	f7fb f8af 	bl	8002004 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e081      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eb4:	4b43      	ldr	r3, [pc, #268]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f0      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	019b      	lsls	r3, r3, #6
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	061b      	lsls	r3, r3, #24
 8006ee4:	4937      	ldr	r1, [pc, #220]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eea:	4b37      	ldr	r3, [pc, #220]	; (8006fc8 <HAL_RCC_OscConfig+0x4ec>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef0:	f7fb f888 	bl	8002004 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef8:	f7fb f884 	bl	8002004 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e056      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f0a:	4b2e      	ldr	r3, [pc, #184]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f0      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x41c>
 8006f16:	e04e      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f18:	4b2b      	ldr	r3, [pc, #172]	; (8006fc8 <HAL_RCC_OscConfig+0x4ec>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1e:	f7fb f871 	bl	8002004 <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f26:	f7fb f86d 	bl	8002004 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e03f      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f38:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f0      	bne.n	8006f26 <HAL_RCC_OscConfig+0x44a>
 8006f44:	e037      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e032      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <HAL_RCC_OscConfig+0x4e8>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d028      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d121      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d11a      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f82:	4013      	ands	r3, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d111      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d107      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d001      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40007000 	.word	0x40007000
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	42470060 	.word	0x42470060

08006fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0cc      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe0:	4b68      	ldr	r3, [pc, #416]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d90c      	bls.n	8007008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fee:	4b65      	ldr	r3, [pc, #404]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff6:	4b63      	ldr	r3, [pc, #396]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0b8      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d020      	beq.n	8007056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007020:	4b59      	ldr	r3, [pc, #356]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4a58      	ldr	r2, [pc, #352]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800702a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007038:	4b53      	ldr	r3, [pc, #332]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	4a52      	ldr	r2, [pc, #328]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007044:	4b50      	ldr	r3, [pc, #320]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	494d      	ldr	r1, [pc, #308]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007052:	4313      	orrs	r3, r2
 8007054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d044      	beq.n	80070ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d107      	bne.n	800707a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706a:	4b47      	ldr	r3, [pc, #284]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d119      	bne.n	80070aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e07f      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d003      	beq.n	800708a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708a:	4b3f      	ldr	r3, [pc, #252]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e06f      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800709a:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e067      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070aa:	4b37      	ldr	r3, [pc, #220]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f023 0203 	bic.w	r2, r3, #3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	4934      	ldr	r1, [pc, #208]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070bc:	f7fa ffa2 	bl	8002004 <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c2:	e00a      	b.n	80070da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c4:	f7fa ff9e 	bl	8002004 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e04f      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070da:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 020c 	and.w	r2, r3, #12
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d1eb      	bne.n	80070c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070ec:	4b25      	ldr	r3, [pc, #148]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d20c      	bcs.n	8007114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fa:	4b22      	ldr	r3, [pc, #136]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007102:	4b20      	ldr	r3, [pc, #128]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d001      	beq.n	8007114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e032      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007120:	4b19      	ldr	r3, [pc, #100]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4916      	ldr	r1, [pc, #88]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	4313      	orrs	r3, r2
 8007130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800713e:	4b12      	ldr	r3, [pc, #72]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	490e      	ldr	r1, [pc, #56]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	4313      	orrs	r3, r2
 8007150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007152:	f000 f889 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 8007156:	4602      	mov	r2, r0
 8007158:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	091b      	lsrs	r3, r3, #4
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	490a      	ldr	r1, [pc, #40]	; (800718c <HAL_RCC_ClockConfig+0x1c0>)
 8007164:	5ccb      	ldrb	r3, [r1, r3]
 8007166:	fa22 f303 	lsr.w	r3, r2, r3
 800716a:	4a09      	ldr	r2, [pc, #36]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 800716c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f7fa fd54 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40023c00 	.word	0x40023c00
 8007188:	40023800 	.word	0x40023800
 800718c:	0804e1f4 	.word	0x0804e1f4
 8007190:	20000010 	.word	0x20000010
 8007194:	20000014 	.word	0x20000014

08007198 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	; 0x30
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d129      	bne.n	80071fe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	4b2b      	ldr	r3, [pc, #172]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	4a2a      	ldr	r2, [pc, #168]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ba:	4b28      	ldr	r3, [pc, #160]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80071c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071cc:	2302      	movs	r3, #2
 80071ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d0:	2303      	movs	r3, #3
 80071d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80071d8:	2300      	movs	r3, #0
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80071dc:	f107 031c 	add.w	r3, r7, #28
 80071e0:	4619      	mov	r1, r3
 80071e2:	481f      	ldr	r0, [pc, #124]	; (8007260 <HAL_RCC_MCOConfig+0xc8>)
 80071e4:	f7fd ff42 	bl	800506c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	430b      	orrs	r3, r1
 80071f6:	4919      	ldr	r1, [pc, #100]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80071fc:	e029      	b.n	8007252 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	4b16      	ldr	r3, [pc, #88]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	4a15      	ldr	r2, [pc, #84]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 8007208:	f043 0304 	orr.w	r3, r3, #4
 800720c:	6313      	str	r3, [r2, #48]	; 0x30
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800721a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800721e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007220:	2302      	movs	r3, #2
 8007222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007224:	2303      	movs	r3, #3
 8007226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007228:	2300      	movs	r3, #0
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800722c:	2300      	movs	r3, #0
 800722e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007230:	f107 031c 	add.w	r3, r7, #28
 8007234:	4619      	mov	r1, r3
 8007236:	480b      	ldr	r0, [pc, #44]	; (8007264 <HAL_RCC_MCOConfig+0xcc>)
 8007238:	f7fd ff18 	bl	800506c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800723c:	4b07      	ldr	r3, [pc, #28]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	00d9      	lsls	r1, r3, #3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	430b      	orrs	r3, r1
 800724c:	4903      	ldr	r1, [pc, #12]	; (800725c <HAL_RCC_MCOConfig+0xc4>)
 800724e:	4313      	orrs	r3, r2
 8007250:	608b      	str	r3, [r1, #8]
}
 8007252:	bf00      	nop
 8007254:	3730      	adds	r7, #48	; 0x30
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40023800 	.word	0x40023800
 8007260:	40020000 	.word	0x40020000
 8007264:	40020800 	.word	0x40020800

08007268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	607b      	str	r3, [r7, #4]
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	2300      	movs	r3, #0
 800727a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007280:	4b67      	ldr	r3, [pc, #412]	; (8007420 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 030c 	and.w	r3, r3, #12
 8007288:	2b08      	cmp	r3, #8
 800728a:	d00d      	beq.n	80072a8 <HAL_RCC_GetSysClockFreq+0x40>
 800728c:	2b08      	cmp	r3, #8
 800728e:	f200 80bd 	bhi.w	800740c <HAL_RCC_GetSysClockFreq+0x1a4>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_RCC_GetSysClockFreq+0x34>
 8007296:	2b04      	cmp	r3, #4
 8007298:	d003      	beq.n	80072a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800729a:	e0b7      	b.n	800740c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800729c:	4b61      	ldr	r3, [pc, #388]	; (8007424 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800729e:	60bb      	str	r3, [r7, #8]
       break;
 80072a0:	e0b7      	b.n	8007412 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072a2:	4b61      	ldr	r3, [pc, #388]	; (8007428 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80072a4:	60bb      	str	r3, [r7, #8]
      break;
 80072a6:	e0b4      	b.n	8007412 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072a8:	4b5d      	ldr	r3, [pc, #372]	; (8007420 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072b2:	4b5b      	ldr	r3, [pc, #364]	; (8007420 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d04d      	beq.n	800735a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072be:	4b58      	ldr	r3, [pc, #352]	; (8007420 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	099b      	lsrs	r3, r3, #6
 80072c4:	461a      	mov	r2, r3
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072ce:	f04f 0100 	mov.w	r1, #0
 80072d2:	ea02 0800 	and.w	r8, r2, r0
 80072d6:	ea03 0901 	and.w	r9, r3, r1
 80072da:	4640      	mov	r0, r8
 80072dc:	4649      	mov	r1, r9
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	014b      	lsls	r3, r1, #5
 80072e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072ec:	0142      	lsls	r2, r0, #5
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	ebb0 0008 	subs.w	r0, r0, r8
 80072f6:	eb61 0109 	sbc.w	r1, r1, r9
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	018b      	lsls	r3, r1, #6
 8007304:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007308:	0182      	lsls	r2, r0, #6
 800730a:	1a12      	subs	r2, r2, r0
 800730c:	eb63 0301 	sbc.w	r3, r3, r1
 8007310:	f04f 0000 	mov.w	r0, #0
 8007314:	f04f 0100 	mov.w	r1, #0
 8007318:	00d9      	lsls	r1, r3, #3
 800731a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800731e:	00d0      	lsls	r0, r2, #3
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	eb12 0208 	adds.w	r2, r2, r8
 8007328:	eb43 0309 	adc.w	r3, r3, r9
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	f04f 0100 	mov.w	r1, #0
 8007334:	0259      	lsls	r1, r3, #9
 8007336:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800733a:	0250      	lsls	r0, r2, #9
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	461a      	mov	r2, r3
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	f7f8 ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4613      	mov	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e04a      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800735a:	4b31      	ldr	r3, [pc, #196]	; (8007420 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	099b      	lsrs	r3, r3, #6
 8007360:	461a      	mov	r2, r3
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	f240 10ff 	movw	r0, #511	; 0x1ff
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	ea02 0400 	and.w	r4, r2, r0
 8007372:	ea03 0501 	and.w	r5, r3, r1
 8007376:	4620      	mov	r0, r4
 8007378:	4629      	mov	r1, r5
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	f04f 0300 	mov.w	r3, #0
 8007382:	014b      	lsls	r3, r1, #5
 8007384:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007388:	0142      	lsls	r2, r0, #5
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	1b00      	subs	r0, r0, r4
 8007390:	eb61 0105 	sbc.w	r1, r1, r5
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	018b      	lsls	r3, r1, #6
 800739e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80073a2:	0182      	lsls	r2, r0, #6
 80073a4:	1a12      	subs	r2, r2, r0
 80073a6:	eb63 0301 	sbc.w	r3, r3, r1
 80073aa:	f04f 0000 	mov.w	r0, #0
 80073ae:	f04f 0100 	mov.w	r1, #0
 80073b2:	00d9      	lsls	r1, r3, #3
 80073b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073b8:	00d0      	lsls	r0, r2, #3
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	1912      	adds	r2, r2, r4
 80073c0:	eb45 0303 	adc.w	r3, r5, r3
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f04f 0100 	mov.w	r1, #0
 80073cc:	0299      	lsls	r1, r3, #10
 80073ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073d2:	0290      	lsls	r0, r2, #10
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4610      	mov	r0, r2
 80073da:	4619      	mov	r1, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	461a      	mov	r2, r3
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	f7f8 ff5c 	bl	80002a0 <__aeabi_uldivmod>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4613      	mov	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	3301      	adds	r3, #1
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	60bb      	str	r3, [r7, #8]
      break;
 800740a:	e002      	b.n	8007412 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800740e:	60bb      	str	r3, [r7, #8]
      break;
 8007410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007412:	68bb      	ldr	r3, [r7, #8]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800741e:	bf00      	nop
 8007420:	40023800 	.word	0x40023800
 8007424:	00f42400 	.word	0x00f42400
 8007428:	007a1200 	.word	0x007a1200

0800742c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007430:	4b03      	ldr	r3, [pc, #12]	; (8007440 <HAL_RCC_GetHCLKFreq+0x14>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000010 	.word	0x20000010

08007444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007448:	f7ff fff0 	bl	800742c <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0a9b      	lsrs	r3, r3, #10
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4903      	ldr	r1, [pc, #12]	; (8007468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007460:	4618      	mov	r0, r3
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40023800 	.word	0x40023800
 8007468:	0804e204 	.word	0x0804e204

0800746c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007470:	f7ff ffdc 	bl	800742c <HAL_RCC_GetHCLKFreq>
 8007474:	4602      	mov	r2, r0
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	0b5b      	lsrs	r3, r3, #13
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	4903      	ldr	r1, [pc, #12]	; (8007490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007482:	5ccb      	ldrb	r3, [r1, r3]
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007488:	4618      	mov	r0, r3
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40023800 	.word	0x40023800
 8007490:	0804e204 	.word	0x0804e204

08007494 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	220f      	movs	r2, #15
 80074a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074a4:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <HAL_RCC_GetClockConfig+0x5c>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 0203 	and.w	r2, r3, #3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <HAL_RCC_GetClockConfig+0x5c>)
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074bc:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <HAL_RCC_GetClockConfig+0x5c>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <HAL_RCC_GetClockConfig+0x5c>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	08db      	lsrs	r3, r3, #3
 80074ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074d6:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <HAL_RCC_GetClockConfig+0x60>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0207 	and.w	r2, r3, #7
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	601a      	str	r2, [r3, #0]
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40023800 	.word	0x40023800
 80074f4:	40023c00 	.word	0x40023c00

080074f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800751c:	2b00      	cmp	r3, #0
 800751e:	d035      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007520:	4b62      	ldr	r3, [pc, #392]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007526:	f7fa fd6d 	bl	8002004 <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800752c:	e008      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800752e:	f7fa fd69 	bl	8002004 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d901      	bls.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e0b0      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007540:	4b5b      	ldr	r3, [pc, #364]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1f0      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	019a      	lsls	r2, r3, #6
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	071b      	lsls	r3, r3, #28
 8007558:	4955      	ldr	r1, [pc, #340]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007560:	4b52      	ldr	r3, [pc, #328]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007566:	f7fa fd4d 	bl	8002004 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800756c:	e008      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800756e:	f7fa fd49 	bl	8002004 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e090      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007580:	4b4b      	ldr	r3, [pc, #300]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f0      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 8083 	beq.w	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	4b44      	ldr	r3, [pc, #272]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	4a43      	ldr	r2, [pc, #268]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6413      	str	r3, [r2, #64]	; 0x40
 80075aa:	4b41      	ldr	r3, [pc, #260]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075b6:	4b3f      	ldr	r3, [pc, #252]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a3e      	ldr	r2, [pc, #248]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075c2:	f7fa fd1f 	bl	8002004 <HAL_GetTick>
 80075c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075c8:	e008      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075ca:	f7fa fd1b 	bl	8002004 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e062      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075dc:	4b35      	ldr	r3, [pc, #212]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075e8:	4b31      	ldr	r3, [pc, #196]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02f      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d028      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007606:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800760e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007610:	4b29      	ldr	r3, [pc, #164]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007616:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800761c:	4a24      	ldr	r2, [pc, #144]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007622:	4b23      	ldr	r3, [pc, #140]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	d114      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800762e:	f7fa fce9 	bl	8002004 <HAL_GetTick>
 8007632:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007634:	e00a      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007636:	f7fa fce5 	bl	8002004 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f241 3288 	movw	r2, #5000	; 0x1388
 8007644:	4293      	cmp	r3, r2
 8007646:	d901      	bls.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e02a      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800764c:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0ee      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007664:	d10d      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767a:	490d      	ldr	r1, [pc, #52]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800767c:	4313      	orrs	r3, r2
 800767e:	608b      	str	r3, [r1, #8]
 8007680:	e005      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007682:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007688:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800768c:	6093      	str	r3, [r2, #8]
 800768e:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800769a:	4905      	ldr	r1, [pc, #20]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800769c:	4313      	orrs	r3, r2
 800769e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	42470068 	.word	0x42470068
 80076b0:	40023800 	.word	0x40023800
 80076b4:	40007000 	.word	0x40007000
 80076b8:	42470e40 	.word	0x42470e40

080076bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d13e      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80076da:	4b23      	ldr	r3, [pc, #140]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d12f      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80076f0:	4b1e      	ldr	r3, [pc, #120]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076f2:	617b      	str	r3, [r7, #20]
          break;
 80076f4:	e02f      	b.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076f6:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007702:	d108      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007704:	4b18      	ldr	r3, [pc, #96]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800770c:	4a18      	ldr	r2, [pc, #96]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	e007      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800771e:	4a15      	ldr	r2, [pc, #84]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007726:	4b10      	ldr	r3, [pc, #64]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800772c:	099b      	lsrs	r3, r3, #6
 800772e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800773c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007740:	0f1b      	lsrs	r3, r3, #28
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	fbb2 f3f3 	udiv	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]
          break;
 800774e:	e002      	b.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
          break;
 8007754:	bf00      	nop
        }
      }
      break;
 8007756:	bf00      	nop
    }
  }
  return frequency;
 8007758:	697b      	ldr	r3, [r7, #20]
}
 800775a:	4618      	mov	r0, r3
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40023800 	.word	0x40023800
 800776c:	00bb8000 	.word	0x00bb8000
 8007770:	007a1200 	.word	0x007a1200
 8007774:	00f42400 	.word	0x00f42400

08007778 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e022      	b.n	80077d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7fa f901 	bl	80019a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2203      	movs	r2, #3
 80077a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f814 	bl	80077d8 <HAL_SD_InitCard>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e00a      	b.n	80077d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077d8:	b5b0      	push	{r4, r5, r7, lr}
 80077da:	b08e      	sub	sp, #56	; 0x38
 80077dc:	af04      	add	r7, sp, #16
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80077f4:	2376      	movs	r3, #118	; 0x76
 80077f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681d      	ldr	r5, [r3, #0]
 80077fc:	466c      	mov	r4, sp
 80077fe:	f107 0314 	add.w	r3, r7, #20
 8007802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007810:	4628      	mov	r0, r5
 8007812:	f002 fcf5 	bl	800a200 <SDIO_Init>
 8007816:	4603      	mov	r3, r0
 8007818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800781c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e04c      	b.n	80078c2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007828:	4b28      	ldr	r3, [pc, #160]	; (80078cc <HAL_SD_InitCard+0xf4>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4618      	mov	r0, r3
 8007834:	f002 fd2d 	bl	800a292 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007838:	4b24      	ldr	r3, [pc, #144]	; (80078cc <HAL_SD_InitCard+0xf4>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 f804 	bl	800884c <SD_PowerON>
 8007844:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e02e      	b.n	80078c2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 ff25 	bl	80086b4 <SD_InitCard>
 800786a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e01b      	b.n	80078c2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007892:	4618      	mov	r0, r3
 8007894:	f002 fd90 	bl	800a3b8 <SDMMC_CmdBlockLength>
 8007898:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00f      	beq.n	80078c0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <HAL_SD_InitCard+0xf8>)
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3728      	adds	r7, #40	; 0x28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bdb0      	pop	{r4, r5, r7, pc}
 80078ca:	bf00      	nop
 80078cc:	422580a0 	.word	0x422580a0
 80078d0:	004005ff 	.word	0x004005ff

080078d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08c      	sub	sp, #48	; 0x30
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d107      	bne.n	80078fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0c0      	b.n	8007a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	f040 80b9 	bne.w	8007a7c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	441a      	add	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791a:	429a      	cmp	r2, r3
 800791c:	d907      	bls.n	800792e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e0a7      	b.n	8007a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2203      	movs	r2, #3
 8007932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	4a4c      	ldr	r2, [pc, #304]	; (8007a88 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	4a4b      	ldr	r2, [pc, #300]	; (8007a8c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007960:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	2200      	movs	r2, #0
 8007968:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	2200      	movs	r2, #0
 8007970:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3380      	adds	r3, #128	; 0x80
 8007998:	4619      	mov	r1, r3
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	025b      	lsls	r3, r3, #9
 80079a0:	089b      	lsrs	r3, r3, #2
 80079a2:	f7fa fcef 	bl	8002384 <HAL_DMA_Start_IT>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d017      	beq.n	80079dc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80079ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a33      	ldr	r2, [pc, #204]	; (8007a90 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e050      	b.n	8007a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80079dc:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80079de:	2201      	movs	r2, #1
 80079e0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d002      	beq.n	80079f0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	025b      	lsls	r3, r3, #9
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079f0:	f04f 33ff 	mov.w	r3, #4294967295
 80079f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	025b      	lsls	r3, r3, #9
 80079fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80079fc:	2390      	movs	r3, #144	; 0x90
 80079fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007a00:	2302      	movs	r3, #2
 8007a02:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f107 0210 	add.w	r2, r7, #16
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f002 fca2 	bl	800a360 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d90a      	bls.n	8007a38 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2282      	movs	r2, #130	; 0x82
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f002 fd06 	bl	800a440 <SDMMC_CmdReadMultiBlock>
 8007a34:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a36:	e009      	b.n	8007a4c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2281      	movs	r2, #129	; 0x81
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a44:	4618      	mov	r0, r3
 8007a46:	f002 fcd9 	bl	800a3fc <SDMMC_CmdReadSingleBlock>
 8007a4a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d012      	beq.n	8007a78 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	431a      	orrs	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e002      	b.n	8007a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e000      	b.n	8007a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a7c:	2302      	movs	r3, #2
  }
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3730      	adds	r7, #48	; 0x30
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	080084c3 	.word	0x080084c3
 8007a8c:	08008535 	.word	0x08008535
 8007a90:	004005ff 	.word	0x004005ff
 8007a94:	4225858c 	.word	0x4225858c

08007a98 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08c      	sub	sp, #48	; 0x30
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d107      	bne.n	8007ac0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e0c5      	b.n	8007c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	f040 80be 	bne.w	8007c4a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	441a      	add	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d907      	bls.n	8007af2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e0ac      	b.n	8007c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2203      	movs	r2, #3
 8007af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2200      	movs	r2, #0
 8007b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007b10:	f043 0302 	orr.w	r3, r3, #2
 8007b14:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	4a4e      	ldr	r2, [pc, #312]	; (8007c54 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	4a4d      	ldr	r2, [pc, #308]	; (8007c58 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007b24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d002      	beq.n	8007b3c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	025b      	lsls	r3, r3, #9
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d90a      	bls.n	8007b58 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	22a0      	movs	r2, #160	; 0xa0
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 fcba 	bl	800a4c8 <SDMMC_CmdWriteMultiBlock>
 8007b54:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b56:	e009      	b.n	8007b6c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2290      	movs	r2, #144	; 0x90
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b64:	4618      	mov	r0, r3
 8007b66:	f002 fc8d 	bl	800a484 <SDMMC_CmdWriteSingleBlock>
 8007b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d012      	beq.n	8007b98 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a39      	ldr	r2, [pc, #228]	; (8007c5c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	431a      	orrs	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e059      	b.n	8007c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007b98:	4b31      	ldr	r3, [pc, #196]	; (8007c60 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	2240      	movs	r2, #64	; 0x40
 8007ba4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3380      	adds	r3, #128	; 0x80
 8007bce:	461a      	mov	r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	025b      	lsls	r3, r3, #9
 8007bd4:	089b      	lsrs	r3, r3, #2
 8007bd6:	f7fa fbd5 	bl	8002384 <HAL_DMA_Start_IT>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01c      	beq.n	8007c1a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8007bee:	f023 0302 	bic.w	r3, r3, #2
 8007bf2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e018      	b.n	8007c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	025b      	lsls	r3, r3, #9
 8007c24:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c26:	2390      	movs	r3, #144	; 0x90
 8007c28:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007c32:	2301      	movs	r3, #1
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f107 0210 	add.w	r2, r7, #16
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f002 fb8d 	bl	800a360 <SDIO_ConfigData>

      return HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e000      	b.n	8007c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c4a:	2302      	movs	r3, #2
  }
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3730      	adds	r7, #48	; 0x30
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	08008499 	.word	0x08008499
 8007c58:	08008535 	.word	0x08008535
 8007c5c:	004005ff 	.word	0x004005ff
 8007c60:	4225858c 	.word	0x4225858c

08007c64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_SD_IRQHandler+0x2e>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fffd 	bl	8008c8a <SD_Read_IT>
 8007c90:	e165      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 808f 	beq.w	8007dc0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007cba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007cbe:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0201 	bic.w	r2, r2, #1
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d039      	beq.n	8007d4e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_SD_IRQHandler+0x8a>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d011      	beq.n	8007d12 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f002 fc0a 	bl	800a50c <SDMMC_CmdStopTransfer>
 8007cf8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f92f 	bl	8007f70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <HAL_SD_IRQHandler+0xda>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f003 f878 	bl	800ae34 <HAL_SD_RxCpltCallback>
 8007d44:	e10b      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f003 f86a 	bl	800ae20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d4c:	e107      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8102 	beq.w	8007f5e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d011      	beq.n	8007d88 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f002 fbcf 	bl	800a50c <SDMMC_CmdStopTransfer>
 8007d6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8f4 	bl	8007f70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f040 80e5 	bne.w	8007f5e <HAL_SD_IRQHandler+0x2fa>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 80df 	bne.w	8007f5e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0208 	bic.w	r2, r2, #8
 8007dae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f003 f831 	bl	800ae20 <HAL_SD_TxCpltCallback>
}
 8007dbe:	e0ce      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d008      	beq.n	8007de0 <HAL_SD_IRQHandler+0x17c>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 ffa7 	bl	8008d2c <SD_Write_IT>
 8007dde:	e0be      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de6:	f240 233a 	movw	r3, #570	; 0x23a
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80b6 	beq.w	8007f5e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f043 0202 	orr.w	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	f043 0208 	orr.w	r2, r3, #8
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	f043 0220 	orr.w	r2, r3, #32
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e46:	f003 0310 	and.w	r3, r3, #16
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	f043 0210 	orr.w	r2, r3, #16
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d005      	beq.n	8007e74 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	f043 0208 	orr.w	r2, r3, #8
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f240 723a 	movw	r2, #1850	; 0x73a
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007e8c:	f023 0302 	bic.w	r3, r3, #2
 8007e90:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f002 fb38 	bl	800a50c <SDMMC_CmdStopTransfer>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f855 	bl	8007f70 <HAL_SD_ErrorCallback>
}
 8007ec6:	e04a      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d045      	beq.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d104      	bne.n	8007ee6 <HAL_SD_IRQHandler+0x282>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eea:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <HAL_SD_IRQHandler+0x304>)
 8007eec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fa fb0e 	bl	8002514 <HAL_DMA_Abort_IT>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d02f      	beq.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fb68 	bl	80085d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007f08:	e029      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <HAL_SD_IRQHandler+0x2ba>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d011      	beq.n	8007f42 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <HAL_SD_IRQHandler+0x308>)
 8007f24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fa faf2 	bl	8002514 <HAL_DMA_Abort_IT>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d013      	beq.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fb83 	bl	8008646 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f40:	e00d      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f002 ff58 	bl	800ae0c <HAL_SD_AbortCallback>
}
 8007f5c:	e7ff      	b.n	8007f5e <HAL_SD_IRQHandler+0x2fa>
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	080085d9 	.word	0x080085d9
 8007f6c:	08008647 	.word	0x08008647

08007f70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f92:	0f9b      	lsrs	r3, r3, #30
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f9e:	0e9b      	lsrs	r3, r3, #26
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb0:	0e1b      	lsrs	r3, r3, #24
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe4:	0d1b      	lsrs	r3, r3, #20
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff0:	0c1b      	lsrs	r3, r3, #16
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008002:	0bdb      	lsrs	r3, r3, #15
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008014:	0b9b      	lsrs	r3, r3, #14
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	b2da      	uxtb	r2, r3
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008026:	0b5b      	lsrs	r3, r3, #13
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008038:	0b1b      	lsrs	r3, r3, #12
 800803a:	b2db      	uxtb	r3, r3
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	b2da      	uxtb	r2, r3
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2200      	movs	r2, #0
 800804a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008050:	2b00      	cmp	r3, #0
 8008052:	d163      	bne.n	800811c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008058:	009a      	lsls	r2, r3, #2
 800805a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800805e:	4013      	ands	r3, r2
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008064:	0f92      	lsrs	r2, r2, #30
 8008066:	431a      	orrs	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008070:	0edb      	lsrs	r3, r3, #27
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	b2da      	uxtb	r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008082:	0e1b      	lsrs	r3, r3, #24
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	b2da      	uxtb	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008094:	0d5b      	lsrs	r3, r3, #21
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	b2da      	uxtb	r2, r3
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a6:	0c9b      	lsrs	r3, r3, #18
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b8:	0bdb      	lsrs	r3, r3, #15
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	7e1b      	ldrb	r3, [r3, #24]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	3302      	adds	r3, #2
 80080dc:	2201      	movs	r2, #1
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80080e6:	fb02 f203 	mul.w	r2, r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	7a1b      	ldrb	r3, [r3, #8]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	f003 030f 	and.w	r3, r3, #15
 80080f8:	2201      	movs	r2, #1
 80080fa:	409a      	lsls	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008108:	0a52      	lsrs	r2, r2, #9
 800810a:	fb02 f203 	mul.w	r2, r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008118:	661a      	str	r2, [r3, #96]	; 0x60
 800811a:	e031      	b.n	8008180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008120:	2b01      	cmp	r3, #1
 8008122:	d11d      	bne.n	8008160 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008128:	041b      	lsls	r3, r3, #16
 800812a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008132:	0c1b      	lsrs	r3, r3, #16
 8008134:	431a      	orrs	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	3301      	adds	r3, #1
 8008140:	029a      	lsls	r2, r3, #10
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008154:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	661a      	str	r2, [r3, #96]	; 0x60
 800815e:	e00f      	b.n	8008180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a58      	ldr	r2, [pc, #352]	; (80082c8 <HAL_SD_GetCardCSD+0x344>)
 8008166:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e09d      	b.n	80082bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008184:	0b9b      	lsrs	r3, r3, #14
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	b2da      	uxtb	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008196:	09db      	lsrs	r3, r3, #7
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b8:	0fdb      	lsrs	r3, r3, #31
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c4:	0f5b      	lsrs	r3, r3, #29
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 0303 	and.w	r3, r3, #3
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	0e9b      	lsrs	r3, r3, #26
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e8:	0d9b      	lsrs	r3, r3, #22
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	0d5b      	lsrs	r3, r3, #21
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	b2da      	uxtb	r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008216:	0c1b      	lsrs	r3, r3, #16
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822a:	0bdb      	lsrs	r3, r3, #15
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	b2da      	uxtb	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	0b9b      	lsrs	r3, r3, #14
 8008240:	b2db      	uxtb	r3, r3
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	b2da      	uxtb	r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008252:	0b5b      	lsrs	r3, r3, #13
 8008254:	b2db      	uxtb	r3, r3
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	b2da      	uxtb	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008266:	0b1b      	lsrs	r3, r3, #12
 8008268:	b2db      	uxtb	r3, r3
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	b2da      	uxtb	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	0a9b      	lsrs	r3, r3, #10
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	b2da      	uxtb	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	b2da      	uxtb	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	004005ff 	.word	0x004005ff

080082cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008324:	b5b0      	push	{r4, r5, r7, lr}
 8008326:	b08e      	sub	sp, #56	; 0x38
 8008328:	af04      	add	r7, sp, #16
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2203      	movs	r2, #3
 8008338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008340:	2b03      	cmp	r3, #3
 8008342:	d02e      	beq.n	80083a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834a:	d106      	bne.n	800835a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
 8008358:	e029      	b.n	80083ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008360:	d10a      	bne.n	8008378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb28 	bl	80089b8 <SD_WideBus_Enable>
 8008368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	639a      	str	r2, [r3, #56]	; 0x38
 8008376:	e01a      	b.n	80083ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10a      	bne.n	8008394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fb65 	bl	8008a4e <SD_WideBus_Disable>
 8008384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	431a      	orrs	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	639a      	str	r2, [r3, #56]	; 0x38
 8008392:	e00c      	b.n	80083ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
 80083a0:	e005      	b.n	80083ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a26      	ldr	r2, [pc, #152]	; (8008454 <HAL_SD_ConfigWideBusOperation+0x130>)
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083cc:	e01f      	b.n	800840e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681d      	ldr	r5, [r3, #0]
 80083f4:	466c      	mov	r4, sp
 80083f6:	f107 0314 	add.w	r3, r7, #20
 80083fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008408:	4628      	mov	r0, r5
 800840a:	f001 fef9 	bl	800a200 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008416:	4618      	mov	r0, r3
 8008418:	f001 ffce 	bl	800a3b8 <SDMMC_CmdBlockLength>
 800841c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00c      	beq.n	800843e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a0a      	ldr	r2, [pc, #40]	; (8008454 <HAL_SD_ConfigWideBusOperation+0x130>)
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800844a:	4618      	mov	r0, r3
 800844c:	3728      	adds	r7, #40	; 0x28
 800844e:	46bd      	mov	sp, r7
 8008450:	bdb0      	pop	{r4, r5, r7, pc}
 8008452:	bf00      	nop
 8008454:	004005ff 	.word	0x004005ff

08008458 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008464:	f107 030c 	add.w	r3, r7, #12
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa7c 	bl	8008968 <SD_SendStatus>
 8008470:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	0a5b      	lsrs	r3, r3, #9
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800848e:	693b      	ldr	r3, [r7, #16]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d4:	2b82      	cmp	r3, #130	; 0x82
 80084d6:	d111      	bne.n	80084fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f002 f815 	bl	800a50c <SDMMC_CmdStopTransfer>
 80084e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	431a      	orrs	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fd3a 	bl	8007f70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0208 	bic.w	r2, r2, #8
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f240 523a 	movw	r2, #1338	; 0x53a
 8008514:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f002 fc85 	bl	800ae34 <HAL_SD_RxCpltCallback>
#endif
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fa f992 	bl	800286c <HAL_DMA_GetError>
 8008548:	4603      	mov	r3, r0
 800854a:	2b02      	cmp	r3, #2
 800854c:	d03e      	beq.n	80085cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008554:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d002      	beq.n	800856a <SD_DMAError+0x36>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d12d      	bne.n	80085c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <SD_DMAError+0xa0>)
 8008570:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008580:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800858e:	6978      	ldr	r0, [r7, #20]
 8008590:	f7ff ff62 	bl	8008458 <HAL_SD_GetCardState>
 8008594:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b06      	cmp	r3, #6
 800859a:	d002      	beq.n	80085a2 <SD_DMAError+0x6e>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b05      	cmp	r3, #5
 80085a0:	d10a      	bne.n	80085b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 ffb0 	bl	800a50c <SDMMC_CmdStopTransfer>
 80085ac:	4602      	mov	r2, r0
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	431a      	orrs	r2, r3
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2200      	movs	r2, #0
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80085c6:	6978      	ldr	r0, [r7, #20]
 80085c8:	f7ff fcd2 	bl	8007f70 <HAL_SD_ErrorCallback>
#endif
  }
}
 80085cc:	bf00      	nop
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	004005ff 	.word	0x004005ff

080085d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff ff31 	bl	8008458 <HAL_SD_GetCardState>
 80085f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b06      	cmp	r3, #6
 800860a:	d002      	beq.n	8008612 <SD_DMATxAbort+0x3a>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b05      	cmp	r3, #5
 8008610:	d10a      	bne.n	8008628 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f001 ff78 	bl	800a50c <SDMMC_CmdStopTransfer>
 800861c:	4602      	mov	r2, r0
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	431a      	orrs	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862c:	2b00      	cmp	r3, #0
 800862e:	d103      	bne.n	8008638 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f002 fbeb 	bl	800ae0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008636:	e002      	b.n	800863e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff fc99 	bl	8007f70 <HAL_SD_ErrorCallback>
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f240 523a 	movw	r2, #1338	; 0x53a
 800865c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff fefa 	bl	8008458 <HAL_SD_GetCardState>
 8008664:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b06      	cmp	r3, #6
 8008678:	d002      	beq.n	8008680 <SD_DMARxAbort+0x3a>
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b05      	cmp	r3, #5
 800867e:	d10a      	bne.n	8008696 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f001 ff41 	bl	800a50c <SDMMC_CmdStopTransfer>
 800868a:	4602      	mov	r2, r0
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	431a      	orrs	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	2b00      	cmp	r3, #0
 800869c:	d103      	bne.n	80086a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f002 fbb4 	bl	800ae0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80086a4:	e002      	b.n	80086ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff fc62 	bl	8007f70 <HAL_SD_ErrorCallback>
}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086b4:	b5b0      	push	{r4, r5, r7, lr}
 80086b6:	b094      	sub	sp, #80	; 0x50
 80086b8:	af04      	add	r7, sp, #16
 80086ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80086bc:	2301      	movs	r3, #1
 80086be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f001 fdf3 	bl	800a2b0 <SDIO_GetPowerState>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80086d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80086d4:	e0b6      	b.n	8008844 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d02f      	beq.n	800873e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f002 f81c 	bl	800a720 <SDMMC_CmdSendCID>
 80086e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	e0a7      	b.n	8008844 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 fe1d 	bl	800a33a <SDIO_GetResponse>
 8008700:	4602      	mov	r2, r0
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2104      	movs	r1, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f001 fe14 	bl	800a33a <SDIO_GetResponse>
 8008712:	4602      	mov	r2, r0
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2108      	movs	r1, #8
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fe0b 	bl	800a33a <SDIO_GetResponse>
 8008724:	4602      	mov	r2, r0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	210c      	movs	r1, #12
 8008730:	4618      	mov	r0, r3
 8008732:	f001 fe02 	bl	800a33a <SDIO_GetResponse>
 8008736:	4602      	mov	r2, r0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008742:	2b03      	cmp	r3, #3
 8008744:	d00d      	beq.n	8008762 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f107 020e 	add.w	r2, r7, #14
 800874e:	4611      	mov	r1, r2
 8008750:	4618      	mov	r0, r3
 8008752:	f002 f822 	bl	800a79a <SDMMC_CmdSetRelAdd>
 8008756:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <SD_InitCard+0xae>
    {
      return errorstate;
 800875e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008760:	e070      	b.n	8008844 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008766:	2b03      	cmp	r3, #3
 8008768:	d036      	beq.n	80087d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800876a:	89fb      	ldrh	r3, [r7, #14]
 800876c:	461a      	mov	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877a:	041b      	lsls	r3, r3, #16
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f001 ffec 	bl	800a75c <SDMMC_CmdSendCSD>
 8008784:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <SD_InitCard+0xdc>
    {
      return errorstate;
 800878c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878e:	e059      	b.n	8008844 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fdcf 	bl	800a33a <SDIO_GetResponse>
 800879c:	4602      	mov	r2, r0
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2104      	movs	r1, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fdc6 	bl	800a33a <SDIO_GetResponse>
 80087ae:	4602      	mov	r2, r0
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2108      	movs	r1, #8
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fdbd 	bl	800a33a <SDIO_GetResponse>
 80087c0:	4602      	mov	r2, r0
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	210c      	movs	r1, #12
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 fdb4 	bl	800a33a <SDIO_GetResponse>
 80087d2:	4602      	mov	r2, r0
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2104      	movs	r1, #4
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 fdab 	bl	800a33a <SDIO_GetResponse>
 80087e4:	4603      	mov	r3, r0
 80087e6:	0d1a      	lsrs	r2, r3, #20
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087ec:	f107 0310 	add.w	r3, r7, #16
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fbc6 	bl	8007f84 <HAL_SD_GetCardCSD>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008802:	e01f      	b.n	8008844 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6819      	ldr	r1, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	041b      	lsls	r3, r3, #16
 800880e:	461a      	mov	r2, r3
 8008810:	f04f 0300 	mov.w	r3, #0
 8008814:	4608      	mov	r0, r1
 8008816:	f001 fe9b 	bl	800a550 <SDMMC_CmdSelDesel>
 800881a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800881c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <SD_InitCard+0x172>
  {
    return errorstate;
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	e00e      	b.n	8008844 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681d      	ldr	r5, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	466c      	mov	r4, sp
 800882e:	f103 0210 	add.w	r2, r3, #16
 8008832:	ca07      	ldmia	r2, {r0, r1, r2}
 8008834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008838:	3304      	adds	r3, #4
 800883a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800883c:	4628      	mov	r0, r5
 800883e:	f001 fcdf 	bl	800a200 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3740      	adds	r7, #64	; 0x40
 8008848:	46bd      	mov	sp, r7
 800884a:	bdb0      	pop	{r4, r5, r7, pc}

0800884c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4618      	mov	r0, r3
 8008866:	f001 fe96 	bl	800a596 <SDMMC_CmdGoIdleState>
 800886a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	e072      	b.n	800895c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f001 fea9 	bl	800a5d2 <SDMMC_CmdOperCond>
 8008880:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00d      	beq.n	80088a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4618      	mov	r0, r3
 8008894:	f001 fe7f 	bl	800a596 <SDMMC_CmdGoIdleState>
 8008898:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	e05b      	b.n	800895c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d137      	bne.n	8008922 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2100      	movs	r1, #0
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fea9 	bl	800a610 <SDMMC_CmdAppCommand>
 80088be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d02d      	beq.n	8008922 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088ca:	e047      	b.n	800895c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 fe9c 	bl	800a610 <SDMMC_CmdAppCommand>
 80088d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	e03b      	b.n	800895c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	491e      	ldr	r1, [pc, #120]	; (8008964 <SD_PowerON+0x118>)
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 feb2 	bl	800a654 <SDMMC_CmdAppOperCommand>
 80088f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088fc:	e02e      	b.n	800895c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2100      	movs	r1, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f001 fd18 	bl	800a33a <SDIO_GetResponse>
 800890a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	0fdb      	lsrs	r3, r3, #31
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <SD_PowerON+0xcc>
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <SD_PowerON+0xce>
 8008918:	2300      	movs	r3, #0
 800891a:	613b      	str	r3, [r7, #16]

    count++;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	3301      	adds	r3, #1
 8008920:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008928:	4293      	cmp	r3, r2
 800892a:	d802      	bhi.n	8008932 <SD_PowerON+0xe6>
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0cc      	beq.n	80088cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008938:	4293      	cmp	r3, r2
 800893a:	d902      	bls.n	8008942 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800893c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008940:	e00c      	b.n	800895c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	645a      	str	r2, [r3, #68]	; 0x44
 8008952:	e002      	b.n	800895a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	c1100000 	.word	0xc1100000

08008968 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800897c:	e018      	b.n	80089b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008986:	041b      	lsls	r3, r3, #16
 8008988:	4619      	mov	r1, r3
 800898a:	4610      	mov	r0, r2
 800898c:	f001 ff26 	bl	800a7dc <SDMMC_CmdSendStatus>
 8008990:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	e009      	b.n	80089b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 fcc9 	bl	800a33a <SDIO_GetResponse>
 80089a8:	4602      	mov	r2, r0
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	2300      	movs	r3, #0
 80089c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fcb3 	bl	800a33a <SDIO_GetResponse>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089de:	d102      	bne.n	80089e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089e4:	e02f      	b.n	8008a46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80089e6:	f107 030c 	add.w	r3, r7, #12
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f879 	bl	8008ae4 <SD_FindSCR>
 80089f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	e023      	b.n	8008a46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01c      	beq.n	8008a42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a10:	041b      	lsls	r3, r3, #16
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f001 fdfb 	bl	800a610 <SDMMC_CmdAppCommand>
 8008a1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	e00f      	b.n	8008a46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f001 fe34 	bl	800a69a <SDMMC_CmdBusWidth>
 8008a32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	e003      	b.n	8008a46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e001      	b.n	8008a46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b086      	sub	sp, #24
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 fc68 	bl	800a33a <SDIO_GetResponse>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a74:	d102      	bne.n	8008a7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a7a:	e02f      	b.n	8008adc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008a7c:	f107 030c 	add.w	r3, r7, #12
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f82e 	bl	8008ae4 <SD_FindSCR>
 8008a88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	e023      	b.n	8008adc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d01c      	beq.n	8008ad8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f001 fdb0 	bl	800a610 <SDMMC_CmdAppCommand>
 8008ab0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	e00f      	b.n	8008adc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 fde9 	bl	800a69a <SDMMC_CmdBusWidth>
 8008ac8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	e003      	b.n	8008adc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e001      	b.n	8008adc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ad8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b08f      	sub	sp, #60	; 0x3c
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008aee:	f7f9 fa89 	bl	8002004 <HAL_GetTick>
 8008af2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008af8:	2300      	movs	r3, #0
 8008afa:	60bb      	str	r3, [r7, #8]
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2108      	movs	r1, #8
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 fc54 	bl	800a3b8 <SDMMC_CmdBlockLength>
 8008b10:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	e0b2      	b.n	8008c82 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b24:	041b      	lsls	r3, r3, #16
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f001 fd71 	bl	800a610 <SDMMC_CmdAppCommand>
 8008b2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	e0a3      	b.n	8008c82 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008b40:	2308      	movs	r3, #8
 8008b42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008b44:	2330      	movs	r3, #48	; 0x30
 8008b46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008b50:	2301      	movs	r3, #1
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f107 0210 	add.w	r2, r7, #16
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 fbfe 	bl	800a360 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fdb8 	bl	800a6de <SDMMC_CmdSendSCR>
 8008b6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d02a      	beq.n	8008bcc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	e083      	b.n	8008c82 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00f      	beq.n	8008ba8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6819      	ldr	r1, [r3, #0]
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	f107 0208 	add.w	r2, r7, #8
 8008b94:	18d4      	adds	r4, r2, r3
 8008b96:	4608      	mov	r0, r1
 8008b98:	f001 fb5d 	bl	800a256 <SDIO_ReadFIFO>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	6023      	str	r3, [r4, #0]
      index++;
 8008ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba6:	e006      	b.n	8008bb6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d012      	beq.n	8008bdc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008bb6:	f7f9 fa25 	bl	8002004 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc4:	d102      	bne.n	8008bcc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008bc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bca:	e05a      	b.n	8008c82 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0cf      	beq.n	8008b7a <SD_FindSCR+0x96>
 8008bda:	e000      	b.n	8008bde <SD_FindSCR+0xfa>
      break;
 8008bdc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	f003 0308 	and.w	r3, r3, #8
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	e044      	b.n	8008c82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d005      	beq.n	8008c12 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e037      	b.n	8008c82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2220      	movs	r2, #32
 8008c26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008c28:	2320      	movs	r3, #32
 8008c2a:	e02a      	b.n	8008c82 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	061a      	lsls	r2, r3, #24
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008c4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	0e1b      	lsrs	r3, r3, #24
 8008c52:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	601a      	str	r2, [r3, #0]
    scr++;
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	061a      	lsls	r2, r3, #24
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	0a1b      	lsrs	r3, r3, #8
 8008c70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	0e1b      	lsrs	r3, r3, #24
 8008c7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	373c      	adds	r7, #60	; 0x3c
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd90      	pop	{r4, r7, pc}

08008c8a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b086      	sub	sp, #24
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d03f      	beq.n	8008d24 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	e033      	b.n	8008d12 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 fad1 	bl	800a256 <SDIO_ReadFIFO>
 8008cb4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	0a1b      	lsrs	r3, r3, #8
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	0c1b      	lsrs	r3, r3, #16
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	0e1b      	lsrs	r3, r3, #24
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3301      	adds	r3, #1
 8008d04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	617b      	str	r3, [r7, #20]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b07      	cmp	r3, #7
 8008d16:	d9c8      	bls.n	8008caa <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008d24:	bf00      	nop
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d043      	beq.n	8008dce <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	e037      	b.n	8008dbc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	021a      	lsls	r2, r3, #8
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	041a      	lsls	r2, r3, #16
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	061a      	lsls	r2, r3, #24
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 fa5d 	bl	800a270 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	3301      	adds	r3, #1
 8008dba:	617b      	str	r3, [r7, #20]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2b07      	cmp	r3, #7
 8008dc0:	d9c4      	bls.n	8008d4c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e041      	b.n	8008e6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f839 	bl	8008e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4619      	mov	r1, r3
 8008e14:	4610      	mov	r0, r2
 8008e16:	f000 f9d7 	bl	80091c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d001      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e04e      	b.n	8008f3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0201 	orr.w	r2, r2, #1
 8008eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a23      	ldr	r2, [pc, #140]	; (8008f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d022      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x80>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eca:	d01d      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x80>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a1f      	ldr	r2, [pc, #124]	; (8008f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d018      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x80>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a1e      	ldr	r2, [pc, #120]	; (8008f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d013      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x80>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a1c      	ldr	r2, [pc, #112]	; (8008f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d00e      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x80>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a1b      	ldr	r2, [pc, #108]	; (8008f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d009      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x80>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a19      	ldr	r2, [pc, #100]	; (8008f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d004      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x80>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a18      	ldr	r2, [pc, #96]	; (8008f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d111      	bne.n	8008f2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b06      	cmp	r3, #6
 8008f18:	d010      	beq.n	8008f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f042 0201 	orr.w	r2, r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f2a:	e007      	b.n	8008f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f042 0201 	orr.w	r2, r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	40010000 	.word	0x40010000
 8008f50:	40000400 	.word	0x40000400
 8008f54:	40000800 	.word	0x40000800
 8008f58:	40000c00 	.word	0x40000c00
 8008f5c:	40010400 	.word	0x40010400
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40001800 	.word	0x40001800

08008f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d122      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d11b      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f06f 0202 	mvn.w	r2, #2
 8008f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f8ee 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 8008fb0:	e005      	b.n	8008fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8e0 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f8f1 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d122      	bne.n	8009018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d11b      	bne.n	8009018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f06f 0204 	mvn.w	r2, #4
 8008fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2202      	movs	r2, #2
 8008fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8c4 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 8009004:	e005      	b.n	8009012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f8b6 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f8c7 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f003 0308 	and.w	r3, r3, #8
 8009022:	2b08      	cmp	r3, #8
 8009024:	d122      	bne.n	800906c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b08      	cmp	r3, #8
 8009032:	d11b      	bne.n	800906c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0208 	mvn.w	r2, #8
 800903c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2204      	movs	r2, #4
 8009042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f89a 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 8009058:	e005      	b.n	8009066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f88c 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f89d 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 0310 	and.w	r3, r3, #16
 8009076:	2b10      	cmp	r3, #16
 8009078:	d122      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b10      	cmp	r3, #16
 8009086:	d11b      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f06f 0210 	mvn.w	r2, #16
 8009090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2208      	movs	r2, #8
 8009096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f870 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 80090ac:	e005      	b.n	80090ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f862 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f873 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d10e      	bne.n	80090ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d107      	bne.n	80090ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0201 	mvn.w	r2, #1
 80090e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7f8 fb0c 	bl	8001704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f6:	2b80      	cmp	r3, #128	; 0x80
 80090f8:	d10e      	bne.n	8009118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009104:	2b80      	cmp	r3, #128	; 0x80
 8009106:	d107      	bne.n	8009118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f902 	bl	800931c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009122:	2b40      	cmp	r3, #64	; 0x40
 8009124:	d10e      	bne.n	8009144 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009130:	2b40      	cmp	r3, #64	; 0x40
 8009132:	d107      	bne.n	8009144 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800913c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f838 	bl	80091b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b20      	cmp	r3, #32
 8009150:	d10e      	bne.n	8009170 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0320 	and.w	r3, r3, #32
 800915c:	2b20      	cmp	r3, #32
 800915e:	d107      	bne.n	8009170 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f06f 0220 	mvn.w	r2, #32
 8009168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f8cc 	bl	8009308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a40      	ldr	r2, [pc, #256]	; (80092dc <TIM_Base_SetConfig+0x114>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d013      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e6:	d00f      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3d      	ldr	r2, [pc, #244]	; (80092e0 <TIM_Base_SetConfig+0x118>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d00b      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3c      	ldr	r2, [pc, #240]	; (80092e4 <TIM_Base_SetConfig+0x11c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d007      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a3b      	ldr	r2, [pc, #236]	; (80092e8 <TIM_Base_SetConfig+0x120>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d003      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a3a      	ldr	r2, [pc, #232]	; (80092ec <TIM_Base_SetConfig+0x124>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d108      	bne.n	800921a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a2f      	ldr	r2, [pc, #188]	; (80092dc <TIM_Base_SetConfig+0x114>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d02b      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009228:	d027      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2c      	ldr	r2, [pc, #176]	; (80092e0 <TIM_Base_SetConfig+0x118>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d023      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2b      	ldr	r2, [pc, #172]	; (80092e4 <TIM_Base_SetConfig+0x11c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d01f      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <TIM_Base_SetConfig+0x120>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d01b      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a29      	ldr	r2, [pc, #164]	; (80092ec <TIM_Base_SetConfig+0x124>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d017      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a28      	ldr	r2, [pc, #160]	; (80092f0 <TIM_Base_SetConfig+0x128>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a27      	ldr	r2, [pc, #156]	; (80092f4 <TIM_Base_SetConfig+0x12c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00f      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a26      	ldr	r2, [pc, #152]	; (80092f8 <TIM_Base_SetConfig+0x130>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00b      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a25      	ldr	r2, [pc, #148]	; (80092fc <TIM_Base_SetConfig+0x134>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d007      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a24      	ldr	r2, [pc, #144]	; (8009300 <TIM_Base_SetConfig+0x138>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d003      	beq.n	800927a <TIM_Base_SetConfig+0xb2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a23      	ldr	r2, [pc, #140]	; (8009304 <TIM_Base_SetConfig+0x13c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d108      	bne.n	800928c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <TIM_Base_SetConfig+0x114>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_Base_SetConfig+0xf8>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a0c      	ldr	r2, [pc, #48]	; (80092ec <TIM_Base_SetConfig+0x124>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d103      	bne.n	80092c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	615a      	str	r2, [r3, #20]
}
 80092ce:	bf00      	nop
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	40010000 	.word	0x40010000
 80092e0:	40000400 	.word	0x40000400
 80092e4:	40000800 	.word	0x40000800
 80092e8:	40000c00 	.word	0x40000c00
 80092ec:	40010400 	.word	0x40010400
 80092f0:	40014000 	.word	0x40014000
 80092f4:	40014400 	.word	0x40014400
 80092f8:	40014800 	.word	0x40014800
 80092fc:	40001800 	.word	0x40001800
 8009300:	40001c00 	.word	0x40001c00
 8009304:	40002000 	.word	0x40002000

08009308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e03f      	b.n	80093c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7f8 fc12 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2224      	movs	r2, #36	; 0x24
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fd7b 	bl	8009e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	695a      	ldr	r2, [r3, #20]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b08a      	sub	sp, #40	; 0x28
 80093ce:	af02      	add	r7, sp, #8
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	603b      	str	r3, [r7, #0]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d17c      	bne.n	80094e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <HAL_UART_Transmit+0x2c>
 80093f0:	88fb      	ldrh	r3, [r7, #6]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e075      	b.n	80094e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_UART_Transmit+0x3e>
 8009404:	2302      	movs	r3, #2
 8009406:	e06e      	b.n	80094e6 <HAL_UART_Transmit+0x11c>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2221      	movs	r2, #33	; 0x21
 800941a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800941e:	f7f8 fdf1 	bl	8002004 <HAL_GetTick>
 8009422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	88fa      	ldrh	r2, [r7, #6]
 8009428:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	88fa      	ldrh	r2, [r7, #6]
 800942e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009438:	d108      	bne.n	800944c <HAL_UART_Transmit+0x82>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d104      	bne.n	800944c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	e003      	b.n	8009454 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009450:	2300      	movs	r3, #0
 8009452:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800945c:	e02a      	b.n	80094b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2200      	movs	r2, #0
 8009466:	2180      	movs	r1, #128	; 0x80
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 faf9 	bl	8009a60 <UART_WaitOnFlagUntilTimeout>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e036      	b.n	80094e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10b      	bne.n	8009496 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800948c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	3302      	adds	r3, #2
 8009492:	61bb      	str	r3, [r7, #24]
 8009494:	e007      	b.n	80094a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	3301      	adds	r3, #1
 80094a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1cf      	bne.n	800945e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2200      	movs	r2, #0
 80094c6:	2140      	movs	r1, #64	; 0x40
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fac9 	bl	8009a60 <UART_WaitOnFlagUntilTimeout>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e006      	b.n	80094e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	e000      	b.n	80094e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80094e4:	2302      	movs	r3, #2
  }
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3720      	adds	r7, #32
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b0ba      	sub	sp, #232	; 0xe8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009516:	2300      	movs	r3, #0
 8009518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800951c:	2300      	movs	r3, #0
 800951e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800952e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10f      	bne.n	8009556 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <HAL_UART_IRQHandler+0x66>
 8009542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fbd3 	bl	8009cfa <UART_Receive_IT>
      return;
 8009554:	e256      	b.n	8009a04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 80de 	beq.w	800971c <HAL_UART_IRQHandler+0x22c>
 8009560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800956c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009570:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 80d1 	beq.w	800971c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800957a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00b      	beq.n	800959e <HAL_UART_IRQHandler+0xae>
 8009586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800958a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958e:	2b00      	cmp	r3, #0
 8009590:	d005      	beq.n	800959e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	f043 0201 	orr.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800959e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <HAL_UART_IRQHandler+0xd2>
 80095aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d005      	beq.n	80095c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f043 0202 	orr.w	r2, r3, #2
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <HAL_UART_IRQHandler+0xf6>
 80095ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	f043 0204 	orr.w	r2, r3, #4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d011      	beq.n	8009616 <HAL_UART_IRQHandler+0x126>
 80095f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d105      	bne.n	800960a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d005      	beq.n	8009616 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	f043 0208 	orr.w	r2, r3, #8
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 81ed 	beq.w	80099fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d008      	beq.n	800963e <HAL_UART_IRQHandler+0x14e>
 800962c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fb5e 	bl	8009cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	bf0c      	ite	eq
 800964c:	2301      	moveq	r3, #1
 800964e:	2300      	movne	r3, #0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <HAL_UART_IRQHandler+0x17a>
 8009662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009666:	2b00      	cmp	r3, #0
 8009668:	d04f      	beq.n	800970a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa66 	bl	8009b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	d141      	bne.n	8009702 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3314      	adds	r3, #20
 8009684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3314      	adds	r3, #20
 80096a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1d9      	bne.n	800967e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d013      	beq.n	80096fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	4a7d      	ldr	r2, [pc, #500]	; (80098cc <HAL_UART_IRQHandler+0x3dc>)
 80096d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	4618      	mov	r0, r3
 80096e0:	f7f8 ff18 	bl	8002514 <HAL_DMA_Abort_IT>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d016      	beq.n	8009718 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f8:	e00e      	b.n	8009718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f99a 	bl	8009a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009700:	e00a      	b.n	8009718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f996 	bl	8009a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009708:	e006      	b.n	8009718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f992 	bl	8009a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009716:	e170      	b.n	80099fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009718:	bf00      	nop
    return;
 800971a:	e16e      	b.n	80099fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009720:	2b01      	cmp	r3, #1
 8009722:	f040 814a 	bne.w	80099ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800972a:	f003 0310 	and.w	r3, r3, #16
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 8143 	beq.w	80099ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 813c 	beq.w	80099ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009742:	2300      	movs	r3, #0
 8009744:	60bb      	str	r3, [r7, #8]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60bb      	str	r3, [r7, #8]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	60bb      	str	r3, [r7, #8]
 8009756:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	f040 80b4 	bne.w	80098d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 8140 	beq.w	80099fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009786:	429a      	cmp	r2, r3
 8009788:	f080 8139 	bcs.w	80099fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009792:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800979e:	f000 8088 	beq.w	80098b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	330c      	adds	r3, #12
 80097a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097b0:	e853 3f00 	ldrex	r3, [r3]
 80097b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	330c      	adds	r3, #12
 80097ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1d9      	bne.n	80097a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3314      	adds	r3, #20
 80097f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009800:	f023 0301 	bic.w	r3, r3, #1
 8009804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3314      	adds	r3, #20
 800980e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009812:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009816:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009818:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800981a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e1      	bne.n	80097ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3314      	adds	r3, #20
 8009830:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800983a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800983c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3314      	adds	r3, #20
 800984a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800984e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009850:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009852:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009854:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009856:	e841 2300 	strex	r3, r2, [r1]
 800985a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800985c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e3      	bne.n	800982a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	330c      	adds	r3, #12
 8009876:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009882:	f023 0310 	bic.w	r3, r3, #16
 8009886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	330c      	adds	r3, #12
 8009890:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009894:	65ba      	str	r2, [r7, #88]	; 0x58
 8009896:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800989a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e3      	bne.n	8009870 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f8 fdc1 	bl	8002434 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f8c0 	bl	8009a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098c8:	e099      	b.n	80099fe <HAL_UART_IRQHandler+0x50e>
 80098ca:	bf00      	nop
 80098cc:	08009c03 	.word	0x08009c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 808b 	beq.w	8009a02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80098ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 8086 	beq.w	8009a02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	330c      	adds	r3, #12
 80098fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800990c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	330c      	adds	r3, #12
 8009916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800991a:	647a      	str	r2, [r7, #68]	; 0x44
 800991c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e3      	bne.n	80098f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3314      	adds	r3, #20
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	e853 3f00 	ldrex	r3, [r3]
 800993c:	623b      	str	r3, [r7, #32]
   return(result);
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	f023 0301 	bic.w	r3, r3, #1
 8009944:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3314      	adds	r3, #20
 800994e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009952:	633a      	str	r2, [r7, #48]	; 0x30
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e3      	bne.n	800992e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	330c      	adds	r3, #12
 800997a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	60fb      	str	r3, [r7, #12]
   return(result);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0310 	bic.w	r3, r3, #16
 800998a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330c      	adds	r3, #12
 8009994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009998:	61fa      	str	r2, [r7, #28]
 800999a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	69b9      	ldr	r1, [r7, #24]
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	617b      	str	r3, [r7, #20]
   return(result);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e3      	bne.n	8009974 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f848 	bl	8009a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099b8:	e023      	b.n	8009a02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d009      	beq.n	80099da <HAL_UART_IRQHandler+0x4ea>
 80099c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f929 	bl	8009c2a <UART_Transmit_IT>
    return;
 80099d8:	e014      	b.n	8009a04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00e      	beq.n	8009a04 <HAL_UART_IRQHandler+0x514>
 80099e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d008      	beq.n	8009a04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f969 	bl	8009cca <UART_EndTransmit_IT>
    return;
 80099f8:	e004      	b.n	8009a04 <HAL_UART_IRQHandler+0x514>
    return;
 80099fa:	bf00      	nop
 80099fc:	e002      	b.n	8009a04 <HAL_UART_IRQHandler+0x514>
      return;
 80099fe:	bf00      	nop
 8009a00:	e000      	b.n	8009a04 <HAL_UART_IRQHandler+0x514>
      return;
 8009a02:	bf00      	nop
  }
}
 8009a04:	37e8      	adds	r7, #232	; 0xe8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop

08009a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b090      	sub	sp, #64	; 0x40
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a70:	e050      	b.n	8009b14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d04c      	beq.n	8009b14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d007      	beq.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a80:	f7f8 fac0 	bl	8002004 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d241      	bcs.n	8009b14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	330c      	adds	r3, #12
 8009a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	330c      	adds	r3, #12
 8009aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ab0:	637a      	str	r2, [r7, #52]	; 0x34
 8009ab2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e5      	bne.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3314      	adds	r3, #20
 8009aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f023 0301 	bic.w	r3, r3, #1
 8009ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3314      	adds	r3, #20
 8009ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ae4:	623a      	str	r2, [r7, #32]
 8009ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	69f9      	ldr	r1, [r7, #28]
 8009aea:	6a3a      	ldr	r2, [r7, #32]
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e5      	bne.n	8009ac4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e00f      	b.n	8009b34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	bf0c      	ite	eq
 8009b24:	2301      	moveq	r3, #1
 8009b26:	2300      	movne	r3, #0
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d09f      	beq.n	8009a72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3740      	adds	r7, #64	; 0x40
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b095      	sub	sp, #84	; 0x54
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	330c      	adds	r3, #12
 8009b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	330c      	adds	r3, #12
 8009b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b64:	643a      	str	r2, [r7, #64]	; 0x40
 8009b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b6c:	e841 2300 	strex	r3, r2, [r1]
 8009b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e5      	bne.n	8009b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3314      	adds	r3, #20
 8009b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	f023 0301 	bic.w	r3, r3, #1
 8009b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3314      	adds	r3, #20
 8009b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e5      	bne.n	8009b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d119      	bne.n	8009be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	330c      	adds	r3, #12
 8009bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f023 0310 	bic.w	r3, r3, #16
 8009bca:	647b      	str	r3, [r7, #68]	; 0x44
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	330c      	adds	r3, #12
 8009bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bd4:	61ba      	str	r2, [r7, #24]
 8009bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6979      	ldr	r1, [r7, #20]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	613b      	str	r3, [r7, #16]
   return(result);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e5      	bne.n	8009bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009bf6:	bf00      	nop
 8009bf8:	3754      	adds	r7, #84	; 0x54
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff ff09 	bl	8009a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c22:	bf00      	nop
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b085      	sub	sp, #20
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b21      	cmp	r3, #33	; 0x21
 8009c3c:	d13e      	bne.n	8009cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c46:	d114      	bne.n	8009c72 <UART_Transmit_IT+0x48>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d110      	bne.n	8009c72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	1c9a      	adds	r2, r3, #2
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	621a      	str	r2, [r3, #32]
 8009c70:	e008      	b.n	8009c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	1c59      	adds	r1, r3, #1
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	6211      	str	r1, [r2, #32]
 8009c7c:	781a      	ldrb	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	4619      	mov	r1, r3
 8009c92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10f      	bne.n	8009cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e000      	b.n	8009cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009cbc:	2302      	movs	r3, #2
  }
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b082      	sub	sp, #8
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68da      	ldr	r2, [r3, #12]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff fe8e 	bl	8009a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b08c      	sub	sp, #48	; 0x30
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b22      	cmp	r3, #34	; 0x22
 8009d0c:	f040 80ab 	bne.w	8009e66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d18:	d117      	bne.n	8009d4a <UART_Receive_IT+0x50>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d113      	bne.n	8009d4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d42:	1c9a      	adds	r2, r3, #2
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	629a      	str	r2, [r3, #40]	; 0x28
 8009d48:	e026      	b.n	8009d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d5c:	d007      	beq.n	8009d6e <UART_Receive_IT+0x74>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <UART_Receive_IT+0x82>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	e008      	b.n	8009d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	4619      	mov	r1, r3
 8009da6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d15a      	bne.n	8009e62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0220 	bic.w	r2, r2, #32
 8009dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68da      	ldr	r2, [r3, #12]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695a      	ldr	r2, [r3, #20]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0201 	bic.w	r2, r2, #1
 8009dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d135      	bne.n	8009e58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	613b      	str	r3, [r7, #16]
   return(result);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f023 0310 	bic.w	r3, r3, #16
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	330c      	adds	r3, #12
 8009e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e12:	623a      	str	r2, [r7, #32]
 8009e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	69f9      	ldr	r1, [r7, #28]
 8009e18:	6a3a      	ldr	r2, [r7, #32]
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e5      	bne.n	8009df2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0310 	and.w	r3, r3, #16
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	d10a      	bne.n	8009e4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fdf9 	bl	8009a48 <HAL_UARTEx_RxEventCallback>
 8009e56:	e002      	b.n	8009e5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff fde1 	bl	8009a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	e002      	b.n	8009e68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	e000      	b.n	8009e68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009e66:	2302      	movs	r3, #2
  }
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3730      	adds	r7, #48	; 0x30
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	b09f      	sub	sp, #124	; 0x7c
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e86:	68d9      	ldr	r1, [r3, #12]
 8009e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	ea40 0301 	orr.w	r3, r0, r1
 8009e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e94:	689a      	ldr	r2, [r3, #8]
 8009e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009eb4:	f021 010c 	bic.w	r1, r1, #12
 8009eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ece:	6999      	ldr	r1, [r3, #24]
 8009ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	ea40 0301 	orr.w	r3, r0, r1
 8009ed8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4bc5      	ldr	r3, [pc, #788]	; (800a1f4 <UART_SetConfig+0x384>)
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d004      	beq.n	8009eee <UART_SetConfig+0x7e>
 8009ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	4bc3      	ldr	r3, [pc, #780]	; (800a1f8 <UART_SetConfig+0x388>)
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d103      	bne.n	8009ef6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009eee:	f7fd fabd 	bl	800746c <HAL_RCC_GetPCLK2Freq>
 8009ef2:	6778      	str	r0, [r7, #116]	; 0x74
 8009ef4:	e002      	b.n	8009efc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ef6:	f7fd faa5 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 8009efa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f04:	f040 80b6 	bne.w	800a074 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f0a:	461c      	mov	r4, r3
 8009f0c:	f04f 0500 	mov.w	r5, #0
 8009f10:	4622      	mov	r2, r4
 8009f12:	462b      	mov	r3, r5
 8009f14:	1891      	adds	r1, r2, r2
 8009f16:	6439      	str	r1, [r7, #64]	; 0x40
 8009f18:	415b      	adcs	r3, r3
 8009f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f20:	1912      	adds	r2, r2, r4
 8009f22:	eb45 0303 	adc.w	r3, r5, r3
 8009f26:	f04f 0000 	mov.w	r0, #0
 8009f2a:	f04f 0100 	mov.w	r1, #0
 8009f2e:	00d9      	lsls	r1, r3, #3
 8009f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f34:	00d0      	lsls	r0, r2, #3
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	1911      	adds	r1, r2, r4
 8009f3c:	6639      	str	r1, [r7, #96]	; 0x60
 8009f3e:	416b      	adcs	r3, r5
 8009f40:	667b      	str	r3, [r7, #100]	; 0x64
 8009f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f04f 0300 	mov.w	r3, #0
 8009f4c:	1891      	adds	r1, r2, r2
 8009f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f50:	415b      	adcs	r3, r3
 8009f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009f5c:	f7f6 f9a0 	bl	80002a0 <__aeabi_uldivmod>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4ba5      	ldr	r3, [pc, #660]	; (800a1fc <UART_SetConfig+0x38c>)
 8009f66:	fba3 2302 	umull	r2, r3, r3, r2
 8009f6a:	095b      	lsrs	r3, r3, #5
 8009f6c:	011e      	lsls	r6, r3, #4
 8009f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f70:	461c      	mov	r4, r3
 8009f72:	f04f 0500 	mov.w	r5, #0
 8009f76:	4622      	mov	r2, r4
 8009f78:	462b      	mov	r3, r5
 8009f7a:	1891      	adds	r1, r2, r2
 8009f7c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f7e:	415b      	adcs	r3, r3
 8009f80:	637b      	str	r3, [r7, #52]	; 0x34
 8009f82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f86:	1912      	adds	r2, r2, r4
 8009f88:	eb45 0303 	adc.w	r3, r5, r3
 8009f8c:	f04f 0000 	mov.w	r0, #0
 8009f90:	f04f 0100 	mov.w	r1, #0
 8009f94:	00d9      	lsls	r1, r3, #3
 8009f96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f9a:	00d0      	lsls	r0, r2, #3
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	1911      	adds	r1, r2, r4
 8009fa2:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fa4:	416b      	adcs	r3, r5
 8009fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	461a      	mov	r2, r3
 8009fae:	f04f 0300 	mov.w	r3, #0
 8009fb2:	1891      	adds	r1, r2, r2
 8009fb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8009fb6:	415b      	adcs	r3, r3
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009fc2:	f7f6 f96d 	bl	80002a0 <__aeabi_uldivmod>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4b8c      	ldr	r3, [pc, #560]	; (800a1fc <UART_SetConfig+0x38c>)
 8009fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8009fd0:	095b      	lsrs	r3, r3, #5
 8009fd2:	2164      	movs	r1, #100	; 0x64
 8009fd4:	fb01 f303 	mul.w	r3, r1, r3
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	3332      	adds	r3, #50	; 0x32
 8009fde:	4a87      	ldr	r2, [pc, #540]	; (800a1fc <UART_SetConfig+0x38c>)
 8009fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe4:	095b      	lsrs	r3, r3, #5
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009fec:	441e      	add	r6, r3
 8009fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f04f 0100 	mov.w	r1, #0
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	1894      	adds	r4, r2, r2
 8009ffc:	623c      	str	r4, [r7, #32]
 8009ffe:	415b      	adcs	r3, r3
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
 800a002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a006:	1812      	adds	r2, r2, r0
 800a008:	eb41 0303 	adc.w	r3, r1, r3
 800a00c:	f04f 0400 	mov.w	r4, #0
 800a010:	f04f 0500 	mov.w	r5, #0
 800a014:	00dd      	lsls	r5, r3, #3
 800a016:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a01a:	00d4      	lsls	r4, r2, #3
 800a01c:	4622      	mov	r2, r4
 800a01e:	462b      	mov	r3, r5
 800a020:	1814      	adds	r4, r2, r0
 800a022:	653c      	str	r4, [r7, #80]	; 0x50
 800a024:	414b      	adcs	r3, r1
 800a026:	657b      	str	r3, [r7, #84]	; 0x54
 800a028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	461a      	mov	r2, r3
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	1891      	adds	r1, r2, r2
 800a034:	61b9      	str	r1, [r7, #24]
 800a036:	415b      	adcs	r3, r3
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a03e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a042:	f7f6 f92d 	bl	80002a0 <__aeabi_uldivmod>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4b6c      	ldr	r3, [pc, #432]	; (800a1fc <UART_SetConfig+0x38c>)
 800a04c:	fba3 1302 	umull	r1, r3, r3, r2
 800a050:	095b      	lsrs	r3, r3, #5
 800a052:	2164      	movs	r1, #100	; 0x64
 800a054:	fb01 f303 	mul.w	r3, r1, r3
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	3332      	adds	r3, #50	; 0x32
 800a05e:	4a67      	ldr	r2, [pc, #412]	; (800a1fc <UART_SetConfig+0x38c>)
 800a060:	fba2 2303 	umull	r2, r3, r2, r3
 800a064:	095b      	lsrs	r3, r3, #5
 800a066:	f003 0207 	and.w	r2, r3, #7
 800a06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4432      	add	r2, r6
 800a070:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a072:	e0b9      	b.n	800a1e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a076:	461c      	mov	r4, r3
 800a078:	f04f 0500 	mov.w	r5, #0
 800a07c:	4622      	mov	r2, r4
 800a07e:	462b      	mov	r3, r5
 800a080:	1891      	adds	r1, r2, r2
 800a082:	6139      	str	r1, [r7, #16]
 800a084:	415b      	adcs	r3, r3
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a08c:	1912      	adds	r2, r2, r4
 800a08e:	eb45 0303 	adc.w	r3, r5, r3
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f04f 0100 	mov.w	r1, #0
 800a09a:	00d9      	lsls	r1, r3, #3
 800a09c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0a0:	00d0      	lsls	r0, r2, #3
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	eb12 0804 	adds.w	r8, r2, r4
 800a0aa:	eb43 0905 	adc.w	r9, r3, r5
 800a0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f04f 0100 	mov.w	r1, #0
 800a0b8:	f04f 0200 	mov.w	r2, #0
 800a0bc:	f04f 0300 	mov.w	r3, #0
 800a0c0:	008b      	lsls	r3, r1, #2
 800a0c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a0c6:	0082      	lsls	r2, r0, #2
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 f8e8 	bl	80002a0 <__aeabi_uldivmod>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4b49      	ldr	r3, [pc, #292]	; (800a1fc <UART_SetConfig+0x38c>)
 800a0d6:	fba3 2302 	umull	r2, r3, r3, r2
 800a0da:	095b      	lsrs	r3, r3, #5
 800a0dc:	011e      	lsls	r6, r3, #4
 800a0de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f04f 0100 	mov.w	r1, #0
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	1894      	adds	r4, r2, r2
 800a0ec:	60bc      	str	r4, [r7, #8]
 800a0ee:	415b      	adcs	r3, r3
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0f6:	1812      	adds	r2, r2, r0
 800a0f8:	eb41 0303 	adc.w	r3, r1, r3
 800a0fc:	f04f 0400 	mov.w	r4, #0
 800a100:	f04f 0500 	mov.w	r5, #0
 800a104:	00dd      	lsls	r5, r3, #3
 800a106:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a10a:	00d4      	lsls	r4, r2, #3
 800a10c:	4622      	mov	r2, r4
 800a10e:	462b      	mov	r3, r5
 800a110:	1814      	adds	r4, r2, r0
 800a112:	64bc      	str	r4, [r7, #72]	; 0x48
 800a114:	414b      	adcs	r3, r1
 800a116:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f04f 0100 	mov.w	r1, #0
 800a122:	f04f 0200 	mov.w	r2, #0
 800a126:	f04f 0300 	mov.w	r3, #0
 800a12a:	008b      	lsls	r3, r1, #2
 800a12c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a130:	0082      	lsls	r2, r0, #2
 800a132:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a136:	f7f6 f8b3 	bl	80002a0 <__aeabi_uldivmod>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4b2f      	ldr	r3, [pc, #188]	; (800a1fc <UART_SetConfig+0x38c>)
 800a140:	fba3 1302 	umull	r1, r3, r3, r2
 800a144:	095b      	lsrs	r3, r3, #5
 800a146:	2164      	movs	r1, #100	; 0x64
 800a148:	fb01 f303 	mul.w	r3, r1, r3
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	3332      	adds	r3, #50	; 0x32
 800a152:	4a2a      	ldr	r2, [pc, #168]	; (800a1fc <UART_SetConfig+0x38c>)
 800a154:	fba2 2303 	umull	r2, r3, r2, r3
 800a158:	095b      	lsrs	r3, r3, #5
 800a15a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a15e:	441e      	add	r6, r3
 800a160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a162:	4618      	mov	r0, r3
 800a164:	f04f 0100 	mov.w	r1, #0
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	1894      	adds	r4, r2, r2
 800a16e:	603c      	str	r4, [r7, #0]
 800a170:	415b      	adcs	r3, r3
 800a172:	607b      	str	r3, [r7, #4]
 800a174:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a178:	1812      	adds	r2, r2, r0
 800a17a:	eb41 0303 	adc.w	r3, r1, r3
 800a17e:	f04f 0400 	mov.w	r4, #0
 800a182:	f04f 0500 	mov.w	r5, #0
 800a186:	00dd      	lsls	r5, r3, #3
 800a188:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a18c:	00d4      	lsls	r4, r2, #3
 800a18e:	4622      	mov	r2, r4
 800a190:	462b      	mov	r3, r5
 800a192:	eb12 0a00 	adds.w	sl, r2, r0
 800a196:	eb43 0b01 	adc.w	fp, r3, r1
 800a19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f04f 0100 	mov.w	r1, #0
 800a1a4:	f04f 0200 	mov.w	r2, #0
 800a1a8:	f04f 0300 	mov.w	r3, #0
 800a1ac:	008b      	lsls	r3, r1, #2
 800a1ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a1b2:	0082      	lsls	r2, r0, #2
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	4659      	mov	r1, fp
 800a1b8:	f7f6 f872 	bl	80002a0 <__aeabi_uldivmod>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <UART_SetConfig+0x38c>)
 800a1c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a1c6:	095b      	lsrs	r3, r3, #5
 800a1c8:	2164      	movs	r1, #100	; 0x64
 800a1ca:	fb01 f303 	mul.w	r3, r1, r3
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	3332      	adds	r3, #50	; 0x32
 800a1d4:	4a09      	ldr	r2, [pc, #36]	; (800a1fc <UART_SetConfig+0x38c>)
 800a1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1da:	095b      	lsrs	r3, r3, #5
 800a1dc:	f003 020f 	and.w	r2, r3, #15
 800a1e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4432      	add	r2, r6
 800a1e6:	609a      	str	r2, [r3, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	377c      	adds	r7, #124	; 0x7c
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f2:	bf00      	nop
 800a1f4:	40011000 	.word	0x40011000
 800a1f8:	40011400 	.word	0x40011400
 800a1fc:	51eb851f 	.word	0x51eb851f

0800a200 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a200:	b084      	sub	sp, #16
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	f107 001c 	add.w	r0, r7, #28
 800a20e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a216:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a218:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a21a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a21e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a222:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a226:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a22a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a23a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	b004      	add	sp, #16
 800a254:	4770      	bx	lr

0800a256 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2203      	movs	r2, #3
 800a29e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a2a0:	2002      	movs	r0, #2
 800a2a2:	f7f7 febb 	bl	800201c <HAL_Delay>
  
  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0303 	and.w	r3, r3, #3
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a2f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a2f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a306:	f023 030f 	bic.w	r3, r3, #15
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	b2db      	uxtb	r3, r3
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b085      	sub	sp, #20
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3314      	adds	r3, #20
 800a348:	461a      	mov	r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
}  
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a386:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a38c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a392:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	4313      	orrs	r3, r2
 800a398:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0

}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3c6:	2310      	movs	r3, #16
 800a3c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3d8:	f107 0308 	add.w	r3, r7, #8
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff ff74 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e8:	2110      	movs	r1, #16
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa44 	bl	800a878 <SDMMC_GetCmdResp1>
 800a3f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3f2:	69fb      	ldr	r3, [r7, #28]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a40a:	2311      	movs	r3, #17
 800a40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a40e:	2340      	movs	r3, #64	; 0x40
 800a410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a41a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a41c:	f107 0308 	add.w	r3, r7, #8
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff ff52 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a428:	f241 3288 	movw	r2, #5000	; 0x1388
 800a42c:	2111      	movs	r1, #17
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fa22 	bl	800a878 <SDMMC_GetCmdResp1>
 800a434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a44e:	2312      	movs	r3, #18
 800a450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a452:	2340      	movs	r3, #64	; 0x40
 800a454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a456:	2300      	movs	r3, #0
 800a458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a45e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a460:	f107 0308 	add.w	r3, r7, #8
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff ff30 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a46c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a470:	2112      	movs	r1, #18
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa00 	bl	800a878 <SDMMC_GetCmdResp1>
 800a478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a47a:	69fb      	ldr	r3, [r7, #28]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a492:	2318      	movs	r3, #24
 800a494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a496:	2340      	movs	r3, #64	; 0x40
 800a498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a49a:	2300      	movs	r3, #0
 800a49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4a4:	f107 0308 	add.w	r3, r7, #8
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff ff0e 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b4:	2118      	movs	r1, #24
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9de 	bl	800a878 <SDMMC_GetCmdResp1>
 800a4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4be:	69fb      	ldr	r3, [r7, #28]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3720      	adds	r7, #32
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4d6:	2319      	movs	r3, #25
 800a4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4da:	2340      	movs	r3, #64	; 0x40
 800a4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4e8:	f107 0308 	add.w	r3, r7, #8
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff feec 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f8:	2119      	movs	r1, #25
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f9bc 	bl	800a878 <SDMMC_GetCmdResp1>
 800a500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a502:	69fb      	ldr	r3, [r7, #28]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3720      	adds	r7, #32
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a518:	230c      	movs	r3, #12
 800a51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a52a:	f107 0308 	add.w	r3, r7, #8
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff fecb 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a536:	4a05      	ldr	r2, [pc, #20]	; (800a54c <SDMMC_CmdStopTransfer+0x40>)
 800a538:	210c      	movs	r1, #12
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f99c 	bl	800a878 <SDMMC_GetCmdResp1>
 800a540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a542:	69fb      	ldr	r3, [r7, #28]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	05f5e100 	.word	0x05f5e100

0800a550 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08a      	sub	sp, #40	; 0x28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a560:	2307      	movs	r3, #7
 800a562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a568:	2300      	movs	r3, #0
 800a56a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a570:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a572:	f107 0310 	add.w	r3, r7, #16
 800a576:	4619      	mov	r1, r3
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f7ff fea7 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a582:	2107      	movs	r1, #7
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f977 	bl	800a878 <SDMMC_GetCmdResp1>
 800a58a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3728      	adds	r7, #40	; 0x28
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b088      	sub	sp, #32
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5b4:	f107 0308 	add.w	r3, r7, #8
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fe86 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f92d 	bl	800a820 <SDMMC_GetCmdError>
 800a5c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3720      	adds	r7, #32
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b088      	sub	sp, #32
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a5da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a5de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a5e0:	2308      	movs	r3, #8
 800a5e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5f2:	f107 0308 	add.w	r3, r7, #8
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fe67 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fb24 	bl	800ac4c <SDMMC_GetCmdResp7>
 800a604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a606:	69fb      	ldr	r3, [r7, #28]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3720      	adds	r7, #32
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a61e:	2337      	movs	r3, #55	; 0x37
 800a620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a622:	2340      	movs	r3, #64	; 0x40
 800a624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a626:	2300      	movs	r3, #0
 800a628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a62a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a62e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a630:	f107 0308 	add.w	r3, r7, #8
 800a634:	4619      	mov	r1, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff fe48 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a640:	2137      	movs	r1, #55	; 0x37
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f918 	bl	800a878 <SDMMC_GetCmdResp1>
 800a648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a64a:	69fb      	ldr	r3, [r7, #28]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a66a:	2329      	movs	r3, #41	; 0x29
 800a66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a66e:	2340      	movs	r3, #64	; 0x40
 800a670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff fe22 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fa2b 	bl	800aae4 <SDMMC_GetCmdResp3>
 800a68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a690:	69fb      	ldr	r3, [r7, #28]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a6a8:	2306      	movs	r3, #6
 800a6aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6ac:	2340      	movs	r3, #64	; 0x40
 800a6ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6ba:	f107 0308 	add.w	r3, r7, #8
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff fe03 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ca:	2106      	movs	r1, #6
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f8d3 	bl	800a878 <SDMMC_GetCmdResp1>
 800a6d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3720      	adds	r7, #32
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b088      	sub	sp, #32
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a6ea:	2333      	movs	r3, #51	; 0x33
 800a6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fde2 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a708:	f241 3288 	movw	r2, #5000	; 0x1388
 800a70c:	2133      	movs	r1, #51	; 0x33
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f8b2 	bl	800a878 <SDMMC_GetCmdResp1>
 800a714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a716:	69fb      	ldr	r3, [r7, #28]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a72c:	2302      	movs	r3, #2
 800a72e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a730:	23c0      	movs	r3, #192	; 0xc0
 800a732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a73e:	f107 0308 	add.w	r3, r7, #8
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff fdc1 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f982 	bl	800aa54 <SDMMC_GetCmdResp2>
 800a750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a752:	69fb      	ldr	r3, [r7, #28]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3720      	adds	r7, #32
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a76a:	2309      	movs	r3, #9
 800a76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a76e:	23c0      	movs	r3, #192	; 0xc0
 800a770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a772:	2300      	movs	r3, #0
 800a774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a77a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a77c:	f107 0308 	add.w	r3, r7, #8
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fda2 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f963 	bl	800aa54 <SDMMC_GetCmdResp2>
 800a78e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a790:	69fb      	ldr	r3, [r7, #28]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3720      	adds	r7, #32
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b088      	sub	sp, #32
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7ac:	2340      	movs	r3, #64	; 0x40
 800a7ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7ba:	f107 0308 	add.w	r3, r7, #8
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff fd83 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	2103      	movs	r1, #3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9c8 	bl	800ab60 <SDMMC_GetCmdResp6>
 800a7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3720      	adds	r7, #32
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a7ea:	230d      	movs	r3, #13
 800a7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7ee:	2340      	movs	r3, #64	; 0x40
 800a7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff fd62 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a808:	f241 3288 	movw	r2, #5000	; 0x1388
 800a80c:	210d      	movs	r1, #13
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f832 	bl	800a878 <SDMMC_GetCmdResp1>
 800a814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a828:	4b11      	ldr	r3, [pc, #68]	; (800a870 <SDMMC_GetCmdError+0x50>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a11      	ldr	r2, [pc, #68]	; (800a874 <SDMMC_GetCmdError+0x54>)
 800a82e:	fba2 2303 	umull	r2, r3, r2, r3
 800a832:	0a5b      	lsrs	r3, r3, #9
 800a834:	f241 3288 	movw	r2, #5000	; 0x1388
 800a838:	fb02 f303 	mul.w	r3, r2, r3
 800a83c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1e5a      	subs	r2, r3, #1
 800a842:	60fa      	str	r2, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a848:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a84c:	e009      	b.n	800a862 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0f1      	beq.n	800a83e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	22c5      	movs	r2, #197	; 0xc5
 800a85e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	20000010 	.word	0x20000010
 800a874:	10624dd3 	.word	0x10624dd3

0800a878 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	460b      	mov	r3, r1
 800a882:	607a      	str	r2, [r7, #4]
 800a884:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a886:	4b70      	ldr	r3, [pc, #448]	; (800aa48 <SDMMC_GetCmdResp1+0x1d0>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a70      	ldr	r2, [pc, #448]	; (800aa4c <SDMMC_GetCmdResp1+0x1d4>)
 800a88c:	fba2 2303 	umull	r2, r3, r2, r3
 800a890:	0a5a      	lsrs	r2, r3, #9
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	fb02 f303 	mul.w	r3, r2, r3
 800a898:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	1e5a      	subs	r2, r3, #1
 800a89e:	61fa      	str	r2, [r7, #28]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8a8:	e0c9      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0ef      	beq.n	800a89a <SDMMC_GetCmdResp1+0x22>
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1ea      	bne.n	800a89a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2204      	movs	r2, #4
 800a8d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8d6:	2304      	movs	r3, #4
 800a8d8:	e0b1      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d004      	beq.n	800a8f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e0a6      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	22c5      	movs	r2, #197	; 0xc5
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fd12 	bl	800a320 <SDIO_GetCommandResponse>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	461a      	mov	r2, r3
 800a900:	7afb      	ldrb	r3, [r7, #11]
 800a902:	4293      	cmp	r3, r2
 800a904:	d001      	beq.n	800a90a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a906:	2301      	movs	r3, #1
 800a908:	e099      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a90a:	2100      	movs	r1, #0
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff fd14 	bl	800a33a <SDIO_GetResponse>
 800a912:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	4b4e      	ldr	r3, [pc, #312]	; (800aa50 <SDMMC_GetCmdResp1+0x1d8>)
 800a918:	4013      	ands	r3, r2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a91e:	2300      	movs	r3, #0
 800a920:	e08d      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	da02      	bge.n	800a92e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a92c:	e087      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a938:	2340      	movs	r3, #64	; 0x40
 800a93a:	e080      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a946:	2380      	movs	r3, #128	; 0x80
 800a948:	e079      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a954:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a958:	e071      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a964:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a968:	e069      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a978:	e061      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a988:	e059      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a998:	e051      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9a8:	e049      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a9b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9b8:	e041      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a9c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9c8:	e039      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a9d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a9d8:	e031      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a9e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a9e8:	e029      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a9f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9f8:	e021      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aa04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa08:	e019      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa18:	e011      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aa24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa28:	e009      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f003 0308 	and.w	r3, r3, #8
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aa38:	e001      	b.n	800aa3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3720      	adds	r7, #32
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000010 	.word	0x20000010
 800aa4c:	10624dd3 	.word	0x10624dd3
 800aa50:	fdffe008 	.word	0xfdffe008

0800aa54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa5c:	4b1f      	ldr	r3, [pc, #124]	; (800aadc <SDMMC_GetCmdResp2+0x88>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <SDMMC_GetCmdResp2+0x8c>)
 800aa62:	fba2 2303 	umull	r2, r3, r2, r3
 800aa66:	0a5b      	lsrs	r3, r3, #9
 800aa68:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa6c:	fb02 f303 	mul.w	r3, r2, r3
 800aa70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	1e5a      	subs	r2, r3, #1
 800aa76:	60fa      	str	r2, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d102      	bne.n	800aa82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa80:	e026      	b.n	800aad0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0ef      	beq.n	800aa72 <SDMMC_GetCmdResp2+0x1e>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1ea      	bne.n	800aa72 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2204      	movs	r2, #4
 800aaac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aaae:	2304      	movs	r3, #4
 800aab0:	e00e      	b.n	800aad0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e003      	b.n	800aad0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	22c5      	movs	r2, #197	; 0xc5
 800aacc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	20000010 	.word	0x20000010
 800aae0:	10624dd3 	.word	0x10624dd3

0800aae4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aaec:	4b1a      	ldr	r3, [pc, #104]	; (800ab58 <SDMMC_GetCmdResp3+0x74>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a1a      	ldr	r2, [pc, #104]	; (800ab5c <SDMMC_GetCmdResp3+0x78>)
 800aaf2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf6:	0a5b      	lsrs	r3, r3, #9
 800aaf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aafc:	fb02 f303 	mul.w	r3, r2, r3
 800ab00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	1e5a      	subs	r2, r3, #1
 800ab06:	60fa      	str	r2, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab10:	e01b      	b.n	800ab4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0ef      	beq.n	800ab02 <SDMMC_GetCmdResp3+0x1e>
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1ea      	bne.n	800ab02 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d004      	beq.n	800ab42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2204      	movs	r2, #4
 800ab3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab3e:	2304      	movs	r3, #4
 800ab40:	e003      	b.n	800ab4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	22c5      	movs	r2, #197	; 0xc5
 800ab46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	20000010 	.word	0x20000010
 800ab5c:	10624dd3 	.word	0x10624dd3

0800ab60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab6e:	4b35      	ldr	r3, [pc, #212]	; (800ac44 <SDMMC_GetCmdResp6+0xe4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a35      	ldr	r2, [pc, #212]	; (800ac48 <SDMMC_GetCmdResp6+0xe8>)
 800ab74:	fba2 2303 	umull	r2, r3, r2, r3
 800ab78:	0a5b      	lsrs	r3, r3, #9
 800ab7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	1e5a      	subs	r2, r3, #1
 800ab88:	61fa      	str	r2, [r7, #28]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d102      	bne.n	800ab94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab92:	e052      	b.n	800ac3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab98:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0ef      	beq.n	800ab84 <SDMMC_GetCmdResp6+0x24>
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1ea      	bne.n	800ab84 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d004      	beq.n	800abc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2204      	movs	r2, #4
 800abbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abc0:	2304      	movs	r3, #4
 800abc2:	e03a      	b.n	800ac3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2201      	movs	r2, #1
 800abd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e02f      	b.n	800ac3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff fba0 	bl	800a320 <SDIO_GetCommandResponse>
 800abe0:	4603      	mov	r3, r0
 800abe2:	461a      	mov	r2, r3
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d001      	beq.n	800abee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abea:	2301      	movs	r3, #1
 800abec:	e025      	b.n	800ac3a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	22c5      	movs	r2, #197	; 0xc5
 800abf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800abf4:	2100      	movs	r1, #0
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7ff fb9f 	bl	800a33a <SDIO_GetResponse>
 800abfc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d106      	bne.n	800ac16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	0c1b      	lsrs	r3, r3, #16
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	e011      	b.n	800ac3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac24:	e009      	b.n	800ac3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac34:	e001      	b.n	800ac3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3720      	adds	r7, #32
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20000010 	.word	0x20000010
 800ac48:	10624dd3 	.word	0x10624dd3

0800ac4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac54:	4b22      	ldr	r3, [pc, #136]	; (800ace0 <SDMMC_GetCmdResp7+0x94>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a22      	ldr	r2, [pc, #136]	; (800ace4 <SDMMC_GetCmdResp7+0x98>)
 800ac5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac5e:	0a5b      	lsrs	r3, r3, #9
 800ac60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac64:	fb02 f303 	mul.w	r3, r2, r3
 800ac68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1e5a      	subs	r2, r3, #1
 800ac6e:	60fa      	str	r2, [r7, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac78:	e02c      	b.n	800acd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0ef      	beq.n	800ac6a <SDMMC_GetCmdResp7+0x1e>
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1ea      	bne.n	800ac6a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d004      	beq.n	800acaa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2204      	movs	r2, #4
 800aca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aca6:	2304      	movs	r3, #4
 800aca8:	e014      	b.n	800acd4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acae:	f003 0301 	and.w	r3, r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d004      	beq.n	800acc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e009      	b.n	800acd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2240      	movs	r2, #64	; 0x40
 800acd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800acd2:	2300      	movs	r3, #0
  
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	20000010 	.word	0x20000010
 800ace4:	10624dd3 	.word	0x10624dd3

0800ace8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800acec:	4904      	ldr	r1, [pc, #16]	; (800ad00 <MX_FATFS_Init+0x18>)
 800acee:	4805      	ldr	r0, [pc, #20]	; (800ad04 <MX_FATFS_Init+0x1c>)
 800acf0:	f004 fcdc 	bl	800f6ac <FATFS_LinkDriver>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
 800acf8:	4b03      	ldr	r3, [pc, #12]	; (800ad08 <MX_FATFS_Init+0x20>)
 800acfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800acfc:	bf00      	nop
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	2000d80c 	.word	0x2000d80c
 800ad04:	0804e214 	.word	0x0804e214
 800ad08:	2000d808 	.word	0x2000d808

0800ad0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ad26:	f000 f896 	bl	800ae56 <BSP_SD_IsDetected>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d001      	beq.n	800ad34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e012      	b.n	800ad5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ad34:	480b      	ldr	r0, [pc, #44]	; (800ad64 <BSP_SD_Init+0x48>)
 800ad36:	f7fc fd1f 	bl	8007778 <HAL_SD_Init>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d109      	bne.n	800ad58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ad44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad48:	4806      	ldr	r0, [pc, #24]	; (800ad64 <BSP_SD_Init+0x48>)
 800ad4a:	f7fd faeb 	bl	8008324 <HAL_SD_ConfigWideBusOperation>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ad58:	79fb      	ldrb	r3, [r7, #7]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	2000d230 	.word	0x2000d230

0800ad68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	68f9      	ldr	r1, [r7, #12]
 800ad7e:	4806      	ldr	r0, [pc, #24]	; (800ad98 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ad80:	f7fc fda8 	bl	80078d4 <HAL_SD_ReadBlocks_DMA>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	2000d230 	.word	0x2000d230

0800ad9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	68f9      	ldr	r1, [r7, #12]
 800adb2:	4806      	ldr	r0, [pc, #24]	; (800adcc <BSP_SD_WriteBlocks_DMA+0x30>)
 800adb4:	f7fc fe70 	bl	8007a98 <HAL_SD_WriteBlocks_DMA>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	2000d230 	.word	0x2000d230

0800add0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800add4:	4805      	ldr	r0, [pc, #20]	; (800adec <BSP_SD_GetCardState+0x1c>)
 800add6:	f7fd fb3f 	bl	8008458 <HAL_SD_GetCardState>
 800adda:	4603      	mov	r3, r0
 800addc:	2b04      	cmp	r3, #4
 800adde:	bf14      	ite	ne
 800ade0:	2301      	movne	r3, #1
 800ade2:	2300      	moveq	r3, #0
 800ade4:	b2db      	uxtb	r3, r3
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	2000d230 	.word	0x2000d230

0800adf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4803      	ldr	r0, [pc, #12]	; (800ae08 <BSP_SD_GetCardInfo+0x18>)
 800adfc:	f7fd fa66 	bl	80082cc <HAL_SD_GetCardInfo>
}
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	2000d230 	.word	0x2000d230

0800ae0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ae14:	f000 f818 	bl	800ae48 <BSP_SD_AbortCallback>
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ae28:	f000 f9a8 	bl	800b17c <BSP_SD_WriteCpltCallback>
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ae3c:	f000 f9ac 	bl	800b198 <BSP_SD_ReadCpltCallback>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	af00      	add	r7, sp, #0

}
 800ae4c:	bf00      	nop
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	b2db      	uxtb	r3, r3
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ae78:	f004 fd99 	bl	800f9ae <osKernelSysTick>
 800ae7c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ae7e:	e006      	b.n	800ae8e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae80:	f7ff ffa6 	bl	800add0 <BSP_SD_GetCardState>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e009      	b.n	800aea2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ae8e:	f004 fd8e 	bl	800f9ae <osKernelSysTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d8f0      	bhi.n	800ae80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800aeb6:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <SD_CheckStatus+0x38>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aebc:	f7ff ff88 	bl	800add0 <BSP_SD_GetCardState>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d107      	bne.n	800aed6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aec6:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <SD_CheckStatus+0x38>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f023 0301 	bic.w	r3, r3, #1
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	4b04      	ldr	r3, [pc, #16]	; (800aee4 <SD_CheckStatus+0x38>)
 800aed4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aed6:	4b03      	ldr	r3, [pc, #12]	; (800aee4 <SD_CheckStatus+0x38>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	b2db      	uxtb	r3, r3
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20000019 	.word	0x20000019

0800aee8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	4603      	mov	r3, r0
 800aef0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800aef2:	4b20      	ldr	r3, [pc, #128]	; (800af74 <SD_initialize+0x8c>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800aef8:	f004 fd4d 	bl	800f996 <osKernelRunning>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d030      	beq.n	800af64 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800af02:	f7ff ff0b 	bl	800ad1c <BSP_SD_Init>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d107      	bne.n	800af1c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7ff ffcc 	bl	800aeac <SD_CheckStatus>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	4b16      	ldr	r3, [pc, #88]	; (800af74 <SD_initialize+0x8c>)
 800af1a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800af1c:	4b15      	ldr	r3, [pc, #84]	; (800af74 <SD_initialize+0x8c>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b01      	cmp	r3, #1
 800af24:	d01e      	beq.n	800af64 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <SD_initialize+0x90>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10e      	bne.n	800af4c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800af2e:	4b13      	ldr	r3, [pc, #76]	; (800af7c <SD_initialize+0x94>)
 800af30:	f107 0408 	add.w	r4, r7, #8
 800af34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800af3a:	f107 0308 	add.w	r3, r7, #8
 800af3e:	2100      	movs	r1, #0
 800af40:	4618      	mov	r0, r3
 800af42:	f004 ff0a 	bl	800fd5a <osMessageCreate>
 800af46:	4603      	mov	r3, r0
 800af48:	4a0b      	ldr	r2, [pc, #44]	; (800af78 <SD_initialize+0x90>)
 800af4a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800af4c:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <SD_initialize+0x90>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d107      	bne.n	800af64 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800af54:	4b07      	ldr	r3, [pc, #28]	; (800af74 <SD_initialize+0x8c>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	f043 0301 	orr.w	r3, r3, #1
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	4b04      	ldr	r3, [pc, #16]	; (800af74 <SD_initialize+0x8c>)
 800af62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800af64:	4b03      	ldr	r3, [pc, #12]	; (800af74 <SD_initialize+0x8c>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	b2db      	uxtb	r3, r3
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd90      	pop	{r4, r7, pc}
 800af72:	bf00      	nop
 800af74:	20000019 	.word	0x20000019
 800af78:	20000b24 	.word	0x20000b24
 800af7c:	080214e8 	.word	0x080214e8

0800af80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff ff8d 	bl	800aeac <SD_CheckStatus>
 800af92:	4603      	mov	r3, r0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08a      	sub	sp, #40	; 0x28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	4603      	mov	r3, r0
 800afaa:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800afb2:	f247 5030 	movw	r0, #30000	; 0x7530
 800afb6:	f7ff ff5b 	bl	800ae70 <SD_CheckStatusWithTimeout>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	da02      	bge.n	800afc6 <SD_read+0x2a>
  {
    return res;
 800afc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afc4:	e032      	b.n	800b02c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	68b8      	ldr	r0, [r7, #8]
 800afcc:	f7ff fecc 	bl	800ad68 <BSP_SD_ReadBlocks_DMA>
 800afd0:	4603      	mov	r3, r0
 800afd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800afd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d124      	bne.n	800b028 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <SD_read+0x98>)
 800afe0:	6819      	ldr	r1, [r3, #0]
 800afe2:	f107 0314 	add.w	r3, r7, #20
 800afe6:	f247 5230 	movw	r2, #30000	; 0x7530
 800afea:	4618      	mov	r0, r3
 800afec:	f004 ff1e 	bl	800fe2c <osMessageGet>

    if (event.status == osEventMessage)
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2b10      	cmp	r3, #16
 800aff4:	d118      	bne.n	800b028 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d115      	bne.n	800b028 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800affc:	f004 fcd7 	bl	800f9ae <osKernelSysTick>
 800b000:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b002:	e008      	b.n	800b016 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b004:	f7ff fee4 	bl	800add0 <BSP_SD_GetCardState>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d103      	bne.n	800b016 <SD_read+0x7a>
              {
                res = RES_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b014:	e008      	b.n	800b028 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b016:	f004 fcca 	bl	800f9ae <osKernelSysTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	f247 522f 	movw	r2, #29999	; 0x752f
 800b024:	4293      	cmp	r3, r2
 800b026:	d9ed      	bls.n	800b004 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3728      	adds	r7, #40	; 0x28
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	20000b24 	.word	0x20000b24

0800b038 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	607a      	str	r2, [r7, #4]
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b04e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b052:	f7ff ff0d 	bl	800ae70 <SD_CheckStatusWithTimeout>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	da02      	bge.n	800b062 <SD_write+0x2a>
  {
    return res;
 800b05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b060:	e02e      	b.n	800b0c0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	68b8      	ldr	r0, [r7, #8]
 800b068:	f7ff fe98 	bl	800ad9c <BSP_SD_WriteBlocks_DMA>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d124      	bne.n	800b0bc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b072:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <SD_write+0x90>)
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	f107 0314 	add.w	r3, r7, #20
 800b07a:	f247 5230 	movw	r2, #30000	; 0x7530
 800b07e:	4618      	mov	r0, r3
 800b080:	f004 fed4 	bl	800fe2c <osMessageGet>

    if (event.status == osEventMessage)
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b10      	cmp	r3, #16
 800b088:	d118      	bne.n	800b0bc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d115      	bne.n	800b0bc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b090:	f004 fc8d 	bl	800f9ae <osKernelSysTick>
 800b094:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b096:	e008      	b.n	800b0aa <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b098:	f7ff fe9a 	bl	800add0 <BSP_SD_GetCardState>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d103      	bne.n	800b0aa <SD_write+0x72>
          {
            res = RES_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b0a8:	e008      	b.n	800b0bc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b0aa:	f004 fc80 	bl	800f9ae <osKernelSysTick>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d9ed      	bls.n	800b098 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3728      	adds	r7, #40	; 0x28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	20000b24 	.word	0x20000b24

0800b0cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08c      	sub	sp, #48	; 0x30
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	603a      	str	r2, [r7, #0]
 800b0d6:	71fb      	strb	r3, [r7, #7]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b0e2:	4b25      	ldr	r3, [pc, #148]	; (800b178 <SD_ioctl+0xac>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <SD_ioctl+0x28>
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e03c      	b.n	800b16e <SD_ioctl+0xa2>

  switch (cmd)
 800b0f4:	79bb      	ldrb	r3, [r7, #6]
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d834      	bhi.n	800b164 <SD_ioctl+0x98>
 800b0fa:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <SD_ioctl+0x34>)
 800b0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b100:	0800b111 	.word	0x0800b111
 800b104:	0800b119 	.word	0x0800b119
 800b108:	0800b131 	.word	0x0800b131
 800b10c:	0800b14b 	.word	0x0800b14b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b116:	e028      	b.n	800b16a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b118:	f107 030c 	add.w	r3, r7, #12
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff fe67 	bl	800adf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b12e:	e01c      	b.n	800b16a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b130:	f107 030c 	add.w	r3, r7, #12
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff fe5b 	bl	800adf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b148:	e00f      	b.n	800b16a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	4618      	mov	r0, r3
 800b150:	f7ff fe4e 	bl	800adf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	0a5a      	lsrs	r2, r3, #9
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b162:	e002      	b.n	800b16a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b164:	2304      	movs	r3, #4
 800b166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b16a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3730      	adds	r7, #48	; 0x30
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20000019 	.word	0x20000019

0800b17c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b180:	4b04      	ldr	r3, [pc, #16]	; (800b194 <BSP_SD_WriteCpltCallback+0x18>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2200      	movs	r2, #0
 800b186:	2102      	movs	r1, #2
 800b188:	4618      	mov	r0, r3
 800b18a:	f004 fe0f 	bl	800fdac <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b18e:	bf00      	nop
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000b24 	.word	0x20000b24

0800b198 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b19c:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <BSP_SD_ReadCpltCallback+0x18>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f004 fe01 	bl	800fdac <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b1aa:	bf00      	nop
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20000b24 	.word	0x20000b24

0800b1b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b1b4:	b5b0      	push	{r4, r5, r7, lr}
 800b1b6:	b08e      	sub	sp, #56	; 0x38
 800b1b8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b1ba:	4ba0      	ldr	r3, [pc, #640]	; (800b43c <MX_LWIP_Init+0x288>)
 800b1bc:	22c0      	movs	r2, #192	; 0xc0
 800b1be:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b1c0:	4b9e      	ldr	r3, [pc, #632]	; (800b43c <MX_LWIP_Init+0x288>)
 800b1c2:	22a8      	movs	r2, #168	; 0xa8
 800b1c4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b1c6:	4b9d      	ldr	r3, [pc, #628]	; (800b43c <MX_LWIP_Init+0x288>)
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 243;
 800b1cc:	4b9b      	ldr	r3, [pc, #620]	; (800b43c <MX_LWIP_Init+0x288>)
 800b1ce:	22f3      	movs	r2, #243	; 0xf3
 800b1d0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b1d2:	4b9b      	ldr	r3, [pc, #620]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b1d4:	22ff      	movs	r2, #255	; 0xff
 800b1d6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b1d8:	4b99      	ldr	r3, [pc, #612]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b1da:	22ff      	movs	r2, #255	; 0xff
 800b1dc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b1de:	4b98      	ldr	r3, [pc, #608]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b1e0:	22ff      	movs	r2, #255	; 0xff
 800b1e2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b1e4:	4b96      	ldr	r3, [pc, #600]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b1ea:	4b96      	ldr	r3, [pc, #600]	; (800b444 <MX_LWIP_Init+0x290>)
 800b1ec:	22c0      	movs	r2, #192	; 0xc0
 800b1ee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b1f0:	4b94      	ldr	r3, [pc, #592]	; (800b444 <MX_LWIP_Init+0x290>)
 800b1f2:	22a8      	movs	r2, #168	; 0xa8
 800b1f4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b1f6:	4b93      	ldr	r3, [pc, #588]	; (800b444 <MX_LWIP_Init+0x290>)
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b1fc:	4b91      	ldr	r3, [pc, #580]	; (800b444 <MX_LWIP_Init+0x290>)
 800b1fe:	2201      	movs	r2, #1
 800b200:	70da      	strb	r2, [r3, #3]


/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b202:	2100      	movs	r1, #0
 800b204:	2000      	movs	r0, #0
 800b206:	f007 feb1 	bl	8012f6c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b20a:	4b8c      	ldr	r3, [pc, #560]	; (800b43c <MX_LWIP_Init+0x288>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	061a      	lsls	r2, r3, #24
 800b210:	4b8a      	ldr	r3, [pc, #552]	; (800b43c <MX_LWIP_Init+0x288>)
 800b212:	785b      	ldrb	r3, [r3, #1]
 800b214:	041b      	lsls	r3, r3, #16
 800b216:	431a      	orrs	r2, r3
 800b218:	4b88      	ldr	r3, [pc, #544]	; (800b43c <MX_LWIP_Init+0x288>)
 800b21a:	789b      	ldrb	r3, [r3, #2]
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	4313      	orrs	r3, r2
 800b220:	4a86      	ldr	r2, [pc, #536]	; (800b43c <MX_LWIP_Init+0x288>)
 800b222:	78d2      	ldrb	r2, [r2, #3]
 800b224:	4313      	orrs	r3, r2
 800b226:	061a      	lsls	r2, r3, #24
 800b228:	4b84      	ldr	r3, [pc, #528]	; (800b43c <MX_LWIP_Init+0x288>)
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	0619      	lsls	r1, r3, #24
 800b22e:	4b83      	ldr	r3, [pc, #524]	; (800b43c <MX_LWIP_Init+0x288>)
 800b230:	785b      	ldrb	r3, [r3, #1]
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	4319      	orrs	r1, r3
 800b236:	4b81      	ldr	r3, [pc, #516]	; (800b43c <MX_LWIP_Init+0x288>)
 800b238:	789b      	ldrb	r3, [r3, #2]
 800b23a:	021b      	lsls	r3, r3, #8
 800b23c:	430b      	orrs	r3, r1
 800b23e:	497f      	ldr	r1, [pc, #508]	; (800b43c <MX_LWIP_Init+0x288>)
 800b240:	78c9      	ldrb	r1, [r1, #3]
 800b242:	430b      	orrs	r3, r1
 800b244:	021b      	lsls	r3, r3, #8
 800b246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b24a:	431a      	orrs	r2, r3
 800b24c:	4b7b      	ldr	r3, [pc, #492]	; (800b43c <MX_LWIP_Init+0x288>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	0619      	lsls	r1, r3, #24
 800b252:	4b7a      	ldr	r3, [pc, #488]	; (800b43c <MX_LWIP_Init+0x288>)
 800b254:	785b      	ldrb	r3, [r3, #1]
 800b256:	041b      	lsls	r3, r3, #16
 800b258:	4319      	orrs	r1, r3
 800b25a:	4b78      	ldr	r3, [pc, #480]	; (800b43c <MX_LWIP_Init+0x288>)
 800b25c:	789b      	ldrb	r3, [r3, #2]
 800b25e:	021b      	lsls	r3, r3, #8
 800b260:	430b      	orrs	r3, r1
 800b262:	4976      	ldr	r1, [pc, #472]	; (800b43c <MX_LWIP_Init+0x288>)
 800b264:	78c9      	ldrb	r1, [r1, #3]
 800b266:	430b      	orrs	r3, r1
 800b268:	0a1b      	lsrs	r3, r3, #8
 800b26a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b26e:	431a      	orrs	r2, r3
 800b270:	4b72      	ldr	r3, [pc, #456]	; (800b43c <MX_LWIP_Init+0x288>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	0619      	lsls	r1, r3, #24
 800b276:	4b71      	ldr	r3, [pc, #452]	; (800b43c <MX_LWIP_Init+0x288>)
 800b278:	785b      	ldrb	r3, [r3, #1]
 800b27a:	041b      	lsls	r3, r3, #16
 800b27c:	4319      	orrs	r1, r3
 800b27e:	4b6f      	ldr	r3, [pc, #444]	; (800b43c <MX_LWIP_Init+0x288>)
 800b280:	789b      	ldrb	r3, [r3, #2]
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	430b      	orrs	r3, r1
 800b286:	496d      	ldr	r1, [pc, #436]	; (800b43c <MX_LWIP_Init+0x288>)
 800b288:	78c9      	ldrb	r1, [r1, #3]
 800b28a:	430b      	orrs	r3, r1
 800b28c:	0e1b      	lsrs	r3, r3, #24
 800b28e:	4313      	orrs	r3, r2
 800b290:	4a6d      	ldr	r2, [pc, #436]	; (800b448 <MX_LWIP_Init+0x294>)
 800b292:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b294:	4b6a      	ldr	r3, [pc, #424]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	061a      	lsls	r2, r3, #24
 800b29a:	4b69      	ldr	r3, [pc, #420]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b29c:	785b      	ldrb	r3, [r3, #1]
 800b29e:	041b      	lsls	r3, r3, #16
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	4b67      	ldr	r3, [pc, #412]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2a4:	789b      	ldrb	r3, [r3, #2]
 800b2a6:	021b      	lsls	r3, r3, #8
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	4a65      	ldr	r2, [pc, #404]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2ac:	78d2      	ldrb	r2, [r2, #3]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	061a      	lsls	r2, r3, #24
 800b2b2:	4b63      	ldr	r3, [pc, #396]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	0619      	lsls	r1, r3, #24
 800b2b8:	4b61      	ldr	r3, [pc, #388]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	041b      	lsls	r3, r3, #16
 800b2be:	4319      	orrs	r1, r3
 800b2c0:	4b5f      	ldr	r3, [pc, #380]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2c2:	789b      	ldrb	r3, [r3, #2]
 800b2c4:	021b      	lsls	r3, r3, #8
 800b2c6:	430b      	orrs	r3, r1
 800b2c8:	495d      	ldr	r1, [pc, #372]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2ca:	78c9      	ldrb	r1, [r1, #3]
 800b2cc:	430b      	orrs	r3, r1
 800b2ce:	021b      	lsls	r3, r3, #8
 800b2d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	4b5a      	ldr	r3, [pc, #360]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	0619      	lsls	r1, r3, #24
 800b2dc:	4b58      	ldr	r3, [pc, #352]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	041b      	lsls	r3, r3, #16
 800b2e2:	4319      	orrs	r1, r3
 800b2e4:	4b56      	ldr	r3, [pc, #344]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2e6:	789b      	ldrb	r3, [r3, #2]
 800b2e8:	021b      	lsls	r3, r3, #8
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	4954      	ldr	r1, [pc, #336]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2ee:	78c9      	ldrb	r1, [r1, #3]
 800b2f0:	430b      	orrs	r3, r1
 800b2f2:	0a1b      	lsrs	r3, r3, #8
 800b2f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	4b51      	ldr	r3, [pc, #324]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	0619      	lsls	r1, r3, #24
 800b300:	4b4f      	ldr	r3, [pc, #316]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b302:	785b      	ldrb	r3, [r3, #1]
 800b304:	041b      	lsls	r3, r3, #16
 800b306:	4319      	orrs	r1, r3
 800b308:	4b4d      	ldr	r3, [pc, #308]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b30a:	789b      	ldrb	r3, [r3, #2]
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	430b      	orrs	r3, r1
 800b310:	494b      	ldr	r1, [pc, #300]	; (800b440 <MX_LWIP_Init+0x28c>)
 800b312:	78c9      	ldrb	r1, [r1, #3]
 800b314:	430b      	orrs	r3, r1
 800b316:	0e1b      	lsrs	r3, r3, #24
 800b318:	4313      	orrs	r3, r2
 800b31a:	4a4c      	ldr	r2, [pc, #304]	; (800b44c <MX_LWIP_Init+0x298>)
 800b31c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b31e:	4b49      	ldr	r3, [pc, #292]	; (800b444 <MX_LWIP_Init+0x290>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	061a      	lsls	r2, r3, #24
 800b324:	4b47      	ldr	r3, [pc, #284]	; (800b444 <MX_LWIP_Init+0x290>)
 800b326:	785b      	ldrb	r3, [r3, #1]
 800b328:	041b      	lsls	r3, r3, #16
 800b32a:	431a      	orrs	r2, r3
 800b32c:	4b45      	ldr	r3, [pc, #276]	; (800b444 <MX_LWIP_Init+0x290>)
 800b32e:	789b      	ldrb	r3, [r3, #2]
 800b330:	021b      	lsls	r3, r3, #8
 800b332:	4313      	orrs	r3, r2
 800b334:	4a43      	ldr	r2, [pc, #268]	; (800b444 <MX_LWIP_Init+0x290>)
 800b336:	78d2      	ldrb	r2, [r2, #3]
 800b338:	4313      	orrs	r3, r2
 800b33a:	061a      	lsls	r2, r3, #24
 800b33c:	4b41      	ldr	r3, [pc, #260]	; (800b444 <MX_LWIP_Init+0x290>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	0619      	lsls	r1, r3, #24
 800b342:	4b40      	ldr	r3, [pc, #256]	; (800b444 <MX_LWIP_Init+0x290>)
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	041b      	lsls	r3, r3, #16
 800b348:	4319      	orrs	r1, r3
 800b34a:	4b3e      	ldr	r3, [pc, #248]	; (800b444 <MX_LWIP_Init+0x290>)
 800b34c:	789b      	ldrb	r3, [r3, #2]
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	430b      	orrs	r3, r1
 800b352:	493c      	ldr	r1, [pc, #240]	; (800b444 <MX_LWIP_Init+0x290>)
 800b354:	78c9      	ldrb	r1, [r1, #3]
 800b356:	430b      	orrs	r3, r1
 800b358:	021b      	lsls	r3, r3, #8
 800b35a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b35e:	431a      	orrs	r2, r3
 800b360:	4b38      	ldr	r3, [pc, #224]	; (800b444 <MX_LWIP_Init+0x290>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	0619      	lsls	r1, r3, #24
 800b366:	4b37      	ldr	r3, [pc, #220]	; (800b444 <MX_LWIP_Init+0x290>)
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	041b      	lsls	r3, r3, #16
 800b36c:	4319      	orrs	r1, r3
 800b36e:	4b35      	ldr	r3, [pc, #212]	; (800b444 <MX_LWIP_Init+0x290>)
 800b370:	789b      	ldrb	r3, [r3, #2]
 800b372:	021b      	lsls	r3, r3, #8
 800b374:	430b      	orrs	r3, r1
 800b376:	4933      	ldr	r1, [pc, #204]	; (800b444 <MX_LWIP_Init+0x290>)
 800b378:	78c9      	ldrb	r1, [r1, #3]
 800b37a:	430b      	orrs	r3, r1
 800b37c:	0a1b      	lsrs	r3, r3, #8
 800b37e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b382:	431a      	orrs	r2, r3
 800b384:	4b2f      	ldr	r3, [pc, #188]	; (800b444 <MX_LWIP_Init+0x290>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	0619      	lsls	r1, r3, #24
 800b38a:	4b2e      	ldr	r3, [pc, #184]	; (800b444 <MX_LWIP_Init+0x290>)
 800b38c:	785b      	ldrb	r3, [r3, #1]
 800b38e:	041b      	lsls	r3, r3, #16
 800b390:	4319      	orrs	r1, r3
 800b392:	4b2c      	ldr	r3, [pc, #176]	; (800b444 <MX_LWIP_Init+0x290>)
 800b394:	789b      	ldrb	r3, [r3, #2]
 800b396:	021b      	lsls	r3, r3, #8
 800b398:	430b      	orrs	r3, r1
 800b39a:	492a      	ldr	r1, [pc, #168]	; (800b444 <MX_LWIP_Init+0x290>)
 800b39c:	78c9      	ldrb	r1, [r1, #3]
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	0e1b      	lsrs	r3, r3, #24
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	4a2a      	ldr	r2, [pc, #168]	; (800b450 <MX_LWIP_Init+0x29c>)
 800b3a6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b3a8:	4b2a      	ldr	r3, [pc, #168]	; (800b454 <MX_LWIP_Init+0x2a0>)
 800b3aa:	9302      	str	r3, [sp, #8]
 800b3ac:	4b2a      	ldr	r3, [pc, #168]	; (800b458 <MX_LWIP_Init+0x2a4>)
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	4b26      	ldr	r3, [pc, #152]	; (800b450 <MX_LWIP_Init+0x29c>)
 800b3b6:	4a25      	ldr	r2, [pc, #148]	; (800b44c <MX_LWIP_Init+0x298>)
 800b3b8:	4923      	ldr	r1, [pc, #140]	; (800b448 <MX_LWIP_Init+0x294>)
 800b3ba:	4828      	ldr	r0, [pc, #160]	; (800b45c <MX_LWIP_Init+0x2a8>)
 800b3bc:	f009 ff2a 	bl	8015214 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b3c0:	4826      	ldr	r0, [pc, #152]	; (800b45c <MX_LWIP_Init+0x2a8>)
 800b3c2:	f00a f8d9 	bl	8015578 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b3c6:	4b25      	ldr	r3, [pc, #148]	; (800b45c <MX_LWIP_Init+0x2a8>)
 800b3c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3cc:	089b      	lsrs	r3, r3, #2
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d003      	beq.n	800b3e0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b3d8:	4820      	ldr	r0, [pc, #128]	; (800b45c <MX_LWIP_Init+0x2a8>)
 800b3da:	f00a f8dd 	bl	8015598 <netif_set_up>
 800b3de:	e002      	b.n	800b3e6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b3e0:	481e      	ldr	r0, [pc, #120]	; (800b45c <MX_LWIP_Init+0x2a8>)
 800b3e2:	f00a f945 	bl	8015670 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b3e6:	491e      	ldr	r1, [pc, #120]	; (800b460 <MX_LWIP_Init+0x2ac>)
 800b3e8:	481c      	ldr	r0, [pc, #112]	; (800b45c <MX_LWIP_Init+0x2a8>)
 800b3ea:	f00a f9d7 	bl	801579c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	623b      	str	r3, [r7, #32]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800b3f6:	f107 0320 	add.w	r3, r7, #32
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f004 fbe3 	bl	800fbc8 <osSemaphoreCreate>
 800b402:	4603      	mov	r3, r0
 800b404:	4a17      	ldr	r2, [pc, #92]	; (800b464 <MX_LWIP_Init+0x2b0>)
 800b406:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800b408:	4b17      	ldr	r3, [pc, #92]	; (800b468 <MX_LWIP_Init+0x2b4>)
 800b40a:	4a14      	ldr	r2, [pc, #80]	; (800b45c <MX_LWIP_Init+0x2a8>)
 800b40c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800b40e:	4b15      	ldr	r3, [pc, #84]	; (800b464 <MX_LWIP_Init+0x2b0>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a15      	ldr	r2, [pc, #84]	; (800b468 <MX_LWIP_Init+0x2b4>)
 800b414:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800b416:	4b15      	ldr	r3, [pc, #84]	; (800b46c <MX_LWIP_Init+0x2b8>)
 800b418:	1d3c      	adds	r4, r7, #4
 800b41a:	461d      	mov	r5, r3
 800b41c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b41e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b420:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800b428:	1d3b      	adds	r3, r7, #4
 800b42a:	490f      	ldr	r1, [pc, #60]	; (800b468 <MX_LWIP_Init+0x2b4>)
 800b42c:	4618      	mov	r0, r3
 800b42e:	f004 face 	bl	800f9ce <osThreadCreate>




/* USER CODE END 3 */
}
 800b432:	bf00      	nop
 800b434:	3728      	adds	r7, #40	; 0x28
 800b436:	46bd      	mov	sp, r7
 800b438:	bdb0      	pop	{r4, r5, r7, pc}
 800b43a:	bf00      	nop
 800b43c:	2000dcc0 	.word	0x2000dcc0
 800b440:	2000dcbc 	.word	0x2000dcbc
 800b444:	2000dc80 	.word	0x2000dc80
 800b448:	2000dcb8 	.word	0x2000dcb8
 800b44c:	2000dcc4 	.word	0x2000dcc4
 800b450:	2000dcc8 	.word	0x2000dcc8
 800b454:	08012ea9 	.word	0x08012ea9
 800b458:	0800bab5 	.word	0x0800bab5
 800b45c:	2000dc84 	.word	0x2000dc84
 800b460:	0800bba9 	.word	0x0800bba9
 800b464:	20000b28 	.word	0x20000b28
 800b468:	2000dc78 	.word	0x2000dc78
 800b46c:	08021500 	.word	0x08021500

0800b470 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08e      	sub	sp, #56	; 0x38
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	605a      	str	r2, [r3, #4]
 800b482:	609a      	str	r2, [r3, #8]
 800b484:	60da      	str	r2, [r3, #12]
 800b486:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a4a      	ldr	r2, [pc, #296]	; (800b5b8 <HAL_ETH_MspInit+0x148>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	f040 808d 	bne.w	800b5ae <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b494:	2300      	movs	r3, #0
 800b496:	623b      	str	r3, [r7, #32]
 800b498:	4b48      	ldr	r3, [pc, #288]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49c:	4a47      	ldr	r2, [pc, #284]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b49e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b4a2:	6313      	str	r3, [r2, #48]	; 0x30
 800b4a4:	4b45      	ldr	r3, [pc, #276]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4ac:	623b      	str	r3, [r7, #32]
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	61fb      	str	r3, [r7, #28]
 800b4b4:	4b41      	ldr	r3, [pc, #260]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b8:	4a40      	ldr	r2, [pc, #256]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4be:	6313      	str	r3, [r2, #48]	; 0x30
 800b4c0:	4b3e      	ldr	r3, [pc, #248]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4c8:	61fb      	str	r3, [r7, #28]
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	61bb      	str	r3, [r7, #24]
 800b4d0:	4b3a      	ldr	r3, [pc, #232]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d4:	4a39      	ldr	r2, [pc, #228]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4da:	6313      	str	r3, [r2, #48]	; 0x30
 800b4dc:	4b37      	ldr	r3, [pc, #220]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4e4:	61bb      	str	r3, [r7, #24]
 800b4e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	4b33      	ldr	r3, [pc, #204]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f0:	4a32      	ldr	r2, [pc, #200]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4f2:	f043 0304 	orr.w	r3, r3, #4
 800b4f6:	6313      	str	r3, [r2, #48]	; 0x30
 800b4f8:	4b30      	ldr	r3, [pc, #192]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	617b      	str	r3, [r7, #20]
 800b502:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b504:	2300      	movs	r3, #0
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	4b2c      	ldr	r3, [pc, #176]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50c:	4a2b      	ldr	r2, [pc, #172]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	6313      	str	r3, [r2, #48]	; 0x30
 800b514:	4b29      	ldr	r3, [pc, #164]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	613b      	str	r3, [r7, #16]
 800b51e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	4b25      	ldr	r3, [pc, #148]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b528:	4a24      	ldr	r2, [pc, #144]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b52e:	6313      	str	r3, [r2, #48]	; 0x30
 800b530:	4b22      	ldr	r3, [pc, #136]	; (800b5bc <HAL_ETH_MspInit+0x14c>)
 800b532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b53c:	2332      	movs	r3, #50	; 0x32
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b540:	2302      	movs	r3, #2
 800b542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b544:	2300      	movs	r3, #0
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b548:	2303      	movs	r3, #3
 800b54a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b54c:	230b      	movs	r3, #11
 800b54e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b554:	4619      	mov	r1, r3
 800b556:	481a      	ldr	r0, [pc, #104]	; (800b5c0 <HAL_ETH_MspInit+0x150>)
 800b558:	f7f9 fd88 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b55c:	2386      	movs	r3, #134	; 0x86
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b560:	2302      	movs	r3, #2
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b564:	2300      	movs	r3, #0
 800b566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b568:	2303      	movs	r3, #3
 800b56a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b56c:	230b      	movs	r3, #11
 800b56e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b574:	4619      	mov	r1, r3
 800b576:	4813      	ldr	r0, [pc, #76]	; (800b5c4 <HAL_ETH_MspInit+0x154>)
 800b578:	f7f9 fd78 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800b57c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b582:	2302      	movs	r3, #2
 800b584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b586:	2300      	movs	r3, #0
 800b588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b58a:	2303      	movs	r3, #3
 800b58c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b58e:	230b      	movs	r3, #11
 800b590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b596:	4619      	mov	r1, r3
 800b598:	480b      	ldr	r0, [pc, #44]	; (800b5c8 <HAL_ETH_MspInit+0x158>)
 800b59a:	f7f9 fd67 	bl	800506c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2106      	movs	r1, #6
 800b5a2:	203d      	movs	r0, #61	; 0x3d
 800b5a4:	f7f6 fe16 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b5a8:	203d      	movs	r0, #61	; 0x3d
 800b5aa:	f7f6 fe2f 	bl	800220c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b5ae:	bf00      	nop
 800b5b0:	3738      	adds	r7, #56	; 0x38
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	40028000 	.word	0x40028000
 800b5bc:	40023800 	.word	0x40023800
 800b5c0:	40020800 	.word	0x40020800
 800b5c4:	40020000 	.word	0x40020000
 800b5c8:	40021800 	.word	0x40021800

0800b5cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <HAL_ETH_RxCpltCallback+0x1c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f004 fb75 	bl	800fcc8 <osSemaphoreRelease>
}
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20000b2c 	.word	0x20000b2c

0800b5ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b5ec:	b5b0      	push	{r4, r5, r7, lr}
 800b5ee:	b090      	sub	sp, #64	; 0x40
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b5f8:	4b65      	ldr	r3, [pc, #404]	; (800b790 <low_level_init+0x1a4>)
 800b5fa:	4a66      	ldr	r2, [pc, #408]	; (800b794 <low_level_init+0x1a8>)
 800b5fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b5fe:	4b64      	ldr	r3, [pc, #400]	; (800b790 <low_level_init+0x1a4>)
 800b600:	2201      	movs	r2, #1
 800b602:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b604:	4b62      	ldr	r3, [pc, #392]	; (800b790 <low_level_init+0x1a4>)
 800b606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b60a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b60c:	4b60      	ldr	r3, [pc, #384]	; (800b790 <low_level_init+0x1a4>)
 800b60e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b612:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800b614:	4b5e      	ldr	r3, [pc, #376]	; (800b790 <low_level_init+0x1a4>)
 800b616:	2201      	movs	r2, #1
 800b618:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b61a:	2300      	movs	r3, #0
 800b61c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800b620:	2380      	movs	r3, #128	; 0x80
 800b622:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800b626:	23e1      	movs	r3, #225	; 0xe1
 800b628:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800b62c:	2300      	movs	r3, #0
 800b62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800b632:	2300      	movs	r3, #0
 800b634:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800b638:	2300      	movs	r3, #0
 800b63a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800b63e:	4a54      	ldr	r2, [pc, #336]	; (800b790 <low_level_init+0x1a4>)
 800b640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b644:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b646:	4b52      	ldr	r3, [pc, #328]	; (800b790 <low_level_init+0x1a4>)
 800b648:	2201      	movs	r2, #1
 800b64a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b64c:	4b50      	ldr	r3, [pc, #320]	; (800b790 <low_level_init+0x1a4>)
 800b64e:	2200      	movs	r2, #0
 800b650:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b652:	4b4f      	ldr	r3, [pc, #316]	; (800b790 <low_level_init+0x1a4>)
 800b654:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b658:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b65a:	484d      	ldr	r0, [pc, #308]	; (800b790 <low_level_init+0x1a4>)
 800b65c:	f7f8 fb60 	bl	8003d20 <HAL_ETH_Init>
 800b660:	4603      	mov	r3, r0
 800b662:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800b666:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d108      	bne.n	800b680 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b674:	f043 0304 	orr.w	r3, r3, #4
 800b678:	b2da      	uxtb	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b680:	2304      	movs	r3, #4
 800b682:	4a45      	ldr	r2, [pc, #276]	; (800b798 <low_level_init+0x1ac>)
 800b684:	4945      	ldr	r1, [pc, #276]	; (800b79c <low_level_init+0x1b0>)
 800b686:	4842      	ldr	r0, [pc, #264]	; (800b790 <low_level_init+0x1a4>)
 800b688:	f7f8 fce6 	bl	8004058 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b68c:	2304      	movs	r3, #4
 800b68e:	4a44      	ldr	r2, [pc, #272]	; (800b7a0 <low_level_init+0x1b4>)
 800b690:	4944      	ldr	r1, [pc, #272]	; (800b7a4 <low_level_init+0x1b8>)
 800b692:	483f      	ldr	r0, [pc, #252]	; (800b790 <low_level_init+0x1a4>)
 800b694:	f7f8 fd49 	bl	800412a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2206      	movs	r2, #6
 800b69c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b6a0:	4b3b      	ldr	r3, [pc, #236]	; (800b790 <low_level_init+0x1a4>)
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	781a      	ldrb	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b6ac:	4b38      	ldr	r3, [pc, #224]	; (800b790 <low_level_init+0x1a4>)
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	785a      	ldrb	r2, [r3, #1]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b6b8:	4b35      	ldr	r3, [pc, #212]	; (800b790 <low_level_init+0x1a4>)
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	789a      	ldrb	r2, [r3, #2]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b6c4:	4b32      	ldr	r3, [pc, #200]	; (800b790 <low_level_init+0x1a4>)
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	78da      	ldrb	r2, [r3, #3]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b6d0:	4b2f      	ldr	r3, [pc, #188]	; (800b790 <low_level_init+0x1a4>)
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	791a      	ldrb	r2, [r3, #4]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b6dc:	4b2c      	ldr	r3, [pc, #176]	; (800b790 <low_level_init+0x1a4>)
 800b6de:	695b      	ldr	r3, [r3, #20]
 800b6e0:	795a      	ldrb	r2, [r3, #5]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b6ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6f6:	f043 030a 	orr.w	r3, r3, #10
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800b702:	2300      	movs	r3, #0
 800b704:	62bb      	str	r3, [r7, #40]	; 0x28
 800b706:	2300      	movs	r3, #0
 800b708:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b70a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b70e:	2101      	movs	r1, #1
 800b710:	4618      	mov	r0, r3
 800b712:	f004 fa59 	bl	800fbc8 <osSemaphoreCreate>
 800b716:	4603      	mov	r3, r0
 800b718:	4a23      	ldr	r2, [pc, #140]	; (800b7a8 <low_level_init+0x1bc>)
 800b71a:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b71c:	4b23      	ldr	r3, [pc, #140]	; (800b7ac <low_level_init+0x1c0>)
 800b71e:	f107 040c 	add.w	r4, r7, #12
 800b722:	461d      	mov	r5, r3
 800b724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b72c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b730:	f107 030c 	add.w	r3, r7, #12
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	4618      	mov	r0, r3
 800b738:	f004 f949 	bl	800f9ce <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b73c:	4814      	ldr	r0, [pc, #80]	; (800b790 <low_level_init+0x1a4>)
 800b73e:	f7f9 f81c 	bl	800477a <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800b742:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b746:	461a      	mov	r2, r3
 800b748:	2111      	movs	r1, #17
 800b74a:	4811      	ldr	r0, [pc, #68]	; (800b790 <low_level_init+0x1a4>)
 800b74c:	f7f8 ff47 	bl	80045de <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b752:	f043 0303 	orr.w	r3, r3, #3
 800b756:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	461a      	mov	r2, r3
 800b75c:	2111      	movs	r1, #17
 800b75e:	480c      	ldr	r0, [pc, #48]	; (800b790 <low_level_init+0x1a4>)
 800b760:	f7f8 ffa5 	bl	80046ae <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800b764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b768:	461a      	mov	r2, r3
 800b76a:	2112      	movs	r1, #18
 800b76c:	4808      	ldr	r0, [pc, #32]	; (800b790 <low_level_init+0x1a4>)
 800b76e:	f7f8 ff36 	bl	80045de <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	f043 0320 	orr.w	r3, r3, #32
 800b778:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800b77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77c:	461a      	mov	r2, r3
 800b77e:	2112      	movs	r1, #18
 800b780:	4803      	ldr	r0, [pc, #12]	; (800b790 <low_level_init+0x1a4>)
 800b782:	f7f8 ff94 	bl	80046ae <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b786:	bf00      	nop
 800b788:	3740      	adds	r7, #64	; 0x40
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bdb0      	pop	{r4, r5, r7, pc}
 800b78e:	bf00      	nop
 800b790:	2000f59c 	.word	0x2000f59c
 800b794:	40028000 	.word	0x40028000
 800b798:	2000f5e4 	.word	0x2000f5e4
 800b79c:	2000dccc 	.word	0x2000dccc
 800b7a0:	2000dd4c 	.word	0x2000dd4c
 800b7a4:	2000f51c 	.word	0x2000f51c
 800b7a8:	20000b2c 	.word	0x20000b2c
 800b7ac:	08021524 	.word	0x08021524

0800b7b0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08a      	sub	sp, #40	; 0x28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b7ba:	4b4b      	ldr	r3, [pc, #300]	; (800b8e8 <low_level_output+0x138>)
 800b7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b7d2:	4b45      	ldr	r3, [pc, #276]	; (800b8e8 <low_level_output+0x138>)
 800b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	623b      	str	r3, [r7, #32]
 800b7e0:	e05a      	b.n	800b898 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da03      	bge.n	800b7f2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b7ea:	23f8      	movs	r3, #248	; 0xf8
 800b7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800b7f0:	e05c      	b.n	800b8ac <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	895b      	ldrh	r3, [r3, #10]
 800b7f6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b7fc:	e02f      	b.n	800b85e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	18d0      	adds	r0, r2, r3
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	18d1      	adds	r1, r2, r3
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b812:	3304      	adds	r3, #4
 800b814:	461a      	mov	r2, r3
 800b816:	f013 fdb1 	bl	801f37c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	da03      	bge.n	800b830 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b828:	23f8      	movs	r3, #248	; 0xf8
 800b82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b82e:	e03d      	b.n	800b8ac <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b840:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b84c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b858:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	4413      	add	r3, r2
 800b864:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b868:	4293      	cmp	r3, r2
 800b86a:	d8c8      	bhi.n	800b7fe <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b86c:	69fa      	ldr	r2, [r7, #28]
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	18d0      	adds	r0, r2, r3
 800b872:	6a3b      	ldr	r3, [r7, #32]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	4413      	add	r3, r2
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	4619      	mov	r1, r3
 800b87e:	f013 fd7d 	bl	801f37c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	623b      	str	r3, [r7, #32]
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1a1      	bne.n	800b7e2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b89e:	6979      	ldr	r1, [r7, #20]
 800b8a0:	4811      	ldr	r0, [pc, #68]	; (800b8e8 <low_level_output+0x138>)
 800b8a2:	f7f8 fcaf 	bl	8004204 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b8ac:	4b0e      	ldr	r3, [pc, #56]	; (800b8e8 <low_level_output+0x138>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b4:	3314      	adds	r3, #20
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0320 	and.w	r3, r3, #32
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00d      	beq.n	800b8dc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b8c0:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <low_level_output+0x138>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b8ce:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <low_level_output+0x138>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	2200      	movs	r2, #0
 800b8da:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3728      	adds	r7, #40	; 0x28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	2000f59c 	.word	0x2000f59c

0800b8ec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08c      	sub	sp, #48	; 0x30
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b910:	484f      	ldr	r0, [pc, #316]	; (800ba50 <low_level_input+0x164>)
 800b912:	f7f8 fd61 	bl	80043d8 <HAL_ETH_GetReceivedFrame_IT>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <low_level_input+0x34>

    return NULL;
 800b91c:	2300      	movs	r3, #0
 800b91e:	e092      	b.n	800ba46 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b920:	4b4b      	ldr	r3, [pc, #300]	; (800ba50 <low_level_input+0x164>)
 800b922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b924:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b926:	4b4a      	ldr	r3, [pc, #296]	; (800ba50 <low_level_input+0x164>)
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800b92c:	89fb      	ldrh	r3, [r7, #14]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b932:	89fb      	ldrh	r3, [r7, #14]
 800b934:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b938:	4619      	mov	r1, r3
 800b93a:	2000      	movs	r0, #0
 800b93c:	f009 fff8 	bl	8015930 <pbuf_alloc>
 800b940:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d04b      	beq.n	800b9e0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b948:	4b41      	ldr	r3, [pc, #260]	; (800ba50 <low_level_input+0x164>)
 800b94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b954:	62bb      	str	r3, [r7, #40]	; 0x28
 800b956:	e040      	b.n	800b9da <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	895b      	ldrh	r3, [r3, #10]
 800b95c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b962:	e021      	b.n	800b9a8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	18d0      	adds	r0, r2, r3
 800b96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	18d1      	adds	r1, r2, r3
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b978:	3304      	adds	r3, #4
 800b97a:	461a      	mov	r2, r3
 800b97c:	f013 fcfe 	bl	801f37c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b98c:	69fa      	ldr	r2, [r7, #28]
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	4413      	add	r3, r2
 800b992:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b996:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b998:	69ba      	ldr	r2, [r7, #24]
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b9a2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d8d6      	bhi.n	800b964 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	18d0      	adds	r0, r2, r3
 800b9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	f013 fcd8 	bl	801f37c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b9cc:	69fa      	ldr	r2, [r7, #28]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1bb      	bne.n	800b958 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b9e0:	4b1b      	ldr	r3, [pc, #108]	; (800ba50 <low_level_input+0x164>)
 800b9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	613b      	str	r3, [r7, #16]
 800b9ea:	e00b      	b.n	800ba04 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	3301      	adds	r3, #1
 800ba02:	613b      	str	r3, [r7, #16]
 800ba04:	4b12      	ldr	r3, [pc, #72]	; (800ba50 <low_level_input+0x164>)
 800ba06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d3ee      	bcc.n	800b9ec <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800ba0e:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <low_level_input+0x164>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800ba14:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <low_level_input+0x164>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba1c:	3314      	adds	r3, #20
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00d      	beq.n	800ba44 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ba28:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <low_level_input+0x164>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba30:	3314      	adds	r3, #20
 800ba32:	2280      	movs	r2, #128	; 0x80
 800ba34:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800ba36:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <low_level_input+0x164>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba3e:	3308      	adds	r3, #8
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
  }
  return p;
 800ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3730      	adds	r7, #48	; 0x30
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	2000f59c 	.word	0x2000f59c

0800ba54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ba60:	4b12      	ldr	r3, [pc, #72]	; (800baac <ethernetif_input+0x58>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f04f 31ff 	mov.w	r1, #4294967295
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f004 f8df 	bl	800fc2c <osSemaphoreWait>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1f5      	bne.n	800ba60 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800ba74:	480e      	ldr	r0, [pc, #56]	; (800bab0 <ethernetif_input+0x5c>)
 800ba76:	f013 fbeb 	bl	801f250 <sys_mutex_lock>
        p = low_level_input( netif );
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f7ff ff36 	bl	800b8ec <low_level_input>
 800ba80:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	68f9      	ldr	r1, [r7, #12]
 800ba8e:	68b8      	ldr	r0, [r7, #8]
 800ba90:	4798      	blx	r3
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800ba98:	68b8      	ldr	r0, [r7, #8]
 800ba9a:	f00a fa3f 	bl	8015f1c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800ba9e:	4804      	ldr	r0, [pc, #16]	; (800bab0 <ethernetif_input+0x5c>)
 800baa0:	f013 fbe5 	bl	801f26e <sys_mutex_unlock>
      } while(p!=NULL);
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1e4      	bne.n	800ba74 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800baaa:	e7d9      	b.n	800ba60 <ethernetif_input+0xc>
 800baac:	20000b2c 	.word	0x20000b2c
 800bab0:	20010df4 	.word	0x20010df4

0800bab4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <ethernetif_init+0x1c>
 800bac2:	4b0e      	ldr	r3, [pc, #56]	; (800bafc <ethernetif_init+0x48>)
 800bac4:	f240 2235 	movw	r2, #565	; 0x235
 800bac8:	490d      	ldr	r1, [pc, #52]	; (800bb00 <ethernetif_init+0x4c>)
 800baca:	480e      	ldr	r0, [pc, #56]	; (800bb04 <ethernetif_init+0x50>)
 800bacc:	f013 fc86 	bl	801f3dc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2273      	movs	r2, #115	; 0x73
 800bad4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2274      	movs	r2, #116	; 0x74
 800badc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a09      	ldr	r2, [pc, #36]	; (800bb08 <ethernetif_init+0x54>)
 800bae4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a08      	ldr	r2, [pc, #32]	; (800bb0c <ethernetif_init+0x58>)
 800baea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff fd7d 	bl	800b5ec <low_level_init>

  return ERR_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	08021540 	.word	0x08021540
 800bb00:	0802155c 	.word	0x0802155c
 800bb04:	0802156c 	.word	0x0802156c
 800bb08:	0801d3fd 	.word	0x0801d3fd
 800bb0c:	0800b7b1 	.word	0x0800b7b1

0800bb10 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bb14:	f7f6 fa76 	bl	8002004 <HAL_GetTick>
 800bb18:	4603      	mov	r3, r0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bb30:	f107 0308 	add.w	r3, r7, #8
 800bb34:	461a      	mov	r2, r3
 800bb36:	2101      	movs	r1, #1
 800bb38:	4819      	ldr	r0, [pc, #100]	; (800bba0 <ethernetif_set_link+0x80>)
 800bb3a:	f7f8 fd50 	bl	80045de <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f003 0304 	and.w	r3, r3, #4
 800bb44:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb4e:	f003 0304 	and.w	r3, r3, #4
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d108      	bne.n	800bb68 <ethernetif_set_link+0x48>
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d005      	beq.n	800bb68 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f009 fdb7 	bl	80156d4 <netif_set_link_up>
 800bb66:	e011      	b.n	800bb8c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb70:	089b      	lsrs	r3, r3, #2
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d007      	beq.n	800bb8c <ethernetif_set_link+0x6c>
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d104      	bne.n	800bb8c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f009 fdd8 	bl	801573c <netif_set_link_down>
    }
	xEventGroupSetBits(Event_Handle,KEY1_EVENT);
 800bb8c:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <ethernetif_set_link+0x84>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2101      	movs	r1, #1
 800bb92:	4618      	mov	r0, r3
 800bb94:	f004 faa6 	bl	80100e4 <xEventGroupSetBits>

    /* Suspend thread for 200 ms */
    osDelay(200);
 800bb98:	20c8      	movs	r0, #200	; 0xc8
 800bb9a:	f003 ff64 	bl	800fa66 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bb9e:	e7c7      	b.n	800bb30 <ethernetif_set_link+0x10>
 800bba0:	2000f59c 	.word	0x2000f59c
 800bba4:	20000b1c 	.word	0x20000b1c

0800bba8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbbe:	089b      	lsrs	r3, r3, #2
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d05d      	beq.n	800bc86 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800bbca:	4b34      	ldr	r3, [pc, #208]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d03f      	beq.n	800bc52 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800bbd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	4830      	ldr	r0, [pc, #192]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bbda:	f7f8 fd68 	bl	80046ae <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800bbde:	f7f6 fa11 	bl	8002004 <HAL_GetTick>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	461a      	mov	r2, r3
 800bbec:	2101      	movs	r1, #1
 800bbee:	482b      	ldr	r0, [pc, #172]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bbf0:	f7f8 fcf5 	bl	80045de <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800bbf4:	f7f6 fa06 	bl	8002004 <HAL_GetTick>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc02:	d828      	bhi.n	800bc56 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f003 0320 	and.w	r3, r3, #32
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0eb      	beq.n	800bbe6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800bc0e:	f107 0308 	add.w	r3, r7, #8
 800bc12:	461a      	mov	r2, r3
 800bc14:	2131      	movs	r1, #49	; 0x31
 800bc16:	4821      	ldr	r0, [pc, #132]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc18:	f7f8 fce1 	bl	80045de <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	f003 0310 	and.w	r3, r3, #16
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d004      	beq.n	800bc30 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800bc26:	4b1d      	ldr	r3, [pc, #116]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc2c:	60da      	str	r2, [r3, #12]
 800bc2e:	e002      	b.n	800bc36 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800bc30:	4b1a      	ldr	r3, [pc, #104]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	f003 0304 	and.w	r3, r3, #4
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800bc40:	4b16      	ldr	r3, [pc, #88]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	609a      	str	r2, [r3, #8]
 800bc46:	e016      	b.n	800bc76 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800bc48:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bc4e:	609a      	str	r2, [r3, #8]
 800bc50:	e011      	b.n	800bc76 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800bc52:	bf00      	nop
 800bc54:	e000      	b.n	800bc58 <ethernetif_update_config+0xb0>
          goto error;
 800bc56:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bc58:	4b10      	ldr	r3, [pc, #64]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	08db      	lsrs	r3, r3, #3
 800bc5e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800bc60:	4b0e      	ldr	r3, [pc, #56]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	085b      	lsrs	r3, r3, #1
 800bc66:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	2100      	movs	r1, #0
 800bc70:	480a      	ldr	r0, [pc, #40]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc72:	f7f8 fd1c 	bl	80046ae <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800bc76:	2100      	movs	r1, #0
 800bc78:	4808      	ldr	r0, [pc, #32]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc7a:	f7f8 fddd 	bl	8004838 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800bc7e:	4807      	ldr	r0, [pc, #28]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc80:	f7f8 fd7b 	bl	800477a <HAL_ETH_Start>
 800bc84:	e002      	b.n	800bc8c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800bc86:	4805      	ldr	r0, [pc, #20]	; (800bc9c <ethernetif_update_config+0xf4>)
 800bc88:	f7f8 fda6 	bl	80047d8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f807 	bl	800bca0 <ethernetif_notify_conn_changed>
}
 800bc92:	bf00      	nop
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2000f59c 	.word	0x2000f59c

0800bca0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	4a08      	ldr	r2, [pc, #32]	; (800bce4 <disk_status+0x30>)
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	79fa      	ldrb	r2, [r7, #7]
 800bccc:	4905      	ldr	r1, [pc, #20]	; (800bce4 <disk_status+0x30>)
 800bcce:	440a      	add	r2, r1
 800bcd0:	7a12      	ldrb	r2, [r2, #8]
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4798      	blx	r3
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	20000b58 	.word	0x20000b58

0800bce8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	4a0d      	ldr	r2, [pc, #52]	; (800bd30 <disk_initialize+0x48>)
 800bcfa:	5cd3      	ldrb	r3, [r2, r3]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d111      	bne.n	800bd24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bd00:	79fb      	ldrb	r3, [r7, #7]
 800bd02:	4a0b      	ldr	r2, [pc, #44]	; (800bd30 <disk_initialize+0x48>)
 800bd04:	2101      	movs	r1, #1
 800bd06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <disk_initialize+0x48>)
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	79fa      	ldrb	r2, [r7, #7]
 800bd16:	4906      	ldr	r1, [pc, #24]	; (800bd30 <disk_initialize+0x48>)
 800bd18:	440a      	add	r2, r1
 800bd1a:	7a12      	ldrb	r2, [r2, #8]
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	4798      	blx	r3
 800bd20:	4603      	mov	r3, r0
 800bd22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20000b58 	.word	0x20000b58

0800bd34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd34:	b590      	push	{r4, r7, lr}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	4603      	mov	r3, r0
 800bd42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	4a0a      	ldr	r2, [pc, #40]	; (800bd70 <disk_read+0x3c>)
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	4413      	add	r3, r2
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	689c      	ldr	r4, [r3, #8]
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	4a07      	ldr	r2, [pc, #28]	; (800bd70 <disk_read+0x3c>)
 800bd54:	4413      	add	r3, r2
 800bd56:	7a18      	ldrb	r0, [r3, #8]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	68b9      	ldr	r1, [r7, #8]
 800bd5e:	47a0      	blx	r4
 800bd60:	4603      	mov	r3, r0
 800bd62:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd90      	pop	{r4, r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000b58 	.word	0x20000b58

0800bd74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd74:	b590      	push	{r4, r7, lr}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	607a      	str	r2, [r7, #4]
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	4a0a      	ldr	r2, [pc, #40]	; (800bdb0 <disk_write+0x3c>)
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	68dc      	ldr	r4, [r3, #12]
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	4a07      	ldr	r2, [pc, #28]	; (800bdb0 <disk_write+0x3c>)
 800bd94:	4413      	add	r3, r2
 800bd96:	7a18      	ldrb	r0, [r3, #8]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	47a0      	blx	r4
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd90      	pop	{r4, r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000b58 	.word	0x20000b58

0800bdb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	603a      	str	r2, [r7, #0]
 800bdbe:	71fb      	strb	r3, [r7, #7]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	4a09      	ldr	r2, [pc, #36]	; (800bdec <disk_ioctl+0x38>)
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	79fa      	ldrb	r2, [r7, #7]
 800bdd2:	4906      	ldr	r1, [pc, #24]	; (800bdec <disk_ioctl+0x38>)
 800bdd4:	440a      	add	r2, r1
 800bdd6:	7a10      	ldrb	r0, [r2, #8]
 800bdd8:	79b9      	ldrb	r1, [r7, #6]
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	4798      	blx	r3
 800bdde:	4603      	mov	r3, r0
 800bde0:	73fb      	strb	r3, [r7, #15]
  return res;
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	20000b58 	.word	0x20000b58

0800bdf0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800be00:	89fb      	ldrh	r3, [r7, #14]
 800be02:	021b      	lsls	r3, r3, #8
 800be04:	b21a      	sxth	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	b21b      	sxth	r3, r3
 800be0c:	4313      	orrs	r3, r2
 800be0e:	b21b      	sxth	r3, r3
 800be10:	81fb      	strh	r3, [r7, #14]
	return rv;
 800be12:	89fb      	ldrh	r3, [r7, #14]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3303      	adds	r3, #3
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	021b      	lsls	r3, r3, #8
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	3202      	adds	r2, #2
 800be38:	7812      	ldrb	r2, [r2, #0]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	021b      	lsls	r3, r3, #8
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	3201      	adds	r2, #1
 800be46:	7812      	ldrb	r2, [r2, #0]
 800be48:	4313      	orrs	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	021b      	lsls	r3, r3, #8
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	7812      	ldrb	r2, [r2, #0]
 800be54:	4313      	orrs	r3, r2
 800be56:	60fb      	str	r3, [r7, #12]
	return rv;
 800be58:	68fb      	ldr	r3, [r7, #12]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	460b      	mov	r3, r1
 800be70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	887a      	ldrh	r2, [r7, #2]
 800be7a:	b2d2      	uxtb	r2, r2
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	887b      	ldrh	r3, [r7, #2]
 800be80:	0a1b      	lsrs	r3, r3, #8
 800be82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	607a      	str	r2, [r7, #4]
 800be8a:	887a      	ldrh	r2, [r7, #2]
 800be8c:	b2d2      	uxtb	r2, r2
 800be8e:	701a      	strb	r2, [r3, #0]
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	683a      	ldr	r2, [r7, #0]
 800beae:	b2d2      	uxtb	r2, r2
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	0a1b      	lsrs	r3, r3, #8
 800beb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	1c5a      	adds	r2, r3, #1
 800bebc:	607a      	str	r2, [r7, #4]
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	0a1b      	lsrs	r3, r3, #8
 800bec8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	1c5a      	adds	r2, r3, #1
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	0a1b      	lsrs	r3, r3, #8
 800beda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	1c5a      	adds	r2, r3, #1
 800bee0:	607a      	str	r2, [r7, #4]
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	b2d2      	uxtb	r2, r2
 800bee6:	701a      	strb	r2, [r3, #0]
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00d      	beq.n	800bf2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	1c53      	adds	r3, r2, #1
 800bf12:	613b      	str	r3, [r7, #16]
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	1c59      	adds	r1, r3, #1
 800bf18:	6179      	str	r1, [r7, #20]
 800bf1a:	7812      	ldrb	r2, [r2, #0]
 800bf1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	607b      	str	r3, [r7, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1f1      	bne.n	800bf0e <mem_cpy+0x1a>
	}
}
 800bf2a:	bf00      	nop
 800bf2c:	371c      	adds	r7, #28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf36:	b480      	push	{r7}
 800bf38:	b087      	sub	sp, #28
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	60b9      	str	r1, [r7, #8]
 800bf40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	617a      	str	r2, [r7, #20]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	b2d2      	uxtb	r2, r2
 800bf50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1f3      	bne.n	800bf46 <mem_set+0x10>
}
 800bf5e:	bf00      	nop
 800bf60:	bf00      	nop
 800bf62:	371c      	adds	r7, #28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf6c:	b480      	push	{r7}
 800bf6e:	b089      	sub	sp, #36	; 0x24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	61fb      	str	r3, [r7, #28]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	61fa      	str	r2, [r7, #28]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	61ba      	str	r2, [r7, #24]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	1acb      	subs	r3, r1, r3
 800bf98:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	607b      	str	r3, [r7, #4]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d002      	beq.n	800bfac <mem_cmp+0x40>
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0eb      	beq.n	800bf84 <mem_cmp+0x18>

	return r;
 800bfac:	697b      	ldr	r3, [r7, #20]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3724      	adds	r7, #36	; 0x24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bfba:	b480      	push	{r7}
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bfc4:	e002      	b.n	800bfcc <chk_chr+0x12>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	607b      	str	r3, [r7, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d005      	beq.n	800bfe0 <chk_chr+0x26>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d1f2      	bne.n	800bfc6 <chk_chr+0xc>
	return *str;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <lock_fs+0x22>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	4618      	mov	r0, r3
 800c004:	f003 fc76 	bl	800f8f4 <ff_req_grant>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <lock_fs+0x22>
 800c00e:	2301      	movs	r3, #1
 800c010:	e000      	b.n	800c014 <lock_fs+0x24>
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00d      	beq.n	800c04a <unlock_fs+0x2e>
 800c02e:	78fb      	ldrb	r3, [r7, #3]
 800c030:	2b0c      	cmp	r3, #12
 800c032:	d00a      	beq.n	800c04a <unlock_fs+0x2e>
 800c034:	78fb      	ldrb	r3, [r7, #3]
 800c036:	2b0b      	cmp	r3, #11
 800c038:	d007      	beq.n	800c04a <unlock_fs+0x2e>
 800c03a:	78fb      	ldrb	r3, [r7, #3]
 800c03c:	2b0f      	cmp	r3, #15
 800c03e:	d004      	beq.n	800c04a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	4618      	mov	r0, r3
 800c046:	f003 fc6a 	bl	800f91e <ff_rel_grant>
	}
}
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c05e:	2300      	movs	r3, #0
 800c060:	60bb      	str	r3, [r7, #8]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	e029      	b.n	800c0bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c068:	4a27      	ldr	r2, [pc, #156]	; (800c108 <chk_lock+0xb4>)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	011b      	lsls	r3, r3, #4
 800c06e:	4413      	add	r3, r2
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d01d      	beq.n	800c0b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c076:	4a24      	ldr	r2, [pc, #144]	; (800c108 <chk_lock+0xb4>)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	011b      	lsls	r3, r3, #4
 800c07c:	4413      	add	r3, r2
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d116      	bne.n	800c0b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c088:	4a1f      	ldr	r2, [pc, #124]	; (800c108 <chk_lock+0xb4>)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	011b      	lsls	r3, r3, #4
 800c08e:	4413      	add	r3, r2
 800c090:	3304      	adds	r3, #4
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c098:	429a      	cmp	r2, r3
 800c09a:	d10c      	bne.n	800c0b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c09c:	4a1a      	ldr	r2, [pc, #104]	; (800c108 <chk_lock+0xb4>)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	011b      	lsls	r3, r3, #4
 800c0a2:	4413      	add	r3, r2
 800c0a4:	3308      	adds	r3, #8
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d102      	bne.n	800c0b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0b0:	e007      	b.n	800c0c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	60fb      	str	r3, [r7, #12]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d9d2      	bls.n	800c068 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d109      	bne.n	800c0dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <chk_lock+0x80>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d101      	bne.n	800c0d8 <chk_lock+0x84>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	e010      	b.n	800c0fa <chk_lock+0xa6>
 800c0d8:	2312      	movs	r3, #18
 800c0da:	e00e      	b.n	800c0fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d108      	bne.n	800c0f4 <chk_lock+0xa0>
 800c0e2:	4a09      	ldr	r2, [pc, #36]	; (800c108 <chk_lock+0xb4>)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	011b      	lsls	r3, r3, #4
 800c0e8:	4413      	add	r3, r2
 800c0ea:	330c      	adds	r3, #12
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f2:	d101      	bne.n	800c0f8 <chk_lock+0xa4>
 800c0f4:	2310      	movs	r3, #16
 800c0f6:	e000      	b.n	800c0fa <chk_lock+0xa6>
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	20000b38 	.word	0x20000b38

0800c10c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c112:	2300      	movs	r3, #0
 800c114:	607b      	str	r3, [r7, #4]
 800c116:	e002      	b.n	800c11e <enq_lock+0x12>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3301      	adds	r3, #1
 800c11c:	607b      	str	r3, [r7, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d806      	bhi.n	800c132 <enq_lock+0x26>
 800c124:	4a09      	ldr	r2, [pc, #36]	; (800c14c <enq_lock+0x40>)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	011b      	lsls	r3, r3, #4
 800c12a:	4413      	add	r3, r2
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1f2      	bne.n	800c118 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b02      	cmp	r3, #2
 800c136:	bf14      	ite	ne
 800c138:	2301      	movne	r3, #1
 800c13a:	2300      	moveq	r3, #0
 800c13c:	b2db      	uxtb	r3, r3
}
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	20000b38 	.word	0x20000b38

0800c150 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c15a:	2300      	movs	r3, #0
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	e01f      	b.n	800c1a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c160:	4a41      	ldr	r2, [pc, #260]	; (800c268 <inc_lock+0x118>)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	011b      	lsls	r3, r3, #4
 800c166:	4413      	add	r3, r2
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d113      	bne.n	800c19a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c172:	4a3d      	ldr	r2, [pc, #244]	; (800c268 <inc_lock+0x118>)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	011b      	lsls	r3, r3, #4
 800c178:	4413      	add	r3, r2
 800c17a:	3304      	adds	r3, #4
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c182:	429a      	cmp	r2, r3
 800c184:	d109      	bne.n	800c19a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c186:	4a38      	ldr	r2, [pc, #224]	; (800c268 <inc_lock+0x118>)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	4413      	add	r3, r2
 800c18e:	3308      	adds	r3, #8
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c196:	429a      	cmp	r2, r3
 800c198:	d006      	beq.n	800c1a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3301      	adds	r3, #1
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d9dc      	bls.n	800c160 <inc_lock+0x10>
 800c1a6:	e000      	b.n	800c1aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c1a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d132      	bne.n	800c216 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	e002      	b.n	800c1bc <inc_lock+0x6c>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	60fb      	str	r3, [r7, #12]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d806      	bhi.n	800c1d0 <inc_lock+0x80>
 800c1c2:	4a29      	ldr	r2, [pc, #164]	; (800c268 <inc_lock+0x118>)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	4413      	add	r3, r2
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1f2      	bne.n	800c1b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d101      	bne.n	800c1da <inc_lock+0x8a>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e040      	b.n	800c25c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	4922      	ldr	r1, [pc, #136]	; (800c268 <inc_lock+0x118>)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	440b      	add	r3, r1
 800c1e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	491e      	ldr	r1, [pc, #120]	; (800c268 <inc_lock+0x118>)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	695a      	ldr	r2, [r3, #20]
 800c1fc:	491a      	ldr	r1, [pc, #104]	; (800c268 <inc_lock+0x118>)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	011b      	lsls	r3, r3, #4
 800c202:	440b      	add	r3, r1
 800c204:	3308      	adds	r3, #8
 800c206:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c208:	4a17      	ldr	r2, [pc, #92]	; (800c268 <inc_lock+0x118>)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	011b      	lsls	r3, r3, #4
 800c20e:	4413      	add	r3, r2
 800c210:	330c      	adds	r3, #12
 800c212:	2200      	movs	r2, #0
 800c214:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d009      	beq.n	800c230 <inc_lock+0xe0>
 800c21c:	4a12      	ldr	r2, [pc, #72]	; (800c268 <inc_lock+0x118>)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	011b      	lsls	r3, r3, #4
 800c222:	4413      	add	r3, r2
 800c224:	330c      	adds	r3, #12
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d001      	beq.n	800c230 <inc_lock+0xe0>
 800c22c:	2300      	movs	r3, #0
 800c22e:	e015      	b.n	800c25c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d108      	bne.n	800c248 <inc_lock+0xf8>
 800c236:	4a0c      	ldr	r2, [pc, #48]	; (800c268 <inc_lock+0x118>)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	011b      	lsls	r3, r3, #4
 800c23c:	4413      	add	r3, r2
 800c23e:	330c      	adds	r3, #12
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	3301      	adds	r3, #1
 800c244:	b29a      	uxth	r2, r3
 800c246:	e001      	b.n	800c24c <inc_lock+0xfc>
 800c248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c24c:	4906      	ldr	r1, [pc, #24]	; (800c268 <inc_lock+0x118>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	440b      	add	r3, r1
 800c254:	330c      	adds	r3, #12
 800c256:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	3301      	adds	r3, #1
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	20000b38 	.word	0x20000b38

0800c26c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3b01      	subs	r3, #1
 800c278:	607b      	str	r3, [r7, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d825      	bhi.n	800c2cc <dec_lock+0x60>
		n = Files[i].ctr;
 800c280:	4a17      	ldr	r2, [pc, #92]	; (800c2e0 <dec_lock+0x74>)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	011b      	lsls	r3, r3, #4
 800c286:	4413      	add	r3, r2
 800c288:	330c      	adds	r3, #12
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c28e:	89fb      	ldrh	r3, [r7, #14]
 800c290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c294:	d101      	bne.n	800c29a <dec_lock+0x2e>
 800c296:	2300      	movs	r3, #0
 800c298:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c29a:	89fb      	ldrh	r3, [r7, #14]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <dec_lock+0x3a>
 800c2a0:	89fb      	ldrh	r3, [r7, #14]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c2a6:	4a0e      	ldr	r2, [pc, #56]	; (800c2e0 <dec_lock+0x74>)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	011b      	lsls	r3, r3, #4
 800c2ac:	4413      	add	r3, r2
 800c2ae:	330c      	adds	r3, #12
 800c2b0:	89fa      	ldrh	r2, [r7, #14]
 800c2b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c2b4:	89fb      	ldrh	r3, [r7, #14]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d105      	bne.n	800c2c6 <dec_lock+0x5a>
 800c2ba:	4a09      	ldr	r2, [pc, #36]	; (800c2e0 <dec_lock+0x74>)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	011b      	lsls	r3, r3, #4
 800c2c0:	4413      	add	r3, r2
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	737b      	strb	r3, [r7, #13]
 800c2ca:	e001      	b.n	800c2d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c2d0:	7b7b      	ldrb	r3, [r7, #13]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	20000b38 	.word	0x20000b38

0800c2e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	e010      	b.n	800c314 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c2f2:	4a0d      	ldr	r2, [pc, #52]	; (800c328 <clear_lock+0x44>)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	4413      	add	r3, r2
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d105      	bne.n	800c30e <clear_lock+0x2a>
 800c302:	4a09      	ldr	r2, [pc, #36]	; (800c328 <clear_lock+0x44>)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	4413      	add	r3, r2
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	60fb      	str	r3, [r7, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d9eb      	bls.n	800c2f2 <clear_lock+0xe>
	}
}
 800c31a:	bf00      	nop
 800c31c:	bf00      	nop
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	20000b38 	.word	0x20000b38

0800c32c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	78db      	ldrb	r3, [r3, #3]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d034      	beq.n	800c3aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c344:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	7858      	ldrb	r0, [r3, #1]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c350:	2301      	movs	r3, #1
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	f7ff fd0e 	bl	800bd74 <disk_write>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d002      	beq.n	800c364 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c35e:	2301      	movs	r3, #1
 800c360:	73fb      	strb	r3, [r7, #15]
 800c362:	e022      	b.n	800c3aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	1ad2      	subs	r2, r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	429a      	cmp	r2, r3
 800c378:	d217      	bcs.n	800c3aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	789b      	ldrb	r3, [r3, #2]
 800c37e:	613b      	str	r3, [r7, #16]
 800c380:	e010      	b.n	800c3a4 <sync_window+0x78>
					wsect += fs->fsize;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	4413      	add	r3, r2
 800c38a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	7858      	ldrb	r0, [r3, #1]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c396:	2301      	movs	r3, #1
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	f7ff fceb 	bl	800bd74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	613b      	str	r3, [r7, #16]
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d8eb      	bhi.n	800c382 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d01b      	beq.n	800c404 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7ff ffad 	bl	800c32c <sync_window>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d113      	bne.n	800c404 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	7858      	ldrb	r0, [r3, #1]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	f7ff fca3 	bl	800bd34 <disk_read>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d004      	beq.n	800c3fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c404:	7bfb      	ldrb	r3, [r7, #15]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff ff87 	bl	800c32c <sync_window>
 800c41e:	4603      	mov	r3, r0
 800c420:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d158      	bne.n	800c4da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2b03      	cmp	r3, #3
 800c42e:	d148      	bne.n	800c4c2 <sync_fs+0xb2>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	791b      	ldrb	r3, [r3, #4]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d144      	bne.n	800c4c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3338      	adds	r3, #56	; 0x38
 800c43c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c440:	2100      	movs	r1, #0
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff fd77 	bl	800bf36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	3338      	adds	r3, #56	; 0x38
 800c44c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c450:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fd06 	bl	800be66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3338      	adds	r3, #56	; 0x38
 800c45e:	4921      	ldr	r1, [pc, #132]	; (800c4e4 <sync_fs+0xd4>)
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff fd1b 	bl	800be9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3338      	adds	r3, #56	; 0x38
 800c46a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c46e:	491e      	ldr	r1, [pc, #120]	; (800c4e8 <sync_fs+0xd8>)
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff fd13 	bl	800be9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3338      	adds	r3, #56	; 0x38
 800c47a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	4619      	mov	r1, r3
 800c484:	4610      	mov	r0, r2
 800c486:	f7ff fd09 	bl	800be9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3338      	adds	r3, #56	; 0x38
 800c48e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	4619      	mov	r1, r3
 800c498:	4610      	mov	r0, r2
 800c49a:	f7ff fcff 	bl	800be9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a2:	1c5a      	adds	r2, r3, #1
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	7858      	ldrb	r0, [r3, #1]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	f7ff fc5c 	bl	800bd74 <disk_write>
			fs->fsi_flag = 0;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	785b      	ldrb	r3, [r3, #1]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff fc72 	bl	800bdb4 <disk_ioctl>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <sync_fs+0xca>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	41615252 	.word	0x41615252
 800c4e8:	61417272 	.word	0x61417272

0800c4ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	3b02      	subs	r3, #2
 800c4fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	3b02      	subs	r3, #2
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	429a      	cmp	r2, r3
 800c506:	d301      	bcc.n	800c50c <clust2sect+0x20>
 800c508:	2300      	movs	r3, #0
 800c50a:	e008      	b.n	800c51e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	895b      	ldrh	r3, [r3, #10]
 800c510:	461a      	mov	r2, r3
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	fb03 f202 	mul.w	r2, r3, r2
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51c:	4413      	add	r3, r2
}
 800c51e:	4618      	mov	r0, r3
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b086      	sub	sp, #24
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d904      	bls.n	800c54a <get_fat+0x20>
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	69db      	ldr	r3, [r3, #28]
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d302      	bcc.n	800c550 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c54a:	2301      	movs	r3, #1
 800c54c:	617b      	str	r3, [r7, #20]
 800c54e:	e08f      	b.n	800c670 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c550:	f04f 33ff 	mov.w	r3, #4294967295
 800c554:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b03      	cmp	r3, #3
 800c55c:	d062      	beq.n	800c624 <get_fat+0xfa>
 800c55e:	2b03      	cmp	r3, #3
 800c560:	dc7c      	bgt.n	800c65c <get_fat+0x132>
 800c562:	2b01      	cmp	r3, #1
 800c564:	d002      	beq.n	800c56c <get_fat+0x42>
 800c566:	2b02      	cmp	r3, #2
 800c568:	d042      	beq.n	800c5f0 <get_fat+0xc6>
 800c56a:	e077      	b.n	800c65c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	085b      	lsrs	r3, r3, #1
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4413      	add	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	0a5b      	lsrs	r3, r3, #9
 800c582:	4413      	add	r3, r2
 800c584:	4619      	mov	r1, r3
 800c586:	6938      	ldr	r0, [r7, #16]
 800c588:	f7ff ff14 	bl	800c3b4 <move_window>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d167      	bne.n	800c662 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1c5a      	adds	r2, r3, #1
 800c596:	60fa      	str	r2, [r7, #12]
 800c598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	0a5b      	lsrs	r3, r3, #9
 800c5ae:	4413      	add	r3, r2
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6938      	ldr	r0, [r7, #16]
 800c5b4:	f7ff fefe 	bl	800c3b4 <move_window>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d153      	bne.n	800c666 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5cc:	021b      	lsls	r3, r3, #8
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	f003 0301 	and.w	r3, r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <get_fat+0xbc>
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	091b      	lsrs	r3, r3, #4
 800c5e4:	e002      	b.n	800c5ec <get_fat+0xc2>
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5ec:	617b      	str	r3, [r7, #20]
			break;
 800c5ee:	e03f      	b.n	800c670 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	0a1b      	lsrs	r3, r3, #8
 800c5f8:	4413      	add	r3, r2
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6938      	ldr	r0, [r7, #16]
 800c5fe:	f7ff fed9 	bl	800c3b4 <move_window>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d130      	bne.n	800c66a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c616:	4413      	add	r3, r2
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fbe9 	bl	800bdf0 <ld_word>
 800c61e:	4603      	mov	r3, r0
 800c620:	617b      	str	r3, [r7, #20]
			break;
 800c622:	e025      	b.n	800c670 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	09db      	lsrs	r3, r3, #7
 800c62c:	4413      	add	r3, r2
 800c62e:	4619      	mov	r1, r3
 800c630:	6938      	ldr	r0, [r7, #16]
 800c632:	f7ff febf 	bl	800c3b4 <move_window>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d118      	bne.n	800c66e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c64a:	4413      	add	r3, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff fbe7 	bl	800be20 <ld_dword>
 800c652:	4603      	mov	r3, r0
 800c654:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c658:	617b      	str	r3, [r7, #20]
			break;
 800c65a:	e009      	b.n	800c670 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c65c:	2301      	movs	r3, #1
 800c65e:	617b      	str	r3, [r7, #20]
 800c660:	e006      	b.n	800c670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c662:	bf00      	nop
 800c664:	e004      	b.n	800c670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c666:	bf00      	nop
 800c668:	e002      	b.n	800c670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c66a:	bf00      	nop
 800c66c:	e000      	b.n	800c670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c66e:	bf00      	nop
		}
	}

	return val;
 800c670:	697b      	ldr	r3, [r7, #20]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c67a:	b590      	push	{r4, r7, lr}
 800c67c:	b089      	sub	sp, #36	; 0x24
 800c67e:	af00      	add	r7, sp, #0
 800c680:	60f8      	str	r0, [r7, #12]
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c686:	2302      	movs	r3, #2
 800c688:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	f240 80d2 	bls.w	800c836 <put_fat+0x1bc>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	69db      	ldr	r3, [r3, #28]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	429a      	cmp	r2, r3
 800c69a:	f080 80cc 	bcs.w	800c836 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	f000 8096 	beq.w	800c7d4 <put_fat+0x15a>
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	f300 80cd 	bgt.w	800c848 <put_fat+0x1ce>
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d002      	beq.n	800c6b8 <put_fat+0x3e>
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d06e      	beq.n	800c794 <put_fat+0x11a>
 800c6b6:	e0c7      	b.n	800c848 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	61bb      	str	r3, [r7, #24]
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	085b      	lsrs	r3, r3, #1
 800c6c0:	69ba      	ldr	r2, [r7, #24]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	0a5b      	lsrs	r3, r3, #9
 800c6ce:	4413      	add	r3, r2
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f7ff fe6e 	bl	800c3b4 <move_window>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6dc:	7ffb      	ldrb	r3, [r7, #31]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f040 80ab 	bne.w	800c83a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	1c59      	adds	r1, r3, #1
 800c6ee:	61b9      	str	r1, [r7, #24]
 800c6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6f4:	4413      	add	r3, r2
 800c6f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00d      	beq.n	800c71e <put_fat+0xa4>
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	b25b      	sxtb	r3, r3
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	b25a      	sxtb	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	b2db      	uxtb	r3, r3
 800c712:	011b      	lsls	r3, r3, #4
 800c714:	b25b      	sxtb	r3, r3
 800c716:	4313      	orrs	r3, r2
 800c718:	b25b      	sxtb	r3, r3
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	e001      	b.n	800c722 <put_fat+0xa8>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	b2db      	uxtb	r3, r3
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2201      	movs	r2, #1
 800c72a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	0a5b      	lsrs	r3, r3, #9
 800c734:	4413      	add	r3, r2
 800c736:	4619      	mov	r1, r3
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f7ff fe3b 	bl	800c3b4 <move_window>
 800c73e:	4603      	mov	r3, r0
 800c740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c742:	7ffb      	ldrb	r3, [r7, #31]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d17a      	bne.n	800c83e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c754:	4413      	add	r3, r2
 800c756:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d003      	beq.n	800c76a <put_fat+0xf0>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	091b      	lsrs	r3, r3, #4
 800c766:	b2db      	uxtb	r3, r3
 800c768:	e00e      	b.n	800c788 <put_fat+0x10e>
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	b25b      	sxtb	r3, r3
 800c770:	f023 030f 	bic.w	r3, r3, #15
 800c774:	b25a      	sxtb	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	0a1b      	lsrs	r3, r3, #8
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	f003 030f 	and.w	r3, r3, #15
 800c780:	b25b      	sxtb	r3, r3
 800c782:	4313      	orrs	r3, r2
 800c784:	b25b      	sxtb	r3, r3
 800c786:	b2db      	uxtb	r3, r3
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2201      	movs	r2, #1
 800c790:	70da      	strb	r2, [r3, #3]
			break;
 800c792:	e059      	b.n	800c848 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	0a1b      	lsrs	r3, r3, #8
 800c79c:	4413      	add	r3, r2
 800c79e:	4619      	mov	r1, r3
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7ff fe07 	bl	800c3b4 <move_window>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7aa:	7ffb      	ldrb	r3, [r7, #31]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d148      	bne.n	800c842 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c7be:	4413      	add	r3, r2
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	b292      	uxth	r2, r2
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff fb4d 	bl	800be66 <st_word>
			fs->wflag = 1;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	70da      	strb	r2, [r3, #3]
			break;
 800c7d2:	e039      	b.n	800c848 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	09db      	lsrs	r3, r3, #7
 800c7dc:	4413      	add	r3, r2
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff fde7 	bl	800c3b4 <move_window>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7ea:	7ffb      	ldrb	r3, [r7, #31]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d12a      	bne.n	800c846 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c804:	4413      	add	r3, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fb0a 	bl	800be20 <ld_dword>
 800c80c:	4603      	mov	r3, r0
 800c80e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c812:	4323      	orrs	r3, r4
 800c814:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c824:	4413      	add	r3, r2
 800c826:	6879      	ldr	r1, [r7, #4]
 800c828:	4618      	mov	r0, r3
 800c82a:	f7ff fb37 	bl	800be9c <st_dword>
			fs->wflag = 1;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2201      	movs	r2, #1
 800c832:	70da      	strb	r2, [r3, #3]
			break;
 800c834:	e008      	b.n	800c848 <put_fat+0x1ce>
		}
	}
 800c836:	bf00      	nop
 800c838:	e006      	b.n	800c848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c83a:	bf00      	nop
 800c83c:	e004      	b.n	800c848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c83e:	bf00      	nop
 800c840:	e002      	b.n	800c848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c842:	bf00      	nop
 800c844:	e000      	b.n	800c848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c846:	bf00      	nop
	return res;
 800c848:	7ffb      	ldrb	r3, [r7, #31]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3724      	adds	r7, #36	; 0x24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd90      	pop	{r4, r7, pc}

0800c852 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b088      	sub	sp, #32
 800c856:	af00      	add	r7, sp, #0
 800c858:	60f8      	str	r0, [r7, #12]
 800c85a:	60b9      	str	r1, [r7, #8]
 800c85c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c85e:	2300      	movs	r3, #0
 800c860:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d904      	bls.n	800c878 <remove_chain+0x26>
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	429a      	cmp	r2, r3
 800c876:	d301      	bcc.n	800c87c <remove_chain+0x2a>
 800c878:	2302      	movs	r3, #2
 800c87a:	e04b      	b.n	800c914 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00c      	beq.n	800c89c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c882:	f04f 32ff 	mov.w	r2, #4294967295
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	69b8      	ldr	r0, [r7, #24]
 800c88a:	f7ff fef6 	bl	800c67a <put_fat>
 800c88e:	4603      	mov	r3, r0
 800c890:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c892:	7ffb      	ldrb	r3, [r7, #31]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <remove_chain+0x4a>
 800c898:	7ffb      	ldrb	r3, [r7, #31]
 800c89a:	e03b      	b.n	800c914 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f7ff fe43 	bl	800c52a <get_fat>
 800c8a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d031      	beq.n	800c910 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d101      	bne.n	800c8b6 <remove_chain+0x64>
 800c8b2:	2302      	movs	r3, #2
 800c8b4:	e02e      	b.n	800c914 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8bc:	d101      	bne.n	800c8c2 <remove_chain+0x70>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e028      	b.n	800c914 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	69b8      	ldr	r0, [r7, #24]
 800c8c8:	f7ff fed7 	bl	800c67a <put_fat>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c8d0:	7ffb      	ldrb	r3, [r7, #31]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <remove_chain+0x88>
 800c8d6:	7ffb      	ldrb	r3, [r7, #31]
 800c8d8:	e01c      	b.n	800c914 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	699a      	ldr	r2, [r3, #24]
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	3b02      	subs	r3, #2
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d20b      	bcs.n	800c900 <remove_chain+0xae>
			fs->free_clst++;
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	1c5a      	adds	r2, r3, #1
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	791b      	ldrb	r3, [r3, #4]
 800c8f6:	f043 0301 	orr.w	r3, r3, #1
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	69db      	ldr	r3, [r3, #28]
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d3c6      	bcc.n	800c89c <remove_chain+0x4a>
 800c90e:	e000      	b.n	800c912 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c910:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3720      	adds	r7, #32
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10d      	bne.n	800c94e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d004      	beq.n	800c948 <create_chain+0x2c>
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	429a      	cmp	r2, r3
 800c946:	d31b      	bcc.n	800c980 <create_chain+0x64>
 800c948:	2301      	movs	r3, #1
 800c94a:	61bb      	str	r3, [r7, #24]
 800c94c:	e018      	b.n	800c980 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff fdea 	bl	800c52a <get_fat>
 800c956:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d801      	bhi.n	800c962 <create_chain+0x46>
 800c95e:	2301      	movs	r3, #1
 800c960:	e070      	b.n	800ca44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c968:	d101      	bne.n	800c96e <create_chain+0x52>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	e06a      	b.n	800ca44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	69db      	ldr	r3, [r3, #28]
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	429a      	cmp	r2, r3
 800c976:	d201      	bcs.n	800c97c <create_chain+0x60>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	e063      	b.n	800ca44 <create_chain+0x128>
		scl = clst;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	3301      	adds	r3, #1
 800c988:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	69db      	ldr	r3, [r3, #28]
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	429a      	cmp	r2, r3
 800c992:	d307      	bcc.n	800c9a4 <create_chain+0x88>
				ncl = 2;
 800c994:	2302      	movs	r3, #2
 800c996:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c998:	69fa      	ldr	r2, [r7, #28]
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d901      	bls.n	800c9a4 <create_chain+0x88>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	e04f      	b.n	800ca44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9a4:	69f9      	ldr	r1, [r7, #28]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff fdbf 	bl	800c52a <get_fat>
 800c9ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00e      	beq.n	800c9d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d003      	beq.n	800c9c2 <create_chain+0xa6>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c0:	d101      	bne.n	800c9c6 <create_chain+0xaa>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	e03e      	b.n	800ca44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d1da      	bne.n	800c984 <create_chain+0x68>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e038      	b.n	800ca44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c9d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d8:	69f9      	ldr	r1, [r7, #28]
 800c9da:	6938      	ldr	r0, [r7, #16]
 800c9dc:	f7ff fe4d 	bl	800c67a <put_fat>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d109      	bne.n	800c9fe <create_chain+0xe2>
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d006      	beq.n	800c9fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c9f0:	69fa      	ldr	r2, [r7, #28]
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6938      	ldr	r0, [r7, #16]
 800c9f6:	f7ff fe40 	bl	800c67a <put_fat>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d116      	bne.n	800ca32 <create_chain+0x116>
		fs->last_clst = ncl;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	69fa      	ldr	r2, [r7, #28]
 800ca08:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	699a      	ldr	r2, [r3, #24]
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	3b02      	subs	r3, #2
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d804      	bhi.n	800ca22 <create_chain+0x106>
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	1e5a      	subs	r2, r3, #1
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	791b      	ldrb	r3, [r3, #4]
 800ca26:	f043 0301 	orr.w	r3, r3, #1
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	711a      	strb	r2, [r3, #4]
 800ca30:	e007      	b.n	800ca42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d102      	bne.n	800ca3e <create_chain+0x122>
 800ca38:	f04f 33ff 	mov.w	r3, #4294967295
 800ca3c:	e000      	b.n	800ca40 <create_chain+0x124>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca42:	69fb      	ldr	r3, [r7, #28]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3720      	adds	r7, #32
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca60:	3304      	adds	r3, #4
 800ca62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	0a5b      	lsrs	r3, r3, #9
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	8952      	ldrh	r2, [r2, #10]
 800ca6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca70:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	1d1a      	adds	r2, r3, #4
 800ca76:	613a      	str	r2, [r7, #16]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <clmt_clust+0x3a>
 800ca82:	2300      	movs	r3, #0
 800ca84:	e010      	b.n	800caa8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d307      	bcc.n	800ca9e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ca8e:	697a      	ldr	r2, [r7, #20]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca9c:	e7e9      	b.n	800ca72 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ca9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	4413      	add	r3, r2
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	371c      	adds	r7, #28
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800caca:	d204      	bcs.n	800cad6 <dir_sdi+0x22>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	f003 031f 	and.w	r3, r3, #31
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <dir_sdi+0x26>
		return FR_INT_ERR;
 800cad6:	2302      	movs	r3, #2
 800cad8:	e063      	b.n	800cba2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d106      	bne.n	800cafa <dir_sdi+0x46>
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d902      	bls.n	800cafa <dir_sdi+0x46>
		clst = fs->dirbase;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10c      	bne.n	800cb1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	095b      	lsrs	r3, r3, #5
 800cb04:	693a      	ldr	r2, [r7, #16]
 800cb06:	8912      	ldrh	r2, [r2, #8]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d301      	bcc.n	800cb10 <dir_sdi+0x5c>
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	e048      	b.n	800cba2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	61da      	str	r2, [r3, #28]
 800cb18:	e029      	b.n	800cb6e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	895b      	ldrh	r3, [r3, #10]
 800cb1e:	025b      	lsls	r3, r3, #9
 800cb20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb22:	e019      	b.n	800cb58 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6979      	ldr	r1, [r7, #20]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff fcfe 	bl	800c52a <get_fat>
 800cb2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb36:	d101      	bne.n	800cb3c <dir_sdi+0x88>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e032      	b.n	800cba2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d904      	bls.n	800cb4c <dir_sdi+0x98>
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	69db      	ldr	r3, [r3, #28]
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d301      	bcc.n	800cb50 <dir_sdi+0x9c>
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e028      	b.n	800cba2 <dir_sdi+0xee>
			ofs -= csz;
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d2e1      	bcs.n	800cb24 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cb60:	6979      	ldr	r1, [r7, #20]
 800cb62:	6938      	ldr	r0, [r7, #16]
 800cb64:	f7ff fcc2 	bl	800c4ec <clust2sect>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <dir_sdi+0xcc>
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	e010      	b.n	800cba2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	69da      	ldr	r2, [r3, #28]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	0a5b      	lsrs	r3, r3, #9
 800cb88:	441a      	add	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9a:	441a      	add	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b086      	sub	sp, #24
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	3320      	adds	r3, #32
 800cbc0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	69db      	ldr	r3, [r3, #28]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d003      	beq.n	800cbd2 <dir_next+0x28>
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbd0:	d301      	bcc.n	800cbd6 <dir_next+0x2c>
 800cbd2:	2304      	movs	r3, #4
 800cbd4:	e0aa      	b.n	800cd2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f040 8098 	bne.w	800cd12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	69db      	ldr	r3, [r3, #28]
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10b      	bne.n	800cc0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	095b      	lsrs	r3, r3, #5
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	8912      	ldrh	r2, [r2, #8]
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	f0c0 8088 	bcc.w	800cd12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	61da      	str	r2, [r3, #28]
 800cc08:	2304      	movs	r3, #4
 800cc0a:	e08f      	b.n	800cd2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	0a5b      	lsrs	r3, r3, #9
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	8952      	ldrh	r2, [r2, #10]
 800cc14:	3a01      	subs	r2, #1
 800cc16:	4013      	ands	r3, r2
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d17a      	bne.n	800cd12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	4619      	mov	r1, r3
 800cc24:	4610      	mov	r0, r2
 800cc26:	f7ff fc80 	bl	800c52a <get_fat>
 800cc2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d801      	bhi.n	800cc36 <dir_next+0x8c>
 800cc32:	2302      	movs	r3, #2
 800cc34:	e07a      	b.n	800cd2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3c:	d101      	bne.n	800cc42 <dir_next+0x98>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e074      	b.n	800cd2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	69db      	ldr	r3, [r3, #28]
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d358      	bcc.n	800ccfe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d104      	bne.n	800cc5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	61da      	str	r2, [r3, #28]
 800cc58:	2304      	movs	r3, #4
 800cc5a:	e067      	b.n	800cd2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	4619      	mov	r1, r3
 800cc64:	4610      	mov	r0, r2
 800cc66:	f7ff fe59 	bl	800c91c <create_chain>
 800cc6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <dir_next+0xcc>
 800cc72:	2307      	movs	r3, #7
 800cc74:	e05a      	b.n	800cd2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d101      	bne.n	800cc80 <dir_next+0xd6>
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	e055      	b.n	800cd2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc86:	d101      	bne.n	800cc8c <dir_next+0xe2>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e04f      	b.n	800cd2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff fb4d 	bl	800c32c <sync_window>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d001      	beq.n	800cc9c <dir_next+0xf2>
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e047      	b.n	800cd2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	3338      	adds	r3, #56	; 0x38
 800cca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cca4:	2100      	movs	r1, #0
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff f945 	bl	800bf36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccac:	2300      	movs	r3, #0
 800ccae:	613b      	str	r3, [r7, #16]
 800ccb0:	6979      	ldr	r1, [r7, #20]
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7ff fc1a 	bl	800c4ec <clust2sect>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	635a      	str	r2, [r3, #52]	; 0x34
 800ccbe:	e012      	b.n	800cce6 <dir_next+0x13c>
						fs->wflag = 1;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f7ff fb30 	bl	800c32c <sync_window>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <dir_next+0x12c>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e02a      	b.n	800cd2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	613b      	str	r3, [r7, #16]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce0:	1c5a      	adds	r2, r3, #1
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	635a      	str	r2, [r3, #52]	; 0x34
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	895b      	ldrh	r3, [r3, #10]
 800ccea:	461a      	mov	r2, r3
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d3e6      	bcc.n	800ccc0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	1ad2      	subs	r2, r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	697a      	ldr	r2, [r7, #20]
 800cd02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd04:	6979      	ldr	r1, [r7, #20]
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7ff fbf0 	bl	800c4ec <clust2sect>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd24:	441a      	add	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3718      	adds	r7, #24
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cd44:	2100      	movs	r1, #0
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff feb4 	bl	800cab4 <dir_sdi>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d12b      	bne.n	800cdae <dir_alloc+0x7a>
		n = 0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	69db      	ldr	r3, [r3, #28]
 800cd5e:	4619      	mov	r1, r3
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7ff fb27 	bl	800c3b4 <move_window>
 800cd66:	4603      	mov	r3, r0
 800cd68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d11d      	bne.n	800cdac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2be5      	cmp	r3, #229	; 0xe5
 800cd78:	d004      	beq.n	800cd84 <dir_alloc+0x50>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d107      	bne.n	800cd94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	3301      	adds	r3, #1
 800cd88:	613b      	str	r3, [r7, #16]
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d102      	bne.n	800cd98 <dir_alloc+0x64>
 800cd92:	e00c      	b.n	800cdae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cd94:	2300      	movs	r3, #0
 800cd96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cd98:	2101      	movs	r1, #1
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff ff05 	bl	800cbaa <dir_next>
 800cda0:	4603      	mov	r3, r0
 800cda2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0d7      	beq.n	800cd5a <dir_alloc+0x26>
 800cdaa:	e000      	b.n	800cdae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cdac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	2b04      	cmp	r3, #4
 800cdb2:	d101      	bne.n	800cdb8 <dir_alloc+0x84>
 800cdb4:	2307      	movs	r3, #7
 800cdb6:	75fb      	strb	r3, [r7, #23]
	return res;
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	331a      	adds	r3, #26
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff f80d 	bl	800bdf0 <ld_word>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d109      	bne.n	800cdf6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	3314      	adds	r3, #20
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff f802 	bl	800bdf0 <ld_word>
 800cdec:	4603      	mov	r3, r0
 800cdee:	041b      	lsls	r3, r3, #16
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	331a      	adds	r3, #26
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	b292      	uxth	r2, r2
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff f825 	bl	800be66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d109      	bne.n	800ce38 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	f103 0214 	add.w	r2, r3, #20
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	0c1b      	lsrs	r3, r3, #16
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f7ff f817 	bl	800be66 <st_word>
	}
}
 800ce38:	bf00      	nop
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ce40:	b590      	push	{r4, r7, lr}
 800ce42:	b087      	sub	sp, #28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	331a      	adds	r3, #26
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe ffce 	bl	800bdf0 <ld_word>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <cmp_lfn+0x1e>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	e059      	b.n	800cf12 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce66:	1e5a      	subs	r2, r3, #1
 800ce68:	4613      	mov	r3, r2
 800ce6a:	005b      	lsls	r3, r3, #1
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce74:	2301      	movs	r3, #1
 800ce76:	81fb      	strh	r3, [r7, #14]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	613b      	str	r3, [r7, #16]
 800ce7c:	e033      	b.n	800cee6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ce7e:	4a27      	ldr	r2, [pc, #156]	; (800cf1c <cmp_lfn+0xdc>)
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	4413      	add	r3, r2
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe ffaf 	bl	800bdf0 <ld_word>
 800ce92:	4603      	mov	r3, r0
 800ce94:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ce96:	89fb      	ldrh	r3, [r7, #14]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d01a      	beq.n	800ced2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2bfe      	cmp	r3, #254	; 0xfe
 800cea0:	d812      	bhi.n	800cec8 <cmp_lfn+0x88>
 800cea2:	89bb      	ldrh	r3, [r7, #12]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f002 fc6f 	bl	800f788 <ff_wtoupper>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	461c      	mov	r4, r3
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	617a      	str	r2, [r7, #20]
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	4413      	add	r3, r2
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f002 fc63 	bl	800f788 <ff_wtoupper>
 800cec2:	4603      	mov	r3, r0
 800cec4:	429c      	cmp	r4, r3
 800cec6:	d001      	beq.n	800cecc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cec8:	2300      	movs	r3, #0
 800ceca:	e022      	b.n	800cf12 <cmp_lfn+0xd2>
			}
			wc = uc;
 800cecc:	89bb      	ldrh	r3, [r7, #12]
 800cece:	81fb      	strh	r3, [r7, #14]
 800ced0:	e006      	b.n	800cee0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ced2:	89bb      	ldrh	r3, [r7, #12]
 800ced4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d001      	beq.n	800cee0 <cmp_lfn+0xa0>
 800cedc:	2300      	movs	r3, #0
 800cede:	e018      	b.n	800cf12 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	3301      	adds	r3, #1
 800cee4:	613b      	str	r3, [r7, #16]
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b0c      	cmp	r3, #12
 800ceea:	d9c8      	bls.n	800ce7e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <cmp_lfn+0xd0>
 800cef8:	89fb      	ldrh	r3, [r7, #14]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d008      	beq.n	800cf10 <cmp_lfn+0xd0>
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	4413      	add	r3, r2
 800cf06:	881b      	ldrh	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <cmp_lfn+0xd0>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	e000      	b.n	800cf12 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cf10:	2301      	movs	r3, #1
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	371c      	adds	r7, #28
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd90      	pop	{r4, r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0804e228 	.word	0x0804e228

0800cf20 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	331a      	adds	r3, #26
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe ff5e 	bl	800bdf0 <ld_word>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <pick_lfn+0x1e>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e04d      	b.n	800cfda <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf46:	1e5a      	subs	r2, r3, #1
 800cf48:	4613      	mov	r3, r2
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	4413      	add	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf54:	2301      	movs	r3, #1
 800cf56:	81fb      	strh	r3, [r7, #14]
 800cf58:	2300      	movs	r3, #0
 800cf5a:	613b      	str	r3, [r7, #16]
 800cf5c:	e028      	b.n	800cfb0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cf5e:	4a21      	ldr	r2, [pc, #132]	; (800cfe4 <pick_lfn+0xc4>)
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	4413      	add	r3, r2
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	461a      	mov	r2, r3
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fe ff3f 	bl	800bdf0 <ld_word>
 800cf72:	4603      	mov	r3, r0
 800cf74:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cf76:	89fb      	ldrh	r3, [r7, #14]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00f      	beq.n	800cf9c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	2bfe      	cmp	r3, #254	; 0xfe
 800cf80:	d901      	bls.n	800cf86 <pick_lfn+0x66>
 800cf82:	2300      	movs	r3, #0
 800cf84:	e029      	b.n	800cfda <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cf86:	89bb      	ldrh	r3, [r7, #12]
 800cf88:	81fb      	strh	r3, [r7, #14]
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	617a      	str	r2, [r7, #20]
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	4413      	add	r3, r2
 800cf96:	89fa      	ldrh	r2, [r7, #14]
 800cf98:	801a      	strh	r2, [r3, #0]
 800cf9a:	e006      	b.n	800cfaa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cf9c:	89bb      	ldrh	r3, [r7, #12]
 800cf9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d001      	beq.n	800cfaa <pick_lfn+0x8a>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e017      	b.n	800cfda <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	3301      	adds	r3, #1
 800cfae:	613b      	str	r3, [r7, #16]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	2b0c      	cmp	r3, #12
 800cfb4:	d9d3      	bls.n	800cf5e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2bfe      	cmp	r3, #254	; 0xfe
 800cfc6:	d901      	bls.n	800cfcc <pick_lfn+0xac>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	e006      	b.n	800cfda <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cfd8:	2301      	movs	r3, #1
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	0804e228 	.word	0x0804e228

0800cfe8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	4611      	mov	r1, r2
 800cff4:	461a      	mov	r2, r3
 800cff6:	460b      	mov	r3, r1
 800cff8:	71fb      	strb	r3, [r7, #7]
 800cffa:	4613      	mov	r3, r2
 800cffc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	330d      	adds	r3, #13
 800d002:	79ba      	ldrb	r2, [r7, #6]
 800d004:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	330b      	adds	r3, #11
 800d00a:	220f      	movs	r2, #15
 800d00c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	330c      	adds	r3, #12
 800d012:	2200      	movs	r2, #0
 800d014:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	331a      	adds	r3, #26
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe ff22 	bl	800be66 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	1e5a      	subs	r2, r3, #1
 800d026:	4613      	mov	r3, r2
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	4413      	add	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	82fb      	strh	r3, [r7, #22]
 800d036:	2300      	movs	r3, #0
 800d038:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d03a:	8afb      	ldrh	r3, [r7, #22]
 800d03c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d040:	4293      	cmp	r3, r2
 800d042:	d007      	beq.n	800d054 <put_lfn+0x6c>
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	1c5a      	adds	r2, r3, #1
 800d048:	61fa      	str	r2, [r7, #28]
 800d04a:	005b      	lsls	r3, r3, #1
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d054:	4a17      	ldr	r2, [pc, #92]	; (800d0b4 <put_lfn+0xcc>)
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	4413      	add	r3, r2
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	461a      	mov	r2, r3
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	4413      	add	r3, r2
 800d062:	8afa      	ldrh	r2, [r7, #22]
 800d064:	4611      	mov	r1, r2
 800d066:	4618      	mov	r0, r3
 800d068:	f7fe fefd 	bl	800be66 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d06c:	8afb      	ldrh	r3, [r7, #22]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d102      	bne.n	800d078 <put_lfn+0x90>
 800d072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d076:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	3301      	adds	r3, #1
 800d07c:	61bb      	str	r3, [r7, #24]
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	2b0c      	cmp	r3, #12
 800d082:	d9da      	bls.n	800d03a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d084:	8afb      	ldrh	r3, [r7, #22]
 800d086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d006      	beq.n	800d09c <put_lfn+0xb4>
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	4413      	add	r3, r2
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d103      	bne.n	800d0a4 <put_lfn+0xbc>
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	79fa      	ldrb	r2, [r7, #7]
 800d0a8:	701a      	strb	r2, [r3, #0]
}
 800d0aa:	bf00      	nop
 800d0ac:	3720      	adds	r7, #32
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	0804e228 	.word	0x0804e228

0800d0b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08c      	sub	sp, #48	; 0x30
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d0c6:	220b      	movs	r2, #11
 800d0c8:	68b9      	ldr	r1, [r7, #8]
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f7fe ff12 	bl	800bef4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	2b05      	cmp	r3, #5
 800d0d4:	d92b      	bls.n	800d12e <gen_numname+0x76>
		sr = seq;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d0da:	e022      	b.n	800d122 <gen_numname+0x6a>
			wc = *lfn++;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	1c9a      	adds	r2, r3, #2
 800d0e0:	607a      	str	r2, [r7, #4]
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0ea:	e017      	b.n	800d11c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	005a      	lsls	r2, r3, #1
 800d0f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	4413      	add	r3, r2
 800d0f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d0fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0fc:	085b      	lsrs	r3, r3, #1
 800d0fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d005      	beq.n	800d116 <gen_numname+0x5e>
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d110:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d114:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	3301      	adds	r3, #1
 800d11a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11e:	2b0f      	cmp	r3, #15
 800d120:	d9e4      	bls.n	800d0ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1d8      	bne.n	800d0dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d12e:	2307      	movs	r3, #7
 800d130:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	b2db      	uxtb	r3, r3
 800d136:	f003 030f 	and.w	r3, r3, #15
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	3330      	adds	r3, #48	; 0x30
 800d13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d146:	2b39      	cmp	r3, #57	; 0x39
 800d148:	d904      	bls.n	800d154 <gen_numname+0x9c>
 800d14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d14e:	3307      	adds	r3, #7
 800d150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d156:	1e5a      	subs	r2, r3, #1
 800d158:	62ba      	str	r2, [r7, #40]	; 0x28
 800d15a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d15e:	4413      	add	r3, r2
 800d160:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d164:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	091b      	lsrs	r3, r3, #4
 800d16c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1de      	bne.n	800d132 <gen_numname+0x7a>
	ns[i] = '~';
 800d174:	f107 0214 	add.w	r2, r7, #20
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	4413      	add	r3, r2
 800d17c:	227e      	movs	r2, #126	; 0x7e
 800d17e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d180:	2300      	movs	r3, #0
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
 800d184:	e016      	b.n	800d1b4 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	4413      	add	r3, r2
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b80      	cmp	r3, #128	; 0x80
 800d190:	d90d      	bls.n	800d1ae <gen_numname+0xf6>
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	4413      	add	r3, r2
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	2bff      	cmp	r3, #255	; 0xff
 800d19c:	d007      	beq.n	800d1ae <gen_numname+0xf6>
			if (j == i - 1) break;
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d010      	beq.n	800d1ca <gen_numname+0x112>
			j++;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d207      	bcs.n	800d1cc <gen_numname+0x114>
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	4413      	add	r3, r2
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b20      	cmp	r3, #32
 800d1c6:	d1de      	bne.n	800d186 <gen_numname+0xce>
 800d1c8:	e000      	b.n	800d1cc <gen_numname+0x114>
			if (j == i - 1) break;
 800d1ca:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	2b07      	cmp	r3, #7
 800d1d0:	d808      	bhi.n	800d1e4 <gen_numname+0x12c>
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	62ba      	str	r2, [r7, #40]	; 0x28
 800d1d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d1dc:	4413      	add	r3, r2
 800d1de:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d1e2:	e000      	b.n	800d1e6 <gen_numname+0x12e>
 800d1e4:	2120      	movs	r1, #32
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	627a      	str	r2, [r7, #36]	; 0x24
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	460a      	mov	r2, r1
 800d1f2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	2b07      	cmp	r3, #7
 800d1f8:	d9e8      	bls.n	800d1cc <gen_numname+0x114>
}
 800d1fa:	bf00      	nop
 800d1fc:	bf00      	nop
 800d1fe:	3730      	adds	r7, #48	; 0x30
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d210:	230b      	movs	r3, #11
 800d212:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	b2da      	uxtb	r2, r3
 800d218:	0852      	lsrs	r2, r2, #1
 800d21a:	01db      	lsls	r3, r3, #7
 800d21c:	4313      	orrs	r3, r2
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	1c59      	adds	r1, r3, #1
 800d224:	6079      	str	r1, [r7, #4]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	4413      	add	r3, r2
 800d22a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	3b01      	subs	r3, #1
 800d230:	60bb      	str	r3, [r7, #8]
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1ed      	bne.n	800d214 <sum_sfn+0x10>
	return sum;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr

0800d246 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b086      	sub	sp, #24
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d250:	2304      	movs	r3, #4
 800d252:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d25a:	23ff      	movs	r3, #255	; 0xff
 800d25c:	757b      	strb	r3, [r7, #21]
 800d25e:	23ff      	movs	r3, #255	; 0xff
 800d260:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d262:	e081      	b.n	800d368 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	69db      	ldr	r3, [r3, #28]
 800d268:	4619      	mov	r1, r3
 800d26a:	6938      	ldr	r0, [r7, #16]
 800d26c:	f7ff f8a2 	bl	800c3b4 <move_window>
 800d270:	4603      	mov	r3, r0
 800d272:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d274:	7dfb      	ldrb	r3, [r7, #23]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d17c      	bne.n	800d374 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a1b      	ldr	r3, [r3, #32]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d282:	7dbb      	ldrb	r3, [r7, #22]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d102      	bne.n	800d28e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d288:	2304      	movs	r3, #4
 800d28a:	75fb      	strb	r3, [r7, #23]
 800d28c:	e077      	b.n	800d37e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	330b      	adds	r3, #11
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d29a:	73fb      	strb	r3, [r7, #15]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	7bfa      	ldrb	r2, [r7, #15]
 800d2a0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d2a2:	7dbb      	ldrb	r3, [r7, #22]
 800d2a4:	2be5      	cmp	r3, #229	; 0xe5
 800d2a6:	d00e      	beq.n	800d2c6 <dir_read+0x80>
 800d2a8:	7dbb      	ldrb	r3, [r7, #22]
 800d2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ac:	d00b      	beq.n	800d2c6 <dir_read+0x80>
 800d2ae:	7bfb      	ldrb	r3, [r7, #15]
 800d2b0:	f023 0320 	bic.w	r3, r3, #32
 800d2b4:	2b08      	cmp	r3, #8
 800d2b6:	bf0c      	ite	eq
 800d2b8:	2301      	moveq	r3, #1
 800d2ba:	2300      	movne	r3, #0
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	461a      	mov	r2, r3
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d002      	beq.n	800d2cc <dir_read+0x86>
				ord = 0xFF;
 800d2c6:	23ff      	movs	r3, #255	; 0xff
 800d2c8:	757b      	strb	r3, [r7, #21]
 800d2ca:	e044      	b.n	800d356 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
 800d2ce:	2b0f      	cmp	r3, #15
 800d2d0:	d12f      	bne.n	800d332 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d2d2:	7dbb      	ldrb	r3, [r7, #22]
 800d2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00d      	beq.n	800d2f8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a1b      	ldr	r3, [r3, #32]
 800d2e0:	7b5b      	ldrb	r3, [r3, #13]
 800d2e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d2e4:	7dbb      	ldrb	r3, [r7, #22]
 800d2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ea:	75bb      	strb	r3, [r7, #22]
 800d2ec:	7dbb      	ldrb	r3, [r7, #22]
 800d2ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	695a      	ldr	r2, [r3, #20]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d2f8:	7dba      	ldrb	r2, [r7, #22]
 800d2fa:	7d7b      	ldrb	r3, [r7, #21]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d115      	bne.n	800d32c <dir_read+0xe6>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a1b      	ldr	r3, [r3, #32]
 800d304:	330d      	adds	r3, #13
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	7d3a      	ldrb	r2, [r7, #20]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d10e      	bne.n	800d32c <dir_read+0xe6>
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	68da      	ldr	r2, [r3, #12]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7ff fe01 	bl	800cf20 <pick_lfn>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <dir_read+0xe6>
 800d324:	7d7b      	ldrb	r3, [r7, #21]
 800d326:	3b01      	subs	r3, #1
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	e000      	b.n	800d32e <dir_read+0xe8>
 800d32c:	23ff      	movs	r3, #255	; 0xff
 800d32e:	757b      	strb	r3, [r7, #21]
 800d330:	e011      	b.n	800d356 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d332:	7d7b      	ldrb	r3, [r7, #21]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d109      	bne.n	800d34c <dir_read+0x106>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7ff ff61 	bl	800d204 <sum_sfn>
 800d342:	4603      	mov	r3, r0
 800d344:	461a      	mov	r2, r3
 800d346:	7d3b      	ldrb	r3, [r7, #20]
 800d348:	4293      	cmp	r3, r2
 800d34a:	d015      	beq.n	800d378 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f04f 32ff 	mov.w	r2, #4294967295
 800d352:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d354:	e010      	b.n	800d378 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d356:	2100      	movs	r1, #0
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff fc26 	bl	800cbaa <dir_next>
 800d35e:	4603      	mov	r3, r0
 800d360:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d109      	bne.n	800d37c <dir_read+0x136>
	while (dp->sect) {
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	69db      	ldr	r3, [r3, #28]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f47f af79 	bne.w	800d264 <dir_read+0x1e>
 800d372:	e004      	b.n	800d37e <dir_read+0x138>
		if (res != FR_OK) break;
 800d374:	bf00      	nop
 800d376:	e002      	b.n	800d37e <dir_read+0x138>
					break;
 800d378:	bf00      	nop
 800d37a:	e000      	b.n	800d37e <dir_read+0x138>
		if (res != FR_OK) break;
 800d37c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d002      	beq.n	800d38a <dir_read+0x144>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	61da      	str	r2, [r3, #28]
	return res;
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fb85 	bl	800cab4 <dir_sdi>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <dir_find+0x24>
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	e0a9      	b.n	800d50c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3b8:	23ff      	movs	r3, #255	; 0xff
 800d3ba:	753b      	strb	r3, [r7, #20]
 800d3bc:	7d3b      	ldrb	r3, [r7, #20]
 800d3be:	757b      	strb	r3, [r7, #21]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	69db      	ldr	r3, [r3, #28]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	6938      	ldr	r0, [r7, #16]
 800d3d0:	f7fe fff0 	bl	800c3b4 <move_window>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f040 8090 	bne.w	800d500 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d3e8:	7dbb      	ldrb	r3, [r7, #22]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d102      	bne.n	800d3f4 <dir_find+0x60>
 800d3ee:	2304      	movs	r3, #4
 800d3f0:	75fb      	strb	r3, [r7, #23]
 800d3f2:	e08a      	b.n	800d50a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	330b      	adds	r3, #11
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d400:	73fb      	strb	r3, [r7, #15]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	7bfa      	ldrb	r2, [r7, #15]
 800d406:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d408:	7dbb      	ldrb	r3, [r7, #22]
 800d40a:	2be5      	cmp	r3, #229	; 0xe5
 800d40c:	d007      	beq.n	800d41e <dir_find+0x8a>
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
 800d410:	f003 0308 	and.w	r3, r3, #8
 800d414:	2b00      	cmp	r3, #0
 800d416:	d009      	beq.n	800d42c <dir_find+0x98>
 800d418:	7bfb      	ldrb	r3, [r7, #15]
 800d41a:	2b0f      	cmp	r3, #15
 800d41c:	d006      	beq.n	800d42c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d41e:	23ff      	movs	r3, #255	; 0xff
 800d420:	757b      	strb	r3, [r7, #21]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f04f 32ff 	mov.w	r2, #4294967295
 800d428:	631a      	str	r2, [r3, #48]	; 0x30
 800d42a:	e05e      	b.n	800d4ea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
 800d42e:	2b0f      	cmp	r3, #15
 800d430:	d136      	bne.n	800d4a0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d154      	bne.n	800d4ea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d440:	7dbb      	ldrb	r3, [r7, #22]
 800d442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00d      	beq.n	800d466 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a1b      	ldr	r3, [r3, #32]
 800d44e:	7b5b      	ldrb	r3, [r3, #13]
 800d450:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d452:	7dbb      	ldrb	r3, [r7, #22]
 800d454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d458:	75bb      	strb	r3, [r7, #22]
 800d45a:	7dbb      	ldrb	r3, [r7, #22]
 800d45c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	695a      	ldr	r2, [r3, #20]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d466:	7dba      	ldrb	r2, [r7, #22]
 800d468:	7d7b      	ldrb	r3, [r7, #21]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d115      	bne.n	800d49a <dir_find+0x106>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	330d      	adds	r3, #13
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	7d3a      	ldrb	r2, [r7, #20]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d10e      	bne.n	800d49a <dir_find+0x106>
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	68da      	ldr	r2, [r3, #12]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a1b      	ldr	r3, [r3, #32]
 800d484:	4619      	mov	r1, r3
 800d486:	4610      	mov	r0, r2
 800d488:	f7ff fcda 	bl	800ce40 <cmp_lfn>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <dir_find+0x106>
 800d492:	7d7b      	ldrb	r3, [r7, #21]
 800d494:	3b01      	subs	r3, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	e000      	b.n	800d49c <dir_find+0x108>
 800d49a:	23ff      	movs	r3, #255	; 0xff
 800d49c:	757b      	strb	r3, [r7, #21]
 800d49e:	e024      	b.n	800d4ea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d4a0:	7d7b      	ldrb	r3, [r7, #21]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d109      	bne.n	800d4ba <dir_find+0x126>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7ff feaa 	bl	800d204 <sum_sfn>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	7d3b      	ldrb	r3, [r7, #20]
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d024      	beq.n	800d504 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10a      	bne.n	800d4de <dir_find+0x14a>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a18      	ldr	r0, [r3, #32]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	3324      	adds	r3, #36	; 0x24
 800d4d0:	220b      	movs	r2, #11
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	f7fe fd4a 	bl	800bf6c <mem_cmp>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d014      	beq.n	800d508 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d4de:	23ff      	movs	r3, #255	; 0xff
 800d4e0:	757b      	strb	r3, [r7, #21]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fb5c 	bl	800cbaa <dir_next>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f43f af65 	beq.w	800d3c8 <dir_find+0x34>
 800d4fe:	e004      	b.n	800d50a <dir_find+0x176>
		if (res != FR_OK) break;
 800d500:	bf00      	nop
 800d502:	e002      	b.n	800d50a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d504:	bf00      	nop
 800d506:	e000      	b.n	800d50a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d508:	bf00      	nop

	return res;
 800d50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b08c      	sub	sp, #48	; 0x30
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d528:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <dir_register+0x20>
 800d530:	2306      	movs	r3, #6
 800d532:	e0e0      	b.n	800d6f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d534:	2300      	movs	r3, #0
 800d536:	627b      	str	r3, [r7, #36]	; 0x24
 800d538:	e002      	b.n	800d540 <dir_register+0x2c>
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	3301      	adds	r3, #1
 800d53e:	627b      	str	r3, [r7, #36]	; 0x24
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	68da      	ldr	r2, [r3, #12]
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	4413      	add	r3, r2
 800d54a:	881b      	ldrh	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1f4      	bne.n	800d53a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d556:	f107 030c 	add.w	r3, r7, #12
 800d55a:	220c      	movs	r2, #12
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fe fcc9 	bl	800bef4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d562:	7dfb      	ldrb	r3, [r7, #23]
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d032      	beq.n	800d5d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2240      	movs	r2, #64	; 0x40
 800d570:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d574:	2301      	movs	r3, #1
 800d576:	62bb      	str	r3, [r7, #40]	; 0x28
 800d578:	e016      	b.n	800d5a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	68da      	ldr	r2, [r3, #12]
 800d584:	f107 010c 	add.w	r1, r7, #12
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	f7ff fd95 	bl	800d0b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff ff00 	bl	800d394 <dir_find>
 800d594:	4603      	mov	r3, r0
 800d596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d59a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d106      	bne.n	800d5b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	2b63      	cmp	r3, #99	; 0x63
 800d5ac:	d9e5      	bls.n	800d57a <dir_register+0x66>
 800d5ae:	e000      	b.n	800d5b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d5b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b4:	2b64      	cmp	r3, #100	; 0x64
 800d5b6:	d101      	bne.n	800d5bc <dir_register+0xa8>
 800d5b8:	2307      	movs	r3, #7
 800d5ba:	e09c      	b.n	800d6f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d5bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5c0:	2b04      	cmp	r3, #4
 800d5c2:	d002      	beq.n	800d5ca <dir_register+0xb6>
 800d5c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5c8:	e095      	b.n	800d6f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d5ca:	7dfa      	ldrb	r2, [r7, #23]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d5d2:	7dfb      	ldrb	r3, [r7, #23]
 800d5d4:	f003 0302 	and.w	r3, r3, #2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <dir_register+0xd8>
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	330c      	adds	r3, #12
 800d5e0:	4a47      	ldr	r2, [pc, #284]	; (800d700 <dir_register+0x1ec>)
 800d5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e6:	089b      	lsrs	r3, r3, #2
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	e000      	b.n	800d5ee <dir_register+0xda>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d5f0:	6a39      	ldr	r1, [r7, #32]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff fb9e 	bl	800cd34 <dir_alloc>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d602:	2b00      	cmp	r3, #0
 800d604:	d148      	bne.n	800d698 <dir_register+0x184>
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	3b01      	subs	r3, #1
 800d60a:	623b      	str	r3, [r7, #32]
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d042      	beq.n	800d698 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	695a      	ldr	r2, [r3, #20]
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	015b      	lsls	r3, r3, #5
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	4619      	mov	r1, r3
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff fa48 	bl	800cab4 <dir_sdi>
 800d624:	4603      	mov	r3, r0
 800d626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d62a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d132      	bne.n	800d698 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	3324      	adds	r3, #36	; 0x24
 800d636:	4618      	mov	r0, r3
 800d638:	f7ff fde4 	bl	800d204 <sum_sfn>
 800d63c:	4603      	mov	r3, r0
 800d63e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	4619      	mov	r1, r3
 800d646:	69f8      	ldr	r0, [r7, #28]
 800d648:	f7fe feb4 	bl	800c3b4 <move_window>
 800d64c:	4603      	mov	r3, r0
 800d64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d656:	2b00      	cmp	r3, #0
 800d658:	d11d      	bne.n	800d696 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	68d8      	ldr	r0, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a19      	ldr	r1, [r3, #32]
 800d662:	6a3b      	ldr	r3, [r7, #32]
 800d664:	b2da      	uxtb	r2, r3
 800d666:	7efb      	ldrb	r3, [r7, #27]
 800d668:	f7ff fcbe 	bl	800cfe8 <put_lfn>
				fs->wflag = 1;
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	2201      	movs	r2, #1
 800d670:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d672:	2100      	movs	r1, #0
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7ff fa98 	bl	800cbaa <dir_next>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d684:	2b00      	cmp	r3, #0
 800d686:	d107      	bne.n	800d698 <dir_register+0x184>
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	623b      	str	r3, [r7, #32]
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1d5      	bne.n	800d640 <dir_register+0x12c>
 800d694:	e000      	b.n	800d698 <dir_register+0x184>
				if (res != FR_OK) break;
 800d696:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d128      	bne.n	800d6f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	69f8      	ldr	r0, [r7, #28]
 800d6a8:	f7fe fe84 	bl	800c3b4 <move_window>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d11b      	bne.n	800d6f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	2220      	movs	r2, #32
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fe fc37 	bl	800bf36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a18      	ldr	r0, [r3, #32]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	3324      	adds	r3, #36	; 0x24
 800d6d0:	220b      	movs	r2, #11
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	f7fe fc0e 	bl	800bef4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	330c      	adds	r3, #12
 800d6e4:	f002 0218 	and.w	r2, r2, #24
 800d6e8:	b2d2      	uxtb	r2, r2
 800d6ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3730      	adds	r7, #48	; 0x30
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	4ec4ec4f 	.word	0x4ec4ec4f

0800d704 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d720:	d007      	beq.n	800d732 <dir_remove+0x2e>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d726:	4619      	mov	r1, r3
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7ff f9c3 	bl	800cab4 <dir_sdi>
 800d72e:	4603      	mov	r3, r0
 800d730:	e000      	b.n	800d734 <dir_remove+0x30>
 800d732:	2300      	movs	r3, #0
 800d734:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d736:	7dfb      	ldrb	r3, [r7, #23]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d128      	bne.n	800d78e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	69db      	ldr	r3, [r3, #28]
 800d740:	4619      	mov	r1, r3
 800d742:	6938      	ldr	r0, [r7, #16]
 800d744:	f7fe fe36 	bl	800c3b4 <move_window>
 800d748:	4603      	mov	r3, r0
 800d74a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d115      	bne.n	800d77e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	22e5      	movs	r2, #229	; 0xe5
 800d758:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	2201      	movs	r2, #1
 800d75e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	695b      	ldr	r3, [r3, #20]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	429a      	cmp	r2, r3
 800d768:	d90b      	bls.n	800d782 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800d76a:	2100      	movs	r1, #0
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7ff fa1c 	bl	800cbaa <dir_next>
 800d772:	4603      	mov	r3, r0
 800d774:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0df      	beq.n	800d73c <dir_remove+0x38>
 800d77c:	e002      	b.n	800d784 <dir_remove+0x80>
			if (res != FR_OK) break;
 800d77e:	bf00      	nop
 800d780:	e000      	b.n	800d784 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d782:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800d784:	7dfb      	ldrb	r3, [r7, #23]
 800d786:	2b04      	cmp	r3, #4
 800d788:	d101      	bne.n	800d78e <dir_remove+0x8a>
 800d78a:	2302      	movs	r3, #2
 800d78c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b08a      	sub	sp, #40	; 0x28
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	613b      	str	r3, [r7, #16]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	60fb      	str	r3, [r7, #12]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	617b      	str	r3, [r7, #20]
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	61ba      	str	r2, [r7, #24]
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d7c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7c8:	2b1f      	cmp	r3, #31
 800d7ca:	d96a      	bls.n	800d8a2 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ce:	2b2f      	cmp	r3, #47	; 0x2f
 800d7d0:	d006      	beq.n	800d7e0 <create_name+0x48>
 800d7d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7d4:	2b5c      	cmp	r3, #92	; 0x5c
 800d7d6:	d110      	bne.n	800d7fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d7d8:	e002      	b.n	800d7e0 <create_name+0x48>
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	61bb      	str	r3, [r7, #24]
 800d7e0:	693a      	ldr	r2, [r7, #16]
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b2f      	cmp	r3, #47	; 0x2f
 800d7ea:	d0f6      	beq.n	800d7da <create_name+0x42>
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b5c      	cmp	r3, #92	; 0x5c
 800d7f6:	d0f0      	beq.n	800d7da <create_name+0x42>
			break;
 800d7f8:	e054      	b.n	800d8a4 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2bfe      	cmp	r3, #254	; 0xfe
 800d7fe:	d901      	bls.n	800d804 <create_name+0x6c>
 800d800:	2306      	movs	r3, #6
 800d802:	e1bf      	b.n	800db84 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d806:	b2db      	uxtb	r3, r3
 800d808:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800d80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b80      	cmp	r3, #128	; 0x80
 800d810:	d925      	bls.n	800d85e <create_name+0xc6>
 800d812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2bff      	cmp	r3, #255	; 0xff
 800d818:	d021      	beq.n	800d85e <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	61ba      	str	r2, [r7, #24]
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	4413      	add	r3, r2
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800d82a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d82c:	021b      	lsls	r3, r3, #8
 800d82e:	b29a      	uxth	r2, r3
 800d830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d834:	b29b      	uxth	r3, r3
 800d836:	4413      	add	r3, r2
 800d838:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800d83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d83e:	2b3f      	cmp	r3, #63	; 0x3f
 800d840:	d903      	bls.n	800d84a <create_name+0xb2>
 800d842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d846:	2b7e      	cmp	r3, #126	; 0x7e
 800d848:	d909      	bls.n	800d85e <create_name+0xc6>
 800d84a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d84e:	2b00      	cmp	r3, #0
 800d850:	da03      	bge.n	800d85a <create_name+0xc2>
 800d852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d856:	2bff      	cmp	r3, #255	; 0xff
 800d858:	d101      	bne.n	800d85e <create_name+0xc6>
 800d85a:	2306      	movs	r3, #6
 800d85c:	e192      	b.n	800db84 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d85e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d860:	2101      	movs	r1, #1
 800d862:	4618      	mov	r0, r3
 800d864:	f001 ff32 	bl	800f6cc <ff_convert>
 800d868:	4603      	mov	r3, r0
 800d86a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d86c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <create_name+0xde>
 800d872:	2306      	movs	r3, #6
 800d874:	e186      	b.n	800db84 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d878:	2b7f      	cmp	r3, #127	; 0x7f
 800d87a:	d809      	bhi.n	800d890 <create_name+0xf8>
 800d87c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d87e:	4619      	mov	r1, r3
 800d880:	489a      	ldr	r0, [pc, #616]	; (800daec <create_name+0x354>)
 800d882:	f7fe fb9a 	bl	800bfba <chk_chr>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <create_name+0xf8>
 800d88c:	2306      	movs	r3, #6
 800d88e:	e179      	b.n	800db84 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	617a      	str	r2, [r7, #20]
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	4413      	add	r3, r2
 800d89c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d89e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d8a0:	e78a      	b.n	800d7b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d8a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	441a      	add	r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d8ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8b0:	2b1f      	cmp	r3, #31
 800d8b2:	d801      	bhi.n	800d8b8 <create_name+0x120>
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	e000      	b.n	800d8ba <create_name+0x122>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d8be:	e011      	b.n	800d8e4 <create_name+0x14c>
		w = lfn[di - 1];
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	881b      	ldrh	r3, [r3, #0]
 800d8d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d8d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8d4:	2b20      	cmp	r3, #32
 800d8d6:	d002      	beq.n	800d8de <create_name+0x146>
 800d8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8da:	2b2e      	cmp	r3, #46	; 0x2e
 800d8dc:	d106      	bne.n	800d8ec <create_name+0x154>
		di--;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1ea      	bne.n	800d8c0 <create_name+0x128>
 800d8ea:	e000      	b.n	800d8ee <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800d8ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <create_name+0x16c>
 800d900:	2306      	movs	r3, #6
 800d902:	e13f      	b.n	800db84 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3324      	adds	r3, #36	; 0x24
 800d908:	220b      	movs	r2, #11
 800d90a:	2120      	movs	r1, #32
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7fe fb12 	bl	800bf36 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d912:	2300      	movs	r3, #0
 800d914:	61bb      	str	r3, [r7, #24]
 800d916:	e002      	b.n	800d91e <create_name+0x186>
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	3301      	adds	r3, #1
 800d91c:	61bb      	str	r3, [r7, #24]
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	4413      	add	r3, r2
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	2b20      	cmp	r3, #32
 800d92a:	d0f5      	beq.n	800d918 <create_name+0x180>
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	4413      	add	r3, r2
 800d934:	881b      	ldrh	r3, [r3, #0]
 800d936:	2b2e      	cmp	r3, #46	; 0x2e
 800d938:	d0ee      	beq.n	800d918 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d009      	beq.n	800d954 <create_name+0x1bc>
 800d940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d944:	f043 0303 	orr.w	r3, r3, #3
 800d948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d94c:	e002      	b.n	800d954 <create_name+0x1bc>
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	3b01      	subs	r3, #1
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d009      	beq.n	800d96e <create_name+0x1d6>
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d960:	3b01      	subs	r3, #1
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	2b2e      	cmp	r3, #46	; 0x2e
 800d96c:	d1ef      	bne.n	800d94e <create_name+0x1b6>

	i = b = 0; ni = 8;
 800d96e:	2300      	movs	r3, #0
 800d970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d974:	2300      	movs	r3, #0
 800d976:	623b      	str	r3, [r7, #32]
 800d978:	2308      	movs	r3, #8
 800d97a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	61ba      	str	r2, [r7, #24]
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	4413      	add	r3, r2
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d98c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f000 80aa 	beq.w	800dae8 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d996:	2b20      	cmp	r3, #32
 800d998:	d006      	beq.n	800d9a8 <create_name+0x210>
 800d99a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d99c:	2b2e      	cmp	r3, #46	; 0x2e
 800d99e:	d10a      	bne.n	800d9b6 <create_name+0x21e>
 800d9a0:	69ba      	ldr	r2, [r7, #24]
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d006      	beq.n	800d9b6 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800d9a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9ac:	f043 0303 	orr.w	r3, r3, #3
 800d9b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9b4:	e097      	b.n	800dae6 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d9b6:	6a3a      	ldr	r2, [r7, #32]
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d203      	bcs.n	800d9c6 <create_name+0x22e>
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d123      	bne.n	800da0e <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	2b0b      	cmp	r3, #11
 800d9ca:	d106      	bne.n	800d9da <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800d9cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9d0:	f043 0303 	orr.w	r3, r3, #3
 800d9d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9d8:	e08d      	b.n	800daf6 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d9da:	69ba      	ldr	r2, [r7, #24]
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d005      	beq.n	800d9ee <create_name+0x256>
 800d9e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9e6:	f043 0303 	orr.w	r3, r3, #3
 800d9ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800d9ee:	69ba      	ldr	r2, [r7, #24]
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d87e      	bhi.n	800daf4 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	61bb      	str	r3, [r7, #24]
 800d9fa:	2308      	movs	r3, #8
 800d9fc:	623b      	str	r3, [r7, #32]
 800d9fe:	230b      	movs	r3, #11
 800da00:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800da02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da0c:	e06b      	b.n	800dae6 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800da0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da10:	2b7f      	cmp	r3, #127	; 0x7f
 800da12:	d910      	bls.n	800da36 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800da14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da16:	4618      	mov	r0, r3
 800da18:	f001 feb6 	bl	800f788 <ff_wtoupper>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2100      	movs	r1, #0
 800da20:	4618      	mov	r0, r3
 800da22:	f001 fe53 	bl	800f6cc <ff_convert>
 800da26:	4603      	mov	r3, r0
 800da28:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800da2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da2e:	f043 0302 	orr.w	r3, r3, #2
 800da32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800da36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da38:	2bff      	cmp	r3, #255	; 0xff
 800da3a:	d91a      	bls.n	800da72 <create_name+0x2da>
			if (i >= ni - 1) {
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	3b01      	subs	r3, #1
 800da40:	6a3a      	ldr	r2, [r7, #32]
 800da42:	429a      	cmp	r2, r3
 800da44:	d308      	bcc.n	800da58 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800da46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da4a:	f043 0303 	orr.w	r3, r3, #3
 800da4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	623b      	str	r3, [r7, #32]
 800da56:	e046      	b.n	800dae6 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800da58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da5a:	0a1b      	lsrs	r3, r3, #8
 800da5c:	b299      	uxth	r1, r3
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	1c5a      	adds	r2, r3, #1
 800da62:	623a      	str	r2, [r7, #32]
 800da64:	b2c9      	uxtb	r1, r1
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	4413      	add	r3, r2
 800da6a:	460a      	mov	r2, r1
 800da6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800da70:	e02f      	b.n	800dad2 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800da72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da74:	2b00      	cmp	r3, #0
 800da76:	d007      	beq.n	800da88 <create_name+0x2f0>
 800da78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da7a:	4619      	mov	r1, r3
 800da7c:	481c      	ldr	r0, [pc, #112]	; (800daf0 <create_name+0x358>)
 800da7e:	f7fe fa9c 	bl	800bfba <chk_chr>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d008      	beq.n	800da9a <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800da88:	235f      	movs	r3, #95	; 0x5f
 800da8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800da8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da90:	f043 0303 	orr.w	r3, r3, #3
 800da94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da98:	e01b      	b.n	800dad2 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800da9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da9c:	2b40      	cmp	r3, #64	; 0x40
 800da9e:	d909      	bls.n	800dab4 <create_name+0x31c>
 800daa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daa2:	2b5a      	cmp	r3, #90	; 0x5a
 800daa4:	d806      	bhi.n	800dab4 <create_name+0x31c>
					b |= 2;
 800daa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daaa:	f043 0302 	orr.w	r3, r3, #2
 800daae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dab2:	e00e      	b.n	800dad2 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab6:	2b60      	cmp	r3, #96	; 0x60
 800dab8:	d90b      	bls.n	800dad2 <create_name+0x33a>
 800daba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dabc:	2b7a      	cmp	r3, #122	; 0x7a
 800dabe:	d808      	bhi.n	800dad2 <create_name+0x33a>
						b |= 1; w -= 0x20;
 800dac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dac4:	f043 0301 	orr.w	r3, r3, #1
 800dac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dacc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dace:	3b20      	subs	r3, #32
 800dad0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	1c5a      	adds	r2, r3, #1
 800dad6:	623a      	str	r2, [r7, #32]
 800dad8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dada:	b2d1      	uxtb	r1, r2
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	4413      	add	r3, r2
 800dae0:	460a      	mov	r2, r1
 800dae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dae6:	e749      	b.n	800d97c <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800dae8:	bf00      	nop
 800daea:	e004      	b.n	800daf6 <create_name+0x35e>
 800daec:	08021594 	.word	0x08021594
 800daf0:	080215a0 	.word	0x080215a0
			if (si > di) break;			/* No extension */
 800daf4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dafc:	2be5      	cmp	r3, #229	; 0xe5
 800dafe:	d103      	bne.n	800db08 <create_name+0x370>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2205      	movs	r2, #5
 800db04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	2b08      	cmp	r3, #8
 800db0c:	d104      	bne.n	800db18 <create_name+0x380>
 800db0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800db18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db1c:	f003 030c 	and.w	r3, r3, #12
 800db20:	2b0c      	cmp	r3, #12
 800db22:	d005      	beq.n	800db30 <create_name+0x398>
 800db24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db28:	f003 0303 	and.w	r3, r3, #3
 800db2c:	2b03      	cmp	r3, #3
 800db2e:	d105      	bne.n	800db3c <create_name+0x3a4>
 800db30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db34:	f043 0302 	orr.w	r3, r3, #2
 800db38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800db3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db40:	f003 0302 	and.w	r3, r3, #2
 800db44:	2b00      	cmp	r3, #0
 800db46:	d117      	bne.n	800db78 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800db48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db4c:	f003 0303 	and.w	r3, r3, #3
 800db50:	2b01      	cmp	r3, #1
 800db52:	d105      	bne.n	800db60 <create_name+0x3c8>
 800db54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db58:	f043 0310 	orr.w	r3, r3, #16
 800db5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800db60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db64:	f003 030c 	and.w	r3, r3, #12
 800db68:	2b04      	cmp	r3, #4
 800db6a:	d105      	bne.n	800db78 <create_name+0x3e0>
 800db6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db70:	f043 0308 	orr.w	r3, r3, #8
 800db74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800db7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800db82:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800db84:	4618      	mov	r0, r3
 800db86:	3728      	adds	r7, #40	; 0x28
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dba0:	e002      	b.n	800dba8 <follow_path+0x1c>
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	3301      	adds	r3, #1
 800dba6:	603b      	str	r3, [r7, #0]
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b2f      	cmp	r3, #47	; 0x2f
 800dbae:	d0f8      	beq.n	800dba2 <follow_path+0x16>
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b5c      	cmp	r3, #92	; 0x5c
 800dbb6:	d0f4      	beq.n	800dba2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b1f      	cmp	r3, #31
 800dbc4:	d80a      	bhi.n	800dbdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2280      	movs	r2, #128	; 0x80
 800dbca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dbce:	2100      	movs	r1, #0
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7fe ff6f 	bl	800cab4 <dir_sdi>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	75fb      	strb	r3, [r7, #23]
 800dbda:	e043      	b.n	800dc64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbdc:	463b      	mov	r3, r7
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff fdd9 	bl	800d798 <create_name>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbea:	7dfb      	ldrb	r3, [r7, #23]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d134      	bne.n	800dc5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff fbcf 	bl	800d394 <dir_find>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00a      	beq.n	800dc1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
 800dc0a:	2b04      	cmp	r3, #4
 800dc0c:	d127      	bne.n	800dc5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
 800dc10:	f003 0304 	and.w	r3, r3, #4
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d122      	bne.n	800dc5e <follow_path+0xd2>
 800dc18:	2305      	movs	r3, #5
 800dc1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dc1c:	e01f      	b.n	800dc5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc1e:	7afb      	ldrb	r3, [r7, #11]
 800dc20:	f003 0304 	and.w	r3, r3, #4
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d11c      	bne.n	800dc62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	799b      	ldrb	r3, [r3, #6]
 800dc2c:	f003 0310 	and.w	r3, r3, #16
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dc34:	2305      	movs	r3, #5
 800dc36:	75fb      	strb	r3, [r7, #23]
 800dc38:	e014      	b.n	800dc64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	695b      	ldr	r3, [r3, #20]
 800dc44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc48:	4413      	add	r3, r2
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f7ff f8b8 	bl	800cdc2 <ld_clust>
 800dc52:	4602      	mov	r2, r0
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc58:	e7c0      	b.n	800dbdc <follow_path+0x50>
			if (res != FR_OK) break;
 800dc5a:	bf00      	nop
 800dc5c:	e002      	b.n	800dc64 <follow_path+0xd8>
				break;
 800dc5e:	bf00      	nop
 800dc60:	e000      	b.n	800dc64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc62:	bf00      	nop
			}
		}
	}

	return res;
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dc6e:	b480      	push	{r7}
 800dc70:	b087      	sub	sp, #28
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dc76:	f04f 33ff 	mov.w	r3, #4294967295
 800dc7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d031      	beq.n	800dce8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	617b      	str	r3, [r7, #20]
 800dc8a:	e002      	b.n	800dc92 <get_ldnumber+0x24>
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	617b      	str	r3, [r7, #20]
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b1f      	cmp	r3, #31
 800dc98:	d903      	bls.n	800dca2 <get_ldnumber+0x34>
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	2b3a      	cmp	r3, #58	; 0x3a
 800dca0:	d1f4      	bne.n	800dc8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	2b3a      	cmp	r3, #58	; 0x3a
 800dca8:	d11c      	bne.n	800dce4 <get_ldnumber+0x76>
			tp = *path;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	60fa      	str	r2, [r7, #12]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	3b30      	subs	r3, #48	; 0x30
 800dcba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	2b09      	cmp	r3, #9
 800dcc0:	d80e      	bhi.n	800dce0 <get_ldnumber+0x72>
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d10a      	bne.n	800dce0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d107      	bne.n	800dce0 <get_ldnumber+0x72>
					vol = (int)i;
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	617b      	str	r3, [r7, #20]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	697a      	ldr	r2, [r7, #20]
 800dcde:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	e002      	b.n	800dcea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dce4:	2300      	movs	r3, #0
 800dce6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dce8:	693b      	ldr	r3, [r7, #16]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	371c      	adds	r7, #28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	70da      	strb	r2, [r3, #3]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7fe fb4e 	bl	800c3b4 <move_window>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d001      	beq.n	800dd22 <check_fs+0x2a>
 800dd1e:	2304      	movs	r3, #4
 800dd20:	e038      	b.n	800dd94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3338      	adds	r3, #56	; 0x38
 800dd26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fe f860 	bl	800bdf0 <ld_word>
 800dd30:	4603      	mov	r3, r0
 800dd32:	461a      	mov	r2, r3
 800dd34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d001      	beq.n	800dd40 <check_fs+0x48>
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	e029      	b.n	800dd94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dd46:	2be9      	cmp	r3, #233	; 0xe9
 800dd48:	d009      	beq.n	800dd5e <check_fs+0x66>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dd50:	2beb      	cmp	r3, #235	; 0xeb
 800dd52:	d11e      	bne.n	800dd92 <check_fs+0x9a>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dd5a:	2b90      	cmp	r3, #144	; 0x90
 800dd5c:	d119      	bne.n	800dd92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3338      	adds	r3, #56	; 0x38
 800dd62:	3336      	adds	r3, #54	; 0x36
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fe f85b 	bl	800be20 <ld_dword>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd70:	4a0a      	ldr	r2, [pc, #40]	; (800dd9c <check_fs+0xa4>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d101      	bne.n	800dd7a <check_fs+0x82>
 800dd76:	2300      	movs	r3, #0
 800dd78:	e00c      	b.n	800dd94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	3338      	adds	r3, #56	; 0x38
 800dd7e:	3352      	adds	r3, #82	; 0x52
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe f84d 	bl	800be20 <ld_dword>
 800dd86:	4603      	mov	r3, r0
 800dd88:	4a05      	ldr	r2, [pc, #20]	; (800dda0 <check_fs+0xa8>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d101      	bne.n	800dd92 <check_fs+0x9a>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e000      	b.n	800dd94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dd92:	2302      	movs	r3, #2
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	00544146 	.word	0x00544146
 800dda0:	33544146 	.word	0x33544146

0800dda4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b096      	sub	sp, #88	; 0x58
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff ff58 	bl	800dc6e <get_ldnumber>
 800ddbe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	da01      	bge.n	800ddca <find_volume+0x26>
 800ddc6:	230b      	movs	r3, #11
 800ddc8:	e236      	b.n	800e238 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ddca:	4aac      	ldr	r2, [pc, #688]	; (800e07c <find_volume+0x2d8>)
 800ddcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ddd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <find_volume+0x3a>
 800ddda:	230c      	movs	r3, #12
 800dddc:	e22c      	b.n	800e238 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800ddde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dde0:	f7fe f906 	bl	800bff0 <lock_fs>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <find_volume+0x4a>
 800ddea:	230f      	movs	r3, #15
 800ddec:	e224      	b.n	800e238 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddf2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ddf4:	79fb      	ldrb	r3, [r7, #7]
 800ddf6:	f023 0301 	bic.w	r3, r3, #1
 800ddfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d01a      	beq.n	800de3a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800de04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de06:	785b      	ldrb	r3, [r3, #1]
 800de08:	4618      	mov	r0, r3
 800de0a:	f7fd ff53 	bl	800bcb4 <disk_status>
 800de0e:	4603      	mov	r3, r0
 800de10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800de14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de18:	f003 0301 	and.w	r3, r3, #1
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10c      	bne.n	800de3a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800de20:	79fb      	ldrb	r3, [r7, #7]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <find_volume+0x92>
 800de26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de2a:	f003 0304 	and.w	r3, r3, #4
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800de32:	230a      	movs	r3, #10
 800de34:	e200      	b.n	800e238 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800de36:	2300      	movs	r3, #0
 800de38:	e1fe      	b.n	800e238 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800de3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3c:	2200      	movs	r2, #0
 800de3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800de40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de42:	b2da      	uxtb	r2, r3
 800de44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800de48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4a:	785b      	ldrb	r3, [r3, #1]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fd ff4b 	bl	800bce8 <disk_initialize>
 800de52:	4603      	mov	r3, r0
 800de54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800de58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de5c:	f003 0301 	and.w	r3, r3, #1
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de64:	2303      	movs	r3, #3
 800de66:	e1e7      	b.n	800e238 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de68:	79fb      	ldrb	r3, [r7, #7]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d007      	beq.n	800de7e <find_volume+0xda>
 800de6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de72:	f003 0304 	and.w	r3, r3, #4
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800de7a:	230a      	movs	r3, #10
 800de7c:	e1dc      	b.n	800e238 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800de82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de86:	f7ff ff37 	bl	800dcf8 <check_fs>
 800de8a:	4603      	mov	r3, r0
 800de8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800de90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de94:	2b02      	cmp	r3, #2
 800de96:	d14b      	bne.n	800df30 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de98:	2300      	movs	r3, #0
 800de9a:	643b      	str	r3, [r7, #64]	; 0x40
 800de9c:	e01f      	b.n	800dede <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800de9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea6:	011b      	lsls	r3, r3, #4
 800dea8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800deac:	4413      	add	r3, r2
 800deae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800deb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb2:	3304      	adds	r3, #4
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d006      	beq.n	800dec8 <find_volume+0x124>
 800deba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debc:	3308      	adds	r3, #8
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fd ffae 	bl	800be20 <ld_dword>
 800dec4:	4602      	mov	r2, r0
 800dec6:	e000      	b.n	800deca <find_volume+0x126>
 800dec8:	2200      	movs	r2, #0
 800deca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ded2:	440b      	add	r3, r1
 800ded4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ded8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deda:	3301      	adds	r3, #1
 800dedc:	643b      	str	r3, [r7, #64]	; 0x40
 800dede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dee0:	2b03      	cmp	r3, #3
 800dee2:	d9dc      	bls.n	800de9e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dee4:	2300      	movs	r3, #0
 800dee6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <find_volume+0x150>
 800deee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def0:	3b01      	subs	r3, #1
 800def2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800def4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800defc:	4413      	add	r3, r2
 800defe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800df02:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800df04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df06:	2b00      	cmp	r3, #0
 800df08:	d005      	beq.n	800df16 <find_volume+0x172>
 800df0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df0e:	f7ff fef3 	bl	800dcf8 <check_fs>
 800df12:	4603      	mov	r3, r0
 800df14:	e000      	b.n	800df18 <find_volume+0x174>
 800df16:	2303      	movs	r3, #3
 800df18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800df1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df20:	2b01      	cmp	r3, #1
 800df22:	d905      	bls.n	800df30 <find_volume+0x18c>
 800df24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df26:	3301      	adds	r3, #1
 800df28:	643b      	str	r3, [r7, #64]	; 0x40
 800df2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df2c:	2b03      	cmp	r3, #3
 800df2e:	d9e1      	bls.n	800def4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df34:	2b04      	cmp	r3, #4
 800df36:	d101      	bne.n	800df3c <find_volume+0x198>
 800df38:	2301      	movs	r3, #1
 800df3a:	e17d      	b.n	800e238 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800df3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df40:	2b01      	cmp	r3, #1
 800df42:	d901      	bls.n	800df48 <find_volume+0x1a4>
 800df44:	230d      	movs	r3, #13
 800df46:	e177      	b.n	800e238 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800df48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4a:	3338      	adds	r3, #56	; 0x38
 800df4c:	330b      	adds	r3, #11
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fd ff4e 	bl	800bdf0 <ld_word>
 800df54:	4603      	mov	r3, r0
 800df56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df5a:	d001      	beq.n	800df60 <find_volume+0x1bc>
 800df5c:	230d      	movs	r3, #13
 800df5e:	e16b      	b.n	800e238 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	3338      	adds	r3, #56	; 0x38
 800df64:	3316      	adds	r3, #22
 800df66:	4618      	mov	r0, r3
 800df68:	f7fd ff42 	bl	800bdf0 <ld_word>
 800df6c:	4603      	mov	r3, r0
 800df6e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <find_volume+0x1e0>
 800df76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df78:	3338      	adds	r3, #56	; 0x38
 800df7a:	3324      	adds	r3, #36	; 0x24
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fd ff4f 	bl	800be20 <ld_dword>
 800df82:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800df84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df88:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800df90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	789b      	ldrb	r3, [r3, #2]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d005      	beq.n	800dfa8 <find_volume+0x204>
 800df9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9e:	789b      	ldrb	r3, [r3, #2]
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d001      	beq.n	800dfa8 <find_volume+0x204>
 800dfa4:	230d      	movs	r3, #13
 800dfa6:	e147      	b.n	800e238 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfaa:	789b      	ldrb	r3, [r3, #2]
 800dfac:	461a      	mov	r2, r3
 800dfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfb0:	fb02 f303 	mul.w	r3, r2, r3
 800dfb4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	895b      	ldrh	r3, [r3, #10]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d008      	beq.n	800dfdc <find_volume+0x238>
 800dfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfcc:	895b      	ldrh	r3, [r3, #10]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	895b      	ldrh	r3, [r3, #10]
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d001      	beq.n	800dfe0 <find_volume+0x23c>
 800dfdc:	230d      	movs	r3, #13
 800dfde:	e12b      	b.n	800e238 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	3338      	adds	r3, #56	; 0x38
 800dfe4:	3311      	adds	r3, #17
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fd ff02 	bl	800bdf0 <ld_word>
 800dfec:	4603      	mov	r3, r0
 800dfee:	461a      	mov	r2, r3
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	891b      	ldrh	r3, [r3, #8]
 800dff8:	f003 030f 	and.w	r3, r3, #15
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <find_volume+0x262>
 800e002:	230d      	movs	r3, #13
 800e004:	e118      	b.n	800e238 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	3338      	adds	r3, #56	; 0x38
 800e00a:	3313      	adds	r3, #19
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fd feef 	bl	800bdf0 <ld_word>
 800e012:	4603      	mov	r3, r0
 800e014:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d106      	bne.n	800e02a <find_volume+0x286>
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	3338      	adds	r3, #56	; 0x38
 800e020:	3320      	adds	r3, #32
 800e022:	4618      	mov	r0, r3
 800e024:	f7fd fefc 	bl	800be20 <ld_dword>
 800e028:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	3338      	adds	r3, #56	; 0x38
 800e02e:	330e      	adds	r3, #14
 800e030:	4618      	mov	r0, r3
 800e032:	f7fd fedd 	bl	800bdf0 <ld_word>
 800e036:	4603      	mov	r3, r0
 800e038:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e03a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <find_volume+0x2a0>
 800e040:	230d      	movs	r3, #13
 800e042:	e0f9      	b.n	800e238 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e044:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e048:	4413      	add	r3, r2
 800e04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e04c:	8912      	ldrh	r2, [r2, #8]
 800e04e:	0912      	lsrs	r2, r2, #4
 800e050:	b292      	uxth	r2, r2
 800e052:	4413      	add	r3, r2
 800e054:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d201      	bcs.n	800e062 <find_volume+0x2be>
 800e05e:	230d      	movs	r3, #13
 800e060:	e0ea      	b.n	800e238 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e06a:	8952      	ldrh	r2, [r2, #10]
 800e06c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e070:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e074:	2b00      	cmp	r3, #0
 800e076:	d103      	bne.n	800e080 <find_volume+0x2dc>
 800e078:	230d      	movs	r3, #13
 800e07a:	e0dd      	b.n	800e238 <find_volume+0x494>
 800e07c:	20000b30 	.word	0x20000b30
		fmt = FS_FAT32;
 800e080:	2303      	movs	r3, #3
 800e082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d802      	bhi.n	800e096 <find_volume+0x2f2>
 800e090:	2302      	movs	r3, #2
 800e092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d802      	bhi.n	800e0a6 <find_volume+0x302>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a8:	1c9a      	adds	r2, r3, #2
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ac:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0b2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e0b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0b8:	441a      	add	r2, r3
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0bc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e0be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c2:	441a      	add	r2, r3
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	d11e      	bne.n	800e10e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d2:	3338      	adds	r3, #56	; 0x38
 800e0d4:	332a      	adds	r3, #42	; 0x2a
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fd fe8a 	bl	800bdf0 <ld_word>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d001      	beq.n	800e0e6 <find_volume+0x342>
 800e0e2:	230d      	movs	r3, #13
 800e0e4:	e0a8      	b.n	800e238 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	891b      	ldrh	r3, [r3, #8]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <find_volume+0x34e>
 800e0ee:	230d      	movs	r3, #13
 800e0f0:	e0a2      	b.n	800e238 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f4:	3338      	adds	r3, #56	; 0x38
 800e0f6:	332c      	adds	r3, #44	; 0x2c
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fd fe91 	bl	800be20 <ld_dword>
 800e0fe:	4602      	mov	r2, r0
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	69db      	ldr	r3, [r3, #28]
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	647b      	str	r3, [r7, #68]	; 0x44
 800e10c:	e01f      	b.n	800e14e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e110:	891b      	ldrh	r3, [r3, #8]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <find_volume+0x376>
 800e116:	230d      	movs	r3, #13
 800e118:	e08e      	b.n	800e238 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e120:	441a      	add	r2, r3
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d103      	bne.n	800e136 <find_volume+0x392>
 800e12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e130:	69db      	ldr	r3, [r3, #28]
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	e00a      	b.n	800e14c <find_volume+0x3a8>
 800e136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e138:	69da      	ldr	r2, [r3, #28]
 800e13a:	4613      	mov	r3, r2
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	4413      	add	r3, r2
 800e140:	085a      	lsrs	r2, r3, #1
 800e142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e144:	69db      	ldr	r3, [r3, #28]
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e14c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e150:	6a1a      	ldr	r2, [r3, #32]
 800e152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e154:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e158:	0a5b      	lsrs	r3, r3, #9
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d201      	bcs.n	800e162 <find_volume+0x3be>
 800e15e:	230d      	movs	r3, #13
 800e160:	e06a      	b.n	800e238 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e164:	f04f 32ff 	mov.w	r2, #4294967295
 800e168:	619a      	str	r2, [r3, #24]
 800e16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16c:	699a      	ldr	r2, [r3, #24]
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	2280      	movs	r2, #128	; 0x80
 800e176:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e17c:	2b03      	cmp	r3, #3
 800e17e:	d149      	bne.n	800e214 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e182:	3338      	adds	r3, #56	; 0x38
 800e184:	3330      	adds	r3, #48	; 0x30
 800e186:	4618      	mov	r0, r3
 800e188:	f7fd fe32 	bl	800bdf0 <ld_word>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d140      	bne.n	800e214 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e194:	3301      	adds	r3, #1
 800e196:	4619      	mov	r1, r3
 800e198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e19a:	f7fe f90b 	bl	800c3b4 <move_window>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d137      	bne.n	800e214 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	3338      	adds	r3, #56	; 0x38
 800e1ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fd fe1c 	bl	800bdf0 <ld_word>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d127      	bne.n	800e214 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c6:	3338      	adds	r3, #56	; 0x38
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fd fe29 	bl	800be20 <ld_dword>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	4a1b      	ldr	r2, [pc, #108]	; (800e240 <find_volume+0x49c>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d11e      	bne.n	800e214 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d8:	3338      	adds	r3, #56	; 0x38
 800e1da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fd fe1e 	bl	800be20 <ld_dword>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	4a17      	ldr	r2, [pc, #92]	; (800e244 <find_volume+0x4a0>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d113      	bne.n	800e214 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	3338      	adds	r3, #56	; 0x38
 800e1f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fd fe13 	bl	800be20 <ld_dword>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e202:	3338      	adds	r3, #56	; 0x38
 800e204:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fd fe09 	bl	800be20 <ld_dword>
 800e20e:	4602      	mov	r2, r0
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e216:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e21a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e21c:	4b0a      	ldr	r3, [pc, #40]	; (800e248 <find_volume+0x4a4>)
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	3301      	adds	r3, #1
 800e222:	b29a      	uxth	r2, r3
 800e224:	4b08      	ldr	r3, [pc, #32]	; (800e248 <find_volume+0x4a4>)
 800e226:	801a      	strh	r2, [r3, #0]
 800e228:	4b07      	ldr	r3, [pc, #28]	; (800e248 <find_volume+0x4a4>)
 800e22a:	881a      	ldrh	r2, [r3, #0]
 800e22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e230:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e232:	f7fe f857 	bl	800c2e4 <clear_lock>
#endif
	return FR_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3758      	adds	r7, #88	; 0x58
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	41615252 	.word	0x41615252
 800e244:	61417272 	.word	0x61417272
 800e248:	20000b34 	.word	0x20000b34

0800e24c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e256:	2309      	movs	r3, #9
 800e258:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d02e      	beq.n	800e2be <validate+0x72>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d02a      	beq.n	800e2be <validate+0x72>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d025      	beq.n	800e2be <validate+0x72>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	889a      	ldrh	r2, [r3, #4]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	88db      	ldrh	r3, [r3, #6]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d11e      	bne.n	800e2be <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4618      	mov	r0, r3
 800e286:	f7fd feb3 	bl	800bff0 <lock_fs>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d014      	beq.n	800e2ba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	785b      	ldrb	r3, [r3, #1]
 800e296:	4618      	mov	r0, r3
 800e298:	f7fd fd0c 	bl	800bcb4 <disk_status>
 800e29c:	4603      	mov	r3, r0
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d102      	bne.n	800e2ac <validate+0x60>
				res = FR_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]
 800e2aa:	e008      	b.n	800e2be <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fd feb2 	bl	800c01c <unlock_fs>
 800e2b8:	e001      	b.n	800e2be <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e2ba:	230f      	movs	r3, #15
 800e2bc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d102      	bne.n	800e2ca <validate+0x7e>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	e000      	b.n	800e2cc <validate+0x80>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	683a      	ldr	r2, [r7, #0]
 800e2ce:	6013      	str	r3, [r2, #0]
	return res;
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
	...

0800e2dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b088      	sub	sp, #32
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e2ee:	f107 0310 	add.w	r3, r7, #16
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7ff fcbb 	bl	800dc6e <get_ldnumber>
 800e2f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	da01      	bge.n	800e304 <f_mount+0x28>
 800e300:	230b      	movs	r3, #11
 800e302:	e048      	b.n	800e396 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e304:	4a26      	ldr	r2, [pc, #152]	; (800e3a0 <f_mount+0xc4>)
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e30c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00f      	beq.n	800e334 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e314:	69b8      	ldr	r0, [r7, #24]
 800e316:	f7fd ffe5 	bl	800c2e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	4618      	mov	r0, r3
 800e320:	f001 fadc 	bl	800f8dc <ff_del_syncobj>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d101      	bne.n	800e32e <f_mount+0x52>
 800e32a:	2302      	movs	r3, #2
 800e32c:	e033      	b.n	800e396 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	2200      	movs	r2, #0
 800e332:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00f      	beq.n	800e35a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	b2da      	uxtb	r2, r3
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3310      	adds	r3, #16
 800e348:	4619      	mov	r1, r3
 800e34a:	4610      	mov	r0, r2
 800e34c:	f001 faa6 	bl	800f89c <ff_cre_syncobj>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d101      	bne.n	800e35a <f_mount+0x7e>
 800e356:	2302      	movs	r3, #2
 800e358:	e01d      	b.n	800e396 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	4910      	ldr	r1, [pc, #64]	; (800e3a0 <f_mount+0xc4>)
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d002      	beq.n	800e370 <f_mount+0x94>
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d001      	beq.n	800e374 <f_mount+0x98>
 800e370:	2300      	movs	r3, #0
 800e372:	e010      	b.n	800e396 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e374:	f107 010c 	add.w	r1, r7, #12
 800e378:	f107 0308 	add.w	r3, r7, #8
 800e37c:	2200      	movs	r2, #0
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff fd10 	bl	800dda4 <find_volume>
 800e384:	4603      	mov	r3, r0
 800e386:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	7dfa      	ldrb	r2, [r7, #23]
 800e38c:	4611      	mov	r1, r2
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fd fe44 	bl	800c01c <unlock_fs>
 800e394:	7dfb      	ldrb	r3, [r7, #23]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	20000b30 	.word	0x20000b30

0800e3a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	f107 030c 	add.w	r3, r7, #12
 800e3b0:	6018      	str	r0, [r3, #0]
 800e3b2:	f107 0308 	add.w	r3, r7, #8
 800e3b6:	6019      	str	r1, [r3, #0]
 800e3b8:	1dfb      	adds	r3, r7, #7
 800e3ba:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e3bc:	f107 030c 	add.w	r3, r7, #12
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <f_open+0x26>
 800e3c6:	2309      	movs	r3, #9
 800e3c8:	e239      	b.n	800e83e <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e3ca:	1dfb      	adds	r3, r7, #7
 800e3cc:	1dfa      	adds	r2, r7, #7
 800e3ce:	7812      	ldrb	r2, [r2, #0]
 800e3d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e3d4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800e3d6:	1dfb      	adds	r3, r7, #7
 800e3d8:	781a      	ldrb	r2, [r3, #0]
 800e3da:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800e3de:	f107 0308 	add.w	r3, r7, #8
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fcde 	bl	800dda4 <find_volume>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800e3ee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f040 8210 	bne.w	800e818 <f_open+0x474>
		dj.obj.fs = fs;
 800e3f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e3fc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800e400:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e404:	f107 0214 	add.w	r2, r7, #20
 800e408:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e40a:	f107 0308 	add.w	r3, r7, #8
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e414:	4611      	mov	r1, r2
 800e416:	4618      	mov	r0, r3
 800e418:	f7ff fbb8 	bl	800db8c <follow_path>
 800e41c:	4603      	mov	r3, r0
 800e41e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e422:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e426:	2b00      	cmp	r3, #0
 800e428:	d11b      	bne.n	800e462 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e42a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800e42e:	b25b      	sxtb	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	da03      	bge.n	800e43c <f_open+0x98>
				res = FR_INVALID_NAME;
 800e434:	2306      	movs	r3, #6
 800e436:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e43a:	e012      	b.n	800e462 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e43c:	1dfb      	adds	r3, r7, #7
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	f023 0301 	bic.w	r3, r3, #1
 800e444:	2b00      	cmp	r3, #0
 800e446:	bf14      	ite	ne
 800e448:	2301      	movne	r3, #1
 800e44a:	2300      	moveq	r3, #0
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	461a      	mov	r2, r3
 800e450:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e454:	4611      	mov	r1, r2
 800e456:	4618      	mov	r0, r3
 800e458:	f7fd fdfc 	bl	800c054 <chk_lock>
 800e45c:	4603      	mov	r3, r0
 800e45e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e462:	1dfb      	adds	r3, r7, #7
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	f003 031c 	and.w	r3, r3, #28
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 809b 	beq.w	800e5a6 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800e470:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e474:	2b00      	cmp	r3, #0
 800e476:	d019      	beq.n	800e4ac <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e478:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e47c:	2b04      	cmp	r3, #4
 800e47e:	d10e      	bne.n	800e49e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e480:	f7fd fe44 	bl	800c10c <enq_lock>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d006      	beq.n	800e498 <f_open+0xf4>
 800e48a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e48e:	4618      	mov	r0, r3
 800e490:	f7ff f840 	bl	800d514 <dir_register>
 800e494:	4603      	mov	r3, r0
 800e496:	e000      	b.n	800e49a <f_open+0xf6>
 800e498:	2312      	movs	r3, #18
 800e49a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e49e:	1dfb      	adds	r3, r7, #7
 800e4a0:	1dfa      	adds	r2, r7, #7
 800e4a2:	7812      	ldrb	r2, [r2, #0]
 800e4a4:	f042 0208 	orr.w	r2, r2, #8
 800e4a8:	701a      	strb	r2, [r3, #0]
 800e4aa:	e012      	b.n	800e4d2 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e4ac:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e4b0:	f003 0311 	and.w	r3, r3, #17
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d003      	beq.n	800e4c0 <f_open+0x11c>
					res = FR_DENIED;
 800e4b8:	2307      	movs	r3, #7
 800e4ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e4be:	e008      	b.n	800e4d2 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e4c0:	1dfb      	adds	r3, r7, #7
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	f003 0304 	and.w	r3, r3, #4
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <f_open+0x12e>
 800e4cc:	2308      	movs	r3, #8
 800e4ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e4d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f040 8082 	bne.w	800e5e0 <f_open+0x23c>
 800e4dc:	1dfb      	adds	r3, r7, #7
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	f003 0308 	and.w	r3, r3, #8
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d07b      	beq.n	800e5e0 <f_open+0x23c>
				dw = GET_FATTIME();
 800e4e8:	f7fc fc10 	bl	800ad0c <get_fattime>
 800e4ec:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e4f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e4f4:	330e      	adds	r3, #14
 800e4f6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fd fcce 	bl	800be9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e500:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e504:	3316      	adds	r3, #22
 800e506:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fd fcc6 	bl	800be9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e510:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e514:	330b      	adds	r3, #11
 800e516:	2220      	movs	r2, #32
 800e518:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e51a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e51e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e522:	4611      	mov	r1, r2
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe fc4c 	bl	800cdc2 <ld_clust>
 800e52a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e52e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e532:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800e536:	2200      	movs	r2, #0
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fe fc61 	bl	800ce00 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e53e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e542:	331c      	adds	r3, #28
 800e544:	2100      	movs	r1, #0
 800e546:	4618      	mov	r0, r3
 800e548:	f7fd fca8 	bl	800be9c <st_dword>
					fs->wflag = 1;
 800e54c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e550:	2201      	movs	r2, #1
 800e552:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e554:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d041      	beq.n	800e5e0 <f_open+0x23c>
						dw = fs->winsect;
 800e55c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e562:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800e566:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800e570:	4618      	mov	r0, r3
 800e572:	f7fe f96e 	bl	800c852 <remove_chain>
 800e576:	4603      	mov	r3, r0
 800e578:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800e57c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e580:	2b00      	cmp	r3, #0
 800e582:	d12d      	bne.n	800e5e0 <f_open+0x23c>
							res = move_window(fs, dw);
 800e584:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e588:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fd ff11 	bl	800c3b4 <move_window>
 800e592:	4603      	mov	r3, r0
 800e594:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e598:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e59c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800e5a0:	3a01      	subs	r2, #1
 800e5a2:	615a      	str	r2, [r3, #20]
 800e5a4:	e01c      	b.n	800e5e0 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e5a6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d118      	bne.n	800e5e0 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e5ae:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e5b2:	f003 0310 	and.w	r3, r3, #16
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d003      	beq.n	800e5c2 <f_open+0x21e>
					res = FR_NO_FILE;
 800e5ba:	2304      	movs	r3, #4
 800e5bc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e5c0:	e00e      	b.n	800e5e0 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e5c2:	1dfb      	adds	r3, r7, #7
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	f003 0302 	and.w	r3, r3, #2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d008      	beq.n	800e5e0 <f_open+0x23c>
 800e5ce:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <f_open+0x23c>
						res = FR_DENIED;
 800e5da:	2307      	movs	r3, #7
 800e5dc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800e5e0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d136      	bne.n	800e656 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e5e8:	1dfb      	adds	r3, r7, #7
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	f003 0308 	and.w	r3, r3, #8
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d005      	beq.n	800e600 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800e5f4:	1dfb      	adds	r3, r7, #7
 800e5f6:	1dfa      	adds	r2, r7, #7
 800e5f8:	7812      	ldrb	r2, [r2, #0]
 800e5fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5fe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e600:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e606:	f107 030c 	add.w	r3, r7, #12
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e60e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e612:	f107 030c 	add.w	r3, r7, #12
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e61a:	1dfb      	adds	r3, r7, #7
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	f023 0301 	bic.w	r3, r3, #1
 800e622:	2b00      	cmp	r3, #0
 800e624:	bf14      	ite	ne
 800e626:	2301      	movne	r3, #1
 800e628:	2300      	moveq	r3, #0
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	461a      	mov	r2, r3
 800e62e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e632:	4611      	mov	r1, r2
 800e634:	4618      	mov	r0, r3
 800e636:	f7fd fd8b 	bl	800c150 <inc_lock>
 800e63a:	4602      	mov	r2, r0
 800e63c:	f107 030c 	add.w	r3, r7, #12
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e644:	f107 030c 	add.w	r3, r7, #12
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d102      	bne.n	800e656 <f_open+0x2b2>
 800e650:	2302      	movs	r3, #2
 800e652:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e656:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f040 80dc 	bne.w	800e818 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e660:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e664:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e668:	4611      	mov	r1, r2
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe fba9 	bl	800cdc2 <ld_clust>
 800e670:	4602      	mov	r2, r0
 800e672:	f107 030c 	add.w	r3, r7, #12
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e67a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e67e:	331c      	adds	r3, #28
 800e680:	4618      	mov	r0, r3
 800e682:	f7fd fbcd 	bl	800be20 <ld_dword>
 800e686:	4602      	mov	r2, r0
 800e688:	f107 030c 	add.w	r3, r7, #12
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e690:	f107 030c 	add.w	r3, r7, #12
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2200      	movs	r2, #0
 800e698:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e69a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e69e:	f107 030c 	add.w	r3, r7, #12
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e6a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e6aa:	88da      	ldrh	r2, [r3, #6]
 800e6ac:	f107 030c 	add.w	r3, r7, #12
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e6b4:	f107 030c 	add.w	r3, r7, #12
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	1dfa      	adds	r2, r7, #7
 800e6bc:	7812      	ldrb	r2, [r2, #0]
 800e6be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e6c0:	f107 030c 	add.w	r3, r7, #12
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e6ca:	f107 030c 	add.w	r3, r7, #12
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e6d4:	f107 030c 	add.w	r3, r7, #12
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e6de:	f107 030c 	add.w	r3, r7, #12
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3330      	adds	r3, #48	; 0x30
 800e6e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fd fc22 	bl	800bf36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e6f2:	1dfb      	adds	r3, r7, #7
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	f003 0320 	and.w	r3, r3, #32
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f000 808c 	beq.w	800e818 <f_open+0x474>
 800e700:	f107 030c 	add.w	r3, r7, #12
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 8085 	beq.w	800e818 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e70e:	f107 030c 	add.w	r3, r7, #12
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68da      	ldr	r2, [r3, #12]
 800e716:	f107 030c 	add.w	r3, r7, #12
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e71e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e722:	895b      	ldrh	r3, [r3, #10]
 800e724:	025b      	lsls	r3, r3, #9
 800e726:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e72a:	f107 030c 	add.w	r3, r7, #12
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e736:	f107 030c 	add.w	r3, r7, #12
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e742:	e01f      	b.n	800e784 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800e744:	f107 030c 	add.w	r3, r7, #12
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fd feeb 	bl	800c52a <get_fat>
 800e754:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800e758:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d802      	bhi.n	800e766 <f_open+0x3c2>
 800e760:	2302      	movs	r3, #2
 800e762:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e766:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76e:	d102      	bne.n	800e776 <f_open+0x3d2>
 800e770:	2301      	movs	r3, #1
 800e772:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e776:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e77a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e784:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d105      	bne.n	800e798 <f_open+0x3f4>
 800e78c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e790:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e794:	429a      	cmp	r2, r3
 800e796:	d8d5      	bhi.n	800e744 <f_open+0x3a0>
				}
				fp->clust = clst;
 800e798:	f107 030c 	add.w	r3, r7, #12
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800e7a2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e7a4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d135      	bne.n	800e818 <f_open+0x474>
 800e7ac:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d02f      	beq.n	800e818 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e7b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e7bc:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fd fe93 	bl	800c4ec <clust2sect>
 800e7c6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800e7ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d103      	bne.n	800e7da <f_open+0x436>
						res = FR_INT_ERR;
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e7d8:	e01e      	b.n	800e818 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e7da:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e7de:	0a5a      	lsrs	r2, r3, #9
 800e7e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e7e4:	441a      	add	r2, r3
 800e7e6:	f107 030c 	add.w	r3, r7, #12
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e7ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e7f2:	7858      	ldrb	r0, [r3, #1]
 800e7f4:	f107 030c 	add.w	r3, r7, #12
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7fe:	f107 030c 	add.w	r3, r7, #12
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6a1a      	ldr	r2, [r3, #32]
 800e806:	2301      	movs	r3, #1
 800e808:	f7fd fa94 	bl	800bd34 <disk_read>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d002      	beq.n	800e818 <f_open+0x474>
 800e812:	2301      	movs	r3, #1
 800e814:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e818:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d004      	beq.n	800e82a <f_open+0x486>
 800e820:	f107 030c 	add.w	r3, r7, #12
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2200      	movs	r2, #0
 800e828:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e82a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e82e:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800e832:	4611      	mov	r1, r2
 800e834:	4618      	mov	r0, r3
 800e836:	f7fd fbf1 	bl	800c01c <unlock_fs>
 800e83a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800e83e:	4618      	mov	r0, r3
 800e840:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08e      	sub	sp, #56	; 0x38
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
 800e854:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2200      	movs	r2, #0
 800e85e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f107 0214 	add.w	r2, r7, #20
 800e866:	4611      	mov	r1, r2
 800e868:	4618      	mov	r0, r3
 800e86a:	f7ff fcef 	bl	800e24c <validate>
 800e86e:	4603      	mov	r3, r0
 800e870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d107      	bne.n	800e88c <f_read+0x44>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	7d5b      	ldrb	r3, [r3, #21]
 800e880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d009      	beq.n	800e8a0 <f_read+0x58>
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e892:	4611      	mov	r1, r2
 800e894:	4618      	mov	r0, r3
 800e896:	f7fd fbc1 	bl	800c01c <unlock_fs>
 800e89a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e89e:	e13d      	b.n	800eb1c <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	7d1b      	ldrb	r3, [r3, #20]
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d106      	bne.n	800e8ba <f_read+0x72>
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	2107      	movs	r1, #7
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fd fbb3 	bl	800c01c <unlock_fs>
 800e8b6:	2307      	movs	r3, #7
 800e8b8:	e130      	b.n	800eb1c <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	68da      	ldr	r2, [r3, #12]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	f240 811c 	bls.w	800eb08 <f_read+0x2c0>
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e8d4:	e118      	b.n	800eb08 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f040 80e4 	bne.w	800eaac <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	0a5b      	lsrs	r3, r3, #9
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	8952      	ldrh	r2, [r2, #10]
 800e8ee:	3a01      	subs	r2, #1
 800e8f0:	4013      	ands	r3, r2
 800e8f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d139      	bne.n	800e96e <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d103      	bne.n	800e90a <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	633b      	str	r3, [r7, #48]	; 0x30
 800e908:	e013      	b.n	800e932 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d007      	beq.n	800e922 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	4619      	mov	r1, r3
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f7fe f897 	bl	800ca4c <clmt_clust>
 800e91e:	6338      	str	r0, [r7, #48]	; 0x30
 800e920:	e007      	b.n	800e932 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	69db      	ldr	r3, [r3, #28]
 800e928:	4619      	mov	r1, r3
 800e92a:	4610      	mov	r0, r2
 800e92c:	f7fd fdfd 	bl	800c52a <get_fat>
 800e930:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	2b01      	cmp	r3, #1
 800e936:	d809      	bhi.n	800e94c <f_read+0x104>
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2202      	movs	r2, #2
 800e93c:	755a      	strb	r2, [r3, #21]
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2102      	movs	r1, #2
 800e942:	4618      	mov	r0, r3
 800e944:	f7fd fb6a 	bl	800c01c <unlock_fs>
 800e948:	2302      	movs	r3, #2
 800e94a:	e0e7      	b.n	800eb1c <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e952:	d109      	bne.n	800e968 <f_read+0x120>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2201      	movs	r2, #1
 800e958:	755a      	strb	r2, [r3, #21]
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	2101      	movs	r1, #1
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fd fb5c 	bl	800c01c <unlock_fs>
 800e964:	2301      	movs	r3, #1
 800e966:	e0d9      	b.n	800eb1c <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e96c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	69db      	ldr	r3, [r3, #28]
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	f7fd fdb8 	bl	800c4ec <clust2sect>
 800e97c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d109      	bne.n	800e998 <f_read+0x150>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2202      	movs	r2, #2
 800e988:	755a      	strb	r2, [r3, #21]
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	2102      	movs	r1, #2
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fd fb44 	bl	800c01c <unlock_fs>
 800e994:	2302      	movs	r3, #2
 800e996:	e0c1      	b.n	800eb1c <f_read+0x2d4>
			sect += csect;
 800e998:	69ba      	ldr	r2, [r7, #24]
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	4413      	add	r3, r2
 800e99e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	0a5b      	lsrs	r3, r3, #9
 800e9a4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d03e      	beq.n	800ea2a <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9ac:	69fa      	ldr	r2, [r7, #28]
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	4413      	add	r3, r2
 800e9b2:	697a      	ldr	r2, [r7, #20]
 800e9b4:	8952      	ldrh	r2, [r2, #10]
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d905      	bls.n	800e9c6 <f_read+0x17e>
					cc = fs->csize - csect;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	895b      	ldrh	r3, [r3, #10]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	7858      	ldrb	r0, [r3, #1]
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	69ba      	ldr	r2, [r7, #24]
 800e9ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9d0:	f7fd f9b0 	bl	800bd34 <disk_read>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d009      	beq.n	800e9ee <f_read+0x1a6>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	755a      	strb	r2, [r3, #21]
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	2101      	movs	r1, #1
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fd fb19 	bl	800c01c <unlock_fs>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e096      	b.n	800eb1c <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	7d1b      	ldrb	r3, [r3, #20]
 800e9f2:	b25b      	sxtb	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	da14      	bge.n	800ea22 <f_read+0x1da>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6a1a      	ldr	r2, [r3, #32]
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d90d      	bls.n	800ea22 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6a1a      	ldr	r2, [r3, #32]
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	025b      	lsls	r3, r3, #9
 800ea10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea12:	18d0      	adds	r0, r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3330      	adds	r3, #48	; 0x30
 800ea18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	f7fd fa69 	bl	800bef4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea24:	025b      	lsls	r3, r3, #9
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ea28:	e05a      	b.n	800eae0 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d038      	beq.n	800eaa6 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	7d1b      	ldrb	r3, [r3, #20]
 800ea38:	b25b      	sxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	da1d      	bge.n	800ea7a <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	7858      	ldrb	r0, [r3, #1]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6a1a      	ldr	r2, [r3, #32]
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	f7fd f991 	bl	800bd74 <disk_write>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d009      	beq.n	800ea6c <f_read+0x224>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	755a      	strb	r2, [r3, #21]
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	2101      	movs	r1, #1
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fd fada 	bl	800c01c <unlock_fs>
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e057      	b.n	800eb1c <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	7d1b      	ldrb	r3, [r3, #20]
 800ea70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	7858      	ldrb	r0, [r3, #1]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea84:	2301      	movs	r3, #1
 800ea86:	69ba      	ldr	r2, [r7, #24]
 800ea88:	f7fd f954 	bl	800bd34 <disk_read>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <f_read+0x25e>
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2201      	movs	r2, #1
 800ea96:	755a      	strb	r2, [r3, #21]
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fd fabd 	bl	800c01c <unlock_fs>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e03a      	b.n	800eb1c <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	69ba      	ldr	r2, [r7, #24]
 800eaaa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eab4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eab8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eaba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d901      	bls.n	800eac6 <f_read+0x27e>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ead4:	4413      	add	r3, r2
 800ead6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ead8:	4619      	mov	r1, r3
 800eada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eadc:	f7fd fa0a 	bl	800bef4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	4413      	add	r3, r2
 800eae6:	627b      	str	r3, [r7, #36]	; 0x24
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	699a      	ldr	r2, [r3, #24]
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	441a      	add	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	619a      	str	r2, [r3, #24]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafa:	441a      	add	r2, r3
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f47f aee3 	bne.w	800e8d6 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	2100      	movs	r1, #0
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fd fa81 	bl	800c01c <unlock_fs>
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3738      	adds	r7, #56	; 0x38
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08c      	sub	sp, #48	; 0x30
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f107 0210 	add.w	r2, r7, #16
 800eb42:	4611      	mov	r1, r2
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fb81 	bl	800e24c <validate>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d107      	bne.n	800eb68 <f_write+0x44>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	7d5b      	ldrb	r3, [r3, #21]
 800eb5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eb60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d009      	beq.n	800eb7c <f_write+0x58>
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800eb6e:	4611      	mov	r1, r2
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fd fa53 	bl	800c01c <unlock_fs>
 800eb76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb7a:	e173      	b.n	800ee64 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	7d1b      	ldrb	r3, [r3, #20]
 800eb80:	f003 0302 	and.w	r3, r3, #2
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d106      	bne.n	800eb96 <f_write+0x72>
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	2107      	movs	r1, #7
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7fd fa45 	bl	800c01c <unlock_fs>
 800eb92:	2307      	movs	r3, #7
 800eb94:	e166      	b.n	800ee64 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	699a      	ldr	r2, [r3, #24]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	441a      	add	r2, r3
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	f080 814b 	bcs.w	800ee3e <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	699b      	ldr	r3, [r3, #24]
 800ebac:	43db      	mvns	r3, r3
 800ebae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ebb0:	e145      	b.n	800ee3e <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f040 8101 	bne.w	800edc2 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	0a5b      	lsrs	r3, r3, #9
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	8952      	ldrh	r2, [r2, #10]
 800ebca:	3a01      	subs	r2, #1
 800ebcc:	4013      	ands	r3, r2
 800ebce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d14d      	bne.n	800ec72 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d10c      	bne.n	800ebf8 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ebe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d11a      	bne.n	800ec20 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2100      	movs	r1, #0
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fd fe94 	bl	800c91c <create_chain>
 800ebf4:	62b8      	str	r0, [r7, #40]	; 0x28
 800ebf6:	e013      	b.n	800ec20 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d007      	beq.n	800ec10 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	699b      	ldr	r3, [r3, #24]
 800ec04:	4619      	mov	r1, r3
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f7fd ff20 	bl	800ca4c <clmt_clust>
 800ec0c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ec0e:	e007      	b.n	800ec20 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	69db      	ldr	r3, [r3, #28]
 800ec16:	4619      	mov	r1, r3
 800ec18:	4610      	mov	r0, r2
 800ec1a:	f7fd fe7f 	bl	800c91c <create_chain>
 800ec1e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f000 8110 	beq.w	800ee48 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d109      	bne.n	800ec42 <f_write+0x11e>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2202      	movs	r2, #2
 800ec32:	755a      	strb	r2, [r3, #21]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2102      	movs	r1, #2
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fd f9ef 	bl	800c01c <unlock_fs>
 800ec3e:	2302      	movs	r3, #2
 800ec40:	e110      	b.n	800ee64 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec48:	d109      	bne.n	800ec5e <f_write+0x13a>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	755a      	strb	r2, [r3, #21]
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	2101      	movs	r1, #1
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fd f9e1 	bl	800c01c <unlock_fs>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e102      	b.n	800ee64 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec62:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d102      	bne.n	800ec72 <f_write+0x14e>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec70:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	7d1b      	ldrb	r3, [r3, #20]
 800ec76:	b25b      	sxtb	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	da1d      	bge.n	800ecb8 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	7858      	ldrb	r0, [r3, #1]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6a1a      	ldr	r2, [r3, #32]
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	f7fd f872 	bl	800bd74 <disk_write>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d009      	beq.n	800ecaa <f_write+0x186>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	755a      	strb	r2, [r3, #21]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2101      	movs	r1, #1
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fd f9bb 	bl	800c01c <unlock_fs>
 800eca6:	2301      	movs	r3, #1
 800eca8:	e0dc      	b.n	800ee64 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	7d1b      	ldrb	r3, [r3, #20]
 800ecae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecb2:	b2da      	uxtb	r2, r3
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	69db      	ldr	r3, [r3, #28]
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	4610      	mov	r0, r2
 800ecc2:	f7fd fc13 	bl	800c4ec <clust2sect>
 800ecc6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d109      	bne.n	800ece2 <f_write+0x1be>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2202      	movs	r2, #2
 800ecd2:	755a      	strb	r2, [r3, #21]
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	2102      	movs	r1, #2
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fd f99f 	bl	800c01c <unlock_fs>
 800ecde:	2302      	movs	r3, #2
 800ece0:	e0c0      	b.n	800ee64 <f_write+0x340>
			sect += csect;
 800ece2:	697a      	ldr	r2, [r7, #20]
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	4413      	add	r3, r2
 800ece8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	0a5b      	lsrs	r3, r3, #9
 800ecee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ecf0:	6a3b      	ldr	r3, [r7, #32]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d041      	beq.n	800ed7a <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ecf6:	69ba      	ldr	r2, [r7, #24]
 800ecf8:	6a3b      	ldr	r3, [r7, #32]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	693a      	ldr	r2, [r7, #16]
 800ecfe:	8952      	ldrh	r2, [r2, #10]
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d905      	bls.n	800ed10 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	895b      	ldrh	r3, [r3, #10]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	7858      	ldrb	r0, [r3, #1]
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	69f9      	ldr	r1, [r7, #28]
 800ed1a:	f7fd f82b 	bl	800bd74 <disk_write>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d009      	beq.n	800ed38 <f_write+0x214>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2201      	movs	r2, #1
 800ed28:	755a      	strb	r2, [r3, #21]
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	2101      	movs	r1, #1
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fd f974 	bl	800c01c <unlock_fs>
 800ed34:	2301      	movs	r3, #1
 800ed36:	e095      	b.n	800ee64 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6a1a      	ldr	r2, [r3, #32]
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	1ad3      	subs	r3, r2, r3
 800ed40:	6a3a      	ldr	r2, [r7, #32]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d915      	bls.n	800ed72 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6a1a      	ldr	r2, [r3, #32]
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	025b      	lsls	r3, r3, #9
 800ed56:	69fa      	ldr	r2, [r7, #28]
 800ed58:	4413      	add	r3, r2
 800ed5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed5e:	4619      	mov	r1, r3
 800ed60:	f7fd f8c8 	bl	800bef4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	7d1b      	ldrb	r3, [r3, #20]
 800ed68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed6c:	b2da      	uxtb	r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	025b      	lsls	r3, r3, #9
 800ed76:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ed78:	e044      	b.n	800ee04 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6a1b      	ldr	r3, [r3, #32]
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d01b      	beq.n	800edbc <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	699a      	ldr	r2, [r3, #24]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d215      	bcs.n	800edbc <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	7858      	ldrb	r0, [r3, #1]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	f7fc ffc9 	bl	800bd34 <disk_read>
 800eda2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d009      	beq.n	800edbc <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2201      	movs	r2, #1
 800edac:	755a      	strb	r2, [r3, #21]
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	2101      	movs	r1, #1
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fd f932 	bl	800c01c <unlock_fs>
 800edb8:	2301      	movs	r3, #1
 800edba:	e053      	b.n	800ee64 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800edce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800edd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d901      	bls.n	800eddc <f_write+0x2b8>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	699b      	ldr	r3, [r3, #24]
 800ede6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edea:	4413      	add	r3, r2
 800edec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edee:	69f9      	ldr	r1, [r7, #28]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fd f87f 	bl	800bef4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	7d1b      	ldrb	r3, [r3, #20]
 800edfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ee04:	69fa      	ldr	r2, [r7, #28]
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	4413      	add	r3, r2
 800ee0a:	61fb      	str	r3, [r7, #28]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	699a      	ldr	r2, [r3, #24]
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	441a      	add	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	619a      	str	r2, [r3, #24]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	68da      	ldr	r2, [r3, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	699b      	ldr	r3, [r3, #24]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	bf38      	it	cc
 800ee24:	461a      	movcc	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	60da      	str	r2, [r3, #12]
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee30:	441a      	add	r2, r3
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	1ad3      	subs	r3, r2, r3
 800ee3c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f47f aeb6 	bne.w	800ebb2 <f_write+0x8e>
 800ee46:	e000      	b.n	800ee4a <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ee48:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	7d1b      	ldrb	r3, [r3, #20]
 800ee4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fd f8dd 	bl	800c01c <unlock_fs>
 800ee62:	2300      	movs	r3, #0
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3730      	adds	r7, #48	; 0x30
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f107 0208 	add.w	r2, r7, #8
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff f9e5 	bl	800e24c <validate>
 800ee82:	4603      	mov	r3, r0
 800ee84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee86:	7dfb      	ldrb	r3, [r7, #23]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d16d      	bne.n	800ef68 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	7d1b      	ldrb	r3, [r3, #20]
 800ee90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d067      	beq.n	800ef68 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	b25b      	sxtb	r3, r3
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	da1a      	bge.n	800eed8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	7858      	ldrb	r0, [r3, #1]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6a1a      	ldr	r2, [r3, #32]
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	f7fc ff5f 	bl	800bd74 <disk_write>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d006      	beq.n	800eeca <f_sync+0x5e>
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	2101      	movs	r1, #1
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fd f8ab 	bl	800c01c <unlock_fs>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e055      	b.n	800ef76 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	7d1b      	ldrb	r3, [r3, #20]
 800eece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eed8:	f7fb ff18 	bl	800ad0c <get_fattime>
 800eedc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f7fd fa64 	bl	800c3b4 <move_window>
 800eeec:	4603      	mov	r3, r0
 800eeee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eef0:	7dfb      	ldrb	r3, [r7, #23]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d138      	bne.n	800ef68 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eefa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	330b      	adds	r3, #11
 800ef00:	781a      	ldrb	r2, [r3, #0]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	330b      	adds	r3, #11
 800ef06:	f042 0220 	orr.w	r2, r2, #32
 800ef0a:	b2d2      	uxtb	r2, r2
 800ef0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6818      	ldr	r0, [r3, #0]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	461a      	mov	r2, r3
 800ef18:	68f9      	ldr	r1, [r7, #12]
 800ef1a:	f7fd ff71 	bl	800ce00 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f103 021c 	add.w	r2, r3, #28
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	f7fc ffb6 	bl	800be9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3316      	adds	r3, #22
 800ef34:	6939      	ldr	r1, [r7, #16]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fc ffb0 	bl	800be9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	3312      	adds	r3, #18
 800ef40:	2100      	movs	r1, #0
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fc ff8f 	bl	800be66 <st_word>
					fs->wflag = 1;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fd fa5d 	bl	800c410 <sync_fs>
 800ef56:	4603      	mov	r3, r0
 800ef58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	7d1b      	ldrb	r3, [r3, #20]
 800ef5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	7dfa      	ldrb	r2, [r7, #23]
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fd f854 	bl	800c01c <unlock_fs>
 800ef74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3718      	adds	r7, #24
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b084      	sub	sp, #16
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7ff ff70 	bl	800ee6c <f_sync>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d11d      	bne.n	800efd2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f107 0208 	add.w	r2, r7, #8
 800ef9c:	4611      	mov	r1, r2
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7ff f954 	bl	800e24c <validate>
 800efa4:	4603      	mov	r3, r0
 800efa6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800efa8:	7bfb      	ldrb	r3, [r7, #15]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d111      	bne.n	800efd2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	691b      	ldr	r3, [r3, #16]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fd f95a 	bl	800c26c <dec_lock>
 800efb8:	4603      	mov	r3, r0
 800efba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800efbc:	7bfb      	ldrb	r3, [r7, #15]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d102      	bne.n	800efc8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2100      	movs	r1, #0
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fd f825 	bl	800c01c <unlock_fs>
#endif
		}
	}
	return res;
 800efd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b090      	sub	sp, #64	; 0x40
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f107 0208 	add.w	r2, r7, #8
 800efec:	4611      	mov	r1, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff f92c 	bl	800e24c <validate>
 800eff4:	4603      	mov	r3, r0
 800eff6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800effa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800effe:	2b00      	cmp	r3, #0
 800f000:	d103      	bne.n	800f00a <f_lseek+0x2e>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	7d5b      	ldrb	r3, [r3, #21]
 800f006:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f00a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d009      	beq.n	800f026 <f_lseek+0x4a>
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f018:	4611      	mov	r1, r2
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fc fffe 	bl	800c01c <unlock_fs>
 800f020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f024:	e229      	b.n	800f47a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f000 80ea 	beq.w	800f204 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f036:	d164      	bne.n	800f102 <f_lseek+0x126>
			tbl = fp->cltbl;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	1d1a      	adds	r2, r3, #4
 800f042:	627a      	str	r2, [r7, #36]	; 0x24
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	617b      	str	r3, [r7, #20]
 800f048:	2302      	movs	r3, #2
 800f04a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	2b00      	cmp	r3, #0
 800f056:	d044      	beq.n	800f0e2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05a:	613b      	str	r3, [r7, #16]
 800f05c:	2300      	movs	r3, #0
 800f05e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f062:	3302      	adds	r3, #2
 800f064:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	60fb      	str	r3, [r7, #12]
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	3301      	adds	r3, #1
 800f06e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f074:	4618      	mov	r0, r3
 800f076:	f7fd fa58 	bl	800c52a <get_fat>
 800f07a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d809      	bhi.n	800f096 <f_lseek+0xba>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2202      	movs	r2, #2
 800f086:	755a      	strb	r2, [r3, #21]
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2102      	movs	r1, #2
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fc ffc5 	bl	800c01c <unlock_fs>
 800f092:	2302      	movs	r3, #2
 800f094:	e1f1      	b.n	800f47a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09c:	d109      	bne.n	800f0b2 <f_lseek+0xd6>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	755a      	strb	r2, [r3, #21]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	2101      	movs	r1, #1
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fc ffb7 	bl	800c01c <unlock_fs>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e1e3      	b.n	800f47a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d0d4      	beq.n	800f066 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f0bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d809      	bhi.n	800f0d8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	1d1a      	adds	r2, r3, #4
 800f0c8:	627a      	str	r2, [r7, #36]	; 0x24
 800f0ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d0:	1d1a      	adds	r2, r3, #4
 800f0d2:	627a      	str	r2, [r7, #36]	; 0x24
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	69db      	ldr	r3, [r3, #28]
 800f0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d3ba      	bcc.n	800f058 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f0ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d803      	bhi.n	800f0fa <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	601a      	str	r2, [r3, #0]
 800f0f8:	e1b6      	b.n	800f468 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f0fa:	2311      	movs	r3, #17
 800f0fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f100:	e1b2      	b.n	800f468 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d902      	bls.n	800f112 <f_lseek+0x136>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	68db      	ldr	r3, [r3, #12]
 800f110:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	683a      	ldr	r2, [r7, #0]
 800f116:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f000 81a4 	beq.w	800f468 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	3b01      	subs	r3, #1
 800f124:	4619      	mov	r1, r3
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7fd fc90 	bl	800ca4c <clmt_clust>
 800f12c:	4602      	mov	r2, r0
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	69db      	ldr	r3, [r3, #28]
 800f138:	4619      	mov	r1, r3
 800f13a:	4610      	mov	r0, r2
 800f13c:	f7fd f9d6 	bl	800c4ec <clust2sect>
 800f140:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d109      	bne.n	800f15c <f_lseek+0x180>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2202      	movs	r2, #2
 800f14c:	755a      	strb	r2, [r3, #21]
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	2102      	movs	r1, #2
 800f152:	4618      	mov	r0, r3
 800f154:	f7fc ff62 	bl	800c01c <unlock_fs>
 800f158:	2302      	movs	r3, #2
 800f15a:	e18e      	b.n	800f47a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	3b01      	subs	r3, #1
 800f160:	0a5b      	lsrs	r3, r3, #9
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	8952      	ldrh	r2, [r2, #10]
 800f166:	3a01      	subs	r2, #1
 800f168:	4013      	ands	r3, r2
 800f16a:	69ba      	ldr	r2, [r7, #24]
 800f16c:	4413      	add	r3, r2
 800f16e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	699b      	ldr	r3, [r3, #24]
 800f174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f000 8175 	beq.w	800f468 <f_lseek+0x48c>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	69ba      	ldr	r2, [r7, #24]
 800f184:	429a      	cmp	r2, r3
 800f186:	f000 816f 	beq.w	800f468 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	7d1b      	ldrb	r3, [r3, #20]
 800f18e:	b25b      	sxtb	r3, r3
 800f190:	2b00      	cmp	r3, #0
 800f192:	da1d      	bge.n	800f1d0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	7858      	ldrb	r0, [r3, #1]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a1a      	ldr	r2, [r3, #32]
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	f7fc fde6 	bl	800bd74 <disk_write>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d009      	beq.n	800f1c2 <f_lseek+0x1e6>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	755a      	strb	r2, [r3, #21]
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	2101      	movs	r1, #1
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fc ff2f 	bl	800c01c <unlock_fs>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e15b      	b.n	800f47a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
 800f1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	7858      	ldrb	r0, [r3, #1]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1da:	2301      	movs	r3, #1
 800f1dc:	69ba      	ldr	r2, [r7, #24]
 800f1de:	f7fc fda9 	bl	800bd34 <disk_read>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d009      	beq.n	800f1fc <f_lseek+0x220>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	755a      	strb	r2, [r3, #21]
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	2101      	movs	r1, #1
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fc ff12 	bl	800c01c <unlock_fs>
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	e13e      	b.n	800f47a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	69ba      	ldr	r2, [r7, #24]
 800f200:	621a      	str	r2, [r3, #32]
 800f202:	e131      	b.n	800f468 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	683a      	ldr	r2, [r7, #0]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d908      	bls.n	800f220 <f_lseek+0x244>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	7d1b      	ldrb	r3, [r3, #20]
 800f212:	f003 0302 	and.w	r3, r3, #2
 800f216:	2b00      	cmp	r3, #0
 800f218:	d102      	bne.n	800f220 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f226:	2300      	movs	r3, #0
 800f228:	637b      	str	r3, [r7, #52]	; 0x34
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f22e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	f000 80c0 	beq.w	800f3b8 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	895b      	ldrh	r3, [r3, #10]
 800f23c:	025b      	lsls	r3, r3, #9
 800f23e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d01b      	beq.n	800f27e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	1e5a      	subs	r2, r3, #1
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	1e59      	subs	r1, r3, #1
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d30f      	bcc.n	800f27e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	1e5a      	subs	r2, r3, #1
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	425b      	negs	r3, r3
 800f266:	401a      	ands	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	699b      	ldr	r3, [r3, #24]
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	69db      	ldr	r3, [r3, #28]
 800f27a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f27c:	e02c      	b.n	800f2d8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f286:	2b00      	cmp	r3, #0
 800f288:	d123      	bne.n	800f2d2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2100      	movs	r1, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fd fb44 	bl	800c91c <create_chain>
 800f294:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d109      	bne.n	800f2b0 <f_lseek+0x2d4>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2202      	movs	r2, #2
 800f2a0:	755a      	strb	r2, [r3, #21]
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	2102      	movs	r1, #2
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fc feb8 	bl	800c01c <unlock_fs>
 800f2ac:	2302      	movs	r3, #2
 800f2ae:	e0e4      	b.n	800f47a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b6:	d109      	bne.n	800f2cc <f_lseek+0x2f0>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	755a      	strb	r2, [r3, #21]
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2101      	movs	r1, #1
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fc feaa 	bl	800c01c <unlock_fs>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e0d6      	b.n	800f47a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2d0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2d6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d06c      	beq.n	800f3b8 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800f2de:	e044      	b.n	800f36a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800f2e0:	683a      	ldr	r2, [r7, #0]
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	1ad3      	subs	r3, r2, r3
 800f2e6:	603b      	str	r3, [r7, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	699a      	ldr	r2, [r3, #24]
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	441a      	add	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	7d1b      	ldrb	r3, [r3, #20]
 800f2f8:	f003 0302 	and.w	r3, r3, #2
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00b      	beq.n	800f318 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f304:	4618      	mov	r0, r3
 800f306:	f7fd fb09 	bl	800c91c <create_chain>
 800f30a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d108      	bne.n	800f324 <f_lseek+0x348>
							ofs = 0; break;
 800f312:	2300      	movs	r3, #0
 800f314:	603b      	str	r3, [r7, #0]
 800f316:	e02c      	b.n	800f372 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fd f904 	bl	800c52a <get_fat>
 800f322:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f32a:	d109      	bne.n	800f340 <f_lseek+0x364>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	755a      	strb	r2, [r3, #21]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	2101      	movs	r1, #1
 800f336:	4618      	mov	r0, r3
 800f338:	f7fc fe70 	bl	800c01c <unlock_fs>
 800f33c:	2301      	movs	r3, #1
 800f33e:	e09c      	b.n	800f47a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f342:	2b01      	cmp	r3, #1
 800f344:	d904      	bls.n	800f350 <f_lseek+0x374>
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	69db      	ldr	r3, [r3, #28]
 800f34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d309      	bcc.n	800f364 <f_lseek+0x388>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2202      	movs	r2, #2
 800f354:	755a      	strb	r2, [r3, #21]
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2102      	movs	r1, #2
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fc fe5e 	bl	800c01c <unlock_fs>
 800f360:	2302      	movs	r3, #2
 800f362:	e08a      	b.n	800f47a <f_lseek+0x49e>
					fp->clust = clst;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f368:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d8b6      	bhi.n	800f2e0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	699a      	ldr	r2, [r3, #24]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	441a      	add	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f384:	2b00      	cmp	r3, #0
 800f386:	d017      	beq.n	800f3b8 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fd f8ad 	bl	800c4ec <clust2sect>
 800f392:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f396:	2b00      	cmp	r3, #0
 800f398:	d109      	bne.n	800f3ae <f_lseek+0x3d2>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2202      	movs	r2, #2
 800f39e:	755a      	strb	r2, [r3, #21]
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	2102      	movs	r1, #2
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fc fe39 	bl	800c01c <unlock_fs>
 800f3aa:	2302      	movs	r3, #2
 800f3ac:	e065      	b.n	800f47a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	0a5b      	lsrs	r3, r3, #9
 800f3b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3b4:	4413      	add	r3, r2
 800f3b6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	699a      	ldr	r2, [r3, #24]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d90a      	bls.n	800f3da <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	699a      	ldr	r2, [r3, #24]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	7d1b      	ldrb	r3, [r3, #20]
 800f3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	699b      	ldr	r3, [r3, #24]
 800f3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d040      	beq.n	800f468 <f_lseek+0x48c>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a1b      	ldr	r3, [r3, #32]
 800f3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d03b      	beq.n	800f468 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	7d1b      	ldrb	r3, [r3, #20]
 800f3f4:	b25b      	sxtb	r3, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	da1d      	bge.n	800f436 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	7858      	ldrb	r0, [r3, #1]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6a1a      	ldr	r2, [r3, #32]
 800f408:	2301      	movs	r3, #1
 800f40a:	f7fc fcb3 	bl	800bd74 <disk_write>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d009      	beq.n	800f428 <f_lseek+0x44c>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2201      	movs	r2, #1
 800f418:	755a      	strb	r2, [r3, #21]
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	2101      	movs	r1, #1
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fc fdfc 	bl	800c01c <unlock_fs>
 800f424:	2301      	movs	r3, #1
 800f426:	e028      	b.n	800f47a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	7d1b      	ldrb	r3, [r3, #20]
 800f42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f430:	b2da      	uxtb	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	7858      	ldrb	r0, [r3, #1]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f440:	2301      	movs	r3, #1
 800f442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f444:	f7fc fc76 	bl	800bd34 <disk_read>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d009      	beq.n	800f462 <f_lseek+0x486>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	755a      	strb	r2, [r3, #21]
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	2101      	movs	r1, #1
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fc fddf 	bl	800c01c <unlock_fs>
 800f45e:	2301      	movs	r3, #1
 800f460:	e00b      	b.n	800f47a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f466:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f46e:	4611      	mov	r1, r2
 800f470:	4618      	mov	r0, r3
 800f472:	f7fc fdd3 	bl	800c01c <unlock_fs>
 800f476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3740      	adds	r7, #64	; 0x40
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 800f488:	af00      	add	r7, sp, #0
 800f48a:	1d3b      	adds	r3, r7, #4
 800f48c:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f48e:	2300      	movs	r3, #0
 800f490:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f494:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800f498:	1d3b      	adds	r3, r7, #4
 800f49a:	2202      	movs	r2, #2
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fe fc81 	bl	800dda4 <find_volume>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 800f4a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f4ac:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 800f4b0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f040 809e 	bne.w	800f5f6 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 800f4ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f4be:	f107 020c 	add.w	r2, r7, #12
 800f4c2:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 800f4c4:	1d3b      	adds	r3, r7, #4
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fe fb5c 	bl	800db8c <follow_path>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f4da:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d108      	bne.n	800f4f4 <f_unlink+0x72>
 800f4e2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f4e6:	2102      	movs	r1, #2
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fc fdb3 	bl	800c054 <chk_lock>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f4f4:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d17c      	bne.n	800f5f6 <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f4fc:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800f500:	b25b      	sxtb	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	da03      	bge.n	800f50e <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f506:	2306      	movs	r3, #6
 800f508:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 800f50c:	e008      	b.n	800f520 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f50e:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 800f512:	f003 0301 	and.w	r3, r3, #1
 800f516:	2b00      	cmp	r3, #0
 800f518:	d002      	beq.n	800f520 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f51a:	2307      	movs	r3, #7
 800f51c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 800f520:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f524:	2b00      	cmp	r3, #0
 800f526:	d13b      	bne.n	800f5a0 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f528:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f52c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800f530:	4611      	mov	r1, r2
 800f532:	4618      	mov	r0, r3
 800f534:	f7fd fc45 	bl	800cdc2 <ld_clust>
 800f538:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f53c:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 800f540:	f003 0310 	and.w	r3, r3, #16
 800f544:	2b00      	cmp	r3, #0
 800f546:	d02b      	beq.n	800f5a0 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f548:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f54c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 800f550:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800f554:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f558:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f55c:	2100      	movs	r1, #0
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fd faa8 	bl	800cab4 <dir_sdi>
 800f564:	4603      	mov	r3, r0
 800f566:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 800f56a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d116      	bne.n	800f5a0 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f572:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f576:	2100      	movs	r1, #0
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fd fe64 	bl	800d246 <dir_read>
 800f57e:	4603      	mov	r3, r0
 800f580:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f584:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d102      	bne.n	800f592 <f_unlink+0x110>
 800f58c:	2307      	movs	r3, #7
 800f58e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f592:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f596:	2b04      	cmp	r3, #4
 800f598:	d102      	bne.n	800f5a0 <f_unlink+0x11e>
 800f59a:	2300      	movs	r3, #0
 800f59c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 800f5a0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d126      	bne.n	800f5f6 <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f5a8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fe f8a9 	bl	800d704 <dir_remove>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f5b8:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10e      	bne.n	800f5de <f_unlink+0x15c>
 800f5c0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00a      	beq.n	800f5de <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800f5c8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fd f93d 	bl	800c852 <remove_chain>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f5de:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d107      	bne.n	800f5f6 <f_unlink+0x174>
 800f5e6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fc ff10 	bl	800c410 <sync_fs>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f5f6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f5fa:	f897 227f 	ldrb.w	r2, [r7, #639]	; 0x27f
 800f5fe:	4611      	mov	r1, r2
 800f600:	4618      	mov	r0, r3
 800f602:	f7fc fd0b 	bl	800c01c <unlock_fs>
 800f606:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	f507 7720 	add.w	r7, r7, #640	; 0x280
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f614:	b480      	push	{r7}
 800f616:	b087      	sub	sp, #28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	4613      	mov	r3, r2
 800f620:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f622:	2301      	movs	r3, #1
 800f624:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f626:	2300      	movs	r3, #0
 800f628:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f62a:	4b1f      	ldr	r3, [pc, #124]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f62c:	7a5b      	ldrb	r3, [r3, #9]
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	2b00      	cmp	r3, #0
 800f632:	d131      	bne.n	800f698 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f634:	4b1c      	ldr	r3, [pc, #112]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f636:	7a5b      	ldrb	r3, [r3, #9]
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	461a      	mov	r2, r3
 800f63c:	4b1a      	ldr	r3, [pc, #104]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f63e:	2100      	movs	r1, #0
 800f640:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f642:	4b19      	ldr	r3, [pc, #100]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f644:	7a5b      	ldrb	r3, [r3, #9]
 800f646:	b2db      	uxtb	r3, r3
 800f648:	4a17      	ldr	r2, [pc, #92]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	4413      	add	r3, r2
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f652:	4b15      	ldr	r3, [pc, #84]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f654:	7a5b      	ldrb	r3, [r3, #9]
 800f656:	b2db      	uxtb	r3, r3
 800f658:	461a      	mov	r2, r3
 800f65a:	4b13      	ldr	r3, [pc, #76]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f65c:	4413      	add	r3, r2
 800f65e:	79fa      	ldrb	r2, [r7, #7]
 800f660:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f662:	4b11      	ldr	r3, [pc, #68]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f664:	7a5b      	ldrb	r3, [r3, #9]
 800f666:	b2db      	uxtb	r3, r3
 800f668:	1c5a      	adds	r2, r3, #1
 800f66a:	b2d1      	uxtb	r1, r2
 800f66c:	4a0e      	ldr	r2, [pc, #56]	; (800f6a8 <FATFS_LinkDriverEx+0x94>)
 800f66e:	7251      	strb	r1, [r2, #9]
 800f670:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f672:	7dbb      	ldrb	r3, [r7, #22]
 800f674:	3330      	adds	r3, #48	; 0x30
 800f676:	b2da      	uxtb	r2, r3
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	3301      	adds	r3, #1
 800f680:	223a      	movs	r2, #58	; 0x3a
 800f682:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	3302      	adds	r3, #2
 800f688:	222f      	movs	r2, #47	; 0x2f
 800f68a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	3303      	adds	r3, #3
 800f690:	2200      	movs	r2, #0
 800f692:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f694:	2300      	movs	r3, #0
 800f696:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f698:	7dfb      	ldrb	r3, [r7, #23]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	371c      	adds	r7, #28
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	20000b58 	.word	0x20000b58

0800f6ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7ff ffaa 	bl	800f614 <FATFS_LinkDriverEx>
 800f6c0:	4603      	mov	r3, r0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
	...

0800f6cc <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b089      	sub	sp, #36	; 0x24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	6039      	str	r1, [r7, #0]
 800f6d6:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800f6d8:	88fb      	ldrh	r3, [r7, #6]
 800f6da:	2b7f      	cmp	r3, #127	; 0x7f
 800f6dc:	d802      	bhi.n	800f6e4 <ff_convert+0x18>
		c = chr;
 800f6de:	88fb      	ldrh	r3, [r7, #6]
 800f6e0:	837b      	strh	r3, [r7, #26]
 800f6e2:	e045      	b.n	800f770 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d005      	beq.n	800f6f6 <ff_convert+0x2a>
			p = oem2uni;
 800f6ea:	4b25      	ldr	r3, [pc, #148]	; (800f780 <ff_convert+0xb4>)
 800f6ec:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800f6ee:	f245 5320 	movw	r3, #21792	; 0x5520
 800f6f2:	60bb      	str	r3, [r7, #8]
 800f6f4:	e004      	b.n	800f700 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800f6f6:	4b23      	ldr	r3, [pc, #140]	; (800f784 <ff_convert+0xb8>)
 800f6f8:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800f6fa:	f245 5320 	movw	r3, #21792	; 0x5520
 800f6fe:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800f700:	2300      	movs	r3, #0
 800f702:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800f704:	2310      	movs	r3, #16
 800f706:	613b      	str	r3, [r7, #16]
 800f708:	e021      	b.n	800f74e <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	1ad3      	subs	r3, r2, r3
 800f710:	0fda      	lsrs	r2, r3, #31
 800f712:	4413      	add	r3, r2
 800f714:	105b      	asrs	r3, r3, #1
 800f716:	461a      	mov	r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	4413      	add	r3, r2
 800f71c:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	69fa      	ldr	r2, [r7, #28]
 800f724:	4413      	add	r3, r2
 800f726:	881b      	ldrh	r3, [r3, #0]
 800f728:	88fa      	ldrh	r2, [r7, #6]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d013      	beq.n	800f756 <ff_convert+0x8a>
			if (chr > p[i * 2])
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	69fa      	ldr	r2, [r7, #28]
 800f734:	4413      	add	r3, r2
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	88fa      	ldrh	r2, [r7, #6]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d902      	bls.n	800f744 <ff_convert+0x78>
				li = i;
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	60fb      	str	r3, [r7, #12]
 800f742:	e001      	b.n	800f748 <ff_convert+0x7c>
			else
				hi = i;
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	3b01      	subs	r3, #1
 800f74c:	613b      	str	r3, [r7, #16]
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1da      	bne.n	800f70a <ff_convert+0x3e>
 800f754:	e000      	b.n	800f758 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800f756:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d006      	beq.n	800f76c <ff_convert+0xa0>
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	3302      	adds	r3, #2
 800f764:	69fa      	ldr	r2, [r7, #28]
 800f766:	4413      	add	r3, r2
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	e000      	b.n	800f76e <ff_convert+0xa2>
 800f76c:	2300      	movs	r3, #0
 800f76e:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800f770:	8b7b      	ldrh	r3, [r7, #26]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3724      	adds	r7, #36	; 0x24
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr
 800f77e:	bf00      	nop
 800f780:	080636bc 	.word	0x080636bc
 800f784:	0804e238 	.word	0x0804e238

0800f788 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f788:	b480      	push	{r7}
 800f78a:	b087      	sub	sp, #28
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	4603      	mov	r3, r0
 800f790:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f792:	88fb      	ldrh	r3, [r7, #6]
 800f794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f798:	d201      	bcs.n	800f79e <ff_wtoupper+0x16>
 800f79a:	4b3e      	ldr	r3, [pc, #248]	; (800f894 <ff_wtoupper+0x10c>)
 800f79c:	e000      	b.n	800f7a0 <ff_wtoupper+0x18>
 800f79e:	4b3e      	ldr	r3, [pc, #248]	; (800f898 <ff_wtoupper+0x110>)
 800f7a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	1c9a      	adds	r2, r3, #2
 800f7a6:	617a      	str	r2, [r7, #20]
 800f7a8:	881b      	ldrh	r3, [r3, #0]
 800f7aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f7ac:	8a7b      	ldrh	r3, [r7, #18]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d068      	beq.n	800f884 <ff_wtoupper+0xfc>
 800f7b2:	88fa      	ldrh	r2, [r7, #6]
 800f7b4:	8a7b      	ldrh	r3, [r7, #18]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d364      	bcc.n	800f884 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	1c9a      	adds	r2, r3, #2
 800f7be:	617a      	str	r2, [r7, #20]
 800f7c0:	881b      	ldrh	r3, [r3, #0]
 800f7c2:	823b      	strh	r3, [r7, #16]
 800f7c4:	8a3b      	ldrh	r3, [r7, #16]
 800f7c6:	0a1b      	lsrs	r3, r3, #8
 800f7c8:	81fb      	strh	r3, [r7, #14]
 800f7ca:	8a3b      	ldrh	r3, [r7, #16]
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f7d0:	88fa      	ldrh	r2, [r7, #6]
 800f7d2:	8a79      	ldrh	r1, [r7, #18]
 800f7d4:	8a3b      	ldrh	r3, [r7, #16]
 800f7d6:	440b      	add	r3, r1
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	da49      	bge.n	800f870 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f7dc:	89fb      	ldrh	r3, [r7, #14]
 800f7de:	2b08      	cmp	r3, #8
 800f7e0:	d84f      	bhi.n	800f882 <ff_wtoupper+0xfa>
 800f7e2:	a201      	add	r2, pc, #4	; (adr r2, 800f7e8 <ff_wtoupper+0x60>)
 800f7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e8:	0800f80d 	.word	0x0800f80d
 800f7ec:	0800f81f 	.word	0x0800f81f
 800f7f0:	0800f835 	.word	0x0800f835
 800f7f4:	0800f83d 	.word	0x0800f83d
 800f7f8:	0800f845 	.word	0x0800f845
 800f7fc:	0800f84d 	.word	0x0800f84d
 800f800:	0800f855 	.word	0x0800f855
 800f804:	0800f85d 	.word	0x0800f85d
 800f808:	0800f865 	.word	0x0800f865
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f80c:	88fa      	ldrh	r2, [r7, #6]
 800f80e:	8a7b      	ldrh	r3, [r7, #18]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	005b      	lsls	r3, r3, #1
 800f814:	697a      	ldr	r2, [r7, #20]
 800f816:	4413      	add	r3, r2
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	80fb      	strh	r3, [r7, #6]
 800f81c:	e027      	b.n	800f86e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f81e:	88fa      	ldrh	r2, [r7, #6]
 800f820:	8a7b      	ldrh	r3, [r7, #18]
 800f822:	1ad3      	subs	r3, r2, r3
 800f824:	b29b      	uxth	r3, r3
 800f826:	f003 0301 	and.w	r3, r3, #1
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	88fa      	ldrh	r2, [r7, #6]
 800f82e:	1ad3      	subs	r3, r2, r3
 800f830:	80fb      	strh	r3, [r7, #6]
 800f832:	e01c      	b.n	800f86e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f834:	88fb      	ldrh	r3, [r7, #6]
 800f836:	3b10      	subs	r3, #16
 800f838:	80fb      	strh	r3, [r7, #6]
 800f83a:	e018      	b.n	800f86e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f83c:	88fb      	ldrh	r3, [r7, #6]
 800f83e:	3b20      	subs	r3, #32
 800f840:	80fb      	strh	r3, [r7, #6]
 800f842:	e014      	b.n	800f86e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f844:	88fb      	ldrh	r3, [r7, #6]
 800f846:	3b30      	subs	r3, #48	; 0x30
 800f848:	80fb      	strh	r3, [r7, #6]
 800f84a:	e010      	b.n	800f86e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f84c:	88fb      	ldrh	r3, [r7, #6]
 800f84e:	3b1a      	subs	r3, #26
 800f850:	80fb      	strh	r3, [r7, #6]
 800f852:	e00c      	b.n	800f86e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f854:	88fb      	ldrh	r3, [r7, #6]
 800f856:	3308      	adds	r3, #8
 800f858:	80fb      	strh	r3, [r7, #6]
 800f85a:	e008      	b.n	800f86e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f85c:	88fb      	ldrh	r3, [r7, #6]
 800f85e:	3b50      	subs	r3, #80	; 0x50
 800f860:	80fb      	strh	r3, [r7, #6]
 800f862:	e004      	b.n	800f86e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f864:	88fb      	ldrh	r3, [r7, #6]
 800f866:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f86a:	80fb      	strh	r3, [r7, #6]
 800f86c:	bf00      	nop
			}
			break;
 800f86e:	e008      	b.n	800f882 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f870:	89fb      	ldrh	r3, [r7, #14]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d195      	bne.n	800f7a2 <ff_wtoupper+0x1a>
 800f876:	8a3b      	ldrh	r3, [r7, #16]
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	4413      	add	r3, r2
 800f87e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f880:	e78f      	b.n	800f7a2 <ff_wtoupper+0x1a>
			break;
 800f882:	bf00      	nop
	}

	return chr;
 800f884:	88fb      	ldrh	r3, [r7, #6]
}
 800f886:	4618      	mov	r0, r3
 800f888:	371c      	adds	r7, #28
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	08078b40 	.word	0x08078b40
 800f898:	08078d34 	.word	0x08078d34

0800f89c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	6039      	str	r1, [r7, #0]
 800f8a6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f8b0:	f107 030c 	add.w	r3, r7, #12
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 f986 	bl	800fbc8 <osSemaphoreCreate>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	bf14      	ite	ne
 800f8ca:	2301      	movne	r3, #1
 800f8cc:	2300      	moveq	r3, #0
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	617b      	str	r3, [r7, #20]

    return ret;
 800f8d2:	697b      	ldr	r3, [r7, #20]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3718      	adds	r7, #24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f000 fa25 	bl	800fd34 <osSemaphoreDelete>
#endif
    return 1;
 800f8ea:	2301      	movs	r3, #1
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f991 	bl	800fc2c <osSemaphoreWait>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d101      	bne.n	800f914 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f910:	2301      	movs	r3, #1
 800f912:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f914:	68fb      	ldr	r3, [r7, #12]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b082      	sub	sp, #8
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 f9ce 	bl	800fcc8 <osSemaphoreRelease>
#endif
}
 800f92c:	bf00      	nop
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f934:	b480      	push	{r7}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	4603      	mov	r3, r0
 800f93c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f93e:	2300      	movs	r3, #0
 800f940:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f946:	2b84      	cmp	r3, #132	; 0x84
 800f948:	d005      	beq.n	800f956 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f94a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	4413      	add	r3, r2
 800f952:	3303      	adds	r3, #3
 800f954:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f956:	68fb      	ldr	r3, [r7, #12]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3714      	adds	r7, #20
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f96a:	f3ef 8305 	mrs	r3, IPSR
 800f96e:	607b      	str	r3, [r7, #4]
  return(result);
 800f970:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f972:	2b00      	cmp	r3, #0
 800f974:	bf14      	ite	ne
 800f976:	2301      	movne	r3, #1
 800f978:	2300      	moveq	r3, #0
 800f97a:	b2db      	uxtb	r3, r3
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f98c:	f001 fe62 	bl	8011654 <vTaskStartScheduler>
  
  return osOK;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	bd80      	pop	{r7, pc}

0800f996 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f99a:	f002 fb19 	bl	8011fd0 <xTaskGetSchedulerState>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d101      	bne.n	800f9a8 <osKernelRunning+0x12>
    return 0;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	e000      	b.n	800f9aa <osKernelRunning+0x14>
  else
    return 1;
 800f9a8:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f9b2:	f7ff ffd7 	bl	800f964 <inHandlerMode>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f9bc:	f001 ff64 	bl	8011888 <xTaskGetTickCountFromISR>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	e002      	b.n	800f9ca <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f9c4:	f001 ff50 	bl	8011868 <xTaskGetTickCount>
 800f9c8:	4603      	mov	r3, r0
  }
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f9ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9d0:	b089      	sub	sp, #36	; 0x24
 800f9d2:	af04      	add	r7, sp, #16
 800f9d4:	6078      	str	r0, [r7, #4]
 800f9d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d020      	beq.n	800fa22 <osThreadCreate+0x54>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	699b      	ldr	r3, [r3, #24]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d01c      	beq.n	800fa22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685c      	ldr	r4, [r3, #4]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681d      	ldr	r5, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	691e      	ldr	r6, [r3, #16]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7ff ff9a 	bl	800f934 <makeFreeRtosPriority>
 800fa00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa0a:	9202      	str	r2, [sp, #8]
 800fa0c:	9301      	str	r3, [sp, #4]
 800fa0e:	9100      	str	r1, [sp, #0]
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	4632      	mov	r2, r6
 800fa14:	4629      	mov	r1, r5
 800fa16:	4620      	mov	r0, r4
 800fa18:	f001 fc54 	bl	80112c4 <xTaskCreateStatic>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	60fb      	str	r3, [r7, #12]
 800fa20:	e01c      	b.n	800fa5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685c      	ldr	r4, [r3, #4]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa2e:	b29e      	uxth	r6, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7ff ff7c 	bl	800f934 <makeFreeRtosPriority>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	f107 030c 	add.w	r3, r7, #12
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	9200      	str	r2, [sp, #0]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	4632      	mov	r2, r6
 800fa4a:	4629      	mov	r1, r5
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f001 fc96 	bl	801137e <xTaskCreate>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d001      	beq.n	800fa5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	e000      	b.n	800fa5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b084      	sub	sp, #16
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d001      	beq.n	800fa7c <osDelay+0x16>
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	e000      	b.n	800fa7e <osDelay+0x18>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f001 fdb4 	bl	80115ec <vTaskDelay>
  
  return osOK;
 800fa84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}

0800fa8e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b082      	sub	sp, #8
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d007      	beq.n	800faae <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	4619      	mov	r1, r3
 800faa4:	2001      	movs	r0, #1
 800faa6:	f000 fdea 	bl	801067e <xQueueCreateMutexStatic>
 800faaa:	4603      	mov	r3, r0
 800faac:	e003      	b.n	800fab6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800faae:	2001      	movs	r0, #1
 800fab0:	f000 fdcd 	bl	801064e <xQueueCreateMutex>
 800fab4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800faca:	2300      	movs	r3, #0
 800facc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d101      	bne.n	800fad8 <osMutexWait+0x18>
    return osErrorParameter;
 800fad4:	2380      	movs	r3, #128	; 0x80
 800fad6:	e03a      	b.n	800fb4e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae2:	d103      	bne.n	800faec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800fae4:	f04f 33ff 	mov.w	r3, #4294967295
 800fae8:	60fb      	str	r3, [r7, #12]
 800faea:	e009      	b.n	800fb00 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d006      	beq.n	800fb00 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d101      	bne.n	800fb00 <osMutexWait+0x40>
      ticks = 1;
 800fafc:	2301      	movs	r3, #1
 800fafe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fb00:	f7ff ff30 	bl	800f964 <inHandlerMode>
 800fb04:	4603      	mov	r3, r0
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d017      	beq.n	800fb3a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fb0a:	f107 0308 	add.w	r3, r7, #8
 800fb0e:	461a      	mov	r2, r3
 800fb10:	2100      	movs	r1, #0
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f001 f9e0 	bl	8010ed8 <xQueueReceiveFromISR>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d001      	beq.n	800fb22 <osMutexWait+0x62>
      return osErrorOS;
 800fb1e:	23ff      	movs	r3, #255	; 0xff
 800fb20:	e015      	b.n	800fb4e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d011      	beq.n	800fb4c <osMutexWait+0x8c>
 800fb28:	4b0b      	ldr	r3, [pc, #44]	; (800fb58 <osMutexWait+0x98>)
 800fb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	f3bf 8f6f 	isb	sy
 800fb38:	e008      	b.n	800fb4c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800fb3a:	68f9      	ldr	r1, [r7, #12]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f001 f8bf 	bl	8010cc0 <xQueueSemaphoreTake>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d001      	beq.n	800fb4c <osMutexWait+0x8c>
    return osErrorOS;
 800fb48:	23ff      	movs	r3, #255	; 0xff
 800fb4a:	e000      	b.n	800fb4e <osMutexWait+0x8e>
  }
  
  return osOK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	e000ed04 	.word	0xe000ed04

0800fb5c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fb64:	2300      	movs	r3, #0
 800fb66:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800fb6c:	f7ff fefa 	bl	800f964 <inHandlerMode>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d016      	beq.n	800fba4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fb76:	f107 0308 	add.w	r3, r7, #8
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 ff32 	bl	80109e6 <xQueueGiveFromISR>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d001      	beq.n	800fb8c <osMutexRelease+0x30>
      return osErrorOS;
 800fb88:	23ff      	movs	r3, #255	; 0xff
 800fb8a:	e017      	b.n	800fbbc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d013      	beq.n	800fbba <osMutexRelease+0x5e>
 800fb92:	4b0c      	ldr	r3, [pc, #48]	; (800fbc4 <osMutexRelease+0x68>)
 800fb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	e00a      	b.n	800fbba <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800fba4:	2300      	movs	r3, #0
 800fba6:	2200      	movs	r2, #0
 800fba8:	2100      	movs	r1, #0
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fd82 	bl	80106b4 <xQueueGenericSend>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d001      	beq.n	800fbba <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800fbb6:	23ff      	movs	r3, #255	; 0xff
 800fbb8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800fbba:	68fb      	ldr	r3, [r7, #12]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3710      	adds	r7, #16
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	e000ed04 	.word	0xe000ed04

0800fbc8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af02      	add	r7, sp, #8
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d00f      	beq.n	800fbfa <osSemaphoreCreate+0x32>
    if (count == 1) {
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d10a      	bne.n	800fbf6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	2203      	movs	r2, #3
 800fbe6:	9200      	str	r2, [sp, #0]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	2100      	movs	r1, #0
 800fbec:	2001      	movs	r0, #1
 800fbee:	f000 fc43 	bl	8010478 <xQueueGenericCreateStatic>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	e016      	b.n	800fc24 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	e014      	b.n	800fc24 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d110      	bne.n	800fc22 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800fc00:	2203      	movs	r2, #3
 800fc02:	2100      	movs	r1, #0
 800fc04:	2001      	movs	r0, #1
 800fc06:	f000 fcaf 	bl	8010568 <xQueueGenericCreate>
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d005      	beq.n	800fc1e <osSemaphoreCreate+0x56>
 800fc12:	2300      	movs	r3, #0
 800fc14:	2200      	movs	r2, #0
 800fc16:	2100      	movs	r1, #0
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 fd4b 	bl	80106b4 <xQueueGenericSend>
      return sema;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	e000      	b.n	800fc24 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800fc22:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fc36:	2300      	movs	r3, #0
 800fc38:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d101      	bne.n	800fc44 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fc40:	2380      	movs	r3, #128	; 0x80
 800fc42:	e03a      	b.n	800fcba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc4e:	d103      	bne.n	800fc58 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fc50:	f04f 33ff 	mov.w	r3, #4294967295
 800fc54:	60fb      	str	r3, [r7, #12]
 800fc56:	e009      	b.n	800fc6c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d006      	beq.n	800fc6c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d101      	bne.n	800fc6c <osSemaphoreWait+0x40>
      ticks = 1;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fc6c:	f7ff fe7a 	bl	800f964 <inHandlerMode>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d017      	beq.n	800fca6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fc76:	f107 0308 	add.w	r3, r7, #8
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f001 f92a 	bl	8010ed8 <xQueueReceiveFromISR>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d001      	beq.n	800fc8e <osSemaphoreWait+0x62>
      return osErrorOS;
 800fc8a:	23ff      	movs	r3, #255	; 0xff
 800fc8c:	e015      	b.n	800fcba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d011      	beq.n	800fcb8 <osSemaphoreWait+0x8c>
 800fc94:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <osSemaphoreWait+0x98>)
 800fc96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc9a:	601a      	str	r2, [r3, #0]
 800fc9c:	f3bf 8f4f 	dsb	sy
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	e008      	b.n	800fcb8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fca6:	68f9      	ldr	r1, [r7, #12]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f001 f809 	bl	8010cc0 <xQueueSemaphoreTake>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d001      	beq.n	800fcb8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fcb4:	23ff      	movs	r3, #255	; 0xff
 800fcb6:	e000      	b.n	800fcba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fcb8:	2300      	movs	r3, #0
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	e000ed04 	.word	0xe000ed04

0800fcc8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fcd8:	f7ff fe44 	bl	800f964 <inHandlerMode>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d016      	beq.n	800fd10 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fce2:	f107 0308 	add.w	r3, r7, #8
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fe7c 	bl	80109e6 <xQueueGiveFromISR>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d001      	beq.n	800fcf8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fcf4:	23ff      	movs	r3, #255	; 0xff
 800fcf6:	e017      	b.n	800fd28 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d013      	beq.n	800fd26 <osSemaphoreRelease+0x5e>
 800fcfe:	4b0c      	ldr	r3, [pc, #48]	; (800fd30 <osSemaphoreRelease+0x68>)
 800fd00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd04:	601a      	str	r2, [r3, #0]
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	f3bf 8f6f 	isb	sy
 800fd0e:	e00a      	b.n	800fd26 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fd10:	2300      	movs	r3, #0
 800fd12:	2200      	movs	r2, #0
 800fd14:	2100      	movs	r1, #0
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fccc 	bl	80106b4 <xQueueGenericSend>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d001      	beq.n	800fd26 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fd22:	23ff      	movs	r3, #255	; 0xff
 800fd24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fd26:	68fb      	ldr	r3, [r7, #12]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	e000ed04 	.word	0xe000ed04

0800fd34 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fd3c:	f7ff fe12 	bl	800f964 <inHandlerMode>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800fd46:	2382      	movs	r3, #130	; 0x82
 800fd48:	e003      	b.n	800fd52 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f001 f944 	bl	8010fd8 <vQueueDelete>

  return osOK; 
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fd5a:	b590      	push	{r4, r7, lr}
 800fd5c:	b085      	sub	sp, #20
 800fd5e:	af02      	add	r7, sp, #8
 800fd60:	6078      	str	r0, [r7, #4]
 800fd62:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	689b      	ldr	r3, [r3, #8]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d011      	beq.n	800fd90 <osMessageCreate+0x36>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00d      	beq.n	800fd90 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6818      	ldr	r0, [r3, #0]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6859      	ldr	r1, [r3, #4]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	689a      	ldr	r2, [r3, #8]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	2400      	movs	r4, #0
 800fd86:	9400      	str	r4, [sp, #0]
 800fd88:	f000 fb76 	bl	8010478 <xQueueGenericCreateStatic>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	e008      	b.n	800fda2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6818      	ldr	r0, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	f000 fbe4 	bl	8010568 <xQueueGenericCreate>
 800fda0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	370c      	adds	r7, #12
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd90      	pop	{r4, r7, pc}
	...

0800fdac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d101      	bne.n	800fdca <osMessagePut+0x1e>
    ticks = 1;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fdca:	f7ff fdcb 	bl	800f964 <inHandlerMode>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d018      	beq.n	800fe06 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fdd4:	f107 0210 	add.w	r2, r7, #16
 800fdd8:	f107 0108 	add.w	r1, r7, #8
 800fddc:	2300      	movs	r3, #0
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f000 fd66 	bl	80108b0 <xQueueGenericSendFromISR>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d001      	beq.n	800fdee <osMessagePut+0x42>
      return osErrorOS;
 800fdea:	23ff      	movs	r3, #255	; 0xff
 800fdec:	e018      	b.n	800fe20 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d014      	beq.n	800fe1e <osMessagePut+0x72>
 800fdf4:	4b0c      	ldr	r3, [pc, #48]	; (800fe28 <osMessagePut+0x7c>)
 800fdf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdfa:	601a      	str	r2, [r3, #0]
 800fdfc:	f3bf 8f4f 	dsb	sy
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	e00b      	b.n	800fe1e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fe06:	f107 0108 	add.w	r1, r7, #8
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	697a      	ldr	r2, [r7, #20]
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f000 fc50 	bl	80106b4 <xQueueGenericSend>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d001      	beq.n	800fe1e <osMessagePut+0x72>
      return osErrorOS;
 800fe1a:	23ff      	movs	r3, #255	; 0xff
 800fe1c:	e000      	b.n	800fe20 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fe1e:	2300      	movs	r3, #0
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3718      	adds	r7, #24
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	e000ed04 	.word	0xe000ed04

0800fe2c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b08b      	sub	sp, #44	; 0x2c
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d10a      	bne.n	800fe5c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fe46:	2380      	movs	r3, #128	; 0x80
 800fe48:	617b      	str	r3, [r7, #20]
    return event;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	461c      	mov	r4, r3
 800fe4e:	f107 0314 	add.w	r3, r7, #20
 800fe52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe5a:	e054      	b.n	800ff06 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6a:	d103      	bne.n	800fe74 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fe6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe70:	627b      	str	r3, [r7, #36]	; 0x24
 800fe72:	e009      	b.n	800fe88 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d006      	beq.n	800fe88 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fe7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d101      	bne.n	800fe88 <osMessageGet+0x5c>
      ticks = 1;
 800fe84:	2301      	movs	r3, #1
 800fe86:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fe88:	f7ff fd6c 	bl	800f964 <inHandlerMode>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d01c      	beq.n	800fecc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fe92:	f107 0220 	add.w	r2, r7, #32
 800fe96:	f107 0314 	add.w	r3, r7, #20
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	68b8      	ldr	r0, [r7, #8]
 800fea0:	f001 f81a 	bl	8010ed8 <xQueueReceiveFromISR>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d102      	bne.n	800feb0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800feaa:	2310      	movs	r3, #16
 800feac:	617b      	str	r3, [r7, #20]
 800feae:	e001      	b.n	800feb4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800feb0:	2300      	movs	r3, #0
 800feb2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d01d      	beq.n	800fef6 <osMessageGet+0xca>
 800feba:	4b15      	ldr	r3, [pc, #84]	; (800ff10 <osMessageGet+0xe4>)
 800febc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	e014      	b.n	800fef6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fecc:	f107 0314 	add.w	r3, r7, #20
 800fed0:	3304      	adds	r3, #4
 800fed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fed4:	4619      	mov	r1, r3
 800fed6:	68b8      	ldr	r0, [r7, #8]
 800fed8:	f000 fe12 	bl	8010b00 <xQueueReceive>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d102      	bne.n	800fee8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fee2:	2310      	movs	r3, #16
 800fee4:	617b      	str	r3, [r7, #20]
 800fee6:	e006      	b.n	800fef6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	2b00      	cmp	r3, #0
 800feec:	d101      	bne.n	800fef2 <osMessageGet+0xc6>
 800feee:	2300      	movs	r3, #0
 800fef0:	e000      	b.n	800fef4 <osMessageGet+0xc8>
 800fef2:	2340      	movs	r3, #64	; 0x40
 800fef4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	461c      	mov	r4, r3
 800fefa:	f107 0314 	add.w	r3, r7, #20
 800fefe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	372c      	adds	r7, #44	; 0x2c
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd90      	pop	{r4, r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	e000ed04 	.word	0xe000ed04

0800ff14 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ff1a:	201c      	movs	r0, #28
 800ff1c:	f002 fce4 	bl	80128e8 <pvPortMalloc>
 800ff20:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00a      	beq.n	800ff3e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	3304      	adds	r3, #4
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 f983 	bl	801023e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ff3e:	687b      	ldr	r3, [r7, #4]
	}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b090      	sub	sp, #64	; 0x40
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d10a      	bne.n	800ff7e <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ff68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6c:	f383 8811 	msr	BASEPRI, r3
 800ff70:	f3bf 8f6f 	isb	sy
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ff7a:	bf00      	nop
 800ff7c:	e7fe      	b.n	800ff7c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00a      	beq.n	800ff9e <xEventGroupWaitBits+0x56>
	__asm volatile
 800ff88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	61fb      	str	r3, [r7, #28]
}
 800ff9a:	bf00      	nop
 800ff9c:	e7fe      	b.n	800ff9c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d10a      	bne.n	800ffba <xEventGroupWaitBits+0x72>
	__asm volatile
 800ffa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa8:	f383 8811 	msr	BASEPRI, r3
 800ffac:	f3bf 8f6f 	isb	sy
 800ffb0:	f3bf 8f4f 	dsb	sy
 800ffb4:	61bb      	str	r3, [r7, #24]
}
 800ffb6:	bf00      	nop
 800ffb8:	e7fe      	b.n	800ffb8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ffba:	f002 f809 	bl	8011fd0 <xTaskGetSchedulerState>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d102      	bne.n	800ffca <xEventGroupWaitBits+0x82>
 800ffc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d101      	bne.n	800ffce <xEventGroupWaitBits+0x86>
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e000      	b.n	800ffd0 <xEventGroupWaitBits+0x88>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d10a      	bne.n	800ffea <xEventGroupWaitBits+0xa2>
	__asm volatile
 800ffd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd8:	f383 8811 	msr	BASEPRI, r3
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	f3bf 8f4f 	dsb	sy
 800ffe4:	617b      	str	r3, [r7, #20]
}
 800ffe6:	bf00      	nop
 800ffe8:	e7fe      	b.n	800ffe8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800ffea:	f001 fb93 	bl	8011714 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800ffee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800fff4:	683a      	ldr	r2, [r7, #0]
 800fff6:	68b9      	ldr	r1, [r7, #8]
 800fff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fffa:	f000 f8fe 	bl	80101fa <prvTestWaitCondition>
 800fffe:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8010000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00e      	beq.n	8010024 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8010006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010008:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801000a:	2300      	movs	r3, #0
 801000c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d028      	beq.n	8010066 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	43db      	mvns	r3, r3
 801001c:	401a      	ands	r2, r3
 801001e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	e020      	b.n	8010066 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010026:	2b00      	cmp	r3, #0
 8010028:	d104      	bne.n	8010034 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801002a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801002e:	2301      	movs	r3, #1
 8010030:	633b      	str	r3, [r7, #48]	; 0x30
 8010032:	e018      	b.n	8010066 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d003      	beq.n	8010042 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801003a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010040:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d003      	beq.n	8010050 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801004e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8010050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010052:	1d18      	adds	r0, r3, #4
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010058:	4313      	orrs	r3, r2
 801005a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801005c:	4619      	mov	r1, r3
 801005e:	f001 fd5d 	bl	8011b1c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8010062:	2300      	movs	r3, #0
 8010064:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8010066:	f001 fb63 	bl	8011730 <xTaskResumeAll>
 801006a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801006c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801006e:	2b00      	cmp	r3, #0
 8010070:	d031      	beq.n	80100d6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8010072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	d107      	bne.n	8010088 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8010078:	4b19      	ldr	r3, [pc, #100]	; (80100e0 <xEventGroupWaitBits+0x198>)
 801007a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8010088:	f002 f94a 	bl	8012320 <uxTaskResetEventItemValue>
 801008c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801008e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010094:	2b00      	cmp	r3, #0
 8010096:	d11a      	bne.n	80100ce <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8010098:	f002 fb04 	bl	80126a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801009c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80100a2:	683a      	ldr	r2, [r7, #0]
 80100a4:	68b9      	ldr	r1, [r7, #8]
 80100a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80100a8:	f000 f8a7 	bl	80101fa <prvTestWaitCondition>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d009      	beq.n	80100c6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d006      	beq.n	80100c6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80100b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	43db      	mvns	r3, r3
 80100c0:	401a      	ands	r2, r3
 80100c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80100c6:	2301      	movs	r3, #1
 80100c8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80100ca:	f002 fb1b 	bl	8012704 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80100ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80100d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80100d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3740      	adds	r7, #64	; 0x40
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	e000ed04 	.word	0xe000ed04

080100e4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b08e      	sub	sp, #56	; 0x38
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80100ee:	2300      	movs	r3, #0
 80100f0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80100f6:	2300      	movs	r3, #0
 80100f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10a      	bne.n	8010116 <xEventGroupSetBits+0x32>
	__asm volatile
 8010100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010104:	f383 8811 	msr	BASEPRI, r3
 8010108:	f3bf 8f6f 	isb	sy
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	613b      	str	r3, [r7, #16]
}
 8010112:	bf00      	nop
 8010114:	e7fe      	b.n	8010114 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00a      	beq.n	8010136 <xEventGroupSetBits+0x52>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	60fb      	str	r3, [r7, #12]
}
 8010132:	bf00      	nop
 8010134:	e7fe      	b.n	8010134 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010138:	3304      	adds	r3, #4
 801013a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	3308      	adds	r3, #8
 8010140:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010142:	f001 fae7 	bl	8011714 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	431a      	orrs	r2, r3
 8010154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010156:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010158:	e03c      	b.n	80101d4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801015a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010166:	2300      	movs	r3, #0
 8010168:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010170:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010178:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010180:	2b00      	cmp	r3, #0
 8010182:	d108      	bne.n	8010196 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	4013      	ands	r3, r2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00b      	beq.n	80101a8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010190:	2301      	movs	r3, #1
 8010192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010194:	e008      	b.n	80101a8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8010196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	4013      	ands	r3, r2
 801019e:	69ba      	ldr	r2, [r7, #24]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d101      	bne.n	80101a8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80101a4:	2301      	movs	r3, #1
 80101a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d010      	beq.n	80101d0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d003      	beq.n	80101c0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80101b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	4313      	orrs	r3, r2
 80101be:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80101c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80101c8:	4619      	mov	r1, r3
 80101ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80101cc:	f001 fd44 	bl	8011c58 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80101d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101d6:	6a3b      	ldr	r3, [r7, #32]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d1be      	bne.n	801015a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80101dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	43db      	mvns	r3, r3
 80101e4:	401a      	ands	r2, r3
 80101e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80101ea:	f001 faa1 	bl	8011730 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80101ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f0:	681b      	ldr	r3, [r3, #0]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3738      	adds	r7, #56	; 0x38
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80101fa:	b480      	push	{r7}
 80101fc:	b087      	sub	sp, #28
 80101fe:	af00      	add	r7, sp, #0
 8010200:	60f8      	str	r0, [r7, #12]
 8010202:	60b9      	str	r1, [r7, #8]
 8010204:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010206:	2300      	movs	r3, #0
 8010208:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d107      	bne.n	8010220 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	4013      	ands	r3, r2
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00a      	beq.n	8010230 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801021a:	2301      	movs	r3, #1
 801021c:	617b      	str	r3, [r7, #20]
 801021e:	e007      	b.n	8010230 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	4013      	ands	r3, r2
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	429a      	cmp	r2, r3
 801022a:	d101      	bne.n	8010230 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801022c:	2301      	movs	r3, #1
 801022e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010230:	697b      	ldr	r3, [r7, #20]
}
 8010232:	4618      	mov	r0, r3
 8010234:	371c      	adds	r7, #28
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr

0801023e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801023e:	b480      	push	{r7}
 8010240:	b083      	sub	sp, #12
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f103 0208 	add.w	r2, r3, #8
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f04f 32ff 	mov.w	r2, #4294967295
 8010256:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f103 0208 	add.w	r2, r3, #8
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f103 0208 	add.w	r2, r3, #8
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010272:	bf00      	nop
 8010274:	370c      	adds	r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr

0801027e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801027e:	b480      	push	{r7}
 8010280:	b083      	sub	sp, #12
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801028c:	bf00      	nop
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010298:	b480      	push	{r7}
 801029a:	b085      	sub	sp, #20
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	689a      	ldr	r2, [r3, #8]
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	683a      	ldr	r2, [r7, #0]
 80102c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	1c5a      	adds	r2, r3, #1
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	601a      	str	r2, [r3, #0]
}
 80102d4:	bf00      	nop
 80102d6:	3714      	adds	r7, #20
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f6:	d103      	bne.n	8010300 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	691b      	ldr	r3, [r3, #16]
 80102fc:	60fb      	str	r3, [r7, #12]
 80102fe:	e00c      	b.n	801031a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	3308      	adds	r3, #8
 8010304:	60fb      	str	r3, [r7, #12]
 8010306:	e002      	b.n	801030e <vListInsert+0x2e>
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	60fb      	str	r3, [r7, #12]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	429a      	cmp	r2, r3
 8010318:	d2f6      	bcs.n	8010308 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	685a      	ldr	r2, [r3, #4]
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	683a      	ldr	r2, [r7, #0]
 8010328:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	683a      	ldr	r2, [r7, #0]
 8010334:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	601a      	str	r2, [r3, #0]
}
 8010346:	bf00      	nop
 8010348:	3714      	adds	r7, #20
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010352:	b480      	push	{r7}
 8010354:	b085      	sub	sp, #20
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	6892      	ldr	r2, [r2, #8]
 8010368:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	6852      	ldr	r2, [r2, #4]
 8010372:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	429a      	cmp	r2, r3
 801037c:	d103      	bne.n	8010386 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	689a      	ldr	r2, [r3, #8]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	1e5a      	subs	r2, r3, #1
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
	...

080103a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d10a      	bne.n	80103d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80103bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c0:	f383 8811 	msr	BASEPRI, r3
 80103c4:	f3bf 8f6f 	isb	sy
 80103c8:	f3bf 8f4f 	dsb	sy
 80103cc:	60bb      	str	r3, [r7, #8]
}
 80103ce:	bf00      	nop
 80103d0:	e7fe      	b.n	80103d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80103d2:	f002 f967 	bl	80126a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103de:	68f9      	ldr	r1, [r7, #12]
 80103e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103e2:	fb01 f303 	mul.w	r3, r1, r3
 80103e6:	441a      	add	r2, r3
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2200      	movs	r2, #0
 80103f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010402:	3b01      	subs	r3, #1
 8010404:	68f9      	ldr	r1, [r7, #12]
 8010406:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010408:	fb01 f303 	mul.w	r3, r1, r3
 801040c:	441a      	add	r2, r3
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	22ff      	movs	r2, #255	; 0xff
 8010416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	22ff      	movs	r2, #255	; 0xff
 801041e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d114      	bne.n	8010452 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	691b      	ldr	r3, [r3, #16]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d01a      	beq.n	8010466 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	3310      	adds	r3, #16
 8010434:	4618      	mov	r0, r3
 8010436:	f001 fbad 	bl	8011b94 <xTaskRemoveFromEventList>
 801043a:	4603      	mov	r3, r0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d012      	beq.n	8010466 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010440:	4b0c      	ldr	r3, [pc, #48]	; (8010474 <xQueueGenericReset+0xcc>)
 8010442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	f3bf 8f6f 	isb	sy
 8010450:	e009      	b.n	8010466 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	3310      	adds	r3, #16
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff fef1 	bl	801023e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	3324      	adds	r3, #36	; 0x24
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff feec 	bl	801023e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010466:	f002 f94d 	bl	8012704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801046a:	2301      	movs	r3, #1
}
 801046c:	4618      	mov	r0, r3
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	e000ed04 	.word	0xe000ed04

08010478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010478:	b580      	push	{r7, lr}
 801047a:	b08e      	sub	sp, #56	; 0x38
 801047c:	af02      	add	r7, sp, #8
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
 8010484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d10a      	bne.n	80104a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801048c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010490:	f383 8811 	msr	BASEPRI, r3
 8010494:	f3bf 8f6f 	isb	sy
 8010498:	f3bf 8f4f 	dsb	sy
 801049c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801049e:	bf00      	nop
 80104a0:	e7fe      	b.n	80104a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d10a      	bne.n	80104be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80104a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ac:	f383 8811 	msr	BASEPRI, r3
 80104b0:	f3bf 8f6f 	isb	sy
 80104b4:	f3bf 8f4f 	dsb	sy
 80104b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104ba:	bf00      	nop
 80104bc:	e7fe      	b.n	80104bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d002      	beq.n	80104ca <xQueueGenericCreateStatic+0x52>
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <xQueueGenericCreateStatic+0x56>
 80104ca:	2301      	movs	r3, #1
 80104cc:	e000      	b.n	80104d0 <xQueueGenericCreateStatic+0x58>
 80104ce:	2300      	movs	r3, #0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d10a      	bne.n	80104ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80104d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d8:	f383 8811 	msr	BASEPRI, r3
 80104dc:	f3bf 8f6f 	isb	sy
 80104e0:	f3bf 8f4f 	dsb	sy
 80104e4:	623b      	str	r3, [r7, #32]
}
 80104e6:	bf00      	nop
 80104e8:	e7fe      	b.n	80104e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d102      	bne.n	80104f6 <xQueueGenericCreateStatic+0x7e>
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d101      	bne.n	80104fa <xQueueGenericCreateStatic+0x82>
 80104f6:	2301      	movs	r3, #1
 80104f8:	e000      	b.n	80104fc <xQueueGenericCreateStatic+0x84>
 80104fa:	2300      	movs	r3, #0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d10a      	bne.n	8010516 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	61fb      	str	r3, [r7, #28]
}
 8010512:	bf00      	nop
 8010514:	e7fe      	b.n	8010514 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010516:	2348      	movs	r3, #72	; 0x48
 8010518:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	2b48      	cmp	r3, #72	; 0x48
 801051e:	d00a      	beq.n	8010536 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	f383 8811 	msr	BASEPRI, r3
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	61bb      	str	r3, [r7, #24]
}
 8010532:	bf00      	nop
 8010534:	e7fe      	b.n	8010534 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010536:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00d      	beq.n	801055e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010544:	2201      	movs	r2, #1
 8010546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801054a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010550:	9300      	str	r3, [sp, #0]
 8010552:	4613      	mov	r3, r2
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	68b9      	ldr	r1, [r7, #8]
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f000 f83f 	bl	80105dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010560:	4618      	mov	r0, r3
 8010562:	3730      	adds	r7, #48	; 0x30
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010568:	b580      	push	{r7, lr}
 801056a:	b08a      	sub	sp, #40	; 0x28
 801056c:	af02      	add	r7, sp, #8
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	4613      	mov	r3, r2
 8010574:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10a      	bne.n	8010592 <xQueueGenericCreate+0x2a>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	613b      	str	r3, [r7, #16]
}
 801058e:	bf00      	nop
 8010590:	e7fe      	b.n	8010590 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	fb02 f303 	mul.w	r3, r2, r3
 801059a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	3348      	adds	r3, #72	; 0x48
 80105a0:	4618      	mov	r0, r3
 80105a2:	f002 f9a1 	bl	80128e8 <pvPortMalloc>
 80105a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d011      	beq.n	80105d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	3348      	adds	r3, #72	; 0x48
 80105b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80105c0:	79fa      	ldrb	r2, [r7, #7]
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	4613      	mov	r3, r2
 80105c8:	697a      	ldr	r2, [r7, #20]
 80105ca:	68b9      	ldr	r1, [r7, #8]
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f000 f805 	bl	80105dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80105d2:	69bb      	ldr	r3, [r7, #24]
	}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3720      	adds	r7, #32
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
 80105e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d103      	bne.n	80105f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	69ba      	ldr	r2, [r7, #24]
 80105f4:	601a      	str	r2, [r3, #0]
 80105f6:	e002      	b.n	80105fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	68ba      	ldr	r2, [r7, #8]
 8010608:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801060a:	2101      	movs	r1, #1
 801060c:	69b8      	ldr	r0, [r7, #24]
 801060e:	f7ff fecb 	bl	80103a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010612:	bf00      	nop
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801061a:	b580      	push	{r7, lr}
 801061c:	b082      	sub	sp, #8
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d00e      	beq.n	8010646 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2200      	movs	r2, #0
 8010632:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2200      	movs	r2, #0
 8010638:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801063a:	2300      	movs	r3, #0
 801063c:	2200      	movs	r2, #0
 801063e:	2100      	movs	r1, #0
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 f837 	bl	80106b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010646:	bf00      	nop
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801064e:	b580      	push	{r7, lr}
 8010650:	b086      	sub	sp, #24
 8010652:	af00      	add	r7, sp, #0
 8010654:	4603      	mov	r3, r0
 8010656:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010658:	2301      	movs	r3, #1
 801065a:	617b      	str	r3, [r7, #20]
 801065c:	2300      	movs	r3, #0
 801065e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	461a      	mov	r2, r3
 8010664:	6939      	ldr	r1, [r7, #16]
 8010666:	6978      	ldr	r0, [r7, #20]
 8010668:	f7ff ff7e 	bl	8010568 <xQueueGenericCreate>
 801066c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f7ff ffd3 	bl	801061a <prvInitialiseMutex>

		return xNewQueue;
 8010674:	68fb      	ldr	r3, [r7, #12]
	}
 8010676:	4618      	mov	r0, r3
 8010678:	3718      	adds	r7, #24
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801067e:	b580      	push	{r7, lr}
 8010680:	b088      	sub	sp, #32
 8010682:	af02      	add	r7, sp, #8
 8010684:	4603      	mov	r3, r0
 8010686:	6039      	str	r1, [r7, #0]
 8010688:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801068a:	2301      	movs	r3, #1
 801068c:	617b      	str	r3, [r7, #20]
 801068e:	2300      	movs	r3, #0
 8010690:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	2200      	movs	r2, #0
 801069a:	6939      	ldr	r1, [r7, #16]
 801069c:	6978      	ldr	r0, [r7, #20]
 801069e:	f7ff feeb 	bl	8010478 <xQueueGenericCreateStatic>
 80106a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f7ff ffb8 	bl	801061a <prvInitialiseMutex>

		return xNewQueue;
 80106aa:	68fb      	ldr	r3, [r7, #12]
	}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3718      	adds	r7, #24
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b08e      	sub	sp, #56	; 0x38
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80106c2:	2300      	movs	r3, #0
 80106c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80106ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d10a      	bne.n	80106e6 <xQueueGenericSend+0x32>
	__asm volatile
 80106d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d4:	f383 8811 	msr	BASEPRI, r3
 80106d8:	f3bf 8f6f 	isb	sy
 80106dc:	f3bf 8f4f 	dsb	sy
 80106e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80106e2:	bf00      	nop
 80106e4:	e7fe      	b.n	80106e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d103      	bne.n	80106f4 <xQueueGenericSend+0x40>
 80106ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d101      	bne.n	80106f8 <xQueueGenericSend+0x44>
 80106f4:	2301      	movs	r3, #1
 80106f6:	e000      	b.n	80106fa <xQueueGenericSend+0x46>
 80106f8:	2300      	movs	r3, #0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d10a      	bne.n	8010714 <xQueueGenericSend+0x60>
	__asm volatile
 80106fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010702:	f383 8811 	msr	BASEPRI, r3
 8010706:	f3bf 8f6f 	isb	sy
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010710:	bf00      	nop
 8010712:	e7fe      	b.n	8010712 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	2b02      	cmp	r3, #2
 8010718:	d103      	bne.n	8010722 <xQueueGenericSend+0x6e>
 801071a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071e:	2b01      	cmp	r3, #1
 8010720:	d101      	bne.n	8010726 <xQueueGenericSend+0x72>
 8010722:	2301      	movs	r3, #1
 8010724:	e000      	b.n	8010728 <xQueueGenericSend+0x74>
 8010726:	2300      	movs	r3, #0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d10a      	bne.n	8010742 <xQueueGenericSend+0x8e>
	__asm volatile
 801072c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010730:	f383 8811 	msr	BASEPRI, r3
 8010734:	f3bf 8f6f 	isb	sy
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	623b      	str	r3, [r7, #32]
}
 801073e:	bf00      	nop
 8010740:	e7fe      	b.n	8010740 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010742:	f001 fc45 	bl	8011fd0 <xTaskGetSchedulerState>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d102      	bne.n	8010752 <xQueueGenericSend+0x9e>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d101      	bne.n	8010756 <xQueueGenericSend+0xa2>
 8010752:	2301      	movs	r3, #1
 8010754:	e000      	b.n	8010758 <xQueueGenericSend+0xa4>
 8010756:	2300      	movs	r3, #0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10a      	bne.n	8010772 <xQueueGenericSend+0xbe>
	__asm volatile
 801075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010760:	f383 8811 	msr	BASEPRI, r3
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	61fb      	str	r3, [r7, #28]
}
 801076e:	bf00      	nop
 8010770:	e7fe      	b.n	8010770 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010772:	f001 ff97 	bl	80126a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801077e:	429a      	cmp	r2, r3
 8010780:	d302      	bcc.n	8010788 <xQueueGenericSend+0xd4>
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2b02      	cmp	r3, #2
 8010786:	d129      	bne.n	80107dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010788:	683a      	ldr	r2, [r7, #0]
 801078a:	68b9      	ldr	r1, [r7, #8]
 801078c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801078e:	f000 fc5e 	bl	801104e <prvCopyDataToQueue>
 8010792:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010798:	2b00      	cmp	r3, #0
 801079a:	d010      	beq.n	80107be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079e:	3324      	adds	r3, #36	; 0x24
 80107a0:	4618      	mov	r0, r3
 80107a2:	f001 f9f7 	bl	8011b94 <xTaskRemoveFromEventList>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d013      	beq.n	80107d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80107ac:	4b3f      	ldr	r3, [pc, #252]	; (80108ac <xQueueGenericSend+0x1f8>)
 80107ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107b2:	601a      	str	r2, [r3, #0]
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	f3bf 8f6f 	isb	sy
 80107bc:	e00a      	b.n	80107d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80107be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d007      	beq.n	80107d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80107c4:	4b39      	ldr	r3, [pc, #228]	; (80108ac <xQueueGenericSend+0x1f8>)
 80107c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ca:	601a      	str	r2, [r3, #0]
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80107d4:	f001 ff96 	bl	8012704 <vPortExitCritical>
				return pdPASS;
 80107d8:	2301      	movs	r3, #1
 80107da:	e063      	b.n	80108a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d103      	bne.n	80107ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80107e2:	f001 ff8f 	bl	8012704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80107e6:	2300      	movs	r3, #0
 80107e8:	e05c      	b.n	80108a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d106      	bne.n	80107fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80107f0:	f107 0314 	add.w	r3, r7, #20
 80107f4:	4618      	mov	r0, r3
 80107f6:	f001 fa91 	bl	8011d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80107fa:	2301      	movs	r3, #1
 80107fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80107fe:	f001 ff81 	bl	8012704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010802:	f000 ff87 	bl	8011714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010806:	f001 ff4d 	bl	80126a4 <vPortEnterCritical>
 801080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010810:	b25b      	sxtb	r3, r3
 8010812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010816:	d103      	bne.n	8010820 <xQueueGenericSend+0x16c>
 8010818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010826:	b25b      	sxtb	r3, r3
 8010828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082c:	d103      	bne.n	8010836 <xQueueGenericSend+0x182>
 801082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010830:	2200      	movs	r2, #0
 8010832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010836:	f001 ff65 	bl	8012704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801083a:	1d3a      	adds	r2, r7, #4
 801083c:	f107 0314 	add.w	r3, r7, #20
 8010840:	4611      	mov	r1, r2
 8010842:	4618      	mov	r0, r3
 8010844:	f001 fa80 	bl	8011d48 <xTaskCheckForTimeOut>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d124      	bne.n	8010898 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801084e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010850:	f000 fcf5 	bl	801123e <prvIsQueueFull>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d018      	beq.n	801088c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085c:	3310      	adds	r3, #16
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	4611      	mov	r1, r2
 8010862:	4618      	mov	r0, r3
 8010864:	f001 f936 	bl	8011ad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801086a:	f000 fc80 	bl	801116e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801086e:	f000 ff5f 	bl	8011730 <xTaskResumeAll>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	f47f af7c 	bne.w	8010772 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801087a:	4b0c      	ldr	r3, [pc, #48]	; (80108ac <xQueueGenericSend+0x1f8>)
 801087c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010880:	601a      	str	r2, [r3, #0]
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	f3bf 8f6f 	isb	sy
 801088a:	e772      	b.n	8010772 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801088c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801088e:	f000 fc6e 	bl	801116e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010892:	f000 ff4d 	bl	8011730 <xTaskResumeAll>
 8010896:	e76c      	b.n	8010772 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801089a:	f000 fc68 	bl	801116e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801089e:	f000 ff47 	bl	8011730 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80108a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3738      	adds	r7, #56	; 0x38
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	e000ed04 	.word	0xe000ed04

080108b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b090      	sub	sp, #64	; 0x40
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
 80108bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80108c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d10a      	bne.n	80108de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80108c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108cc:	f383 8811 	msr	BASEPRI, r3
 80108d0:	f3bf 8f6f 	isb	sy
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80108da:	bf00      	nop
 80108dc:	e7fe      	b.n	80108dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d103      	bne.n	80108ec <xQueueGenericSendFromISR+0x3c>
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d101      	bne.n	80108f0 <xQueueGenericSendFromISR+0x40>
 80108ec:	2301      	movs	r3, #1
 80108ee:	e000      	b.n	80108f2 <xQueueGenericSendFromISR+0x42>
 80108f0:	2300      	movs	r3, #0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d10a      	bne.n	801090c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80108f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108fa:	f383 8811 	msr	BASEPRI, r3
 80108fe:	f3bf 8f6f 	isb	sy
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010908:	bf00      	nop
 801090a:	e7fe      	b.n	801090a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	2b02      	cmp	r3, #2
 8010910:	d103      	bne.n	801091a <xQueueGenericSendFromISR+0x6a>
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010916:	2b01      	cmp	r3, #1
 8010918:	d101      	bne.n	801091e <xQueueGenericSendFromISR+0x6e>
 801091a:	2301      	movs	r3, #1
 801091c:	e000      	b.n	8010920 <xQueueGenericSendFromISR+0x70>
 801091e:	2300      	movs	r3, #0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d10a      	bne.n	801093a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	623b      	str	r3, [r7, #32]
}
 8010936:	bf00      	nop
 8010938:	e7fe      	b.n	8010938 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801093a:	f001 ff95 	bl	8012868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801093e:	f3ef 8211 	mrs	r2, BASEPRI
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	f383 8811 	msr	BASEPRI, r3
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	61fa      	str	r2, [r7, #28]
 8010954:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010956:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010958:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801095e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010962:	429a      	cmp	r2, r3
 8010964:	d302      	bcc.n	801096c <xQueueGenericSendFromISR+0xbc>
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	2b02      	cmp	r3, #2
 801096a:	d12f      	bne.n	80109cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801096c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801097a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	68b9      	ldr	r1, [r7, #8]
 8010980:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010982:	f000 fb64 	bl	801104e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010986:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801098a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801098e:	d112      	bne.n	80109b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010994:	2b00      	cmp	r3, #0
 8010996:	d016      	beq.n	80109c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099a:	3324      	adds	r3, #36	; 0x24
 801099c:	4618      	mov	r0, r3
 801099e:	f001 f8f9 	bl	8011b94 <xTaskRemoveFromEventList>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00e      	beq.n	80109c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d00b      	beq.n	80109c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	e007      	b.n	80109c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80109b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80109ba:	3301      	adds	r3, #1
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	b25a      	sxtb	r2, r3
 80109c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80109c6:	2301      	movs	r3, #1
 80109c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80109ca:	e001      	b.n	80109d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80109cc:	2300      	movs	r3, #0
 80109ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80109da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3740      	adds	r7, #64	; 0x40
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b08e      	sub	sp, #56	; 0x38
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
 80109ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d10a      	bne.n	8010a10 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	623b      	str	r3, [r7, #32]
}
 8010a0c:	bf00      	nop
 8010a0e:	e7fe      	b.n	8010a0e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d00a      	beq.n	8010a2e <xQueueGiveFromISR+0x48>
	__asm volatile
 8010a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1c:	f383 8811 	msr	BASEPRI, r3
 8010a20:	f3bf 8f6f 	isb	sy
 8010a24:	f3bf 8f4f 	dsb	sy
 8010a28:	61fb      	str	r3, [r7, #28]
}
 8010a2a:	bf00      	nop
 8010a2c:	e7fe      	b.n	8010a2c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d103      	bne.n	8010a3e <xQueueGiveFromISR+0x58>
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d101      	bne.n	8010a42 <xQueueGiveFromISR+0x5c>
 8010a3e:	2301      	movs	r3, #1
 8010a40:	e000      	b.n	8010a44 <xQueueGiveFromISR+0x5e>
 8010a42:	2300      	movs	r3, #0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d10a      	bne.n	8010a5e <xQueueGiveFromISR+0x78>
	__asm volatile
 8010a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a4c:	f383 8811 	msr	BASEPRI, r3
 8010a50:	f3bf 8f6f 	isb	sy
 8010a54:	f3bf 8f4f 	dsb	sy
 8010a58:	61bb      	str	r3, [r7, #24]
}
 8010a5a:	bf00      	nop
 8010a5c:	e7fe      	b.n	8010a5c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a5e:	f001 ff03 	bl	8012868 <vPortValidateInterruptPriority>
	__asm volatile
 8010a62:	f3ef 8211 	mrs	r2, BASEPRI
 8010a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	617a      	str	r2, [r7, #20]
 8010a78:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010a7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d22b      	bcs.n	8010ae6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9a:	1c5a      	adds	r2, r3, #1
 8010a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010aa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa8:	d112      	bne.n	8010ad0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d016      	beq.n	8010ae0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab4:	3324      	adds	r3, #36	; 0x24
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f001 f86c 	bl	8011b94 <xTaskRemoveFromEventList>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00e      	beq.n	8010ae0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00b      	beq.n	8010ae0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	2201      	movs	r2, #1
 8010acc:	601a      	str	r2, [r3, #0]
 8010ace:	e007      	b.n	8010ae0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	b25a      	sxtb	r2, r3
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8010ae4:	e001      	b.n	8010aea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8010aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f383 8811 	msr	BASEPRI, r3
}
 8010af4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3738      	adds	r7, #56	; 0x38
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b08c      	sub	sp, #48	; 0x30
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d10a      	bne.n	8010b30 <xQueueReceive+0x30>
	__asm volatile
 8010b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b1e:	f383 8811 	msr	BASEPRI, r3
 8010b22:	f3bf 8f6f 	isb	sy
 8010b26:	f3bf 8f4f 	dsb	sy
 8010b2a:	623b      	str	r3, [r7, #32]
}
 8010b2c:	bf00      	nop
 8010b2e:	e7fe      	b.n	8010b2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d103      	bne.n	8010b3e <xQueueReceive+0x3e>
 8010b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d101      	bne.n	8010b42 <xQueueReceive+0x42>
 8010b3e:	2301      	movs	r3, #1
 8010b40:	e000      	b.n	8010b44 <xQueueReceive+0x44>
 8010b42:	2300      	movs	r3, #0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10a      	bne.n	8010b5e <xQueueReceive+0x5e>
	__asm volatile
 8010b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	61fb      	str	r3, [r7, #28]
}
 8010b5a:	bf00      	nop
 8010b5c:	e7fe      	b.n	8010b5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b5e:	f001 fa37 	bl	8011fd0 <xTaskGetSchedulerState>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d102      	bne.n	8010b6e <xQueueReceive+0x6e>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d101      	bne.n	8010b72 <xQueueReceive+0x72>
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e000      	b.n	8010b74 <xQueueReceive+0x74>
 8010b72:	2300      	movs	r3, #0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d10a      	bne.n	8010b8e <xQueueReceive+0x8e>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	61bb      	str	r3, [r7, #24]
}
 8010b8a:	bf00      	nop
 8010b8c:	e7fe      	b.n	8010b8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b8e:	f001 fd89 	bl	80126a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d01f      	beq.n	8010bde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b9e:	68b9      	ldr	r1, [r7, #8]
 8010ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ba2:	f000 fabe 	bl	8011122 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	1e5a      	subs	r2, r3, #1
 8010baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb0:	691b      	ldr	r3, [r3, #16]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00f      	beq.n	8010bd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb8:	3310      	adds	r3, #16
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 ffea 	bl	8011b94 <xTaskRemoveFromEventList>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d007      	beq.n	8010bd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010bc6:	4b3d      	ldr	r3, [pc, #244]	; (8010cbc <xQueueReceive+0x1bc>)
 8010bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bcc:	601a      	str	r2, [r3, #0]
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010bd6:	f001 fd95 	bl	8012704 <vPortExitCritical>
				return pdPASS;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e069      	b.n	8010cb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d103      	bne.n	8010bec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010be4:	f001 fd8e 	bl	8012704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010be8:	2300      	movs	r3, #0
 8010bea:	e062      	b.n	8010cb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d106      	bne.n	8010c00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010bf2:	f107 0310 	add.w	r3, r7, #16
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f001 f890 	bl	8011d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c00:	f001 fd80 	bl	8012704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c04:	f000 fd86 	bl	8011714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c08:	f001 fd4c 	bl	80126a4 <vPortEnterCritical>
 8010c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c12:	b25b      	sxtb	r3, r3
 8010c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c18:	d103      	bne.n	8010c22 <xQueueReceive+0x122>
 8010c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c28:	b25b      	sxtb	r3, r3
 8010c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2e:	d103      	bne.n	8010c38 <xQueueReceive+0x138>
 8010c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c38:	f001 fd64 	bl	8012704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c3c:	1d3a      	adds	r2, r7, #4
 8010c3e:	f107 0310 	add.w	r3, r7, #16
 8010c42:	4611      	mov	r1, r2
 8010c44:	4618      	mov	r0, r3
 8010c46:	f001 f87f 	bl	8011d48 <xTaskCheckForTimeOut>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d123      	bne.n	8010c98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c52:	f000 fade 	bl	8011212 <prvIsQueueEmpty>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d017      	beq.n	8010c8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5e:	3324      	adds	r3, #36	; 0x24
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	4611      	mov	r1, r2
 8010c64:	4618      	mov	r0, r3
 8010c66:	f000 ff35 	bl	8011ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c6c:	f000 fa7f 	bl	801116e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c70:	f000 fd5e 	bl	8011730 <xTaskResumeAll>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d189      	bne.n	8010b8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010c7a:	4b10      	ldr	r3, [pc, #64]	; (8010cbc <xQueueReceive+0x1bc>)
 8010c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c80:	601a      	str	r2, [r3, #0]
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	f3bf 8f6f 	isb	sy
 8010c8a:	e780      	b.n	8010b8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c8e:	f000 fa6e 	bl	801116e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c92:	f000 fd4d 	bl	8011730 <xTaskResumeAll>
 8010c96:	e77a      	b.n	8010b8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c9a:	f000 fa68 	bl	801116e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c9e:	f000 fd47 	bl	8011730 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ca4:	f000 fab5 	bl	8011212 <prvIsQueueEmpty>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f43f af6f 	beq.w	8010b8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010cb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3730      	adds	r7, #48	; 0x30
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	e000ed04 	.word	0xe000ed04

08010cc0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b08e      	sub	sp, #56	; 0x38
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d10a      	bne.n	8010cf2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce0:	f383 8811 	msr	BASEPRI, r3
 8010ce4:	f3bf 8f6f 	isb	sy
 8010ce8:	f3bf 8f4f 	dsb	sy
 8010cec:	623b      	str	r3, [r7, #32]
}
 8010cee:	bf00      	nop
 8010cf0:	e7fe      	b.n	8010cf0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d00a      	beq.n	8010d10 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfe:	f383 8811 	msr	BASEPRI, r3
 8010d02:	f3bf 8f6f 	isb	sy
 8010d06:	f3bf 8f4f 	dsb	sy
 8010d0a:	61fb      	str	r3, [r7, #28]
}
 8010d0c:	bf00      	nop
 8010d0e:	e7fe      	b.n	8010d0e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d10:	f001 f95e 	bl	8011fd0 <xTaskGetSchedulerState>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d102      	bne.n	8010d20 <xQueueSemaphoreTake+0x60>
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d101      	bne.n	8010d24 <xQueueSemaphoreTake+0x64>
 8010d20:	2301      	movs	r3, #1
 8010d22:	e000      	b.n	8010d26 <xQueueSemaphoreTake+0x66>
 8010d24:	2300      	movs	r3, #0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d10a      	bne.n	8010d40 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2e:	f383 8811 	msr	BASEPRI, r3
 8010d32:	f3bf 8f6f 	isb	sy
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	61bb      	str	r3, [r7, #24]
}
 8010d3c:	bf00      	nop
 8010d3e:	e7fe      	b.n	8010d3e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d40:	f001 fcb0 	bl	80126a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d024      	beq.n	8010d9a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d52:	1e5a      	subs	r2, r3, #1
 8010d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d104      	bne.n	8010d6a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010d60:	f001 faf6 	bl	8012350 <pvTaskIncrementMutexHeldCount>
 8010d64:	4602      	mov	r2, r0
 8010d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d68:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6c:	691b      	ldr	r3, [r3, #16]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00f      	beq.n	8010d92 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d74:	3310      	adds	r3, #16
 8010d76:	4618      	mov	r0, r3
 8010d78:	f000 ff0c 	bl	8011b94 <xTaskRemoveFromEventList>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d007      	beq.n	8010d92 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d82:	4b54      	ldr	r3, [pc, #336]	; (8010ed4 <xQueueSemaphoreTake+0x214>)
 8010d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d92:	f001 fcb7 	bl	8012704 <vPortExitCritical>
				return pdPASS;
 8010d96:	2301      	movs	r3, #1
 8010d98:	e097      	b.n	8010eca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d111      	bne.n	8010dc4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d00a      	beq.n	8010dbc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	617b      	str	r3, [r7, #20]
}
 8010db8:	bf00      	nop
 8010dba:	e7fe      	b.n	8010dba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010dbc:	f001 fca2 	bl	8012704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	e082      	b.n	8010eca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d106      	bne.n	8010dd8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dca:	f107 030c 	add.w	r3, r7, #12
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 ffa4 	bl	8011d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010dd8:	f001 fc94 	bl	8012704 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ddc:	f000 fc9a 	bl	8011714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010de0:	f001 fc60 	bl	80126a4 <vPortEnterCritical>
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dea:	b25b      	sxtb	r3, r3
 8010dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df0:	d103      	bne.n	8010dfa <xQueueSemaphoreTake+0x13a>
 8010df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df4:	2200      	movs	r2, #0
 8010df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e00:	b25b      	sxtb	r3, r3
 8010e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e06:	d103      	bne.n	8010e10 <xQueueSemaphoreTake+0x150>
 8010e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e10:	f001 fc78 	bl	8012704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e14:	463a      	mov	r2, r7
 8010e16:	f107 030c 	add.w	r3, r7, #12
 8010e1a:	4611      	mov	r1, r2
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f000 ff93 	bl	8011d48 <xTaskCheckForTimeOut>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d132      	bne.n	8010e8e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e2a:	f000 f9f2 	bl	8011212 <prvIsQueueEmpty>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d026      	beq.n	8010e82 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d109      	bne.n	8010e50 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010e3c:	f001 fc32 	bl	80126a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e42:	689b      	ldr	r3, [r3, #8]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f001 f8e1 	bl	801200c <xTaskPriorityInherit>
 8010e4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010e4c:	f001 fc5a 	bl	8012704 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e52:	3324      	adds	r3, #36	; 0x24
 8010e54:	683a      	ldr	r2, [r7, #0]
 8010e56:	4611      	mov	r1, r2
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f000 fe3b 	bl	8011ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e60:	f000 f985 	bl	801116e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e64:	f000 fc64 	bl	8011730 <xTaskResumeAll>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f47f af68 	bne.w	8010d40 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010e70:	4b18      	ldr	r3, [pc, #96]	; (8010ed4 <xQueueSemaphoreTake+0x214>)
 8010e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e76:	601a      	str	r2, [r3, #0]
 8010e78:	f3bf 8f4f 	dsb	sy
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	e75e      	b.n	8010d40 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e84:	f000 f973 	bl	801116e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e88:	f000 fc52 	bl	8011730 <xTaskResumeAll>
 8010e8c:	e758      	b.n	8010d40 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e90:	f000 f96d 	bl	801116e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e94:	f000 fc4c 	bl	8011730 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e9a:	f000 f9ba 	bl	8011212 <prvIsQueueEmpty>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f43f af4d 	beq.w	8010d40 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00d      	beq.n	8010ec8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010eac:	f001 fbfa 	bl	80126a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eb2:	f000 f8b4 	bl	801101e <prvGetDisinheritPriorityAfterTimeout>
 8010eb6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eba:	689b      	ldr	r3, [r3, #8]
 8010ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f001 f9a0 	bl	8012204 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ec4:	f001 fc1e 	bl	8012704 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010ec8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3738      	adds	r7, #56	; 0x38
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	e000ed04 	.word	0xe000ed04

08010ed8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b08e      	sub	sp, #56	; 0x38
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d10a      	bne.n	8010f04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef2:	f383 8811 	msr	BASEPRI, r3
 8010ef6:	f3bf 8f6f 	isb	sy
 8010efa:	f3bf 8f4f 	dsb	sy
 8010efe:	623b      	str	r3, [r7, #32]
}
 8010f00:	bf00      	nop
 8010f02:	e7fe      	b.n	8010f02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d103      	bne.n	8010f12 <xQueueReceiveFromISR+0x3a>
 8010f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d101      	bne.n	8010f16 <xQueueReceiveFromISR+0x3e>
 8010f12:	2301      	movs	r3, #1
 8010f14:	e000      	b.n	8010f18 <xQueueReceiveFromISR+0x40>
 8010f16:	2300      	movs	r3, #0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d10a      	bne.n	8010f32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f20:	f383 8811 	msr	BASEPRI, r3
 8010f24:	f3bf 8f6f 	isb	sy
 8010f28:	f3bf 8f4f 	dsb	sy
 8010f2c:	61fb      	str	r3, [r7, #28]
}
 8010f2e:	bf00      	nop
 8010f30:	e7fe      	b.n	8010f30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f32:	f001 fc99 	bl	8012868 <vPortValidateInterruptPriority>
	__asm volatile
 8010f36:	f3ef 8211 	mrs	r2, BASEPRI
 8010f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3e:	f383 8811 	msr	BASEPRI, r3
 8010f42:	f3bf 8f6f 	isb	sy
 8010f46:	f3bf 8f4f 	dsb	sy
 8010f4a:	61ba      	str	r2, [r7, #24]
 8010f4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d02f      	beq.n	8010fbe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f68:	68b9      	ldr	r1, [r7, #8]
 8010f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f6c:	f000 f8d9 	bl	8011122 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f72:	1e5a      	subs	r2, r3, #1
 8010f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f80:	d112      	bne.n	8010fa8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f84:	691b      	ldr	r3, [r3, #16]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d016      	beq.n	8010fb8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8c:	3310      	adds	r3, #16
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f000 fe00 	bl	8011b94 <xTaskRemoveFromEventList>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00e      	beq.n	8010fb8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d00b      	beq.n	8010fb8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	601a      	str	r2, [r3, #0]
 8010fa6:	e007      	b.n	8010fb8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fac:	3301      	adds	r3, #1
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	b25a      	sxtb	r2, r3
 8010fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	637b      	str	r3, [r7, #52]	; 0x34
 8010fbc:	e001      	b.n	8010fc2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8010fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	f383 8811 	msr	BASEPRI, r3
}
 8010fcc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3738      	adds	r7, #56	; 0x38
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d10a      	bne.n	8011000 <vQueueDelete+0x28>
	__asm volatile
 8010fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fee:	f383 8811 	msr	BASEPRI, r3
 8010ff2:	f3bf 8f6f 	isb	sy
 8010ff6:	f3bf 8f4f 	dsb	sy
 8010ffa:	60bb      	str	r3, [r7, #8]
}
 8010ffc:	bf00      	nop
 8010ffe:	e7fe      	b.n	8010ffe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f000 f935 	bl	8011270 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801100c:	2b00      	cmp	r3, #0
 801100e:	d102      	bne.n	8011016 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011010:	68f8      	ldr	r0, [r7, #12]
 8011012:	f001 fd35 	bl	8012a80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011016:	bf00      	nop
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801101e:	b480      	push	{r7}
 8011020:	b085      	sub	sp, #20
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102a:	2b00      	cmp	r3, #0
 801102c:	d006      	beq.n	801103c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f1c3 0307 	rsb	r3, r3, #7
 8011038:	60fb      	str	r3, [r7, #12]
 801103a:	e001      	b.n	8011040 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801103c:	2300      	movs	r3, #0
 801103e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011040:	68fb      	ldr	r3, [r7, #12]
	}
 8011042:	4618      	mov	r0, r3
 8011044:	3714      	adds	r7, #20
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr

0801104e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801104e:	b580      	push	{r7, lr}
 8011050:	b086      	sub	sp, #24
 8011052:	af00      	add	r7, sp, #0
 8011054:	60f8      	str	r0, [r7, #12]
 8011056:	60b9      	str	r1, [r7, #8]
 8011058:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801105a:	2300      	movs	r3, #0
 801105c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011062:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011068:	2b00      	cmp	r3, #0
 801106a:	d10d      	bne.n	8011088 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d14d      	bne.n	8011110 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	689b      	ldr	r3, [r3, #8]
 8011078:	4618      	mov	r0, r3
 801107a:	f001 f83d 	bl	80120f8 <xTaskPriorityDisinherit>
 801107e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2200      	movs	r2, #0
 8011084:	609a      	str	r2, [r3, #8]
 8011086:	e043      	b.n	8011110 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d119      	bne.n	80110c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	6858      	ldr	r0, [r3, #4]
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011096:	461a      	mov	r2, r3
 8011098:	68b9      	ldr	r1, [r7, #8]
 801109a:	f00e f96f 	bl	801f37c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	685a      	ldr	r2, [r3, #4]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a6:	441a      	add	r2, r3
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	685a      	ldr	r2, [r3, #4]
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d32b      	bcc.n	8011110 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	605a      	str	r2, [r3, #4]
 80110c0:	e026      	b.n	8011110 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	68d8      	ldr	r0, [r3, #12]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ca:	461a      	mov	r2, r3
 80110cc:	68b9      	ldr	r1, [r7, #8]
 80110ce:	f00e f955 	bl	801f37c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	68da      	ldr	r2, [r3, #12]
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110da:	425b      	negs	r3, r3
 80110dc:	441a      	add	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d207      	bcs.n	80110fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	689a      	ldr	r2, [r3, #8]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f6:	425b      	negs	r3, r3
 80110f8:	441a      	add	r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2b02      	cmp	r3, #2
 8011102:	d105      	bne.n	8011110 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d002      	beq.n	8011110 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	3b01      	subs	r3, #1
 801110e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	1c5a      	adds	r2, r3, #1
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011118:	697b      	ldr	r3, [r7, #20]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3718      	adds	r7, #24
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b082      	sub	sp, #8
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011130:	2b00      	cmp	r3, #0
 8011132:	d018      	beq.n	8011166 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68da      	ldr	r2, [r3, #12]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801113c:	441a      	add	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	68da      	ldr	r2, [r3, #12]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	689b      	ldr	r3, [r3, #8]
 801114a:	429a      	cmp	r2, r3
 801114c:	d303      	bcc.n	8011156 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	68d9      	ldr	r1, [r3, #12]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801115e:	461a      	mov	r2, r3
 8011160:	6838      	ldr	r0, [r7, #0]
 8011162:	f00e f90b 	bl	801f37c <memcpy>
	}
}
 8011166:	bf00      	nop
 8011168:	3708      	adds	r7, #8
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b084      	sub	sp, #16
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011176:	f001 fa95 	bl	80126a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011180:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011182:	e011      	b.n	80111a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011188:	2b00      	cmp	r3, #0
 801118a:	d012      	beq.n	80111b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	3324      	adds	r3, #36	; 0x24
 8011190:	4618      	mov	r0, r3
 8011192:	f000 fcff 	bl	8011b94 <xTaskRemoveFromEventList>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801119c:	f000 fe36 	bl	8011e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80111a0:	7bfb      	ldrb	r3, [r7, #15]
 80111a2:	3b01      	subs	r3, #1
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80111a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	dce9      	bgt.n	8011184 <prvUnlockQueue+0x16>
 80111b0:	e000      	b.n	80111b4 <prvUnlockQueue+0x46>
					break;
 80111b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	22ff      	movs	r2, #255	; 0xff
 80111b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80111bc:	f001 faa2 	bl	8012704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80111c0:	f001 fa70 	bl	80126a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111cc:	e011      	b.n	80111f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	691b      	ldr	r3, [r3, #16]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d012      	beq.n	80111fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3310      	adds	r3, #16
 80111da:	4618      	mov	r0, r3
 80111dc:	f000 fcda 	bl	8011b94 <xTaskRemoveFromEventList>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80111e6:	f000 fe11 	bl	8011e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80111ea:	7bbb      	ldrb	r3, [r7, #14]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	dce9      	bgt.n	80111ce <prvUnlockQueue+0x60>
 80111fa:	e000      	b.n	80111fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80111fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	22ff      	movs	r2, #255	; 0xff
 8011202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011206:	f001 fa7d 	bl	8012704 <vPortExitCritical>
}
 801120a:	bf00      	nop
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b084      	sub	sp, #16
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801121a:	f001 fa43 	bl	80126a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011222:	2b00      	cmp	r3, #0
 8011224:	d102      	bne.n	801122c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011226:	2301      	movs	r3, #1
 8011228:	60fb      	str	r3, [r7, #12]
 801122a:	e001      	b.n	8011230 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801122c:	2300      	movs	r3, #0
 801122e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011230:	f001 fa68 	bl	8012704 <vPortExitCritical>

	return xReturn;
 8011234:	68fb      	ldr	r3, [r7, #12]
}
 8011236:	4618      	mov	r0, r3
 8011238:	3710      	adds	r7, #16
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}

0801123e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801123e:	b580      	push	{r7, lr}
 8011240:	b084      	sub	sp, #16
 8011242:	af00      	add	r7, sp, #0
 8011244:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011246:	f001 fa2d 	bl	80126a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011252:	429a      	cmp	r2, r3
 8011254:	d102      	bne.n	801125c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011256:	2301      	movs	r3, #1
 8011258:	60fb      	str	r3, [r7, #12]
 801125a:	e001      	b.n	8011260 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801125c:	2300      	movs	r3, #0
 801125e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011260:	f001 fa50 	bl	8012704 <vPortExitCritical>

	return xReturn;
 8011264:	68fb      	ldr	r3, [r7, #12]
}
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
	...

08011270 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011278:	2300      	movs	r3, #0
 801127a:	60fb      	str	r3, [r7, #12]
 801127c:	e016      	b.n	80112ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801127e:	4a10      	ldr	r2, [pc, #64]	; (80112c0 <vQueueUnregisterQueue+0x50>)
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	00db      	lsls	r3, r3, #3
 8011284:	4413      	add	r3, r2
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	429a      	cmp	r2, r3
 801128c:	d10b      	bne.n	80112a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801128e:	4a0c      	ldr	r2, [pc, #48]	; (80112c0 <vQueueUnregisterQueue+0x50>)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2100      	movs	r1, #0
 8011294:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011298:	4a09      	ldr	r2, [pc, #36]	; (80112c0 <vQueueUnregisterQueue+0x50>)
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	00db      	lsls	r3, r3, #3
 801129e:	4413      	add	r3, r2
 80112a0:	2200      	movs	r2, #0
 80112a2:	605a      	str	r2, [r3, #4]
				break;
 80112a4:	e006      	b.n	80112b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	3301      	adds	r3, #1
 80112aa:	60fb      	str	r3, [r7, #12]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b07      	cmp	r3, #7
 80112b0:	d9e5      	bls.n	801127e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80112b2:	bf00      	nop
 80112b4:	bf00      	nop
 80112b6:	3714      	adds	r7, #20
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	20010db4 	.word	0x20010db4

080112c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b08e      	sub	sp, #56	; 0x38
 80112c8:	af04      	add	r7, sp, #16
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
 80112d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80112d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d10a      	bne.n	80112ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80112d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112dc:	f383 8811 	msr	BASEPRI, r3
 80112e0:	f3bf 8f6f 	isb	sy
 80112e4:	f3bf 8f4f 	dsb	sy
 80112e8:	623b      	str	r3, [r7, #32]
}
 80112ea:	bf00      	nop
 80112ec:	e7fe      	b.n	80112ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80112ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d10a      	bne.n	801130a <xTaskCreateStatic+0x46>
	__asm volatile
 80112f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f8:	f383 8811 	msr	BASEPRI, r3
 80112fc:	f3bf 8f6f 	isb	sy
 8011300:	f3bf 8f4f 	dsb	sy
 8011304:	61fb      	str	r3, [r7, #28]
}
 8011306:	bf00      	nop
 8011308:	e7fe      	b.n	8011308 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801130a:	2354      	movs	r3, #84	; 0x54
 801130c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	2b54      	cmp	r3, #84	; 0x54
 8011312:	d00a      	beq.n	801132a <xTaskCreateStatic+0x66>
	__asm volatile
 8011314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011318:	f383 8811 	msr	BASEPRI, r3
 801131c:	f3bf 8f6f 	isb	sy
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	61bb      	str	r3, [r7, #24]
}
 8011326:	bf00      	nop
 8011328:	e7fe      	b.n	8011328 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801132a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132e:	2b00      	cmp	r3, #0
 8011330:	d01e      	beq.n	8011370 <xTaskCreateStatic+0xac>
 8011332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011334:	2b00      	cmp	r3, #0
 8011336:	d01b      	beq.n	8011370 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011340:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011344:	2202      	movs	r2, #2
 8011346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801134a:	2300      	movs	r3, #0
 801134c:	9303      	str	r3, [sp, #12]
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	9302      	str	r3, [sp, #8]
 8011352:	f107 0314 	add.w	r3, r7, #20
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135a:	9300      	str	r3, [sp, #0]
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	68b9      	ldr	r1, [r7, #8]
 8011362:	68f8      	ldr	r0, [r7, #12]
 8011364:	f000 f850 	bl	8011408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801136a:	f000 f8d5 	bl	8011518 <prvAddNewTaskToReadyList>
 801136e:	e001      	b.n	8011374 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011370:	2300      	movs	r3, #0
 8011372:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011374:	697b      	ldr	r3, [r7, #20]
	}
 8011376:	4618      	mov	r0, r3
 8011378:	3728      	adds	r7, #40	; 0x28
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801137e:	b580      	push	{r7, lr}
 8011380:	b08c      	sub	sp, #48	; 0x30
 8011382:	af04      	add	r7, sp, #16
 8011384:	60f8      	str	r0, [r7, #12]
 8011386:	60b9      	str	r1, [r7, #8]
 8011388:	603b      	str	r3, [r7, #0]
 801138a:	4613      	mov	r3, r2
 801138c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801138e:	88fb      	ldrh	r3, [r7, #6]
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4618      	mov	r0, r3
 8011394:	f001 faa8 	bl	80128e8 <pvPortMalloc>
 8011398:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d00e      	beq.n	80113be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80113a0:	2054      	movs	r0, #84	; 0x54
 80113a2:	f001 faa1 	bl	80128e8 <pvPortMalloc>
 80113a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d003      	beq.n	80113b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80113ae:	69fb      	ldr	r3, [r7, #28]
 80113b0:	697a      	ldr	r2, [r7, #20]
 80113b2:	631a      	str	r2, [r3, #48]	; 0x30
 80113b4:	e005      	b.n	80113c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80113b6:	6978      	ldr	r0, [r7, #20]
 80113b8:	f001 fb62 	bl	8012a80 <vPortFree>
 80113bc:	e001      	b.n	80113c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80113be:	2300      	movs	r3, #0
 80113c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d017      	beq.n	80113f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80113d0:	88fa      	ldrh	r2, [r7, #6]
 80113d2:	2300      	movs	r3, #0
 80113d4:	9303      	str	r3, [sp, #12]
 80113d6:	69fb      	ldr	r3, [r7, #28]
 80113d8:	9302      	str	r3, [sp, #8]
 80113da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113dc:	9301      	str	r3, [sp, #4]
 80113de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e0:	9300      	str	r3, [sp, #0]
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	68b9      	ldr	r1, [r7, #8]
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	f000 f80e 	bl	8011408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113ec:	69f8      	ldr	r0, [r7, #28]
 80113ee:	f000 f893 	bl	8011518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80113f2:	2301      	movs	r3, #1
 80113f4:	61bb      	str	r3, [r7, #24]
 80113f6:	e002      	b.n	80113fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80113f8:	f04f 33ff 	mov.w	r3, #4294967295
 80113fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80113fe:	69bb      	ldr	r3, [r7, #24]
	}
 8011400:	4618      	mov	r0, r3
 8011402:	3720      	adds	r7, #32
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b088      	sub	sp, #32
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
 8011414:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011420:	3b01      	subs	r3, #1
 8011422:	009b      	lsls	r3, r3, #2
 8011424:	4413      	add	r3, r2
 8011426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	f023 0307 	bic.w	r3, r3, #7
 801142e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	f003 0307 	and.w	r3, r3, #7
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00a      	beq.n	8011450 <prvInitialiseNewTask+0x48>
	__asm volatile
 801143a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801143e:	f383 8811 	msr	BASEPRI, r3
 8011442:	f3bf 8f6f 	isb	sy
 8011446:	f3bf 8f4f 	dsb	sy
 801144a:	617b      	str	r3, [r7, #20]
}
 801144c:	bf00      	nop
 801144e:	e7fe      	b.n	801144e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d01f      	beq.n	8011496 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011456:	2300      	movs	r3, #0
 8011458:	61fb      	str	r3, [r7, #28]
 801145a:	e012      	b.n	8011482 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801145c:	68ba      	ldr	r2, [r7, #8]
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	4413      	add	r3, r2
 8011462:	7819      	ldrb	r1, [r3, #0]
 8011464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	4413      	add	r3, r2
 801146a:	3334      	adds	r3, #52	; 0x34
 801146c:	460a      	mov	r2, r1
 801146e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011470:	68ba      	ldr	r2, [r7, #8]
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	4413      	add	r3, r2
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d006      	beq.n	801148a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	3301      	adds	r3, #1
 8011480:	61fb      	str	r3, [r7, #28]
 8011482:	69fb      	ldr	r3, [r7, #28]
 8011484:	2b0f      	cmp	r3, #15
 8011486:	d9e9      	bls.n	801145c <prvInitialiseNewTask+0x54>
 8011488:	e000      	b.n	801148c <prvInitialiseNewTask+0x84>
			{
				break;
 801148a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148e:	2200      	movs	r2, #0
 8011490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011494:	e003      	b.n	801149e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	2200      	movs	r2, #0
 801149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a0:	2b06      	cmp	r3, #6
 80114a2:	d901      	bls.n	80114a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80114a4:	2306      	movs	r3, #6
 80114a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80114a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80114ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80114b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b6:	2200      	movs	r2, #0
 80114b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80114ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114bc:	3304      	adds	r3, #4
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fe fedd 	bl	801027e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80114c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c6:	3318      	adds	r3, #24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe fed8 	bl	801027e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80114ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	f1c3 0207 	rsb	r2, r3, #7
 80114da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80114de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80114e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e6:	2200      	movs	r2, #0
 80114e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80114ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ec:	2200      	movs	r2, #0
 80114ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80114f2:	683a      	ldr	r2, [r7, #0]
 80114f4:	68f9      	ldr	r1, [r7, #12]
 80114f6:	69b8      	ldr	r0, [r7, #24]
 80114f8:	f000 ffa4 	bl	8012444 <pxPortInitialiseStack>
 80114fc:	4602      	mov	r2, r0
 80114fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011500:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801150c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801150e:	bf00      	nop
 8011510:	3720      	adds	r7, #32
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
	...

08011518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011520:	f001 f8c0 	bl	80126a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011524:	4b2a      	ldr	r3, [pc, #168]	; (80115d0 <prvAddNewTaskToReadyList+0xb8>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	3301      	adds	r3, #1
 801152a:	4a29      	ldr	r2, [pc, #164]	; (80115d0 <prvAddNewTaskToReadyList+0xb8>)
 801152c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801152e:	4b29      	ldr	r3, [pc, #164]	; (80115d4 <prvAddNewTaskToReadyList+0xbc>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d109      	bne.n	801154a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011536:	4a27      	ldr	r2, [pc, #156]	; (80115d4 <prvAddNewTaskToReadyList+0xbc>)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801153c:	4b24      	ldr	r3, [pc, #144]	; (80115d0 <prvAddNewTaskToReadyList+0xb8>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b01      	cmp	r3, #1
 8011542:	d110      	bne.n	8011566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011544:	f000 fc86 	bl	8011e54 <prvInitialiseTaskLists>
 8011548:	e00d      	b.n	8011566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801154a:	4b23      	ldr	r3, [pc, #140]	; (80115d8 <prvAddNewTaskToReadyList+0xc0>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d109      	bne.n	8011566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011552:	4b20      	ldr	r3, [pc, #128]	; (80115d4 <prvAddNewTaskToReadyList+0xbc>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801155c:	429a      	cmp	r2, r3
 801155e:	d802      	bhi.n	8011566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011560:	4a1c      	ldr	r2, [pc, #112]	; (80115d4 <prvAddNewTaskToReadyList+0xbc>)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011566:	4b1d      	ldr	r3, [pc, #116]	; (80115dc <prvAddNewTaskToReadyList+0xc4>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3301      	adds	r3, #1
 801156c:	4a1b      	ldr	r2, [pc, #108]	; (80115dc <prvAddNewTaskToReadyList+0xc4>)
 801156e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011574:	2201      	movs	r2, #1
 8011576:	409a      	lsls	r2, r3
 8011578:	4b19      	ldr	r3, [pc, #100]	; (80115e0 <prvAddNewTaskToReadyList+0xc8>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4313      	orrs	r3, r2
 801157e:	4a18      	ldr	r2, [pc, #96]	; (80115e0 <prvAddNewTaskToReadyList+0xc8>)
 8011580:	6013      	str	r3, [r2, #0]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011586:	4613      	mov	r3, r2
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	4413      	add	r3, r2
 801158c:	009b      	lsls	r3, r3, #2
 801158e:	4a15      	ldr	r2, [pc, #84]	; (80115e4 <prvAddNewTaskToReadyList+0xcc>)
 8011590:	441a      	add	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	3304      	adds	r3, #4
 8011596:	4619      	mov	r1, r3
 8011598:	4610      	mov	r0, r2
 801159a:	f7fe fe7d 	bl	8010298 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801159e:	f001 f8b1 	bl	8012704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80115a2:	4b0d      	ldr	r3, [pc, #52]	; (80115d8 <prvAddNewTaskToReadyList+0xc0>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d00e      	beq.n	80115c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80115aa:	4b0a      	ldr	r3, [pc, #40]	; (80115d4 <prvAddNewTaskToReadyList+0xbc>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d207      	bcs.n	80115c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80115b8:	4b0b      	ldr	r3, [pc, #44]	; (80115e8 <prvAddNewTaskToReadyList+0xd0>)
 80115ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115be:	601a      	str	r2, [r3, #0]
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115c8:	bf00      	nop
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	20000c64 	.word	0x20000c64
 80115d4:	20000b64 	.word	0x20000b64
 80115d8:	20000c70 	.word	0x20000c70
 80115dc:	20000c80 	.word	0x20000c80
 80115e0:	20000c6c 	.word	0x20000c6c
 80115e4:	20000b68 	.word	0x20000b68
 80115e8:	e000ed04 	.word	0xe000ed04

080115ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80115f4:	2300      	movs	r3, #0
 80115f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d017      	beq.n	801162e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80115fe:	4b13      	ldr	r3, [pc, #76]	; (801164c <vTaskDelay+0x60>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00a      	beq.n	801161c <vTaskDelay+0x30>
	__asm volatile
 8011606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160a:	f383 8811 	msr	BASEPRI, r3
 801160e:	f3bf 8f6f 	isb	sy
 8011612:	f3bf 8f4f 	dsb	sy
 8011616:	60bb      	str	r3, [r7, #8]
}
 8011618:	bf00      	nop
 801161a:	e7fe      	b.n	801161a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801161c:	f000 f87a 	bl	8011714 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011620:	2100      	movs	r1, #0
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 fea8 	bl	8012378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011628:	f000 f882 	bl	8011730 <xTaskResumeAll>
 801162c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d107      	bne.n	8011644 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011634:	4b06      	ldr	r3, [pc, #24]	; (8011650 <vTaskDelay+0x64>)
 8011636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801163a:	601a      	str	r2, [r3, #0]
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011644:	bf00      	nop
 8011646:	3710      	adds	r7, #16
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	20000c8c 	.word	0x20000c8c
 8011650:	e000ed04 	.word	0xe000ed04

08011654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b08a      	sub	sp, #40	; 0x28
 8011658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801165a:	2300      	movs	r3, #0
 801165c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801165e:	2300      	movs	r3, #0
 8011660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011662:	463a      	mov	r2, r7
 8011664:	1d39      	adds	r1, r7, #4
 8011666:	f107 0308 	add.w	r3, r7, #8
 801166a:	4618      	mov	r0, r3
 801166c:	f7ef f9e8 	bl	8000a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011670:	6839      	ldr	r1, [r7, #0]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	9202      	str	r2, [sp, #8]
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	2300      	movs	r3, #0
 801167c:	9300      	str	r3, [sp, #0]
 801167e:	2300      	movs	r3, #0
 8011680:	460a      	mov	r2, r1
 8011682:	491e      	ldr	r1, [pc, #120]	; (80116fc <vTaskStartScheduler+0xa8>)
 8011684:	481e      	ldr	r0, [pc, #120]	; (8011700 <vTaskStartScheduler+0xac>)
 8011686:	f7ff fe1d 	bl	80112c4 <xTaskCreateStatic>
 801168a:	4603      	mov	r3, r0
 801168c:	4a1d      	ldr	r2, [pc, #116]	; (8011704 <vTaskStartScheduler+0xb0>)
 801168e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011690:	4b1c      	ldr	r3, [pc, #112]	; (8011704 <vTaskStartScheduler+0xb0>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d002      	beq.n	801169e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011698:	2301      	movs	r3, #1
 801169a:	617b      	str	r3, [r7, #20]
 801169c:	e001      	b.n	80116a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801169e:	2300      	movs	r3, #0
 80116a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	2b01      	cmp	r3, #1
 80116a6:	d116      	bne.n	80116d6 <vTaskStartScheduler+0x82>
	__asm volatile
 80116a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ac:	f383 8811 	msr	BASEPRI, r3
 80116b0:	f3bf 8f6f 	isb	sy
 80116b4:	f3bf 8f4f 	dsb	sy
 80116b8:	613b      	str	r3, [r7, #16]
}
 80116ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80116bc:	4b12      	ldr	r3, [pc, #72]	; (8011708 <vTaskStartScheduler+0xb4>)
 80116be:	f04f 32ff 	mov.w	r2, #4294967295
 80116c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80116c4:	4b11      	ldr	r3, [pc, #68]	; (801170c <vTaskStartScheduler+0xb8>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80116ca:	4b11      	ldr	r3, [pc, #68]	; (8011710 <vTaskStartScheduler+0xbc>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80116d0:	f000 ff46 	bl	8012560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80116d4:	e00e      	b.n	80116f4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116dc:	d10a      	bne.n	80116f4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80116de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e2:	f383 8811 	msr	BASEPRI, r3
 80116e6:	f3bf 8f6f 	isb	sy
 80116ea:	f3bf 8f4f 	dsb	sy
 80116ee:	60fb      	str	r3, [r7, #12]
}
 80116f0:	bf00      	nop
 80116f2:	e7fe      	b.n	80116f2 <vTaskStartScheduler+0x9e>
}
 80116f4:	bf00      	nop
 80116f6:	3718      	adds	r7, #24
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	080215dc 	.word	0x080215dc
 8011700:	08011e25 	.word	0x08011e25
 8011704:	20000c88 	.word	0x20000c88
 8011708:	20000c84 	.word	0x20000c84
 801170c:	20000c70 	.word	0x20000c70
 8011710:	20000c68 	.word	0x20000c68

08011714 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011714:	b480      	push	{r7}
 8011716:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011718:	4b04      	ldr	r3, [pc, #16]	; (801172c <vTaskSuspendAll+0x18>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	3301      	adds	r3, #1
 801171e:	4a03      	ldr	r2, [pc, #12]	; (801172c <vTaskSuspendAll+0x18>)
 8011720:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011722:	bf00      	nop
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	20000c8c 	.word	0x20000c8c

08011730 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011736:	2300      	movs	r3, #0
 8011738:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801173a:	2300      	movs	r3, #0
 801173c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801173e:	4b41      	ldr	r3, [pc, #260]	; (8011844 <xTaskResumeAll+0x114>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d10a      	bne.n	801175c <xTaskResumeAll+0x2c>
	__asm volatile
 8011746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174a:	f383 8811 	msr	BASEPRI, r3
 801174e:	f3bf 8f6f 	isb	sy
 8011752:	f3bf 8f4f 	dsb	sy
 8011756:	603b      	str	r3, [r7, #0]
}
 8011758:	bf00      	nop
 801175a:	e7fe      	b.n	801175a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801175c:	f000 ffa2 	bl	80126a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011760:	4b38      	ldr	r3, [pc, #224]	; (8011844 <xTaskResumeAll+0x114>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3b01      	subs	r3, #1
 8011766:	4a37      	ldr	r2, [pc, #220]	; (8011844 <xTaskResumeAll+0x114>)
 8011768:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801176a:	4b36      	ldr	r3, [pc, #216]	; (8011844 <xTaskResumeAll+0x114>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d161      	bne.n	8011836 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011772:	4b35      	ldr	r3, [pc, #212]	; (8011848 <xTaskResumeAll+0x118>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d05d      	beq.n	8011836 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801177a:	e02e      	b.n	80117da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801177c:	4b33      	ldr	r3, [pc, #204]	; (801184c <xTaskResumeAll+0x11c>)
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	68db      	ldr	r3, [r3, #12]
 8011782:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	3318      	adds	r3, #24
 8011788:	4618      	mov	r0, r3
 801178a:	f7fe fde2 	bl	8010352 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	3304      	adds	r3, #4
 8011792:	4618      	mov	r0, r3
 8011794:	f7fe fddd 	bl	8010352 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801179c:	2201      	movs	r2, #1
 801179e:	409a      	lsls	r2, r3
 80117a0:	4b2b      	ldr	r3, [pc, #172]	; (8011850 <xTaskResumeAll+0x120>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	4313      	orrs	r3, r2
 80117a6:	4a2a      	ldr	r2, [pc, #168]	; (8011850 <xTaskResumeAll+0x120>)
 80117a8:	6013      	str	r3, [r2, #0]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117ae:	4613      	mov	r3, r2
 80117b0:	009b      	lsls	r3, r3, #2
 80117b2:	4413      	add	r3, r2
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	4a27      	ldr	r2, [pc, #156]	; (8011854 <xTaskResumeAll+0x124>)
 80117b8:	441a      	add	r2, r3
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	3304      	adds	r3, #4
 80117be:	4619      	mov	r1, r3
 80117c0:	4610      	mov	r0, r2
 80117c2:	f7fe fd69 	bl	8010298 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117ca:	4b23      	ldr	r3, [pc, #140]	; (8011858 <xTaskResumeAll+0x128>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d302      	bcc.n	80117da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80117d4:	4b21      	ldr	r3, [pc, #132]	; (801185c <xTaskResumeAll+0x12c>)
 80117d6:	2201      	movs	r2, #1
 80117d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80117da:	4b1c      	ldr	r3, [pc, #112]	; (801184c <xTaskResumeAll+0x11c>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1cc      	bne.n	801177c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d001      	beq.n	80117ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80117e8:	f000 fbd2 	bl	8011f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80117ec:	4b1c      	ldr	r3, [pc, #112]	; (8011860 <xTaskResumeAll+0x130>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d010      	beq.n	801181a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80117f8:	f000 f858 	bl	80118ac <xTaskIncrementTick>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d002      	beq.n	8011808 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011802:	4b16      	ldr	r3, [pc, #88]	; (801185c <xTaskResumeAll+0x12c>)
 8011804:	2201      	movs	r2, #1
 8011806:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3b01      	subs	r3, #1
 801180c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d1f1      	bne.n	80117f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011814:	4b12      	ldr	r3, [pc, #72]	; (8011860 <xTaskResumeAll+0x130>)
 8011816:	2200      	movs	r2, #0
 8011818:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801181a:	4b10      	ldr	r3, [pc, #64]	; (801185c <xTaskResumeAll+0x12c>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d009      	beq.n	8011836 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011822:	2301      	movs	r3, #1
 8011824:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011826:	4b0f      	ldr	r3, [pc, #60]	; (8011864 <xTaskResumeAll+0x134>)
 8011828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801182c:	601a      	str	r2, [r3, #0]
 801182e:	f3bf 8f4f 	dsb	sy
 8011832:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011836:	f000 ff65 	bl	8012704 <vPortExitCritical>

	return xAlreadyYielded;
 801183a:	68bb      	ldr	r3, [r7, #8]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	20000c8c 	.word	0x20000c8c
 8011848:	20000c64 	.word	0x20000c64
 801184c:	20000c24 	.word	0x20000c24
 8011850:	20000c6c 	.word	0x20000c6c
 8011854:	20000b68 	.word	0x20000b68
 8011858:	20000b64 	.word	0x20000b64
 801185c:	20000c78 	.word	0x20000c78
 8011860:	20000c74 	.word	0x20000c74
 8011864:	e000ed04 	.word	0xe000ed04

08011868 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801186e:	4b05      	ldr	r3, [pc, #20]	; (8011884 <xTaskGetTickCount+0x1c>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011874:	687b      	ldr	r3, [r7, #4]
}
 8011876:	4618      	mov	r0, r3
 8011878:	370c      	adds	r7, #12
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	20000c68 	.word	0x20000c68

08011888 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801188e:	f000 ffeb 	bl	8012868 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011892:	2300      	movs	r3, #0
 8011894:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011896:	4b04      	ldr	r3, [pc, #16]	; (80118a8 <xTaskGetTickCountFromISR+0x20>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801189c:	683b      	ldr	r3, [r7, #0]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3708      	adds	r7, #8
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	20000c68 	.word	0x20000c68

080118ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b086      	sub	sp, #24
 80118b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80118b2:	2300      	movs	r3, #0
 80118b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118b6:	4b4e      	ldr	r3, [pc, #312]	; (80119f0 <xTaskIncrementTick+0x144>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	f040 808e 	bne.w	80119dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80118c0:	4b4c      	ldr	r3, [pc, #304]	; (80119f4 <xTaskIncrementTick+0x148>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	3301      	adds	r3, #1
 80118c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80118c8:	4a4a      	ldr	r2, [pc, #296]	; (80119f4 <xTaskIncrementTick+0x148>)
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d120      	bne.n	8011916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80118d4:	4b48      	ldr	r3, [pc, #288]	; (80119f8 <xTaskIncrementTick+0x14c>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d00a      	beq.n	80118f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80118de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e2:	f383 8811 	msr	BASEPRI, r3
 80118e6:	f3bf 8f6f 	isb	sy
 80118ea:	f3bf 8f4f 	dsb	sy
 80118ee:	603b      	str	r3, [r7, #0]
}
 80118f0:	bf00      	nop
 80118f2:	e7fe      	b.n	80118f2 <xTaskIncrementTick+0x46>
 80118f4:	4b40      	ldr	r3, [pc, #256]	; (80119f8 <xTaskIncrementTick+0x14c>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	60fb      	str	r3, [r7, #12]
 80118fa:	4b40      	ldr	r3, [pc, #256]	; (80119fc <xTaskIncrementTick+0x150>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4a3e      	ldr	r2, [pc, #248]	; (80119f8 <xTaskIncrementTick+0x14c>)
 8011900:	6013      	str	r3, [r2, #0]
 8011902:	4a3e      	ldr	r2, [pc, #248]	; (80119fc <xTaskIncrementTick+0x150>)
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	6013      	str	r3, [r2, #0]
 8011908:	4b3d      	ldr	r3, [pc, #244]	; (8011a00 <xTaskIncrementTick+0x154>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	3301      	adds	r3, #1
 801190e:	4a3c      	ldr	r2, [pc, #240]	; (8011a00 <xTaskIncrementTick+0x154>)
 8011910:	6013      	str	r3, [r2, #0]
 8011912:	f000 fb3d 	bl	8011f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011916:	4b3b      	ldr	r3, [pc, #236]	; (8011a04 <xTaskIncrementTick+0x158>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	693a      	ldr	r2, [r7, #16]
 801191c:	429a      	cmp	r2, r3
 801191e:	d348      	bcc.n	80119b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011920:	4b35      	ldr	r3, [pc, #212]	; (80119f8 <xTaskIncrementTick+0x14c>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d104      	bne.n	8011934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801192a:	4b36      	ldr	r3, [pc, #216]	; (8011a04 <xTaskIncrementTick+0x158>)
 801192c:	f04f 32ff 	mov.w	r2, #4294967295
 8011930:	601a      	str	r2, [r3, #0]
					break;
 8011932:	e03e      	b.n	80119b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011934:	4b30      	ldr	r3, [pc, #192]	; (80119f8 <xTaskIncrementTick+0x14c>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011944:	693a      	ldr	r2, [r7, #16]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	429a      	cmp	r2, r3
 801194a:	d203      	bcs.n	8011954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801194c:	4a2d      	ldr	r2, [pc, #180]	; (8011a04 <xTaskIncrementTick+0x158>)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011952:	e02e      	b.n	80119b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	3304      	adds	r3, #4
 8011958:	4618      	mov	r0, r3
 801195a:	f7fe fcfa 	bl	8010352 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011962:	2b00      	cmp	r3, #0
 8011964:	d004      	beq.n	8011970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	3318      	adds	r3, #24
 801196a:	4618      	mov	r0, r3
 801196c:	f7fe fcf1 	bl	8010352 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011974:	2201      	movs	r2, #1
 8011976:	409a      	lsls	r2, r3
 8011978:	4b23      	ldr	r3, [pc, #140]	; (8011a08 <xTaskIncrementTick+0x15c>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4313      	orrs	r3, r2
 801197e:	4a22      	ldr	r2, [pc, #136]	; (8011a08 <xTaskIncrementTick+0x15c>)
 8011980:	6013      	str	r3, [r2, #0]
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011986:	4613      	mov	r3, r2
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	4413      	add	r3, r2
 801198c:	009b      	lsls	r3, r3, #2
 801198e:	4a1f      	ldr	r2, [pc, #124]	; (8011a0c <xTaskIncrementTick+0x160>)
 8011990:	441a      	add	r2, r3
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	3304      	adds	r3, #4
 8011996:	4619      	mov	r1, r3
 8011998:	4610      	mov	r0, r2
 801199a:	f7fe fc7d 	bl	8010298 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a2:	4b1b      	ldr	r3, [pc, #108]	; (8011a10 <xTaskIncrementTick+0x164>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d3b9      	bcc.n	8011920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80119ac:	2301      	movs	r3, #1
 80119ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119b0:	e7b6      	b.n	8011920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80119b2:	4b17      	ldr	r3, [pc, #92]	; (8011a10 <xTaskIncrementTick+0x164>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b8:	4914      	ldr	r1, [pc, #80]	; (8011a0c <xTaskIncrementTick+0x160>)
 80119ba:	4613      	mov	r3, r2
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	4413      	add	r3, r2
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	440b      	add	r3, r1
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d901      	bls.n	80119ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80119ca:	2301      	movs	r3, #1
 80119cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80119ce:	4b11      	ldr	r3, [pc, #68]	; (8011a14 <xTaskIncrementTick+0x168>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d007      	beq.n	80119e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80119d6:	2301      	movs	r3, #1
 80119d8:	617b      	str	r3, [r7, #20]
 80119da:	e004      	b.n	80119e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80119dc:	4b0e      	ldr	r3, [pc, #56]	; (8011a18 <xTaskIncrementTick+0x16c>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3301      	adds	r3, #1
 80119e2:	4a0d      	ldr	r2, [pc, #52]	; (8011a18 <xTaskIncrementTick+0x16c>)
 80119e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80119e6:	697b      	ldr	r3, [r7, #20]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3718      	adds	r7, #24
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	20000c8c 	.word	0x20000c8c
 80119f4:	20000c68 	.word	0x20000c68
 80119f8:	20000c1c 	.word	0x20000c1c
 80119fc:	20000c20 	.word	0x20000c20
 8011a00:	20000c7c 	.word	0x20000c7c
 8011a04:	20000c84 	.word	0x20000c84
 8011a08:	20000c6c 	.word	0x20000c6c
 8011a0c:	20000b68 	.word	0x20000b68
 8011a10:	20000b64 	.word	0x20000b64
 8011a14:	20000c78 	.word	0x20000c78
 8011a18:	20000c74 	.word	0x20000c74

08011a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b087      	sub	sp, #28
 8011a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a22:	4b27      	ldr	r3, [pc, #156]	; (8011ac0 <vTaskSwitchContext+0xa4>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d003      	beq.n	8011a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a2a:	4b26      	ldr	r3, [pc, #152]	; (8011ac4 <vTaskSwitchContext+0xa8>)
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a30:	e03f      	b.n	8011ab2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011a32:	4b24      	ldr	r3, [pc, #144]	; (8011ac4 <vTaskSwitchContext+0xa8>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a38:	4b23      	ldr	r3, [pc, #140]	; (8011ac8 <vTaskSwitchContext+0xac>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	fab3 f383 	clz	r3, r3
 8011a44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011a46:	7afb      	ldrb	r3, [r7, #11]
 8011a48:	f1c3 031f 	rsb	r3, r3, #31
 8011a4c:	617b      	str	r3, [r7, #20]
 8011a4e:	491f      	ldr	r1, [pc, #124]	; (8011acc <vTaskSwitchContext+0xb0>)
 8011a50:	697a      	ldr	r2, [r7, #20]
 8011a52:	4613      	mov	r3, r2
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	4413      	add	r3, r2
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	440b      	add	r3, r1
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d10a      	bne.n	8011a78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a66:	f383 8811 	msr	BASEPRI, r3
 8011a6a:	f3bf 8f6f 	isb	sy
 8011a6e:	f3bf 8f4f 	dsb	sy
 8011a72:	607b      	str	r3, [r7, #4]
}
 8011a74:	bf00      	nop
 8011a76:	e7fe      	b.n	8011a76 <vTaskSwitchContext+0x5a>
 8011a78:	697a      	ldr	r2, [r7, #20]
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	009b      	lsls	r3, r3, #2
 8011a7e:	4413      	add	r3, r2
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	4a12      	ldr	r2, [pc, #72]	; (8011acc <vTaskSwitchContext+0xb0>)
 8011a84:	4413      	add	r3, r2
 8011a86:	613b      	str	r3, [r7, #16]
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	685a      	ldr	r2, [r3, #4]
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	605a      	str	r2, [r3, #4]
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	685a      	ldr	r2, [r3, #4]
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	3308      	adds	r3, #8
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d104      	bne.n	8011aa8 <vTaskSwitchContext+0x8c>
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	685a      	ldr	r2, [r3, #4]
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	605a      	str	r2, [r3, #4]
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	4a08      	ldr	r2, [pc, #32]	; (8011ad0 <vTaskSwitchContext+0xb4>)
 8011ab0:	6013      	str	r3, [r2, #0]
}
 8011ab2:	bf00      	nop
 8011ab4:	371c      	adds	r7, #28
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	20000c8c 	.word	0x20000c8c
 8011ac4:	20000c78 	.word	0x20000c78
 8011ac8:	20000c6c 	.word	0x20000c6c
 8011acc:	20000b68 	.word	0x20000b68
 8011ad0:	20000b64 	.word	0x20000b64

08011ad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10a      	bne.n	8011afa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	60fb      	str	r3, [r7, #12]
}
 8011af6:	bf00      	nop
 8011af8:	e7fe      	b.n	8011af8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011afa:	4b07      	ldr	r3, [pc, #28]	; (8011b18 <vTaskPlaceOnEventList+0x44>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	3318      	adds	r3, #24
 8011b00:	4619      	mov	r1, r3
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7fe fbec 	bl	80102e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b08:	2101      	movs	r1, #1
 8011b0a:	6838      	ldr	r0, [r7, #0]
 8011b0c:	f000 fc34 	bl	8012378 <prvAddCurrentTaskToDelayedList>
}
 8011b10:	bf00      	nop
 8011b12:	3710      	adds	r7, #16
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	20000b64 	.word	0x20000b64

08011b1c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b086      	sub	sp, #24
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10a      	bne.n	8011b44 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8011b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b32:	f383 8811 	msr	BASEPRI, r3
 8011b36:	f3bf 8f6f 	isb	sy
 8011b3a:	f3bf 8f4f 	dsb	sy
 8011b3e:	617b      	str	r3, [r7, #20]
}
 8011b40:	bf00      	nop
 8011b42:	e7fe      	b.n	8011b42 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011b44:	4b11      	ldr	r3, [pc, #68]	; (8011b8c <vTaskPlaceOnUnorderedEventList+0x70>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d10a      	bne.n	8011b62 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b50:	f383 8811 	msr	BASEPRI, r3
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	f3bf 8f4f 	dsb	sy
 8011b5c:	613b      	str	r3, [r7, #16]
}
 8011b5e:	bf00      	nop
 8011b60:	e7fe      	b.n	8011b60 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011b62:	4b0b      	ldr	r3, [pc, #44]	; (8011b90 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	68ba      	ldr	r2, [r7, #8]
 8011b68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011b6c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b6e:	4b08      	ldr	r3, [pc, #32]	; (8011b90 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	3318      	adds	r3, #24
 8011b74:	4619      	mov	r1, r3
 8011b76:	68f8      	ldr	r0, [r7, #12]
 8011b78:	f7fe fb8e 	bl	8010298 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f000 fbfa 	bl	8012378 <prvAddCurrentTaskToDelayedList>
}
 8011b84:	bf00      	nop
 8011b86:	3718      	adds	r7, #24
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	20000c8c 	.word	0x20000c8c
 8011b90:	20000b64 	.word	0x20000b64

08011b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b086      	sub	sp, #24
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	68db      	ldr	r3, [r3, #12]
 8011ba0:	68db      	ldr	r3, [r3, #12]
 8011ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d10a      	bne.n	8011bc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bae:	f383 8811 	msr	BASEPRI, r3
 8011bb2:	f3bf 8f6f 	isb	sy
 8011bb6:	f3bf 8f4f 	dsb	sy
 8011bba:	60fb      	str	r3, [r7, #12]
}
 8011bbc:	bf00      	nop
 8011bbe:	e7fe      	b.n	8011bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	3318      	adds	r3, #24
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fe fbc4 	bl	8010352 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bca:	4b1d      	ldr	r3, [pc, #116]	; (8011c40 <xTaskRemoveFromEventList+0xac>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d11c      	bne.n	8011c0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	3304      	adds	r3, #4
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fe fbbb 	bl	8010352 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be0:	2201      	movs	r2, #1
 8011be2:	409a      	lsls	r2, r3
 8011be4:	4b17      	ldr	r3, [pc, #92]	; (8011c44 <xTaskRemoveFromEventList+0xb0>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4313      	orrs	r3, r2
 8011bea:	4a16      	ldr	r2, [pc, #88]	; (8011c44 <xTaskRemoveFromEventList+0xb0>)
 8011bec:	6013      	str	r3, [r2, #0]
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	009b      	lsls	r3, r3, #2
 8011bf6:	4413      	add	r3, r2
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	4a13      	ldr	r2, [pc, #76]	; (8011c48 <xTaskRemoveFromEventList+0xb4>)
 8011bfc:	441a      	add	r2, r3
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	3304      	adds	r3, #4
 8011c02:	4619      	mov	r1, r3
 8011c04:	4610      	mov	r0, r2
 8011c06:	f7fe fb47 	bl	8010298 <vListInsertEnd>
 8011c0a:	e005      	b.n	8011c18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	3318      	adds	r3, #24
 8011c10:	4619      	mov	r1, r3
 8011c12:	480e      	ldr	r0, [pc, #56]	; (8011c4c <xTaskRemoveFromEventList+0xb8>)
 8011c14:	f7fe fb40 	bl	8010298 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c1c:	4b0c      	ldr	r3, [pc, #48]	; (8011c50 <xTaskRemoveFromEventList+0xbc>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d905      	bls.n	8011c32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011c26:	2301      	movs	r3, #1
 8011c28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011c2a:	4b0a      	ldr	r3, [pc, #40]	; (8011c54 <xTaskRemoveFromEventList+0xc0>)
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	601a      	str	r2, [r3, #0]
 8011c30:	e001      	b.n	8011c36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011c32:	2300      	movs	r3, #0
 8011c34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011c36:	697b      	ldr	r3, [r7, #20]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3718      	adds	r7, #24
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	20000c8c 	.word	0x20000c8c
 8011c44:	20000c6c 	.word	0x20000c6c
 8011c48:	20000b68 	.word	0x20000b68
 8011c4c:	20000c24 	.word	0x20000c24
 8011c50:	20000b64 	.word	0x20000b64
 8011c54:	20000c78 	.word	0x20000c78

08011c58 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b086      	sub	sp, #24
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011c62:	4b29      	ldr	r3, [pc, #164]	; (8011d08 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d10a      	bne.n	8011c80 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6e:	f383 8811 	msr	BASEPRI, r3
 8011c72:	f3bf 8f6f 	isb	sy
 8011c76:	f3bf 8f4f 	dsb	sy
 8011c7a:	613b      	str	r3, [r7, #16]
}
 8011c7c:	bf00      	nop
 8011c7e:	e7fe      	b.n	8011c7e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	68db      	ldr	r3, [r3, #12]
 8011c8e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d10a      	bne.n	8011cac <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9a:	f383 8811 	msr	BASEPRI, r3
 8011c9e:	f3bf 8f6f 	isb	sy
 8011ca2:	f3bf 8f4f 	dsb	sy
 8011ca6:	60fb      	str	r3, [r7, #12]
}
 8011ca8:	bf00      	nop
 8011caa:	e7fe      	b.n	8011caa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7fe fb50 	bl	8010352 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	3304      	adds	r3, #4
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fe fb4b 	bl	8010352 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	409a      	lsls	r2, r3
 8011cc4:	4b11      	ldr	r3, [pc, #68]	; (8011d0c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	4a10      	ldr	r2, [pc, #64]	; (8011d0c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011ccc:	6013      	str	r3, [r2, #0]
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	4413      	add	r3, r2
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	4a0d      	ldr	r2, [pc, #52]	; (8011d10 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011cdc:	441a      	add	r2, r3
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	4610      	mov	r0, r2
 8011ce6:	f7fe fad7 	bl	8010298 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cee:	4b09      	ldr	r3, [pc, #36]	; (8011d14 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d902      	bls.n	8011cfe <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011cf8:	4b07      	ldr	r3, [pc, #28]	; (8011d18 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	601a      	str	r2, [r3, #0]
	}
}
 8011cfe:	bf00      	nop
 8011d00:	3718      	adds	r7, #24
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	20000c8c 	.word	0x20000c8c
 8011d0c:	20000c6c 	.word	0x20000c6c
 8011d10:	20000b68 	.word	0x20000b68
 8011d14:	20000b64 	.word	0x20000b64
 8011d18:	20000c78 	.word	0x20000c78

08011d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d24:	4b06      	ldr	r3, [pc, #24]	; (8011d40 <vTaskInternalSetTimeOutState+0x24>)
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d2c:	4b05      	ldr	r3, [pc, #20]	; (8011d44 <vTaskInternalSetTimeOutState+0x28>)
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	605a      	str	r2, [r3, #4]
}
 8011d34:	bf00      	nop
 8011d36:	370c      	adds	r7, #12
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	20000c7c 	.word	0x20000c7c
 8011d44:	20000c68 	.word	0x20000c68

08011d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b088      	sub	sp, #32
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10a      	bne.n	8011d6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d5c:	f383 8811 	msr	BASEPRI, r3
 8011d60:	f3bf 8f6f 	isb	sy
 8011d64:	f3bf 8f4f 	dsb	sy
 8011d68:	613b      	str	r3, [r7, #16]
}
 8011d6a:	bf00      	nop
 8011d6c:	e7fe      	b.n	8011d6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d10a      	bne.n	8011d8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d78:	f383 8811 	msr	BASEPRI, r3
 8011d7c:	f3bf 8f6f 	isb	sy
 8011d80:	f3bf 8f4f 	dsb	sy
 8011d84:	60fb      	str	r3, [r7, #12]
}
 8011d86:	bf00      	nop
 8011d88:	e7fe      	b.n	8011d88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011d8a:	f000 fc8b 	bl	80126a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d8e:	4b1d      	ldr	r3, [pc, #116]	; (8011e04 <xTaskCheckForTimeOut+0xbc>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	69ba      	ldr	r2, [r7, #24]
 8011d9a:	1ad3      	subs	r3, r2, r3
 8011d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011da6:	d102      	bne.n	8011dae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011da8:	2300      	movs	r3, #0
 8011daa:	61fb      	str	r3, [r7, #28]
 8011dac:	e023      	b.n	8011df6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	4b15      	ldr	r3, [pc, #84]	; (8011e08 <xTaskCheckForTimeOut+0xc0>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d007      	beq.n	8011dca <xTaskCheckForTimeOut+0x82>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	69ba      	ldr	r2, [r7, #24]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d302      	bcc.n	8011dca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	61fb      	str	r3, [r7, #28]
 8011dc8:	e015      	b.n	8011df6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	697a      	ldr	r2, [r7, #20]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d20b      	bcs.n	8011dec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	1ad2      	subs	r2, r2, r3
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7ff ff9b 	bl	8011d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011de6:	2300      	movs	r3, #0
 8011de8:	61fb      	str	r3, [r7, #28]
 8011dea:	e004      	b.n	8011df6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	2200      	movs	r2, #0
 8011df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011df2:	2301      	movs	r3, #1
 8011df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011df6:	f000 fc85 	bl	8012704 <vPortExitCritical>

	return xReturn;
 8011dfa:	69fb      	ldr	r3, [r7, #28]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3720      	adds	r7, #32
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	20000c68 	.word	0x20000c68
 8011e08:	20000c7c 	.word	0x20000c7c

08011e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e10:	4b03      	ldr	r3, [pc, #12]	; (8011e20 <vTaskMissedYield+0x14>)
 8011e12:	2201      	movs	r2, #1
 8011e14:	601a      	str	r2, [r3, #0]
}
 8011e16:	bf00      	nop
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr
 8011e20:	20000c78 	.word	0x20000c78

08011e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e2c:	f000 f852 	bl	8011ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011e30:	4b06      	ldr	r3, [pc, #24]	; (8011e4c <prvIdleTask+0x28>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d9f9      	bls.n	8011e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011e38:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <prvIdleTask+0x2c>)
 8011e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e3e:	601a      	str	r2, [r3, #0]
 8011e40:	f3bf 8f4f 	dsb	sy
 8011e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011e48:	e7f0      	b.n	8011e2c <prvIdleTask+0x8>
 8011e4a:	bf00      	nop
 8011e4c:	20000b68 	.word	0x20000b68
 8011e50:	e000ed04 	.word	0xe000ed04

08011e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	607b      	str	r3, [r7, #4]
 8011e5e:	e00c      	b.n	8011e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	4613      	mov	r3, r2
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	4413      	add	r3, r2
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	4a12      	ldr	r2, [pc, #72]	; (8011eb4 <prvInitialiseTaskLists+0x60>)
 8011e6c:	4413      	add	r3, r2
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7fe f9e5 	bl	801023e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	3301      	adds	r3, #1
 8011e78:	607b      	str	r3, [r7, #4]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2b06      	cmp	r3, #6
 8011e7e:	d9ef      	bls.n	8011e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e80:	480d      	ldr	r0, [pc, #52]	; (8011eb8 <prvInitialiseTaskLists+0x64>)
 8011e82:	f7fe f9dc 	bl	801023e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e86:	480d      	ldr	r0, [pc, #52]	; (8011ebc <prvInitialiseTaskLists+0x68>)
 8011e88:	f7fe f9d9 	bl	801023e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e8c:	480c      	ldr	r0, [pc, #48]	; (8011ec0 <prvInitialiseTaskLists+0x6c>)
 8011e8e:	f7fe f9d6 	bl	801023e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e92:	480c      	ldr	r0, [pc, #48]	; (8011ec4 <prvInitialiseTaskLists+0x70>)
 8011e94:	f7fe f9d3 	bl	801023e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e98:	480b      	ldr	r0, [pc, #44]	; (8011ec8 <prvInitialiseTaskLists+0x74>)
 8011e9a:	f7fe f9d0 	bl	801023e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e9e:	4b0b      	ldr	r3, [pc, #44]	; (8011ecc <prvInitialiseTaskLists+0x78>)
 8011ea0:	4a05      	ldr	r2, [pc, #20]	; (8011eb8 <prvInitialiseTaskLists+0x64>)
 8011ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011ea4:	4b0a      	ldr	r3, [pc, #40]	; (8011ed0 <prvInitialiseTaskLists+0x7c>)
 8011ea6:	4a05      	ldr	r2, [pc, #20]	; (8011ebc <prvInitialiseTaskLists+0x68>)
 8011ea8:	601a      	str	r2, [r3, #0]
}
 8011eaa:	bf00      	nop
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	20000b68 	.word	0x20000b68
 8011eb8:	20000bf4 	.word	0x20000bf4
 8011ebc:	20000c08 	.word	0x20000c08
 8011ec0:	20000c24 	.word	0x20000c24
 8011ec4:	20000c38 	.word	0x20000c38
 8011ec8:	20000c50 	.word	0x20000c50
 8011ecc:	20000c1c 	.word	0x20000c1c
 8011ed0:	20000c20 	.word	0x20000c20

08011ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011eda:	e019      	b.n	8011f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011edc:	f000 fbe2 	bl	80126a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ee0:	4b10      	ldr	r3, [pc, #64]	; (8011f24 <prvCheckTasksWaitingTermination+0x50>)
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	68db      	ldr	r3, [r3, #12]
 8011ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	3304      	adds	r3, #4
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7fe fa30 	bl	8010352 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011ef2:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <prvCheckTasksWaitingTermination+0x54>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	4a0b      	ldr	r2, [pc, #44]	; (8011f28 <prvCheckTasksWaitingTermination+0x54>)
 8011efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011efc:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <prvCheckTasksWaitingTermination+0x58>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	3b01      	subs	r3, #1
 8011f02:	4a0a      	ldr	r2, [pc, #40]	; (8011f2c <prvCheckTasksWaitingTermination+0x58>)
 8011f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f06:	f000 fbfd 	bl	8012704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f000 f810 	bl	8011f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f10:	4b06      	ldr	r3, [pc, #24]	; (8011f2c <prvCheckTasksWaitingTermination+0x58>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d1e1      	bne.n	8011edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f18:	bf00      	nop
 8011f1a:	bf00      	nop
 8011f1c:	3708      	adds	r7, #8
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	20000c38 	.word	0x20000c38
 8011f28:	20000c64 	.word	0x20000c64
 8011f2c:	20000c4c 	.word	0x20000c4c

08011f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d108      	bne.n	8011f54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 fd9a 	bl	8012a80 <vPortFree>
				vPortFree( pxTCB );
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 fd97 	bl	8012a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011f52:	e018      	b.n	8011f86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d103      	bne.n	8011f66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 fd8e 	bl	8012a80 <vPortFree>
	}
 8011f64:	e00f      	b.n	8011f86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d00a      	beq.n	8011f86 <prvDeleteTCB+0x56>
	__asm volatile
 8011f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f74:	f383 8811 	msr	BASEPRI, r3
 8011f78:	f3bf 8f6f 	isb	sy
 8011f7c:	f3bf 8f4f 	dsb	sy
 8011f80:	60fb      	str	r3, [r7, #12]
}
 8011f82:	bf00      	nop
 8011f84:	e7fe      	b.n	8011f84 <prvDeleteTCB+0x54>
	}
 8011f86:	bf00      	nop
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
	...

08011f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f96:	4b0c      	ldr	r3, [pc, #48]	; (8011fc8 <prvResetNextTaskUnblockTime+0x38>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d104      	bne.n	8011faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011fa0:	4b0a      	ldr	r3, [pc, #40]	; (8011fcc <prvResetNextTaskUnblockTime+0x3c>)
 8011fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011fa8:	e008      	b.n	8011fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011faa:	4b07      	ldr	r3, [pc, #28]	; (8011fc8 <prvResetNextTaskUnblockTime+0x38>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	4a04      	ldr	r2, [pc, #16]	; (8011fcc <prvResetNextTaskUnblockTime+0x3c>)
 8011fba:	6013      	str	r3, [r2, #0]
}
 8011fbc:	bf00      	nop
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	20000c1c 	.word	0x20000c1c
 8011fcc:	20000c84 	.word	0x20000c84

08011fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011fd6:	4b0b      	ldr	r3, [pc, #44]	; (8012004 <xTaskGetSchedulerState+0x34>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d102      	bne.n	8011fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	607b      	str	r3, [r7, #4]
 8011fe2:	e008      	b.n	8011ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011fe4:	4b08      	ldr	r3, [pc, #32]	; (8012008 <xTaskGetSchedulerState+0x38>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d102      	bne.n	8011ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011fec:	2302      	movs	r3, #2
 8011fee:	607b      	str	r3, [r7, #4]
 8011ff0:	e001      	b.n	8011ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011ff6:	687b      	ldr	r3, [r7, #4]
	}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	20000c70 	.word	0x20000c70
 8012008:	20000c8c 	.word	0x20000c8c

0801200c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012018:	2300      	movs	r3, #0
 801201a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d05e      	beq.n	80120e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012026:	4b31      	ldr	r3, [pc, #196]	; (80120ec <xTaskPriorityInherit+0xe0>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202c:	429a      	cmp	r2, r3
 801202e:	d24e      	bcs.n	80120ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	699b      	ldr	r3, [r3, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	db06      	blt.n	8012046 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012038:	4b2c      	ldr	r3, [pc, #176]	; (80120ec <xTaskPriorityInherit+0xe0>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801203e:	f1c3 0207 	rsb	r2, r3, #7
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6959      	ldr	r1, [r3, #20]
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801204e:	4613      	mov	r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	4413      	add	r3, r2
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	4a26      	ldr	r2, [pc, #152]	; (80120f0 <xTaskPriorityInherit+0xe4>)
 8012058:	4413      	add	r3, r2
 801205a:	4299      	cmp	r1, r3
 801205c:	d12f      	bne.n	80120be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	3304      	adds	r3, #4
 8012062:	4618      	mov	r0, r3
 8012064:	f7fe f975 	bl	8010352 <uxListRemove>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d10a      	bne.n	8012084 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012072:	2201      	movs	r2, #1
 8012074:	fa02 f303 	lsl.w	r3, r2, r3
 8012078:	43da      	mvns	r2, r3
 801207a:	4b1e      	ldr	r3, [pc, #120]	; (80120f4 <xTaskPriorityInherit+0xe8>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	4013      	ands	r3, r2
 8012080:	4a1c      	ldr	r2, [pc, #112]	; (80120f4 <xTaskPriorityInherit+0xe8>)
 8012082:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012084:	4b19      	ldr	r3, [pc, #100]	; (80120ec <xTaskPriorityInherit+0xe0>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012092:	2201      	movs	r2, #1
 8012094:	409a      	lsls	r2, r3
 8012096:	4b17      	ldr	r3, [pc, #92]	; (80120f4 <xTaskPriorityInherit+0xe8>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4313      	orrs	r3, r2
 801209c:	4a15      	ldr	r2, [pc, #84]	; (80120f4 <xTaskPriorityInherit+0xe8>)
 801209e:	6013      	str	r3, [r2, #0]
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a4:	4613      	mov	r3, r2
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	4413      	add	r3, r2
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	4a10      	ldr	r2, [pc, #64]	; (80120f0 <xTaskPriorityInherit+0xe4>)
 80120ae:	441a      	add	r2, r3
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	3304      	adds	r3, #4
 80120b4:	4619      	mov	r1, r3
 80120b6:	4610      	mov	r0, r2
 80120b8:	f7fe f8ee 	bl	8010298 <vListInsertEnd>
 80120bc:	e004      	b.n	80120c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120be:	4b0b      	ldr	r3, [pc, #44]	; (80120ec <xTaskPriorityInherit+0xe0>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80120c8:	2301      	movs	r3, #1
 80120ca:	60fb      	str	r3, [r7, #12]
 80120cc:	e008      	b.n	80120e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120d2:	4b06      	ldr	r3, [pc, #24]	; (80120ec <xTaskPriorityInherit+0xe0>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120d8:	429a      	cmp	r2, r3
 80120da:	d201      	bcs.n	80120e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80120dc:	2301      	movs	r3, #1
 80120de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120e0:	68fb      	ldr	r3, [r7, #12]
	}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3710      	adds	r7, #16
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	20000b64 	.word	0x20000b64
 80120f0:	20000b68 	.word	0x20000b68
 80120f4:	20000c6c 	.word	0x20000c6c

080120f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012104:	2300      	movs	r3, #0
 8012106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d06e      	beq.n	80121ec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801210e:	4b3a      	ldr	r3, [pc, #232]	; (80121f8 <xTaskPriorityDisinherit+0x100>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	693a      	ldr	r2, [r7, #16]
 8012114:	429a      	cmp	r2, r3
 8012116:	d00a      	beq.n	801212e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	60fb      	str	r3, [r7, #12]
}
 801212a:	bf00      	nop
 801212c:	e7fe      	b.n	801212c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012132:	2b00      	cmp	r3, #0
 8012134:	d10a      	bne.n	801214c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213a:	f383 8811 	msr	BASEPRI, r3
 801213e:	f3bf 8f6f 	isb	sy
 8012142:	f3bf 8f4f 	dsb	sy
 8012146:	60bb      	str	r3, [r7, #8]
}
 8012148:	bf00      	nop
 801214a:	e7fe      	b.n	801214a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012150:	1e5a      	subs	r2, r3, #1
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801215e:	429a      	cmp	r2, r3
 8012160:	d044      	beq.n	80121ec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012166:	2b00      	cmp	r3, #0
 8012168:	d140      	bne.n	80121ec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	3304      	adds	r3, #4
 801216e:	4618      	mov	r0, r3
 8012170:	f7fe f8ef 	bl	8010352 <uxListRemove>
 8012174:	4603      	mov	r3, r0
 8012176:	2b00      	cmp	r3, #0
 8012178:	d115      	bne.n	80121a6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801217e:	491f      	ldr	r1, [pc, #124]	; (80121fc <xTaskPriorityDisinherit+0x104>)
 8012180:	4613      	mov	r3, r2
 8012182:	009b      	lsls	r3, r3, #2
 8012184:	4413      	add	r3, r2
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	440b      	add	r3, r1
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d10a      	bne.n	80121a6 <xTaskPriorityDisinherit+0xae>
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012194:	2201      	movs	r2, #1
 8012196:	fa02 f303 	lsl.w	r3, r2, r3
 801219a:	43da      	mvns	r2, r3
 801219c:	4b18      	ldr	r3, [pc, #96]	; (8012200 <xTaskPriorityDisinherit+0x108>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4013      	ands	r3, r2
 80121a2:	4a17      	ldr	r2, [pc, #92]	; (8012200 <xTaskPriorityDisinherit+0x108>)
 80121a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b2:	f1c3 0207 	rsb	r2, r3, #7
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121be:	2201      	movs	r2, #1
 80121c0:	409a      	lsls	r2, r3
 80121c2:	4b0f      	ldr	r3, [pc, #60]	; (8012200 <xTaskPriorityDisinherit+0x108>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4313      	orrs	r3, r2
 80121c8:	4a0d      	ldr	r2, [pc, #52]	; (8012200 <xTaskPriorityDisinherit+0x108>)
 80121ca:	6013      	str	r3, [r2, #0]
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121d0:	4613      	mov	r3, r2
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	4413      	add	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	4a08      	ldr	r2, [pc, #32]	; (80121fc <xTaskPriorityDisinherit+0x104>)
 80121da:	441a      	add	r2, r3
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	3304      	adds	r3, #4
 80121e0:	4619      	mov	r1, r3
 80121e2:	4610      	mov	r0, r2
 80121e4:	f7fe f858 	bl	8010298 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80121e8:	2301      	movs	r3, #1
 80121ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121ec:	697b      	ldr	r3, [r7, #20]
	}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3718      	adds	r7, #24
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	20000b64 	.word	0x20000b64
 80121fc:	20000b68 	.word	0x20000b68
 8012200:	20000c6c 	.word	0x20000c6c

08012204 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012204:	b580      	push	{r7, lr}
 8012206:	b088      	sub	sp, #32
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012212:	2301      	movs	r3, #1
 8012214:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d077      	beq.n	801230c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10a      	bne.n	801223a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	60fb      	str	r3, [r7, #12]
}
 8012236:	bf00      	nop
 8012238:	e7fe      	b.n	8012238 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801223a:	69bb      	ldr	r3, [r7, #24]
 801223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	429a      	cmp	r2, r3
 8012242:	d902      	bls.n	801224a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	61fb      	str	r3, [r7, #28]
 8012248:	e002      	b.n	8012250 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801224e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012254:	69fa      	ldr	r2, [r7, #28]
 8012256:	429a      	cmp	r2, r3
 8012258:	d058      	beq.n	801230c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801225a:	69bb      	ldr	r3, [r7, #24]
 801225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801225e:	697a      	ldr	r2, [r7, #20]
 8012260:	429a      	cmp	r2, r3
 8012262:	d153      	bne.n	801230c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012264:	4b2b      	ldr	r3, [pc, #172]	; (8012314 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	69ba      	ldr	r2, [r7, #24]
 801226a:	429a      	cmp	r2, r3
 801226c:	d10a      	bne.n	8012284 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012272:	f383 8811 	msr	BASEPRI, r3
 8012276:	f3bf 8f6f 	isb	sy
 801227a:	f3bf 8f4f 	dsb	sy
 801227e:	60bb      	str	r3, [r7, #8]
}
 8012280:	bf00      	nop
 8012282:	e7fe      	b.n	8012282 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012288:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	69fa      	ldr	r2, [r7, #28]
 801228e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012290:	69bb      	ldr	r3, [r7, #24]
 8012292:	699b      	ldr	r3, [r3, #24]
 8012294:	2b00      	cmp	r3, #0
 8012296:	db04      	blt.n	80122a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012298:	69fb      	ldr	r3, [r7, #28]
 801229a:	f1c3 0207 	rsb	r2, r3, #7
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	6959      	ldr	r1, [r3, #20]
 80122a6:	693a      	ldr	r2, [r7, #16]
 80122a8:	4613      	mov	r3, r2
 80122aa:	009b      	lsls	r3, r3, #2
 80122ac:	4413      	add	r3, r2
 80122ae:	009b      	lsls	r3, r3, #2
 80122b0:	4a19      	ldr	r2, [pc, #100]	; (8012318 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80122b2:	4413      	add	r3, r2
 80122b4:	4299      	cmp	r1, r3
 80122b6:	d129      	bne.n	801230c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122b8:	69bb      	ldr	r3, [r7, #24]
 80122ba:	3304      	adds	r3, #4
 80122bc:	4618      	mov	r0, r3
 80122be:	f7fe f848 	bl	8010352 <uxListRemove>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d10a      	bne.n	80122de <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122cc:	2201      	movs	r2, #1
 80122ce:	fa02 f303 	lsl.w	r3, r2, r3
 80122d2:	43da      	mvns	r2, r3
 80122d4:	4b11      	ldr	r3, [pc, #68]	; (801231c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	4013      	ands	r3, r2
 80122da:	4a10      	ldr	r2, [pc, #64]	; (801231c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80122de:	69bb      	ldr	r3, [r7, #24]
 80122e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e2:	2201      	movs	r2, #1
 80122e4:	409a      	lsls	r2, r3
 80122e6:	4b0d      	ldr	r3, [pc, #52]	; (801231c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4313      	orrs	r3, r2
 80122ec:	4a0b      	ldr	r2, [pc, #44]	; (801231c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122f4:	4613      	mov	r3, r2
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	4413      	add	r3, r2
 80122fa:	009b      	lsls	r3, r3, #2
 80122fc:	4a06      	ldr	r2, [pc, #24]	; (8012318 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80122fe:	441a      	add	r2, r3
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	3304      	adds	r3, #4
 8012304:	4619      	mov	r1, r3
 8012306:	4610      	mov	r0, r2
 8012308:	f7fd ffc6 	bl	8010298 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801230c:	bf00      	nop
 801230e:	3720      	adds	r7, #32
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	20000b64 	.word	0x20000b64
 8012318:	20000b68 	.word	0x20000b68
 801231c:	20000c6c 	.word	0x20000c6c

08012320 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8012326:	4b09      	ldr	r3, [pc, #36]	; (801234c <uxTaskResetEventItemValue+0x2c>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	699b      	ldr	r3, [r3, #24]
 801232c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801232e:	4b07      	ldr	r3, [pc, #28]	; (801234c <uxTaskResetEventItemValue+0x2c>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012334:	4b05      	ldr	r3, [pc, #20]	; (801234c <uxTaskResetEventItemValue+0x2c>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f1c2 0207 	rsb	r2, r2, #7
 801233c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801233e:	687b      	ldr	r3, [r7, #4]
}
 8012340:	4618      	mov	r0, r3
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	20000b64 	.word	0x20000b64

08012350 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012350:	b480      	push	{r7}
 8012352:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012354:	4b07      	ldr	r3, [pc, #28]	; (8012374 <pvTaskIncrementMutexHeldCount+0x24>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d004      	beq.n	8012366 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801235c:	4b05      	ldr	r3, [pc, #20]	; (8012374 <pvTaskIncrementMutexHeldCount+0x24>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012362:	3201      	adds	r2, #1
 8012364:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012366:	4b03      	ldr	r3, [pc, #12]	; (8012374 <pvTaskIncrementMutexHeldCount+0x24>)
 8012368:	681b      	ldr	r3, [r3, #0]
	}
 801236a:	4618      	mov	r0, r3
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr
 8012374:	20000b64 	.word	0x20000b64

08012378 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012382:	4b29      	ldr	r3, [pc, #164]	; (8012428 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012388:	4b28      	ldr	r3, [pc, #160]	; (801242c <prvAddCurrentTaskToDelayedList+0xb4>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	3304      	adds	r3, #4
 801238e:	4618      	mov	r0, r3
 8012390:	f7fd ffdf 	bl	8010352 <uxListRemove>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d10b      	bne.n	80123b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801239a:	4b24      	ldr	r3, [pc, #144]	; (801242c <prvAddCurrentTaskToDelayedList+0xb4>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a0:	2201      	movs	r2, #1
 80123a2:	fa02 f303 	lsl.w	r3, r2, r3
 80123a6:	43da      	mvns	r2, r3
 80123a8:	4b21      	ldr	r3, [pc, #132]	; (8012430 <prvAddCurrentTaskToDelayedList+0xb8>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4013      	ands	r3, r2
 80123ae:	4a20      	ldr	r2, [pc, #128]	; (8012430 <prvAddCurrentTaskToDelayedList+0xb8>)
 80123b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123b8:	d10a      	bne.n	80123d0 <prvAddCurrentTaskToDelayedList+0x58>
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d007      	beq.n	80123d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123c0:	4b1a      	ldr	r3, [pc, #104]	; (801242c <prvAddCurrentTaskToDelayedList+0xb4>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	3304      	adds	r3, #4
 80123c6:	4619      	mov	r1, r3
 80123c8:	481a      	ldr	r0, [pc, #104]	; (8012434 <prvAddCurrentTaskToDelayedList+0xbc>)
 80123ca:	f7fd ff65 	bl	8010298 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80123ce:	e026      	b.n	801241e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	4413      	add	r3, r2
 80123d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80123d8:	4b14      	ldr	r3, [pc, #80]	; (801242c <prvAddCurrentTaskToDelayedList+0xb4>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d209      	bcs.n	80123fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123e8:	4b13      	ldr	r3, [pc, #76]	; (8012438 <prvAddCurrentTaskToDelayedList+0xc0>)
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	4b0f      	ldr	r3, [pc, #60]	; (801242c <prvAddCurrentTaskToDelayedList+0xb4>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3304      	adds	r3, #4
 80123f2:	4619      	mov	r1, r3
 80123f4:	4610      	mov	r0, r2
 80123f6:	f7fd ff73 	bl	80102e0 <vListInsert>
}
 80123fa:	e010      	b.n	801241e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123fc:	4b0f      	ldr	r3, [pc, #60]	; (801243c <prvAddCurrentTaskToDelayedList+0xc4>)
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	4b0a      	ldr	r3, [pc, #40]	; (801242c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	3304      	adds	r3, #4
 8012406:	4619      	mov	r1, r3
 8012408:	4610      	mov	r0, r2
 801240a:	f7fd ff69 	bl	80102e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801240e:	4b0c      	ldr	r3, [pc, #48]	; (8012440 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	68ba      	ldr	r2, [r7, #8]
 8012414:	429a      	cmp	r2, r3
 8012416:	d202      	bcs.n	801241e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012418:	4a09      	ldr	r2, [pc, #36]	; (8012440 <prvAddCurrentTaskToDelayedList+0xc8>)
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6013      	str	r3, [r2, #0]
}
 801241e:	bf00      	nop
 8012420:	3710      	adds	r7, #16
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	20000c68 	.word	0x20000c68
 801242c:	20000b64 	.word	0x20000b64
 8012430:	20000c6c 	.word	0x20000c6c
 8012434:	20000c50 	.word	0x20000c50
 8012438:	20000c20 	.word	0x20000c20
 801243c:	20000c1c 	.word	0x20000c1c
 8012440:	20000c84 	.word	0x20000c84

08012444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012444:	b480      	push	{r7}
 8012446:	b085      	sub	sp, #20
 8012448:	af00      	add	r7, sp, #0
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	60b9      	str	r1, [r7, #8]
 801244e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	3b04      	subs	r3, #4
 8012454:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801245c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	3b04      	subs	r3, #4
 8012462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	f023 0201 	bic.w	r2, r3, #1
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	3b04      	subs	r3, #4
 8012472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012474:	4a0c      	ldr	r2, [pc, #48]	; (80124a8 <pxPortInitialiseStack+0x64>)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	3b14      	subs	r3, #20
 801247e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	3b04      	subs	r3, #4
 801248a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f06f 0202 	mvn.w	r2, #2
 8012492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	3b20      	subs	r3, #32
 8012498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801249a:	68fb      	ldr	r3, [r7, #12]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3714      	adds	r7, #20
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr
 80124a8:	080124ad 	.word	0x080124ad

080124ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80124ac:	b480      	push	{r7}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80124b2:	2300      	movs	r3, #0
 80124b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80124b6:	4b12      	ldr	r3, [pc, #72]	; (8012500 <prvTaskExitError+0x54>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124be:	d00a      	beq.n	80124d6 <prvTaskExitError+0x2a>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	60fb      	str	r3, [r7, #12]
}
 80124d2:	bf00      	nop
 80124d4:	e7fe      	b.n	80124d4 <prvTaskExitError+0x28>
	__asm volatile
 80124d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124da:	f383 8811 	msr	BASEPRI, r3
 80124de:	f3bf 8f6f 	isb	sy
 80124e2:	f3bf 8f4f 	dsb	sy
 80124e6:	60bb      	str	r3, [r7, #8]
}
 80124e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80124ea:	bf00      	nop
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d0fc      	beq.n	80124ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80124f2:	bf00      	nop
 80124f4:	bf00      	nop
 80124f6:	3714      	adds	r7, #20
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr
 8012500:	2000001c 	.word	0x2000001c
	...

08012510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012510:	4b07      	ldr	r3, [pc, #28]	; (8012530 <pxCurrentTCBConst2>)
 8012512:	6819      	ldr	r1, [r3, #0]
 8012514:	6808      	ldr	r0, [r1, #0]
 8012516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251a:	f380 8809 	msr	PSP, r0
 801251e:	f3bf 8f6f 	isb	sy
 8012522:	f04f 0000 	mov.w	r0, #0
 8012526:	f380 8811 	msr	BASEPRI, r0
 801252a:	4770      	bx	lr
 801252c:	f3af 8000 	nop.w

08012530 <pxCurrentTCBConst2>:
 8012530:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012534:	bf00      	nop
 8012536:	bf00      	nop

08012538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012538:	4808      	ldr	r0, [pc, #32]	; (801255c <prvPortStartFirstTask+0x24>)
 801253a:	6800      	ldr	r0, [r0, #0]
 801253c:	6800      	ldr	r0, [r0, #0]
 801253e:	f380 8808 	msr	MSP, r0
 8012542:	f04f 0000 	mov.w	r0, #0
 8012546:	f380 8814 	msr	CONTROL, r0
 801254a:	b662      	cpsie	i
 801254c:	b661      	cpsie	f
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	f3bf 8f6f 	isb	sy
 8012556:	df00      	svc	0
 8012558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801255a:	bf00      	nop
 801255c:	e000ed08 	.word	0xe000ed08

08012560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b086      	sub	sp, #24
 8012564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012566:	4b46      	ldr	r3, [pc, #280]	; (8012680 <xPortStartScheduler+0x120>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	4a46      	ldr	r2, [pc, #280]	; (8012684 <xPortStartScheduler+0x124>)
 801256c:	4293      	cmp	r3, r2
 801256e:	d10a      	bne.n	8012586 <xPortStartScheduler+0x26>
	__asm volatile
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	613b      	str	r3, [r7, #16]
}
 8012582:	bf00      	nop
 8012584:	e7fe      	b.n	8012584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012586:	4b3e      	ldr	r3, [pc, #248]	; (8012680 <xPortStartScheduler+0x120>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4a3f      	ldr	r2, [pc, #252]	; (8012688 <xPortStartScheduler+0x128>)
 801258c:	4293      	cmp	r3, r2
 801258e:	d10a      	bne.n	80125a6 <xPortStartScheduler+0x46>
	__asm volatile
 8012590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012594:	f383 8811 	msr	BASEPRI, r3
 8012598:	f3bf 8f6f 	isb	sy
 801259c:	f3bf 8f4f 	dsb	sy
 80125a0:	60fb      	str	r3, [r7, #12]
}
 80125a2:	bf00      	nop
 80125a4:	e7fe      	b.n	80125a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80125a6:	4b39      	ldr	r3, [pc, #228]	; (801268c <xPortStartScheduler+0x12c>)
 80125a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	22ff      	movs	r2, #255	; 0xff
 80125b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80125c0:	78fb      	ldrb	r3, [r7, #3]
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	4b31      	ldr	r3, [pc, #196]	; (8012690 <xPortStartScheduler+0x130>)
 80125cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80125ce:	4b31      	ldr	r3, [pc, #196]	; (8012694 <xPortStartScheduler+0x134>)
 80125d0:	2207      	movs	r2, #7
 80125d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125d4:	e009      	b.n	80125ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80125d6:	4b2f      	ldr	r3, [pc, #188]	; (8012694 <xPortStartScheduler+0x134>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	3b01      	subs	r3, #1
 80125dc:	4a2d      	ldr	r2, [pc, #180]	; (8012694 <xPortStartScheduler+0x134>)
 80125de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80125e0:	78fb      	ldrb	r3, [r7, #3]
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	005b      	lsls	r3, r3, #1
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125ea:	78fb      	ldrb	r3, [r7, #3]
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125f2:	2b80      	cmp	r3, #128	; 0x80
 80125f4:	d0ef      	beq.n	80125d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80125f6:	4b27      	ldr	r3, [pc, #156]	; (8012694 <xPortStartScheduler+0x134>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f1c3 0307 	rsb	r3, r3, #7
 80125fe:	2b04      	cmp	r3, #4
 8012600:	d00a      	beq.n	8012618 <xPortStartScheduler+0xb8>
	__asm volatile
 8012602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012606:	f383 8811 	msr	BASEPRI, r3
 801260a:	f3bf 8f6f 	isb	sy
 801260e:	f3bf 8f4f 	dsb	sy
 8012612:	60bb      	str	r3, [r7, #8]
}
 8012614:	bf00      	nop
 8012616:	e7fe      	b.n	8012616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012618:	4b1e      	ldr	r3, [pc, #120]	; (8012694 <xPortStartScheduler+0x134>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	021b      	lsls	r3, r3, #8
 801261e:	4a1d      	ldr	r2, [pc, #116]	; (8012694 <xPortStartScheduler+0x134>)
 8012620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012622:	4b1c      	ldr	r3, [pc, #112]	; (8012694 <xPortStartScheduler+0x134>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801262a:	4a1a      	ldr	r2, [pc, #104]	; (8012694 <xPortStartScheduler+0x134>)
 801262c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	b2da      	uxtb	r2, r3
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012636:	4b18      	ldr	r3, [pc, #96]	; (8012698 <xPortStartScheduler+0x138>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4a17      	ldr	r2, [pc, #92]	; (8012698 <xPortStartScheduler+0x138>)
 801263c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012642:	4b15      	ldr	r3, [pc, #84]	; (8012698 <xPortStartScheduler+0x138>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	4a14      	ldr	r2, [pc, #80]	; (8012698 <xPortStartScheduler+0x138>)
 8012648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801264c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801264e:	f000 f8dd 	bl	801280c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012652:	4b12      	ldr	r3, [pc, #72]	; (801269c <xPortStartScheduler+0x13c>)
 8012654:	2200      	movs	r2, #0
 8012656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012658:	f000 f8fc 	bl	8012854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801265c:	4b10      	ldr	r3, [pc, #64]	; (80126a0 <xPortStartScheduler+0x140>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a0f      	ldr	r2, [pc, #60]	; (80126a0 <xPortStartScheduler+0x140>)
 8012662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012668:	f7ff ff66 	bl	8012538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801266c:	f7ff f9d6 	bl	8011a1c <vTaskSwitchContext>
	prvTaskExitError();
 8012670:	f7ff ff1c 	bl	80124ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012674:	2300      	movs	r3, #0
}
 8012676:	4618      	mov	r0, r3
 8012678:	3718      	adds	r7, #24
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	e000ed00 	.word	0xe000ed00
 8012684:	410fc271 	.word	0x410fc271
 8012688:	410fc270 	.word	0x410fc270
 801268c:	e000e400 	.word	0xe000e400
 8012690:	20000c90 	.word	0x20000c90
 8012694:	20000c94 	.word	0x20000c94
 8012698:	e000ed20 	.word	0xe000ed20
 801269c:	2000001c 	.word	0x2000001c
 80126a0:	e000ef34 	.word	0xe000ef34

080126a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
	__asm volatile
 80126aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ae:	f383 8811 	msr	BASEPRI, r3
 80126b2:	f3bf 8f6f 	isb	sy
 80126b6:	f3bf 8f4f 	dsb	sy
 80126ba:	607b      	str	r3, [r7, #4]
}
 80126bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80126be:	4b0f      	ldr	r3, [pc, #60]	; (80126fc <vPortEnterCritical+0x58>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	3301      	adds	r3, #1
 80126c4:	4a0d      	ldr	r2, [pc, #52]	; (80126fc <vPortEnterCritical+0x58>)
 80126c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80126c8:	4b0c      	ldr	r3, [pc, #48]	; (80126fc <vPortEnterCritical+0x58>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d10f      	bne.n	80126f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80126d0:	4b0b      	ldr	r3, [pc, #44]	; (8012700 <vPortEnterCritical+0x5c>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00a      	beq.n	80126f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80126da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126de:	f383 8811 	msr	BASEPRI, r3
 80126e2:	f3bf 8f6f 	isb	sy
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	603b      	str	r3, [r7, #0]
}
 80126ec:	bf00      	nop
 80126ee:	e7fe      	b.n	80126ee <vPortEnterCritical+0x4a>
	}
}
 80126f0:	bf00      	nop
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr
 80126fc:	2000001c 	.word	0x2000001c
 8012700:	e000ed04 	.word	0xe000ed04

08012704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801270a:	4b12      	ldr	r3, [pc, #72]	; (8012754 <vPortExitCritical+0x50>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d10a      	bne.n	8012728 <vPortExitCritical+0x24>
	__asm volatile
 8012712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012716:	f383 8811 	msr	BASEPRI, r3
 801271a:	f3bf 8f6f 	isb	sy
 801271e:	f3bf 8f4f 	dsb	sy
 8012722:	607b      	str	r3, [r7, #4]
}
 8012724:	bf00      	nop
 8012726:	e7fe      	b.n	8012726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012728:	4b0a      	ldr	r3, [pc, #40]	; (8012754 <vPortExitCritical+0x50>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	3b01      	subs	r3, #1
 801272e:	4a09      	ldr	r2, [pc, #36]	; (8012754 <vPortExitCritical+0x50>)
 8012730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012732:	4b08      	ldr	r3, [pc, #32]	; (8012754 <vPortExitCritical+0x50>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d105      	bne.n	8012746 <vPortExitCritical+0x42>
 801273a:	2300      	movs	r3, #0
 801273c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	f383 8811 	msr	BASEPRI, r3
}
 8012744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012746:	bf00      	nop
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	2000001c 	.word	0x2000001c
	...

08012760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012760:	f3ef 8009 	mrs	r0, PSP
 8012764:	f3bf 8f6f 	isb	sy
 8012768:	4b15      	ldr	r3, [pc, #84]	; (80127c0 <pxCurrentTCBConst>)
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	f01e 0f10 	tst.w	lr, #16
 8012770:	bf08      	it	eq
 8012772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801277a:	6010      	str	r0, [r2, #0]
 801277c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012784:	f380 8811 	msr	BASEPRI, r0
 8012788:	f3bf 8f4f 	dsb	sy
 801278c:	f3bf 8f6f 	isb	sy
 8012790:	f7ff f944 	bl	8011a1c <vTaskSwitchContext>
 8012794:	f04f 0000 	mov.w	r0, #0
 8012798:	f380 8811 	msr	BASEPRI, r0
 801279c:	bc09      	pop	{r0, r3}
 801279e:	6819      	ldr	r1, [r3, #0]
 80127a0:	6808      	ldr	r0, [r1, #0]
 80127a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a6:	f01e 0f10 	tst.w	lr, #16
 80127aa:	bf08      	it	eq
 80127ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80127b0:	f380 8809 	msr	PSP, r0
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	f3af 8000 	nop.w

080127c0 <pxCurrentTCBConst>:
 80127c0:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80127c4:	bf00      	nop
 80127c6:	bf00      	nop

080127c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
	__asm volatile
 80127ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d2:	f383 8811 	msr	BASEPRI, r3
 80127d6:	f3bf 8f6f 	isb	sy
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	607b      	str	r3, [r7, #4]
}
 80127e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80127e2:	f7ff f863 	bl	80118ac <xTaskIncrementTick>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d003      	beq.n	80127f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80127ec:	4b06      	ldr	r3, [pc, #24]	; (8012808 <SysTick_Handler+0x40>)
 80127ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127f2:	601a      	str	r2, [r3, #0]
 80127f4:	2300      	movs	r3, #0
 80127f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	f383 8811 	msr	BASEPRI, r3
}
 80127fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012800:	bf00      	nop
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	e000ed04 	.word	0xe000ed04

0801280c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801280c:	b480      	push	{r7}
 801280e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012810:	4b0b      	ldr	r3, [pc, #44]	; (8012840 <vPortSetupTimerInterrupt+0x34>)
 8012812:	2200      	movs	r2, #0
 8012814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012816:	4b0b      	ldr	r3, [pc, #44]	; (8012844 <vPortSetupTimerInterrupt+0x38>)
 8012818:	2200      	movs	r2, #0
 801281a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801281c:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <vPortSetupTimerInterrupt+0x3c>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a0a      	ldr	r2, [pc, #40]	; (801284c <vPortSetupTimerInterrupt+0x40>)
 8012822:	fba2 2303 	umull	r2, r3, r2, r3
 8012826:	099b      	lsrs	r3, r3, #6
 8012828:	4a09      	ldr	r2, [pc, #36]	; (8012850 <vPortSetupTimerInterrupt+0x44>)
 801282a:	3b01      	subs	r3, #1
 801282c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801282e:	4b04      	ldr	r3, [pc, #16]	; (8012840 <vPortSetupTimerInterrupt+0x34>)
 8012830:	2207      	movs	r2, #7
 8012832:	601a      	str	r2, [r3, #0]
}
 8012834:	bf00      	nop
 8012836:	46bd      	mov	sp, r7
 8012838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop
 8012840:	e000e010 	.word	0xe000e010
 8012844:	e000e018 	.word	0xe000e018
 8012848:	20000010 	.word	0x20000010
 801284c:	10624dd3 	.word	0x10624dd3
 8012850:	e000e014 	.word	0xe000e014

08012854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012864 <vPortEnableVFP+0x10>
 8012858:	6801      	ldr	r1, [r0, #0]
 801285a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801285e:	6001      	str	r1, [r0, #0]
 8012860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012862:	bf00      	nop
 8012864:	e000ed88 	.word	0xe000ed88

08012868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801286e:	f3ef 8305 	mrs	r3, IPSR
 8012872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	2b0f      	cmp	r3, #15
 8012878:	d914      	bls.n	80128a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801287a:	4a17      	ldr	r2, [pc, #92]	; (80128d8 <vPortValidateInterruptPriority+0x70>)
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	4413      	add	r3, r2
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012884:	4b15      	ldr	r3, [pc, #84]	; (80128dc <vPortValidateInterruptPriority+0x74>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	7afa      	ldrb	r2, [r7, #11]
 801288a:	429a      	cmp	r2, r3
 801288c:	d20a      	bcs.n	80128a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	607b      	str	r3, [r7, #4]
}
 80128a0:	bf00      	nop
 80128a2:	e7fe      	b.n	80128a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80128a4:	4b0e      	ldr	r3, [pc, #56]	; (80128e0 <vPortValidateInterruptPriority+0x78>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80128ac:	4b0d      	ldr	r3, [pc, #52]	; (80128e4 <vPortValidateInterruptPriority+0x7c>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d90a      	bls.n	80128ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80128b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b8:	f383 8811 	msr	BASEPRI, r3
 80128bc:	f3bf 8f6f 	isb	sy
 80128c0:	f3bf 8f4f 	dsb	sy
 80128c4:	603b      	str	r3, [r7, #0]
}
 80128c6:	bf00      	nop
 80128c8:	e7fe      	b.n	80128c8 <vPortValidateInterruptPriority+0x60>
	}
 80128ca:	bf00      	nop
 80128cc:	3714      	adds	r7, #20
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	e000e3f0 	.word	0xe000e3f0
 80128dc:	20000c90 	.word	0x20000c90
 80128e0:	e000ed0c 	.word	0xe000ed0c
 80128e4:	20000c94 	.word	0x20000c94

080128e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b08a      	sub	sp, #40	; 0x28
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80128f0:	2300      	movs	r3, #0
 80128f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80128f4:	f7fe ff0e 	bl	8011714 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80128f8:	4b5b      	ldr	r3, [pc, #364]	; (8012a68 <pvPortMalloc+0x180>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d101      	bne.n	8012904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012900:	f000 f920 	bl	8012b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012904:	4b59      	ldr	r3, [pc, #356]	; (8012a6c <pvPortMalloc+0x184>)
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	4013      	ands	r3, r2
 801290c:	2b00      	cmp	r3, #0
 801290e:	f040 8093 	bne.w	8012a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d01d      	beq.n	8012954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012918:	2208      	movs	r2, #8
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4413      	add	r3, r2
 801291e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f003 0307 	and.w	r3, r3, #7
 8012926:	2b00      	cmp	r3, #0
 8012928:	d014      	beq.n	8012954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f023 0307 	bic.w	r3, r3, #7
 8012930:	3308      	adds	r3, #8
 8012932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f003 0307 	and.w	r3, r3, #7
 801293a:	2b00      	cmp	r3, #0
 801293c:	d00a      	beq.n	8012954 <pvPortMalloc+0x6c>
	__asm volatile
 801293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012942:	f383 8811 	msr	BASEPRI, r3
 8012946:	f3bf 8f6f 	isb	sy
 801294a:	f3bf 8f4f 	dsb	sy
 801294e:	617b      	str	r3, [r7, #20]
}
 8012950:	bf00      	nop
 8012952:	e7fe      	b.n	8012952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d06e      	beq.n	8012a38 <pvPortMalloc+0x150>
 801295a:	4b45      	ldr	r3, [pc, #276]	; (8012a70 <pvPortMalloc+0x188>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	429a      	cmp	r2, r3
 8012962:	d869      	bhi.n	8012a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012964:	4b43      	ldr	r3, [pc, #268]	; (8012a74 <pvPortMalloc+0x18c>)
 8012966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012968:	4b42      	ldr	r3, [pc, #264]	; (8012a74 <pvPortMalloc+0x18c>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801296e:	e004      	b.n	801297a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	429a      	cmp	r2, r3
 8012982:	d903      	bls.n	801298c <pvPortMalloc+0xa4>
 8012984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1f1      	bne.n	8012970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801298c:	4b36      	ldr	r3, [pc, #216]	; (8012a68 <pvPortMalloc+0x180>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012992:	429a      	cmp	r2, r3
 8012994:	d050      	beq.n	8012a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012996:	6a3b      	ldr	r3, [r7, #32]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	2208      	movs	r2, #8
 801299c:	4413      	add	r3, r2
 801299e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80129a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	6a3b      	ldr	r3, [r7, #32]
 80129a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	685a      	ldr	r2, [r3, #4]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	1ad2      	subs	r2, r2, r3
 80129b0:	2308      	movs	r3, #8
 80129b2:	005b      	lsls	r3, r3, #1
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d91f      	bls.n	80129f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80129b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4413      	add	r3, r2
 80129be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	f003 0307 	and.w	r3, r3, #7
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00a      	beq.n	80129e0 <pvPortMalloc+0xf8>
	__asm volatile
 80129ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ce:	f383 8811 	msr	BASEPRI, r3
 80129d2:	f3bf 8f6f 	isb	sy
 80129d6:	f3bf 8f4f 	dsb	sy
 80129da:	613b      	str	r3, [r7, #16]
}
 80129dc:	bf00      	nop
 80129de:	e7fe      	b.n	80129de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80129e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e2:	685a      	ldr	r2, [r3, #4]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	1ad2      	subs	r2, r2, r3
 80129e8:	69bb      	ldr	r3, [r7, #24]
 80129ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80129ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80129f2:	69b8      	ldr	r0, [r7, #24]
 80129f4:	f000 f908 	bl	8012c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80129f8:	4b1d      	ldr	r3, [pc, #116]	; (8012a70 <pvPortMalloc+0x188>)
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	4a1b      	ldr	r2, [pc, #108]	; (8012a70 <pvPortMalloc+0x188>)
 8012a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012a06:	4b1a      	ldr	r3, [pc, #104]	; (8012a70 <pvPortMalloc+0x188>)
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	4b1b      	ldr	r3, [pc, #108]	; (8012a78 <pvPortMalloc+0x190>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d203      	bcs.n	8012a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012a12:	4b17      	ldr	r3, [pc, #92]	; (8012a70 <pvPortMalloc+0x188>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	4a18      	ldr	r2, [pc, #96]	; (8012a78 <pvPortMalloc+0x190>)
 8012a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	685a      	ldr	r2, [r3, #4]
 8012a1e:	4b13      	ldr	r3, [pc, #76]	; (8012a6c <pvPortMalloc+0x184>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	431a      	orrs	r2, r3
 8012a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012a2e:	4b13      	ldr	r3, [pc, #76]	; (8012a7c <pvPortMalloc+0x194>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	3301      	adds	r3, #1
 8012a34:	4a11      	ldr	r2, [pc, #68]	; (8012a7c <pvPortMalloc+0x194>)
 8012a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012a38:	f7fe fe7a 	bl	8011730 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	f003 0307 	and.w	r3, r3, #7
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00a      	beq.n	8012a5c <pvPortMalloc+0x174>
	__asm volatile
 8012a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4a:	f383 8811 	msr	BASEPRI, r3
 8012a4e:	f3bf 8f6f 	isb	sy
 8012a52:	f3bf 8f4f 	dsb	sy
 8012a56:	60fb      	str	r3, [r7, #12]
}
 8012a58:	bf00      	nop
 8012a5a:	e7fe      	b.n	8012a5a <pvPortMalloc+0x172>
	return pvReturn;
 8012a5c:	69fb      	ldr	r3, [r7, #28]
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3728      	adds	r7, #40	; 0x28
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	20008338 	.word	0x20008338
 8012a6c:	2000834c 	.word	0x2000834c
 8012a70:	2000833c 	.word	0x2000833c
 8012a74:	20008330 	.word	0x20008330
 8012a78:	20008340 	.word	0x20008340
 8012a7c:	20008344 	.word	0x20008344

08012a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b086      	sub	sp, #24
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d04d      	beq.n	8012b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012a92:	2308      	movs	r3, #8
 8012a94:	425b      	negs	r3, r3
 8012a96:	697a      	ldr	r2, [r7, #20]
 8012a98:	4413      	add	r3, r2
 8012a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	685a      	ldr	r2, [r3, #4]
 8012aa4:	4b24      	ldr	r3, [pc, #144]	; (8012b38 <vPortFree+0xb8>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4013      	ands	r3, r2
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d10a      	bne.n	8012ac4 <vPortFree+0x44>
	__asm volatile
 8012aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	60fb      	str	r3, [r7, #12]
}
 8012ac0:	bf00      	nop
 8012ac2:	e7fe      	b.n	8012ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d00a      	beq.n	8012ae2 <vPortFree+0x62>
	__asm volatile
 8012acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad0:	f383 8811 	msr	BASEPRI, r3
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	f3bf 8f4f 	dsb	sy
 8012adc:	60bb      	str	r3, [r7, #8]
}
 8012ade:	bf00      	nop
 8012ae0:	e7fe      	b.n	8012ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	685a      	ldr	r2, [r3, #4]
 8012ae6:	4b14      	ldr	r3, [pc, #80]	; (8012b38 <vPortFree+0xb8>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	4013      	ands	r3, r2
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d01e      	beq.n	8012b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d11a      	bne.n	8012b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	685a      	ldr	r2, [r3, #4]
 8012afc:	4b0e      	ldr	r3, [pc, #56]	; (8012b38 <vPortFree+0xb8>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	43db      	mvns	r3, r3
 8012b02:	401a      	ands	r2, r3
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012b08:	f7fe fe04 	bl	8011714 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	685a      	ldr	r2, [r3, #4]
 8012b10:	4b0a      	ldr	r3, [pc, #40]	; (8012b3c <vPortFree+0xbc>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4413      	add	r3, r2
 8012b16:	4a09      	ldr	r2, [pc, #36]	; (8012b3c <vPortFree+0xbc>)
 8012b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012b1a:	6938      	ldr	r0, [r7, #16]
 8012b1c:	f000 f874 	bl	8012c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012b20:	4b07      	ldr	r3, [pc, #28]	; (8012b40 <vPortFree+0xc0>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	3301      	adds	r3, #1
 8012b26:	4a06      	ldr	r2, [pc, #24]	; (8012b40 <vPortFree+0xc0>)
 8012b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012b2a:	f7fe fe01 	bl	8011730 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012b2e:	bf00      	nop
 8012b30:	3718      	adds	r7, #24
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	2000834c 	.word	0x2000834c
 8012b3c:	2000833c 	.word	0x2000833c
 8012b40:	20008348 	.word	0x20008348

08012b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012b44:	b480      	push	{r7}
 8012b46:	b085      	sub	sp, #20
 8012b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012b4a:	f247 6398 	movw	r3, #30360	; 0x7698
 8012b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012b50:	4b27      	ldr	r3, [pc, #156]	; (8012bf0 <prvHeapInit+0xac>)
 8012b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	f003 0307 	and.w	r3, r3, #7
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d00c      	beq.n	8012b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	3307      	adds	r3, #7
 8012b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f023 0307 	bic.w	r3, r3, #7
 8012b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012b6c:	68ba      	ldr	r2, [r7, #8]
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	1ad3      	subs	r3, r2, r3
 8012b72:	4a1f      	ldr	r2, [pc, #124]	; (8012bf0 <prvHeapInit+0xac>)
 8012b74:	4413      	add	r3, r2
 8012b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012b7c:	4a1d      	ldr	r2, [pc, #116]	; (8012bf4 <prvHeapInit+0xb0>)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012b82:	4b1c      	ldr	r3, [pc, #112]	; (8012bf4 <prvHeapInit+0xb0>)
 8012b84:	2200      	movs	r2, #0
 8012b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	68ba      	ldr	r2, [r7, #8]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012b90:	2208      	movs	r2, #8
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	1a9b      	subs	r3, r3, r2
 8012b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f023 0307 	bic.w	r3, r3, #7
 8012b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	4a15      	ldr	r2, [pc, #84]	; (8012bf8 <prvHeapInit+0xb4>)
 8012ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012ba6:	4b14      	ldr	r3, [pc, #80]	; (8012bf8 <prvHeapInit+0xb4>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	2200      	movs	r2, #0
 8012bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012bae:	4b12      	ldr	r3, [pc, #72]	; (8012bf8 <prvHeapInit+0xb4>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	68fa      	ldr	r2, [r7, #12]
 8012bbe:	1ad2      	subs	r2, r2, r3
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012bc4:	4b0c      	ldr	r3, [pc, #48]	; (8012bf8 <prvHeapInit+0xb4>)
 8012bc6:	681a      	ldr	r2, [r3, #0]
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	4a0a      	ldr	r2, [pc, #40]	; (8012bfc <prvHeapInit+0xb8>)
 8012bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	4a09      	ldr	r2, [pc, #36]	; (8012c00 <prvHeapInit+0xbc>)
 8012bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012bdc:	4b09      	ldr	r3, [pc, #36]	; (8012c04 <prvHeapInit+0xc0>)
 8012bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012be2:	601a      	str	r2, [r3, #0]
}
 8012be4:	bf00      	nop
 8012be6:	3714      	adds	r7, #20
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr
 8012bf0:	20000c98 	.word	0x20000c98
 8012bf4:	20008330 	.word	0x20008330
 8012bf8:	20008338 	.word	0x20008338
 8012bfc:	20008340 	.word	0x20008340
 8012c00:	2000833c 	.word	0x2000833c
 8012c04:	2000834c 	.word	0x2000834c

08012c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b085      	sub	sp, #20
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012c10:	4b28      	ldr	r3, [pc, #160]	; (8012cb4 <prvInsertBlockIntoFreeList+0xac>)
 8012c12:	60fb      	str	r3, [r7, #12]
 8012c14:	e002      	b.n	8012c1c <prvInsertBlockIntoFreeList+0x14>
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	60fb      	str	r3, [r7, #12]
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d8f7      	bhi.n	8012c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	68ba      	ldr	r2, [r7, #8]
 8012c30:	4413      	add	r3, r2
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d108      	bne.n	8012c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	685a      	ldr	r2, [r3, #4]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	441a      	add	r2, r3
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	68ba      	ldr	r2, [r7, #8]
 8012c54:	441a      	add	r2, r3
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d118      	bne.n	8012c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	4b15      	ldr	r3, [pc, #84]	; (8012cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d00d      	beq.n	8012c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	685a      	ldr	r2, [r3, #4]
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	441a      	add	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	e008      	b.n	8012c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012c86:	4b0c      	ldr	r3, [pc, #48]	; (8012cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	e003      	b.n	8012c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d002      	beq.n	8012ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	687a      	ldr	r2, [r7, #4]
 8012ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ca6:	bf00      	nop
 8012ca8:	3714      	adds	r7, #20
 8012caa:	46bd      	mov	sp, r7
 8012cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	20008330 	.word	0x20008330
 8012cb8:	20008338 	.word	0x20008338

08012cbc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012cc6:	f009 fd5b 	bl	801c780 <sys_timeouts_sleeptime>
 8012cca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd2:	d10b      	bne.n	8012cec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012cd4:	4813      	ldr	r0, [pc, #76]	; (8012d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8012cd6:	f00c faca 	bl	801f26e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012cda:	2200      	movs	r2, #0
 8012cdc:	6839      	ldr	r1, [r7, #0]
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f00c fa3c 	bl	801f15c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012ce4:	480f      	ldr	r0, [pc, #60]	; (8012d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8012ce6:	f00c fab3 	bl	801f250 <sys_mutex_lock>
    return;
 8012cea:	e018      	b.n	8012d1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d102      	bne.n	8012cf8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012cf2:	f009 fd0b 	bl	801c70c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012cf6:	e7e6      	b.n	8012cc6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012cf8:	480a      	ldr	r0, [pc, #40]	; (8012d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8012cfa:	f00c fab8 	bl	801f26e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f00c fa2a 	bl	801f15c <sys_arch_mbox_fetch>
 8012d08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012d0a:	4806      	ldr	r0, [pc, #24]	; (8012d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8012d0c:	f00c faa0 	bl	801f250 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d16:	d102      	bne.n	8012d1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012d18:	f009 fcf8 	bl	801c70c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012d1c:	e7d3      	b.n	8012cc6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	20010df4 	.word	0x20010df4

08012d28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012d30:	4810      	ldr	r0, [pc, #64]	; (8012d74 <tcpip_thread+0x4c>)
 8012d32:	f00c fa8d 	bl	801f250 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012d36:	4b10      	ldr	r3, [pc, #64]	; (8012d78 <tcpip_thread+0x50>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d005      	beq.n	8012d4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012d3e:	4b0e      	ldr	r3, [pc, #56]	; (8012d78 <tcpip_thread+0x50>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	4a0e      	ldr	r2, [pc, #56]	; (8012d7c <tcpip_thread+0x54>)
 8012d44:	6812      	ldr	r2, [r2, #0]
 8012d46:	4610      	mov	r0, r2
 8012d48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012d4a:	f107 030c 	add.w	r3, r7, #12
 8012d4e:	4619      	mov	r1, r3
 8012d50:	480b      	ldr	r0, [pc, #44]	; (8012d80 <tcpip_thread+0x58>)
 8012d52:	f7ff ffb3 	bl	8012cbc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d106      	bne.n	8012d6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012d5c:	4b09      	ldr	r3, [pc, #36]	; (8012d84 <tcpip_thread+0x5c>)
 8012d5e:	2291      	movs	r2, #145	; 0x91
 8012d60:	4909      	ldr	r1, [pc, #36]	; (8012d88 <tcpip_thread+0x60>)
 8012d62:	480a      	ldr	r0, [pc, #40]	; (8012d8c <tcpip_thread+0x64>)
 8012d64:	f00c fb3a 	bl	801f3dc <iprintf>
      continue;
 8012d68:	e003      	b.n	8012d72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f000 f80f 	bl	8012d90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012d72:	e7ea      	b.n	8012d4a <tcpip_thread+0x22>
 8012d74:	20010df4 	.word	0x20010df4
 8012d78:	20008350 	.word	0x20008350
 8012d7c:	20008354 	.word	0x20008354
 8012d80:	20008358 	.word	0x20008358
 8012d84:	080215e4 	.word	0x080215e4
 8012d88:	08021614 	.word	0x08021614
 8012d8c:	08021634 	.word	0x08021634

08012d90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	2b02      	cmp	r3, #2
 8012d9e:	d026      	beq.n	8012dee <tcpip_thread_handle_msg+0x5e>
 8012da0:	2b02      	cmp	r3, #2
 8012da2:	dc2b      	bgt.n	8012dfc <tcpip_thread_handle_msg+0x6c>
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d002      	beq.n	8012dae <tcpip_thread_handle_msg+0x1e>
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d015      	beq.n	8012dd8 <tcpip_thread_handle_msg+0x48>
 8012dac:	e026      	b.n	8012dfc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	687a      	ldr	r2, [r7, #4]
 8012db4:	6850      	ldr	r0, [r2, #4]
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	6892      	ldr	r2, [r2, #8]
 8012dba:	4611      	mov	r1, r2
 8012dbc:	4798      	blx	r3
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d004      	beq.n	8012dce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f003 f8a7 	bl	8015f1c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012dce:	6879      	ldr	r1, [r7, #4]
 8012dd0:	2009      	movs	r0, #9
 8012dd2:	f002 f9ed 	bl	80151b0 <memp_free>
      break;
 8012dd6:	e018      	b.n	8012e0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	6892      	ldr	r2, [r2, #8]
 8012de0:	4610      	mov	r0, r2
 8012de2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012de4:	6879      	ldr	r1, [r7, #4]
 8012de6:	2008      	movs	r0, #8
 8012de8:	f002 f9e2 	bl	80151b0 <memp_free>
      break;
 8012dec:	e00d      	b.n	8012e0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	6892      	ldr	r2, [r2, #8]
 8012df6:	4610      	mov	r0, r2
 8012df8:	4798      	blx	r3
      break;
 8012dfa:	e006      	b.n	8012e0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012dfc:	4b05      	ldr	r3, [pc, #20]	; (8012e14 <tcpip_thread_handle_msg+0x84>)
 8012dfe:	22cf      	movs	r2, #207	; 0xcf
 8012e00:	4905      	ldr	r1, [pc, #20]	; (8012e18 <tcpip_thread_handle_msg+0x88>)
 8012e02:	4806      	ldr	r0, [pc, #24]	; (8012e1c <tcpip_thread_handle_msg+0x8c>)
 8012e04:	f00c faea 	bl	801f3dc <iprintf>
      break;
 8012e08:	bf00      	nop
  }
}
 8012e0a:	bf00      	nop
 8012e0c:	3708      	adds	r7, #8
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	080215e4 	.word	0x080215e4
 8012e18:	08021614 	.word	0x08021614
 8012e1c:	08021634 	.word	0x08021634

08012e20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b086      	sub	sp, #24
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012e2c:	481a      	ldr	r0, [pc, #104]	; (8012e98 <tcpip_inpkt+0x78>)
 8012e2e:	f00c f9d4 	bl	801f1da <sys_mbox_valid>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d105      	bne.n	8012e44 <tcpip_inpkt+0x24>
 8012e38:	4b18      	ldr	r3, [pc, #96]	; (8012e9c <tcpip_inpkt+0x7c>)
 8012e3a:	22fc      	movs	r2, #252	; 0xfc
 8012e3c:	4918      	ldr	r1, [pc, #96]	; (8012ea0 <tcpip_inpkt+0x80>)
 8012e3e:	4819      	ldr	r0, [pc, #100]	; (8012ea4 <tcpip_inpkt+0x84>)
 8012e40:	f00c facc 	bl	801f3dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012e44:	2009      	movs	r0, #9
 8012e46:	f002 f961 	bl	801510c <memp_malloc>
 8012e4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d102      	bne.n	8012e58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012e52:	f04f 33ff 	mov.w	r3, #4294967295
 8012e56:	e01a      	b.n	8012e8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	68ba      	ldr	r2, [r7, #8]
 8012e68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012e70:	6979      	ldr	r1, [r7, #20]
 8012e72:	4809      	ldr	r0, [pc, #36]	; (8012e98 <tcpip_inpkt+0x78>)
 8012e74:	f00c f958 	bl	801f128 <sys_mbox_trypost>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d006      	beq.n	8012e8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012e7e:	6979      	ldr	r1, [r7, #20]
 8012e80:	2009      	movs	r0, #9
 8012e82:	f002 f995 	bl	80151b0 <memp_free>
    return ERR_MEM;
 8012e86:	f04f 33ff 	mov.w	r3, #4294967295
 8012e8a:	e000      	b.n	8012e8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012e8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3718      	adds	r7, #24
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	20008358 	.word	0x20008358
 8012e9c:	080215e4 	.word	0x080215e4
 8012ea0:	0802165c 	.word	0x0802165c
 8012ea4:	08021634 	.word	0x08021634

08012ea8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012eb8:	f003 0318 	and.w	r3, r3, #24
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d006      	beq.n	8012ece <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012ec0:	4a08      	ldr	r2, [pc, #32]	; (8012ee4 <tcpip_input+0x3c>)
 8012ec2:	6839      	ldr	r1, [r7, #0]
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7ff ffab 	bl	8012e20 <tcpip_inpkt>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	e005      	b.n	8012eda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012ece:	4a06      	ldr	r2, [pc, #24]	; (8012ee8 <tcpip_input+0x40>)
 8012ed0:	6839      	ldr	r1, [r7, #0]
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f7ff ffa4 	bl	8012e20 <tcpip_inpkt>
 8012ed8:	4603      	mov	r3, r0
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3708      	adds	r7, #8
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	0801ef39 	.word	0x0801ef39
 8012ee8:	0801de4d 	.word	0x0801de4d

08012eec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012ef6:	4819      	ldr	r0, [pc, #100]	; (8012f5c <tcpip_try_callback+0x70>)
 8012ef8:	f00c f96f 	bl	801f1da <sys_mbox_valid>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d106      	bne.n	8012f10 <tcpip_try_callback+0x24>
 8012f02:	4b17      	ldr	r3, [pc, #92]	; (8012f60 <tcpip_try_callback+0x74>)
 8012f04:	f240 125d 	movw	r2, #349	; 0x15d
 8012f08:	4916      	ldr	r1, [pc, #88]	; (8012f64 <tcpip_try_callback+0x78>)
 8012f0a:	4817      	ldr	r0, [pc, #92]	; (8012f68 <tcpip_try_callback+0x7c>)
 8012f0c:	f00c fa66 	bl	801f3dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012f10:	2008      	movs	r0, #8
 8012f12:	f002 f8fb 	bl	801510c <memp_malloc>
 8012f16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d102      	bne.n	8012f24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f22:	e017      	b.n	8012f54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2201      	movs	r2, #1
 8012f28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	683a      	ldr	r2, [r7, #0]
 8012f34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012f36:	68f9      	ldr	r1, [r7, #12]
 8012f38:	4808      	ldr	r0, [pc, #32]	; (8012f5c <tcpip_try_callback+0x70>)
 8012f3a:	f00c f8f5 	bl	801f128 <sys_mbox_trypost>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d006      	beq.n	8012f52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012f44:	68f9      	ldr	r1, [r7, #12]
 8012f46:	2008      	movs	r0, #8
 8012f48:	f002 f932 	bl	80151b0 <memp_free>
    return ERR_MEM;
 8012f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f50:	e000      	b.n	8012f54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012f52:	2300      	movs	r3, #0
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	3710      	adds	r7, #16
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	20008358 	.word	0x20008358
 8012f60:	080215e4 	.word	0x080215e4
 8012f64:	0802165c 	.word	0x0802165c
 8012f68:	08021634 	.word	0x08021634

08012f6c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b084      	sub	sp, #16
 8012f70:	af02      	add	r7, sp, #8
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012f76:	f001 fc41 	bl	80147fc <lwip_init>

  tcpip_init_done = initfunc;
 8012f7a:	4a17      	ldr	r2, [pc, #92]	; (8012fd8 <tcpip_init+0x6c>)
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012f80:	4a16      	ldr	r2, [pc, #88]	; (8012fdc <tcpip_init+0x70>)
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012f86:	2106      	movs	r1, #6
 8012f88:	4815      	ldr	r0, [pc, #84]	; (8012fe0 <tcpip_init+0x74>)
 8012f8a:	f00c f8ab 	bl	801f0e4 <sys_mbox_new>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d006      	beq.n	8012fa2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012f94:	4b13      	ldr	r3, [pc, #76]	; (8012fe4 <tcpip_init+0x78>)
 8012f96:	f240 2261 	movw	r2, #609	; 0x261
 8012f9a:	4913      	ldr	r1, [pc, #76]	; (8012fe8 <tcpip_init+0x7c>)
 8012f9c:	4813      	ldr	r0, [pc, #76]	; (8012fec <tcpip_init+0x80>)
 8012f9e:	f00c fa1d 	bl	801f3dc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012fa2:	4813      	ldr	r0, [pc, #76]	; (8012ff0 <tcpip_init+0x84>)
 8012fa4:	f00c f938 	bl	801f218 <sys_mutex_new>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d006      	beq.n	8012fbc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012fae:	4b0d      	ldr	r3, [pc, #52]	; (8012fe4 <tcpip_init+0x78>)
 8012fb0:	f240 2265 	movw	r2, #613	; 0x265
 8012fb4:	490f      	ldr	r1, [pc, #60]	; (8012ff4 <tcpip_init+0x88>)
 8012fb6:	480d      	ldr	r0, [pc, #52]	; (8012fec <tcpip_init+0x80>)
 8012fb8:	f00c fa10 	bl	801f3dc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	9300      	str	r3, [sp, #0]
 8012fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	490c      	ldr	r1, [pc, #48]	; (8012ff8 <tcpip_init+0x8c>)
 8012fc8:	480c      	ldr	r0, [pc, #48]	; (8012ffc <tcpip_init+0x90>)
 8012fca:	f00c f95d 	bl	801f288 <sys_thread_new>
}
 8012fce:	bf00      	nop
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	20008350 	.word	0x20008350
 8012fdc:	20008354 	.word	0x20008354
 8012fe0:	20008358 	.word	0x20008358
 8012fe4:	080215e4 	.word	0x080215e4
 8012fe8:	0802166c 	.word	0x0802166c
 8012fec:	08021634 	.word	0x08021634
 8012ff0:	20010df4 	.word	0x20010df4
 8012ff4:	08021690 	.word	0x08021690
 8012ff8:	08012d29 	.word	0x08012d29
 8012ffc:	080216b4 	.word	0x080216b4

08013000 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d002      	beq.n	8013016 <fs_open+0x16>
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d102      	bne.n	801301c <fs_open+0x1c>
    return ERR_ARG;
 8013016:	f06f 030f 	mvn.w	r3, #15
 801301a:	e028      	b.n	801306e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801301c:	4b16      	ldr	r3, [pc, #88]	; (8013078 <fs_open+0x78>)
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	e020      	b.n	8013064 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	4619      	mov	r1, r3
 8013028:	6838      	ldr	r0, [r7, #0]
 801302a:	f7ed f8d1 	bl	80001d0 <strcmp>
 801302e:	4603      	mov	r3, r0
 8013030:	2b00      	cmp	r3, #0
 8013032:	d114      	bne.n	801305e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	689a      	ldr	r2, [r3, #8]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	68da      	ldr	r2, [r3, #12]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	68da      	ldr	r2, [r3, #12]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2200      	movs	r2, #0
 8013050:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	7c1a      	ldrb	r2, [r3, #16]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801305a:	2300      	movs	r3, #0
 801305c:	e007      	b.n	801306e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	60fb      	str	r3, [r7, #12]
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1db      	bne.n	8013022 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801306a:	f06f 0305 	mvn.w	r3, #5
}
 801306e:	4618      	mov	r0, r3
 8013070:	3710      	adds	r7, #16
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	0807b01c 	.word	0x0807b01c

0801307c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 801307c:	b480      	push	{r7}
 801307e:	b083      	sub	sp, #12
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8013084:	bf00      	nop
 8013086:	370c      	adds	r7, #12
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr

08013090 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8013090:	b480      	push	{r7}
 8013092:	b083      	sub	sp, #12
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685a      	ldr	r2, [r3, #4]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	689b      	ldr	r3, [r3, #8]
 80130a0:	1ad3      	subs	r3, r2, r3
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	370c      	adds	r7, #12
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr

080130ae <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b082      	sub	sp, #8
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80130b6:	22b0      	movs	r2, #176	; 0xb0
 80130b8:	2100      	movs	r1, #0
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f00c f986 	bl	801f3cc <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80130c0:	bf00      	nop
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80130ce:	20b0      	movs	r0, #176	; 0xb0
 80130d0:	f001 fe9a 	bl	8014e08 <mem_malloc>
 80130d4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d002      	beq.n	80130e2 <http_state_alloc+0x1a>
    http_state_init(ret);
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f7ff ffe6 	bl	80130ae <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80130e2:	687b      	ldr	r3, [r7, #4]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3708      	adds	r7, #8
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <httpd_post_begin>:

err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request,
                 u16_t http_request_len, int content_len, char *response_uri,
                 u16_t response_uri_len, u8_t *post_auto_wnd)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b084      	sub	sp, #16
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
 80130f8:	807b      	strh	r3, [r7, #2]
  LWIP_UNUSED_ARG(connection);
  LWIP_UNUSED_ARG(http_request);
  LWIP_UNUSED_ARG(http_request_len);
  LWIP_UNUSED_ARG(content_len);
  LWIP_UNUSED_ARG(post_auto_wnd);
  if (!memcmp(uri, "/login.cgi", 11)) {
 80130fa:	220b      	movs	r2, #11
 80130fc:	4911      	ldr	r1, [pc, #68]	; (8013144 <httpd_post_begin+0x58>)
 80130fe:	68b8      	ldr	r0, [r7, #8]
 8013100:	f00c f92e 	bl	801f360 <memcmp>
 8013104:	4603      	mov	r3, r0
 8013106:	2b00      	cmp	r3, #0
 8013108:	d115      	bne.n	8013136 <httpd_post_begin+0x4a>
    if (current_connection != connection) {
 801310a:	4b0f      	ldr	r3, [pc, #60]	; (8013148 <httpd_post_begin+0x5c>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	68fa      	ldr	r2, [r7, #12]
 8013110:	429a      	cmp	r2, r3
 8013112:	d010      	beq.n	8013136 <httpd_post_begin+0x4a>
      current_connection = connection;
 8013114:	4a0c      	ldr	r2, [pc, #48]	; (8013148 <httpd_post_begin+0x5c>)
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	6013      	str	r3, [r2, #0]
      valid_connection = NULL;
 801311a:	4b0c      	ldr	r3, [pc, #48]	; (801314c <httpd_post_begin+0x60>)
 801311c:	2200      	movs	r2, #0
 801311e:	601a      	str	r2, [r3, #0]
      /* default page is "login failed" */
      snprintf(response_uri, response_uri_len, "/loginfail.html");
 8013120:	8c3b      	ldrh	r3, [r7, #32]
 8013122:	4a0b      	ldr	r2, [pc, #44]	; (8013150 <httpd_post_begin+0x64>)
 8013124:	4619      	mov	r1, r3
 8013126:	69f8      	ldr	r0, [r7, #28]
 8013128:	f00c fa26 	bl	801f578 <sniprintf>
      /* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
      *post_auto_wnd = 1;
 801312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312e:	2201      	movs	r2, #1
 8013130:	701a      	strb	r2, [r3, #0]
      return ERR_OK;
 8013132:	2300      	movs	r3, #0
 8013134:	e001      	b.n	801313a <httpd_post_begin+0x4e>
    }
  }
  return ERR_VAL;
 8013136:	f06f 0305 	mvn.w	r3, #5
}
 801313a:	4618      	mov	r0, r3
 801313c:	3710      	adds	r7, #16
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
 8013142:	bf00      	nop
 8013144:	08021704 	.word	0x08021704
 8013148:	2000c7ac 	.word	0x2000c7ac
 801314c:	2000c7b0 	.word	0x2000c7b0
 8013150:	08021710 	.word	0x08021710

08013154 <first_end>:

int first_end(char * k1,const char* l){
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
 int i=0;
 801315e:	2300      	movs	r3, #0
 8013160:	60fb      	str	r3, [r7, #12]
  for(i=0;i<strlen(k1);i++){
 8013162:	2300      	movs	r3, #0
 8013164:	60fb      	str	r3, [r7, #12]
 8013166:	e00a      	b.n	801317e <first_end+0x2a>
    if(*l==k1[i]){
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	781a      	ldrb	r2, [r3, #0]
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	6879      	ldr	r1, [r7, #4]
 8013170:	440b      	add	r3, r1
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	429a      	cmp	r2, r3
 8013176:	d00a      	beq.n	801318e <first_end+0x3a>
  for(i=0;i<strlen(k1);i++){
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	3301      	adds	r3, #1
 801317c:	60fb      	str	r3, [r7, #12]
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f7ed f830 	bl	80001e4 <strlen>
 8013184:	4602      	mov	r2, r0
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	429a      	cmp	r2, r3
 801318a:	d8ed      	bhi.n	8013168 <first_end+0x14>
 801318c:	e000      	b.n	8013190 <first_end+0x3c>
    //  printf("wo %d\n",i-1);
      break;
 801318e:	bf00      	nop
    }
  }
  return i;
 8013190:	68fb      	ldr	r3, [r7, #12]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
	...

0801319c <httpd_post_receive_data>:



err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b092      	sub	sp, #72	; 0x48
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
 memset(http_post_payload,0,LWIP_HTTPD_POST_MAX_PAYLOAD_LEN);
 80131a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80131aa:	2100      	movs	r1, #0
 80131ac:	4870      	ldr	r0, [pc, #448]	; (8013370 <httpd_post_receive_data+0x1d4>)
 80131ae:	f00c f90d 	bl	801f3cc <memset>

  if (current_connection == connection) {
 80131b2:	4b70      	ldr	r3, [pc, #448]	; (8013374 <httpd_post_receive_data+0x1d8>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	f040 81b6 	bne.w	801352a <httpd_post_receive_data+0x38e>

      /* find pass len */


      if(sd_status!=3){
 80131be:	4b6e      	ldr	r3, [pc, #440]	; (8013378 <httpd_post_receive_data+0x1dc>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	2b03      	cmp	r3, #3
 80131c4:	d008      	beq.n	80131d8 <httpd_post_receive_data+0x3c>
           sd_status= f_mount(&fs1,"0:",1);
 80131c6:	2201      	movs	r2, #1
 80131c8:	496c      	ldr	r1, [pc, #432]	; (801337c <httpd_post_receive_data+0x1e0>)
 80131ca:	486d      	ldr	r0, [pc, #436]	; (8013380 <httpd_post_receive_data+0x1e4>)
 80131cc:	f7fb f886 	bl	800e2dc <f_mount>
 80131d0:	4603      	mov	r3, r0
 80131d2:	461a      	mov	r2, r3
 80131d4:	4b68      	ldr	r3, [pc, #416]	; (8013378 <httpd_post_receive_data+0x1dc>)
 80131d6:	601a      	str	r2, [r3, #0]

      }


           //retSD=f_open(&file,"0:\\alt6.c",FA_OPEN_APPEND|FA_WRITE);
          hs=(struct http_state *)connection;
 80131d8:	4a6a      	ldr	r2, [pc, #424]	; (8013384 <httpd_post_receive_data+0x1e8>)
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6013      	str	r3, [r2, #0]
             struct pbuf *q =p;
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	647b      	str	r3, [r7, #68]	; 0x44
             int count;
             u32_t http_post_payload_full_flag=0;
 80131e2:	2300      	movs	r3, #0
 80131e4:	643b      	str	r3, [r7, #64]	; 0x40
           //  printf("+++++++++++%s--------------",(char*)q->payload);
            if(pack_num==0){
 80131e6:	4b68      	ldr	r3, [pc, #416]	; (8013388 <httpd_post_receive_data+0x1ec>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	f040 8191 	bne.w	8013512 <httpd_post_receive_data+0x376>
           pointer=boundary;
 80131f0:	4b66      	ldr	r3, [pc, #408]	; (801338c <httpd_post_receive_data+0x1f0>)
 80131f2:	4a67      	ldr	r2, [pc, #412]	; (8013390 <httpd_post_receive_data+0x1f4>)
 80131f4:	601a      	str	r2, [r3, #0]

           memset(filename2 ,0,24);
 80131f6:	2218      	movs	r2, #24
 80131f8:	2100      	movs	r1, #0
 80131fa:	4866      	ldr	r0, [pc, #408]	; (8013394 <httpd_post_receive_data+0x1f8>)
 80131fc:	f00c f8e6 	bl	801f3cc <memset>

           uint32_t byteswritten;

           HAL_UART_Transmit(&huart1,boundary,200,HAL_MAX_DELAY);
 8013200:	f04f 33ff 	mov.w	r3, #4294967295
 8013204:	22c8      	movs	r2, #200	; 0xc8
 8013206:	4962      	ldr	r1, [pc, #392]	; (8013390 <httpd_post_receive_data+0x1f4>)
 8013208:	4863      	ldr	r0, [pc, #396]	; (8013398 <httpd_post_receive_data+0x1fc>)
 801320a:	f7f6 f8de 	bl	80093ca <HAL_UART_Transmit>
           HAL_UART_Transmit(&huart1,"\r\n",2,HAL_MAX_DELAY);
 801320e:	f04f 33ff 	mov.w	r3, #4294967295
 8013212:	2202      	movs	r2, #2
 8013214:	4961      	ldr	r1, [pc, #388]	; (801339c <httpd_post_receive_data+0x200>)
 8013216:	4860      	ldr	r0, [pc, #384]	; (8013398 <httpd_post_receive_data+0x1fc>)
 8013218:	f7f6 f8d7 	bl	80093ca <HAL_UART_Transmit>


           boundary_start=NULL;
 801321c:	4b60      	ldr	r3, [pc, #384]	; (80133a0 <httpd_post_receive_data+0x204>)
 801321e:	2200      	movs	r2, #0
 8013220:	601a      	str	r2, [r3, #0]
           boundary_start =strnstr((char*)q->payload,pointer+2,q->len);
 8013222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013224:	6858      	ldr	r0, [r3, #4]
 8013226:	4b59      	ldr	r3, [pc, #356]	; (801338c <httpd_post_receive_data+0x1f0>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	1c99      	adds	r1, r3, #2
 801322c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801322e:	895b      	ldrh	r3, [r3, #10]
 8013230:	461a      	mov	r2, r3
 8013232:	f00c fa9c 	bl	801f76e <strnstr>
 8013236:	4603      	mov	r3, r0
 8013238:	4a59      	ldr	r2, [pc, #356]	; (80133a0 <httpd_post_receive_data+0x204>)
 801323a:	6013      	str	r3, [r2, #0]


           int h=strlen(pointer);
 801323c:	4b53      	ldr	r3, [pc, #332]	; (801338c <httpd_post_receive_data+0x1f0>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4618      	mov	r0, r3
 8013242:	f7ec ffcf 	bl	80001e4 <strlen>
 8013246:	4603      	mov	r3, r0
 8013248:	633b      	str	r3, [r7, #48]	; 0x30
           file_start=NULL;
 801324a:	4b56      	ldr	r3, [pc, #344]	; (80133a4 <httpd_post_receive_data+0x208>)
 801324c:	2200      	movs	r2, #0
 801324e:	601a      	str	r2, [r3, #0]
            file_start=strnstr(boundary_start+h,CRLF CRLF,q->len-h);
 8013250:	4b53      	ldr	r3, [pc, #332]	; (80133a0 <httpd_post_receive_data+0x204>)
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013256:	18d0      	adds	r0, r2, r3
 8013258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801325a:	895b      	ldrh	r3, [r3, #10]
 801325c:	461a      	mov	r2, r3
 801325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	461a      	mov	r2, r3
 8013264:	4950      	ldr	r1, [pc, #320]	; (80133a8 <httpd_post_receive_data+0x20c>)
 8013266:	f00c fa82 	bl	801f76e <strnstr>
 801326a:	4603      	mov	r3, r0
 801326c:	4a4d      	ldr	r2, [pc, #308]	; (80133a4 <httpd_post_receive_data+0x208>)
 801326e:	6013      	str	r3, [r2, #0]
              pack_num+=1;
 8013270:	4b45      	ldr	r3, [pc, #276]	; (8013388 <httpd_post_receive_data+0x1ec>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	3301      	adds	r3, #1
 8013276:	4a44      	ldr	r2, [pc, #272]	; (8013388 <httpd_post_receive_data+0x1ec>)
 8013278:	6013      	str	r3, [r2, #0]

              file_start+=4;
 801327a:	4b4a      	ldr	r3, [pc, #296]	; (80133a4 <httpd_post_receive_data+0x208>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	3304      	adds	r3, #4
 8013280:	4a48      	ldr	r2, [pc, #288]	; (80133a4 <httpd_post_receive_data+0x208>)
 8013282:	6013      	str	r3, [r2, #0]
               s16_t intro_boundary_len=(s16_t)(file_start-(char*)q->payload);
 8013284:	4b47      	ldr	r3, [pc, #284]	; (80133a4 <httpd_post_receive_data+0x208>)
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	1ad3      	subs	r3, r2, r3
 801328e:	85fb      	strh	r3, [r7, #46]	; 0x2e
               char * filename;

                filename=strnstr(q->payload,"filename=",intro_boundary_len)+10;
 8013290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8013298:	4944      	ldr	r1, [pc, #272]	; (80133ac <httpd_post_receive_data+0x210>)
 801329a:	4618      	mov	r0, r3
 801329c:	f00c fa67 	bl	801f76e <strnstr>
 80132a0:	4603      	mov	r3, r0
 80132a2:	330a      	adds	r3, #10
 80132a4:	62bb      	str	r3, [r7, #40]	; 0x28
              int h2=first_end(filename,"\"");
 80132a6:	4942      	ldr	r1, [pc, #264]	; (80133b0 <httpd_post_receive_data+0x214>)
 80132a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132aa:	f7ff ff53 	bl	8013154 <first_end>
 80132ae:	6278      	str	r0, [r7, #36]	; 0x24
               memcpy(filename2,filename,h2);
 80132b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b2:	461a      	mov	r2, r3
 80132b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80132b6:	4837      	ldr	r0, [pc, #220]	; (8013394 <httpd_post_receive_data+0x1f8>)
 80132b8:	f00c f860 	bl	801f37c <memcpy>
               filename2[h2]='\0';
 80132bc:	4a35      	ldr	r2, [pc, #212]	; (8013394 <httpd_post_receive_data+0x1f8>)
 80132be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c0:	4413      	add	r3, r2
 80132c2:	2200      	movs	r2, #0
 80132c4:	701a      	strb	r2, [r3, #0]
                   memset(filx ,0,200);
 80132c6:	22c8      	movs	r2, #200	; 0xc8
 80132c8:	2100      	movs	r1, #0
 80132ca:	483a      	ldr	r0, [pc, #232]	; (80133b4 <httpd_post_receive_data+0x218>)
 80132cc:	f00c f87e 	bl	801f3cc <memset>
                   memcpy(filx,prefix,20);
 80132d0:	2214      	movs	r2, #20
 80132d2:	4939      	ldr	r1, [pc, #228]	; (80133b8 <httpd_post_receive_data+0x21c>)
 80132d4:	4837      	ldr	r0, [pc, #220]	; (80133b4 <httpd_post_receive_data+0x218>)
 80132d6:	f00c f851 	bl	801f37c <memcpy>
              strcat(filx,filename2);
 80132da:	492e      	ldr	r1, [pc, #184]	; (8013394 <httpd_post_receive_data+0x1f8>)
 80132dc:	4835      	ldr	r0, [pc, #212]	; (80133b4 <httpd_post_receive_data+0x218>)
 80132de:	f00c fa10 	bl	801f702 <strcat>

               memset(filename_upload ,0,24);
 80132e2:	2218      	movs	r2, #24
 80132e4:	2100      	movs	r1, #0
 80132e6:	4835      	ldr	r0, [pc, #212]	; (80133bc <httpd_post_receive_data+0x220>)
 80132e8:	f00c f870 	bl	801f3cc <memset>

               memcpy(filename_upload,filx,strlen(filx));
 80132ec:	4831      	ldr	r0, [pc, #196]	; (80133b4 <httpd_post_receive_data+0x218>)
 80132ee:	f7ec ff79 	bl	80001e4 <strlen>
 80132f2:	4603      	mov	r3, r0
 80132f4:	461a      	mov	r2, r3
 80132f6:	492f      	ldr	r1, [pc, #188]	; (80133b4 <httpd_post_receive_data+0x218>)
 80132f8:	4830      	ldr	r0, [pc, #192]	; (80133bc <httpd_post_receive_data+0x220>)
 80132fa:	f00c f83f 	bl	801f37c <memcpy>
               //delete if file exists
        	   f_unlink(filename_upload);
 80132fe:	482f      	ldr	r0, [pc, #188]	; (80133bc <httpd_post_receive_data+0x220>)
 8013300:	f7fc f8bf 	bl	800f482 <f_unlink>
              retSD=f_open(&file,filename_upload,FA_OPEN_APPEND|FA_WRITE);
 8013304:	2232      	movs	r2, #50	; 0x32
 8013306:	492d      	ldr	r1, [pc, #180]	; (80133bc <httpd_post_receive_data+0x220>)
 8013308:	482d      	ldr	r0, [pc, #180]	; (80133c0 <httpd_post_receive_data+0x224>)
 801330a:	f7fb f84b 	bl	800e3a4 <f_open>
 801330e:	4603      	mov	r3, r0
 8013310:	461a      	mov	r2, r3
 8013312:	4b2c      	ldr	r3, [pc, #176]	; (80133c4 <httpd_post_receive_data+0x228>)
 8013314:	701a      	strb	r2, [r3, #0]
              pbuf_header(q,-intro_boundary_len);
 8013316:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013318:	425b      	negs	r3, r3
 801331a:	b29b      	uxth	r3, r3
 801331c:	b21b      	sxth	r3, r3
 801331e:	4619      	mov	r1, r3
 8013320:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013322:	f002 fdd6 	bl	8015ed2 <pbuf_header>
              MEMCPY(http_post_payload+http_post_payload_len,q->payload,q->len);
 8013326:	4b28      	ldr	r3, [pc, #160]	; (80133c8 <httpd_post_receive_data+0x22c>)
 8013328:	881b      	ldrh	r3, [r3, #0]
 801332a:	461a      	mov	r2, r3
 801332c:	4b10      	ldr	r3, [pc, #64]	; (8013370 <httpd_post_receive_data+0x1d4>)
 801332e:	18d0      	adds	r0, r2, r3
 8013330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013332:	6859      	ldr	r1, [r3, #4]
 8013334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013336:	895b      	ldrh	r3, [r3, #10]
 8013338:	461a      	mov	r2, r3
 801333a:	f00c f81f 	bl	801f37c <memcpy>
              http_post_payload_len+=q->len;
 801333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013340:	895a      	ldrh	r2, [r3, #10]
 8013342:	4b21      	ldr	r3, [pc, #132]	; (80133c8 <httpd_post_receive_data+0x22c>)
 8013344:	881b      	ldrh	r3, [r3, #0]
 8013346:	4413      	add	r3, r2
 8013348:	b29a      	uxth	r2, r3
 801334a:	4b1f      	ldr	r3, [pc, #124]	; (80133c8 <httpd_post_receive_data+0x22c>)
 801334c:	801a      	strh	r2, [r3, #0]
              retSD = f_write(&file, http_post_payload, q->len, (void *)&byteswritten);	//在文件内写入wtext内的内
 801334e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013350:	895b      	ldrh	r3, [r3, #10]
 8013352:	461a      	mov	r2, r3
 8013354:	f107 0320 	add.w	r3, r7, #32
 8013358:	4905      	ldr	r1, [pc, #20]	; (8013370 <httpd_post_receive_data+0x1d4>)
 801335a:	4819      	ldr	r0, [pc, #100]	; (80133c0 <httpd_post_receive_data+0x224>)
 801335c:	f7fb fbe2 	bl	800eb24 <f_write>
 8013360:	4603      	mov	r3, r0
 8013362:	461a      	mov	r2, r3
 8013364:	4b17      	ldr	r3, [pc, #92]	; (80133c4 <httpd_post_receive_data+0x228>)
 8013366:	701a      	strb	r2, [r3, #0]


     	      f_sync(&file);
 8013368:	4815      	ldr	r0, [pc, #84]	; (80133c0 <httpd_post_receive_data+0x224>)
 801336a:	f7fb fd7f 	bl	800ee6c <f_sync>
 801336e:	e0d4      	b.n	801351a <httpd_post_receive_data+0x37e>
 8013370:	2000835c 	.word	0x2000835c
 8013374:	2000c7ac 	.word	0x2000c7ac
 8013378:	20000020 	.word	0x20000020
 801337c:	08021720 	.word	0x08021720
 8013380:	20011134 	.word	0x20011134
 8013384:	20010e2c 	.word	0x20010e2c
 8013388:	20011370 	.word	0x20011370
 801338c:	2001112c 	.word	0x2001112c
 8013390:	20011374 	.word	0x20011374
 8013394:	20010e14 	.word	0x20010e14
 8013398:	2000cf58 	.word	0x2000cf58
 801339c:	08021724 	.word	0x08021724
 80133a0:	20010e10 	.word	0x20010e10
 80133a4:	2001136c 	.word	0x2001136c
 80133a8:	08021728 	.word	0x08021728
 80133ac:	08021730 	.word	0x08021730
 80133b0:	0802173c 	.word	0x0802173c
 80133b4:	20010e34 	.word	0x20010e34
 80133b8:	20000024 	.word	0x20000024
 80133bc:	20010df8 	.word	0x20010df8
 80133c0:	20010efc 	.word	0x20010efc
 80133c4:	2000d808 	.word	0x2000d808
 80133c8:	2000c35c 	.word	0x2000c35c

           while(q!=NULL){
               uint32_t byteswritten;
               unsigned char lens[20];
        	   int tail_boundary_len;
        	   if(0==hs->post_content_len_left){
 80133cc:	4b5a      	ldr	r3, [pc, #360]	; (8013538 <httpd_post_receive_data+0x39c>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d15f      	bne.n	8013498 <httpd_post_receive_data+0x2fc>
        			pack_num=0;
 80133d8:	4b58      	ldr	r3, [pc, #352]	; (801353c <httpd_post_receive_data+0x3a0>)
 80133da:	2200      	movs	r2, #0
 80133dc:	601a      	str	r2, [r3, #0]

        		   tail_boundary_len=strlen(boundary);
 80133de:	4858      	ldr	r0, [pc, #352]	; (8013540 <httpd_post_receive_data+0x3a4>)
 80133e0:	f7ec ff00 	bl	80001e4 <strlen>
 80133e4:	4603      	mov	r3, r0
 80133e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        		   tail_boundary_len+=4;
 80133e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ea:	3304      	adds	r3, #4
 80133ec:	63fb      	str	r3, [r7, #60]	; 0x3c
//        		   if(q->len<tail_boundary_len){
//        			   break;
//        		   }
        		   strcat(boundary, "--\r");
 80133ee:	4854      	ldr	r0, [pc, #336]	; (8013540 <httpd_post_receive_data+0x3a4>)
 80133f0:	f7ec fef8 	bl	80001e4 <strlen>
 80133f4:	4603      	mov	r3, r0
 80133f6:	461a      	mov	r2, r3
 80133f8:	4b51      	ldr	r3, [pc, #324]	; (8013540 <httpd_post_receive_data+0x3a4>)
 80133fa:	4413      	add	r3, r2
 80133fc:	4a51      	ldr	r2, [pc, #324]	; (8013544 <httpd_post_receive_data+0x3a8>)
 80133fe:	6810      	ldr	r0, [r2, #0]
 8013400:	6018      	str	r0, [r3, #0]
        		   sprintf(lens, "%d", q->len); //
 8013402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013404:	895b      	ldrh	r3, [r3, #10]
 8013406:	461a      	mov	r2, r3
 8013408:	f107 0308 	add.w	r3, r7, #8
 801340c:	494e      	ldr	r1, [pc, #312]	; (8013548 <httpd_post_receive_data+0x3ac>)
 801340e:	4618      	mov	r0, r3
 8013410:	f00c f8e6 	bl	801f5e0 <siprintf>
        		   if(q->len<tail_boundary_len){
 8013414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013416:	895b      	ldrh	r3, [r3, #10]
 8013418:	461a      	mov	r2, r3
 801341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801341c:	4293      	cmp	r3, r2
 801341e:	dd06      	ble.n	801342e <httpd_post_receive_data+0x292>
        			   q->payload+=q->len;
 8013420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013426:	8952      	ldrh	r2, [r2, #10]
 8013428:	441a      	add	r2, r3
 801342a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801342c:	605a      	str	r2, [r3, #4]
        		   }


        		   char * tailing_boundary=(char*)q->payload+(q->len-tail_boundary_len);
 801342e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013434:	8952      	ldrh	r2, [r2, #10]
 8013436:	4611      	mov	r1, r2
 8013438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801343a:	1a8a      	subs	r2, r1, r2
 801343c:	4413      	add	r3, r2
 801343e:	63bb      	str	r3, [r7, #56]	; 0x38
        		   char last_char=*((char*)q->payload+q->len-1);
 8013440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013442:	685a      	ldr	r2, [r3, #4]
 8013444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013446:	895b      	ldrh	r3, [r3, #10]
 8013448:	3b01      	subs	r3, #1
 801344a:	4413      	add	r3, r2
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		   *((char*)q->payload+q->len-1)='\0';
 8013452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013454:	685a      	ldr	r2, [r3, #4]
 8013456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013458:	895b      	ldrh	r3, [r3, #10]
 801345a:	3b01      	subs	r3, #1
 801345c:	4413      	add	r3, r2
 801345e:	2200      	movs	r2, #0
 8013460:	701a      	strb	r2, [r3, #0]
        		  if(strcmp(tailing_boundary,boundary)==0){
 8013462:	4937      	ldr	r1, [pc, #220]	; (8013540 <httpd_post_receive_data+0x3a4>)
 8013464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013466:	f7ec feb3 	bl	80001d0 <strcmp>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d107      	bne.n	8013480 <httpd_post_receive_data+0x2e4>
        			   q->len -= tail_boundary_len;
 8013470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013472:	895a      	ldrh	r2, [r3, #10]
 8013474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013476:	b29b      	uxth	r3, r3
 8013478:	1ad3      	subs	r3, r2, r3
 801347a:	b29a      	uxth	r2, r3
 801347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801347e:	815a      	strh	r2, [r3, #10]
        		   }else{

        		   }
        		   *((char*)q->payload+q->len+tail_boundary_len-1)=last_char;
 8013480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013482:	685a      	ldr	r2, [r3, #4]
 8013484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013486:	895b      	ldrh	r3, [r3, #10]
 8013488:	4619      	mov	r1, r3
 801348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801348c:	440b      	add	r3, r1
 801348e:	3b01      	subs	r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013496:	701a      	strb	r2, [r3, #0]
        	   }
         	  if(http_post_payload_len+q->len<=LWIP_HTTPD_POST_MAX_PAYLOAD_LEN){
 8013498:	4b2c      	ldr	r3, [pc, #176]	; (801354c <httpd_post_receive_data+0x3b0>)
 801349a:	881b      	ldrh	r3, [r3, #0]
 801349c:	461a      	mov	r2, r3
 801349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134a0:	895b      	ldrh	r3, [r3, #10]
 80134a2:	4413      	add	r3, r2
 80134a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80134a8:	dc2d      	bgt.n	8013506 <httpd_post_receive_data+0x36a>
         		  MEMCPY(http_post_payload+http_post_payload_len,q->payload,q->len);
 80134aa:	4b28      	ldr	r3, [pc, #160]	; (801354c <httpd_post_receive_data+0x3b0>)
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	461a      	mov	r2, r3
 80134b0:	4b27      	ldr	r3, [pc, #156]	; (8013550 <httpd_post_receive_data+0x3b4>)
 80134b2:	18d0      	adds	r0, r2, r3
 80134b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134b6:	6859      	ldr	r1, [r3, #4]
 80134b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134ba:	895b      	ldrh	r3, [r3, #10]
 80134bc:	461a      	mov	r2, r3
 80134be:	f00b ff5d 	bl	801f37c <memcpy>
         		  http_post_payload_len+=q->len;
 80134c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134c4:	895a      	ldrh	r2, [r3, #10]
 80134c6:	4b21      	ldr	r3, [pc, #132]	; (801354c <httpd_post_receive_data+0x3b0>)
 80134c8:	881b      	ldrh	r3, [r3, #0]
 80134ca:	4413      	add	r3, r2
 80134cc:	b29a      	uxth	r2, r3
 80134ce:	4b1f      	ldr	r3, [pc, #124]	; (801354c <httpd_post_receive_data+0x3b0>)
 80134d0:	801a      	strh	r2, [r3, #0]
                  retSD=f_open(&file,filename_upload,FA_OPEN_APPEND|FA_WRITE);
 80134d2:	2232      	movs	r2, #50	; 0x32
 80134d4:	491f      	ldr	r1, [pc, #124]	; (8013554 <httpd_post_receive_data+0x3b8>)
 80134d6:	4820      	ldr	r0, [pc, #128]	; (8013558 <httpd_post_receive_data+0x3bc>)
 80134d8:	f7fa ff64 	bl	800e3a4 <f_open>
 80134dc:	4603      	mov	r3, r0
 80134de:	461a      	mov	r2, r3
 80134e0:	4b1e      	ldr	r3, [pc, #120]	; (801355c <httpd_post_receive_data+0x3c0>)
 80134e2:	701a      	strb	r2, [r3, #0]
         	      retSD = f_write(&file, http_post_payload, q->len, (void *)&byteswritten);	//在文件内写入wtext内的内容
 80134e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134e6:	895b      	ldrh	r3, [r3, #10]
 80134e8:	461a      	mov	r2, r3
 80134ea:	f107 031c 	add.w	r3, r7, #28
 80134ee:	4918      	ldr	r1, [pc, #96]	; (8013550 <httpd_post_receive_data+0x3b4>)
 80134f0:	4819      	ldr	r0, [pc, #100]	; (8013558 <httpd_post_receive_data+0x3bc>)
 80134f2:	f7fb fb17 	bl	800eb24 <f_write>
 80134f6:	4603      	mov	r3, r0
 80134f8:	461a      	mov	r2, r3
 80134fa:	4b18      	ldr	r3, [pc, #96]	; (801355c <httpd_post_receive_data+0x3c0>)
 80134fc:	701a      	strb	r2, [r3, #0]
         	      f_sync(&file);
 80134fe:	4816      	ldr	r0, [pc, #88]	; (8013558 <httpd_post_receive_data+0x3bc>)
 8013500:	f7fb fcb4 	bl	800ee6c <f_sync>
 8013504:	e002      	b.n	801350c <httpd_post_receive_data+0x370>

         	  }else{

         		  http_post_payload_full_flag=1;
 8013506:	2301      	movs	r3, #1
 8013508:	643b      	str	r3, [r7, #64]	; 0x40
 801350a:	e006      	b.n	801351a <httpd_post_receive_data+0x37e>
         		  break;
         	  }
         	  q=q->next;
 801350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	647b      	str	r3, [r7, #68]	; 0x44
           while(q!=NULL){
 8013512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013514:	2b00      	cmp	r3, #0
 8013516:	f47f af59 	bne.w	80133cc <httpd_post_receive_data+0x230>
           }
            }
           pbuf_free(p);
 801351a:	6838      	ldr	r0, [r7, #0]
 801351c:	f002 fcfe 	bl	8015f1c <pbuf_free>


    	http_post_payload_len=0;
 8013520:	4b0a      	ldr	r3, [pc, #40]	; (801354c <httpd_post_receive_data+0x3b0>)
 8013522:	2200      	movs	r2, #0
 8013524:	801a      	strh	r2, [r3, #0]



    /* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       conenction is unknown */
    return ERR_OK;
 8013526:	2300      	movs	r3, #0
 8013528:	e001      	b.n	801352e <httpd_post_receive_data+0x392>
  }
  return ERR_VAL;
 801352a:	f06f 0305 	mvn.w	r3, #5
}
 801352e:	4618      	mov	r0, r3
 8013530:	3748      	adds	r7, #72	; 0x48
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	20010e2c 	.word	0x20010e2c
 801353c:	20011370 	.word	0x20011370
 8013540:	20011374 	.word	0x20011374
 8013544:	08021740 	.word	0x08021740
 8013548:	08021744 	.word	0x08021744
 801354c:	2000c35c 	.word	0x2000c35c
 8013550:	2000835c 	.word	0x2000835c
 8013554:	20010df8 	.word	0x20010df8
 8013558:	20010efc 	.word	0x20010efc
 801355c:	2000d808 	.word	0x2000d808

08013560 <httpd_post_finished>:


void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b084      	sub	sp, #16
 8013564:	af00      	add	r7, sp, #0
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	4613      	mov	r3, r2
 801356c:	80fb      	strh	r3, [r7, #6]
  /* default page is "login failed" */
  snprintf(response_uri, response_uri_len, "/loginfail.html");
 801356e:	88fb      	ldrh	r3, [r7, #6]
 8013570:	4a0f      	ldr	r2, [pc, #60]	; (80135b0 <httpd_post_finished+0x50>)
 8013572:	4619      	mov	r1, r3
 8013574:	68b8      	ldr	r0, [r7, #8]
 8013576:	f00b ffff 	bl	801f578 <sniprintf>
  if (current_connection == connection) {
 801357a:	4b0e      	ldr	r3, [pc, #56]	; (80135b4 <httpd_post_finished+0x54>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	429a      	cmp	r2, r3
 8013582:	d110      	bne.n	80135a6 <httpd_post_finished+0x46>
    if (valid_connection == connection) {
 8013584:	4b0c      	ldr	r3, [pc, #48]	; (80135b8 <httpd_post_finished+0x58>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	68fa      	ldr	r2, [r7, #12]
 801358a:	429a      	cmp	r2, r3
 801358c:	d105      	bne.n	801359a <httpd_post_finished+0x3a>
      /* login succeeded */
      snprintf(response_uri, response_uri_len, "/session.html");
 801358e:	88fb      	ldrh	r3, [r7, #6]
 8013590:	4a0a      	ldr	r2, [pc, #40]	; (80135bc <httpd_post_finished+0x5c>)
 8013592:	4619      	mov	r1, r3
 8013594:	68b8      	ldr	r0, [r7, #8]
 8013596:	f00b ffef 	bl	801f578 <sniprintf>
    }
    current_connection = NULL;
 801359a:	4b06      	ldr	r3, [pc, #24]	; (80135b4 <httpd_post_finished+0x54>)
 801359c:	2200      	movs	r2, #0
 801359e:	601a      	str	r2, [r3, #0]
    valid_connection = NULL;
 80135a0:	4b05      	ldr	r3, [pc, #20]	; (80135b8 <httpd_post_finished+0x58>)
 80135a2:	2200      	movs	r2, #0
 80135a4:	601a      	str	r2, [r3, #0]
  }
}
 80135a6:	bf00      	nop
 80135a8:	3710      	adds	r7, #16
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}
 80135ae:	bf00      	nop
 80135b0:	08021710 	.word	0x08021710
 80135b4:	2000c7ac 	.word	0x2000c7ac
 80135b8:	2000c7b0 	.word	0x2000c7b0
 80135bc:	08021748 	.word	0x08021748

080135c0 <http_state_eof>:



static void
http_state_eof(struct http_state *hs)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	695b      	ldr	r3, [r3, #20]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d007      	beq.n	80135e0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	695b      	ldr	r3, [r3, #20]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff fd51 	bl	801307c <fs_close>
    hs->handle = NULL;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2200      	movs	r2, #0
 80135de:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6a1b      	ldr	r3, [r3, #32]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d007      	beq.n	80135f8 <http_state_eof+0x38>
    pbuf_free(hs->req);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6a1b      	ldr	r3, [r3, #32]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f002 fc95 	bl	8015f1c <pbuf_free>
    hs->req = NULL;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2200      	movs	r2, #0
 80135f6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80135f8:	bf00      	nop
 80135fa:	3708      	adds	r7, #8
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d005      	beq.n	801361a <http_state_free+0x1a>
    http_state_eof(hs);
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f7ff ffd6 	bl	80135c0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f001 fa5d 	bl	8014ad4 <mem_free>
  }
}
 801361a:	bf00      	nop
 801361c:	3708      	adds	r7, #8
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
	...

08013624 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b086      	sub	sp, #24
 8013628:	af00      	add	r7, sp, #0
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
 8013630:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d106      	bne.n	8013646 <http_write+0x22>
 8013638:	4b2c      	ldr	r3, [pc, #176]	; (80136ec <http_write+0xc8>)
 801363a:	f240 324a 	movw	r2, #842	; 0x34a
 801363e:	492c      	ldr	r1, [pc, #176]	; (80136f0 <http_write+0xcc>)
 8013640:	482c      	ldr	r0, [pc, #176]	; (80136f4 <http_write+0xd0>)
 8013642:	f00b fecb 	bl	801f3dc <iprintf>
  len = *length;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	881b      	ldrh	r3, [r3, #0]
 801364a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 801364c:	8afb      	ldrh	r3, [r7, #22]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d101      	bne.n	8013656 <http_write+0x32>
    return ERR_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	e045      	b.n	80136e2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801365c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 801365e:	8aba      	ldrh	r2, [r7, #20]
 8013660:	8afb      	ldrh	r3, [r7, #22]
 8013662:	429a      	cmp	r2, r3
 8013664:	d201      	bcs.n	801366a <http_write+0x46>
    len = max_len;
 8013666:	8abb      	ldrh	r3, [r7, #20]
 8013668:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801366e:	005b      	lsls	r3, r3, #1
 8013670:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8013672:	8afa      	ldrh	r2, [r7, #22]
 8013674:	8abb      	ldrh	r3, [r7, #20]
 8013676:	429a      	cmp	r2, r3
 8013678:	d901      	bls.n	801367e <http_write+0x5a>
    len = max_len;
 801367a:	8abb      	ldrh	r3, [r7, #20]
 801367c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801367e:	78fb      	ldrb	r3, [r7, #3]
 8013680:	8afa      	ldrh	r2, [r7, #22]
 8013682:	68b9      	ldr	r1, [r7, #8]
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	f007 f9d9 	bl	801aa3c <tcp_write>
 801368a:	4603      	mov	r3, r0
 801368c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 801368e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013696:	d10f      	bne.n	80136b8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d004      	beq.n	80136ac <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80136a8:	2b08      	cmp	r3, #8
 80136aa:	d902      	bls.n	80136b2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80136ac:	2301      	movs	r3, #1
 80136ae:	82fb      	strh	r3, [r7, #22]
 80136b0:	e002      	b.n	80136b8 <http_write+0x94>
      } else {
        len /= 2;
 80136b2:	8afb      	ldrh	r3, [r7, #22]
 80136b4:	085b      	lsrs	r3, r3, #1
 80136b6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80136b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c0:	d102      	bne.n	80136c8 <http_write+0xa4>
 80136c2:	8afb      	ldrh	r3, [r7, #22]
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d8da      	bhi.n	801367e <http_write+0x5a>

  if (err == ERR_OK) {
 80136c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d103      	bne.n	80136d8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	8afa      	ldrh	r2, [r7, #22]
 80136d4:	801a      	strh	r2, [r3, #0]
 80136d6:	e002      	b.n	80136de <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2200      	movs	r2, #0
 80136dc:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 80136de:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3718      	adds	r7, #24
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	08021758 	.word	0x08021758
 80136f0:	08021790 	.word	0x08021790
 80136f4:	080217a0 	.word	0x080217a0

080136f8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b086      	sub	sp, #24
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	4613      	mov	r3, r2
 8013704:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d00c      	beq.n	8013726 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013712:	2b00      	cmp	r3, #0
 8013714:	d007      	beq.n	8013726 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8013716:	4b1f      	ldr	r3, [pc, #124]	; (8013794 <http_close_or_abort_conn+0x9c>)
 8013718:	2200      	movs	r2, #0
 801371a:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801371c:	223f      	movs	r2, #63	; 0x3f
 801371e:	491d      	ldr	r1, [pc, #116]	; (8013794 <http_close_or_abort_conn+0x9c>)
 8013720:	68b8      	ldr	r0, [r7, #8]
 8013722:	f7ff ff1d 	bl	8013560 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8013726:	2100      	movs	r1, #0
 8013728:	68f8      	ldr	r0, [r7, #12]
 801372a:	f004 fa49 	bl	8017bc0 <tcp_arg>
  altcp_recv(pcb, NULL);
 801372e:	2100      	movs	r1, #0
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	f004 fa57 	bl	8017be4 <tcp_recv>
  altcp_err(pcb, NULL);
 8013736:	2100      	movs	r1, #0
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	f004 fa97 	bl	8017c6c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801373e:	2200      	movs	r2, #0
 8013740:	2100      	movs	r1, #0
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	f004 facc 	bl	8017ce0 <tcp_poll>
  altcp_sent(pcb, NULL);
 8013748:	2100      	movs	r1, #0
 801374a:	68f8      	ldr	r0, [r7, #12]
 801374c:	f004 fa6c 	bl	8017c28 <tcp_sent>
  if (hs != NULL) {
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d002      	beq.n	801375c <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 8013756:	68b8      	ldr	r0, [r7, #8]
 8013758:	f7ff ff52 	bl	8013600 <http_state_free>
  }

  if (abort_conn) {
 801375c:	79fb      	ldrb	r3, [r7, #7]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d004      	beq.n	801376c <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 8013762:	68f8      	ldr	r0, [r7, #12]
 8013764:	f003 f96e 	bl	8016a44 <tcp_abort>
    return ERR_OK;
 8013768:	2300      	movs	r3, #0
 801376a:	e00f      	b.n	801378c <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 801376c:	68f8      	ldr	r0, [r7, #12]
 801376e:	f003 f87f 	bl	8016870 <tcp_close>
 8013772:	4603      	mov	r3, r0
 8013774:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8013776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d004      	beq.n	8013788 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801377e:	2204      	movs	r2, #4
 8013780:	4905      	ldr	r1, [pc, #20]	; (8013798 <http_close_or_abort_conn+0xa0>)
 8013782:	68f8      	ldr	r0, [r7, #12]
 8013784:	f004 faac 	bl	8017ce0 <tcp_poll>
  }
  return err;
 8013788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801378c:	4618      	mov	r0, r3
 801378e:	3718      	adds	r7, #24
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}
 8013794:	2000c760 	.word	0x2000c760
 8013798:	080143cf 	.word	0x080143cf

0801379c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80137a6:	2200      	movs	r2, #0
 80137a8:	6839      	ldr	r1, [r7, #0]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff ffa4 	bl	80136f8 <http_close_or_abort_conn>
 80137b0:	4603      	mov	r3, r0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3708      	adds	r7, #8
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}

080137ba <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80137ba:	b580      	push	{r7, lr}
 80137bc:	b082      	sub	sp, #8
 80137be:	af00      	add	r7, sp, #0
 80137c0:	6078      	str	r0, [r7, #4]
 80137c2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80137c4:	6839      	ldr	r1, [r7, #0]
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f7ff ffe8 	bl	801379c <http_close_conn>
  }
}
 80137cc:	bf00      	nop
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b086      	sub	sp, #24
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d003      	beq.n	80137ec <extract_uri_parameters+0x18>
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d101      	bne.n	80137f0 <extract_uri_parameters+0x1c>
    return (0);
 80137ec:	2300      	movs	r3, #0
 80137ee:	e04e      	b.n	801388e <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80137f4:	2300      	movs	r3, #0
 80137f6:	613b      	str	r3, [r7, #16]
 80137f8:	e042      	b.n	8013880 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 80137fa:	687a      	ldr	r2, [r7, #4]
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	330a      	adds	r3, #10
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	697a      	ldr	r2, [r7, #20]
 8013806:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 801380c:	2126      	movs	r1, #38	; 0x26
 801380e:	6978      	ldr	r0, [r7, #20]
 8013810:	f00b ff86 	bl	801f720 <strchr>
 8013814:	6178      	str	r0, [r7, #20]
    if (pair) {
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d006      	beq.n	801382a <extract_uri_parameters+0x56>
      *pair = '\0';
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	2200      	movs	r2, #0
 8013820:	701a      	strb	r2, [r3, #0]
      pair++;
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	3301      	adds	r3, #1
 8013826:	617b      	str	r3, [r7, #20]
 8013828:	e00c      	b.n	8013844 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 801382a:	2120      	movs	r1, #32
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	f00b ff77 	bl	801f720 <strchr>
 8013832:	6178      	str	r0, [r7, #20]
      if (pair) {
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d002      	beq.n	8013840 <extract_uri_parameters+0x6c>
        *pair = '\0';
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	2200      	movs	r2, #0
 801383e:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8013840:	2300      	movs	r3, #0
 8013842:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8013844:	213d      	movs	r1, #61	; 0x3d
 8013846:	68f8      	ldr	r0, [r7, #12]
 8013848:	f00b ff6a 	bl	801f720 <strchr>
 801384c:	60f8      	str	r0, [r7, #12]
    if (equals) {
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00b      	beq.n	801386c <extract_uri_parameters+0x98>
      *equals = '\0';
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2200      	movs	r2, #0
 8013858:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	1c5a      	adds	r2, r3, #1
 801385e:	6879      	ldr	r1, [r7, #4]
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	331a      	adds	r3, #26
 8013864:	009b      	lsls	r3, r3, #2
 8013866:	440b      	add	r3, r1
 8013868:	605a      	str	r2, [r3, #4]
 801386a:	e006      	b.n	801387a <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	331a      	adds	r3, #26
 8013872:	009b      	lsls	r3, r3, #2
 8013874:	4413      	add	r3, r2
 8013876:	2200      	movs	r2, #0
 8013878:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	3301      	adds	r3, #1
 801387e:	613b      	str	r3, [r7, #16]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	2b0f      	cmp	r3, #15
 8013884:	dc02      	bgt.n	801388c <extract_uri_parameters+0xb8>
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1b6      	bne.n	80137fa <extract_uri_parameters+0x26>
    }
  }

  return loop;
 801388c:	693b      	ldr	r3, [r7, #16]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
	...

08013898 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	695b      	ldr	r3, [r3, #20]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d105      	bne.n	80138b6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80138aa:	6839      	ldr	r1, [r7, #0]
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f7ff ff84 	bl	80137ba <http_eof>
    return 0;
 80138b2:	2300      	movs	r3, #0
 80138b4:	e016      	b.n	80138e4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	695b      	ldr	r3, [r3, #20]
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7ff fbe8 	bl	8013090 <fs_bytes_left>
 80138c0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	dc05      	bgt.n	80138d4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80138c8:	6839      	ldr	r1, [r7, #0]
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7ff ff75 	bl	80137ba <http_eof>
    return 0;
 80138d0:	2300      	movs	r3, #0
 80138d2:	e007      	b.n	80138e4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80138d4:	4b05      	ldr	r3, [pc, #20]	; (80138ec <http_check_eof+0x54>)
 80138d6:	f240 52ce 	movw	r2, #1486	; 0x5ce
 80138da:	4905      	ldr	r1, [pc, #20]	; (80138f0 <http_check_eof+0x58>)
 80138dc:	4805      	ldr	r0, [pc, #20]	; (80138f4 <http_check_eof+0x5c>)
 80138de:	f00b fd7d 	bl	801f3dc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80138e2:	2301      	movs	r3, #1
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3710      	adds	r7, #16
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	08021758 	.word	0x08021758
 80138f0:	080217c8 	.word	0x080217c8
 80138f4:	080217a0 	.word	0x080217a0

080138f8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b084      	sub	sp, #16
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8013902:	2300      	movs	r3, #0
 8013904:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801390e:	4293      	cmp	r3, r2
 8013910:	d803      	bhi.n	801391a <http_send_data_nonssi+0x22>
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013916:	b29b      	uxth	r3, r3
 8013918:	e001      	b.n	801391e <http_send_data_nonssi+0x26>
 801391a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801391e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	6999      	ldr	r1, [r3, #24]
 8013924:	f107 020c 	add.w	r2, r7, #12
 8013928:	2300      	movs	r3, #0
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fe7a 	bl	8013624 <http_write>
 8013930:	4603      	mov	r3, r0
 8013932:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8013934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d10d      	bne.n	8013958 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 801393c:	2301      	movs	r3, #1
 801393e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	699b      	ldr	r3, [r3, #24]
 8013944:	89ba      	ldrh	r2, [r7, #12]
 8013946:	441a      	add	r2, r3
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013950:	89ba      	ldrh	r2, [r7, #12]
 8013952:	1a9a      	subs	r2, r3, r2
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8013958:	7bfb      	ldrb	r3, [r7, #15]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}

08013962 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013962:	b580      	push	{r7, lr}
 8013964:	b084      	sub	sp, #16
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
 801396a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 801396c:	2300      	movs	r3, #0
 801396e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d101      	bne.n	801397a <http_send+0x18>
    return 0;
 8013976:	2300      	movs	r3, #0
 8013978:	e025      	b.n	80139c6 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801397e:	2b00      	cmp	r3, #0
 8013980:	d108      	bne.n	8013994 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8013982:	6839      	ldr	r1, [r7, #0]
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f7ff ff87 	bl	8013898 <http_check_eof>
 801398a:	4603      	mov	r3, r0
 801398c:	2b00      	cmp	r3, #0
 801398e:	d101      	bne.n	8013994 <http_send+0x32>
      return 0;
 8013990:	2300      	movs	r3, #0
 8013992:	e018      	b.n	80139c6 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8013994:	6839      	ldr	r1, [r7, #0]
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7ff ffae 	bl	80138f8 <http_send_data_nonssi>
 801399c:	4603      	mov	r3, r0
 801399e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10d      	bne.n	80139c4 <http_send+0x62>
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	695b      	ldr	r3, [r3, #20]
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7ff fb6f 	bl	8013090 <fs_bytes_left>
 80139b2:	4603      	mov	r3, r0
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	dc05      	bgt.n	80139c4 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7ff fefd 	bl	80137ba <http_eof>
    return 0;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e000      	b.n	80139c6 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80139c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
	...

080139d0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	4a1c      	ldr	r2, [pc, #112]	; (8013a50 <http_get_404_file+0x80>)
 80139de:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	4619      	mov	r1, r3
 80139e8:	4610      	mov	r0, r2
 80139ea:	f7ff fb09 	bl	8013000 <fs_open>
 80139ee:	4603      	mov	r3, r0
 80139f0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80139f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d024      	beq.n	8013a44 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	4a15      	ldr	r2, [pc, #84]	; (8013a54 <http_get_404_file+0x84>)
 80139fe:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	4619      	mov	r1, r3
 8013a08:	4610      	mov	r0, r2
 8013a0a:	f7ff faf9 	bl	8013000 <fs_open>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d014      	beq.n	8013a44 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	4a0e      	ldr	r2, [pc, #56]	; (8013a58 <http_get_404_file+0x88>)
 8013a1e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8013a20:	687a      	ldr	r2, [r7, #4]
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4619      	mov	r1, r3
 8013a28:	4610      	mov	r0, r2
 8013a2a:	f7ff fae9 	bl	8013000 <fs_open>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8013a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d004      	beq.n	8013a44 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	601a      	str	r2, [r3, #0]
        return NULL;
 8013a40:	2300      	movs	r3, #0
 8013a42:	e000      	b.n	8013a46 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8013a44:	687b      	ldr	r3, [r7, #4]
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3710      	adds	r7, #16
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}
 8013a4e:	bf00      	nop
 8013a50:	08021800 	.word	0x08021800
 8013a54:	0802180c 	.word	0x0802180c
 8013a58:	08021818 	.word	0x08021818

08013a5c <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b082      	sub	sp, #8
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8013a64:	4b08      	ldr	r3, [pc, #32]	; (8013a88 <http_handle_post_finished+0x2c>)
 8013a66:	2200      	movs	r2, #0
 8013a68:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013a6a:	223f      	movs	r2, #63	; 0x3f
 8013a6c:	4906      	ldr	r1, [pc, #24]	; (8013a88 <http_handle_post_finished+0x2c>)
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f7ff fd76 	bl	8013560 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8013a74:	2200      	movs	r2, #0
 8013a76:	4904      	ldr	r1, [pc, #16]	; (8013a88 <http_handle_post_finished+0x2c>)
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 fae9 	bl	8014050 <http_find_file>
 8013a7e:	4603      	mov	r3, r0
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	2000c760 	.word	0x2000c760

08013a8c <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d014      	beq.n	8013ac6 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013aa2:	683a      	ldr	r2, [r7, #0]
 8013aa4:	8912      	ldrh	r2, [r2, #8]
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d204      	bcs.n	8013ab4 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2200      	movs	r2, #0
 8013aae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8013ab2:	e008      	b.n	8013ac6 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013aba:	683a      	ldr	r2, [r7, #0]
 8013abc:	8912      	ldrh	r2, [r2, #8]
 8013abe:	1a9a      	subs	r2, r3, r2
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d006      	beq.n	8013ada <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 8013acc:	6839      	ldr	r1, [r7, #0]
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f7ff fb64 	bl	801319c <httpd_post_receive_data>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	73fb      	strb	r3, [r7, #15]
 8013ad8:	e001      	b.n	8013ade <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 8013ada:	2300      	movs	r3, #0
 8013adc:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8013ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d003      	beq.n	8013aee <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
  if (hs->post_content_len_left == 0) {
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d104      	bne.n	8013b02 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7ff ffaf 	bl	8013a5c <http_handle_post_finished>
 8013afe:	4603      	mov	r3, r0
 8013b00:	e000      	b.n	8013b04 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8013b02:	2300      	movs	r3, #0
}
 8013b04:	4618      	mov	r0, r3
 8013b06:	3710      	adds	r7, #16
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b0ac      	sub	sp, #176	; 0xb0
 8013b10:	af04      	add	r7, sp, #16
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	807b      	strh	r3, [r7, #2]




  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8013b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b1e:	1c58      	adds	r0, r3, #1
 8013b20:	887a      	ldrh	r2, [r7, #2]
 8013b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b26:	1c59      	adds	r1, r3, #1
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	1acb      	subs	r3, r1, r3
 8013b2c:	1ad3      	subs	r3, r2, r3
 8013b2e:	461a      	mov	r2, r3
 8013b30:	49a6      	ldr	r1, [pc, #664]	; (8013dcc <http_post_request+0x2c0>)
 8013b32:	f000 fe2d 	bl	8014790 <lwip_strnstr>
 8013b36:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if (crlfcrlf != NULL) {
 8013b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	f000 813e 	beq.w	8013dc0 <http_post_request+0x2b4>


#define HTTP_HDR_BOUNDARY "boundary="
	//memcpy(boundary,0,300);

memcpy(boundary,boundary_prefix,5);
 8013b44:	4ba2      	ldr	r3, [pc, #648]	; (8013dd0 <http_post_request+0x2c4>)
 8013b46:	4aa3      	ldr	r2, [pc, #652]	; (8013dd4 <http_post_request+0x2c8>)
 8013b48:	6810      	ldr	r0, [r2, #0]
 8013b4a:	6018      	str	r0, [r3, #0]
 8013b4c:	7912      	ldrb	r2, [r2, #4]
 8013b4e:	711a      	strb	r2, [r3, #4]
#define HTTP_HDR_BOUNDARY_LEN (sizeof HTTP_HDR_BOUNDARY-1)
 boundary_start =strnstr(uri_end+1,HTTP_HDR_BOUNDARY,crlfcrlf-(uri_end+1));
 8013b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b54:	1c58      	adds	r0, r3, #1
 8013b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013b60:	1ad3      	subs	r3, r2, r3
 8013b62:	461a      	mov	r2, r3
 8013b64:	499c      	ldr	r1, [pc, #624]	; (8013dd8 <http_post_request+0x2cc>)
 8013b66:	f00b fe02 	bl	801f76e <strnstr>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	4a9b      	ldr	r2, [pc, #620]	; (8013ddc <http_post_request+0x2d0>)
 8013b6e:	6013      	str	r3, [r2, #0]
boundary_start+=HTTP_HDR_BOUNDARY_LEN;
 8013b70:	4b9a      	ldr	r3, [pc, #616]	; (8013ddc <http_post_request+0x2d0>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	3309      	adds	r3, #9
 8013b76:	4a99      	ldr	r2, [pc, #612]	; (8013ddc <http_post_request+0x2d0>)
 8013b78:	6013      	str	r3, [r2, #0]
boundary_end =strnstr(boundary_start+1, CRLF,crlfcrlf-(boundary_start+1));
 8013b7a:	4b98      	ldr	r3, [pc, #608]	; (8013ddc <http_post_request+0x2d0>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	1c58      	adds	r0, r3, #1
 8013b80:	4b96      	ldr	r3, [pc, #600]	; (8013ddc <http_post_request+0x2d0>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	3301      	adds	r3, #1
 8013b86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013b8a:	1ad3      	subs	r3, r2, r3
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	4994      	ldr	r1, [pc, #592]	; (8013de0 <http_post_request+0x2d4>)
 8013b90:	f00b fded 	bl	801f76e <strnstr>
 8013b94:	4603      	mov	r3, r0
 8013b96:	4a93      	ldr	r2, [pc, #588]	; (8013de4 <http_post_request+0x2d8>)
 8013b98:	6013      	str	r3, [r2, #0]
 boundary_lens=boundary_end-boundary_start;
 8013b9a:	4b92      	ldr	r3, [pc, #584]	; (8013de4 <http_post_request+0x2d8>)
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	4b8f      	ldr	r3, [pc, #572]	; (8013ddc <http_post_request+0x2d0>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	1ad3      	subs	r3, r2, r3
 8013ba4:	4a90      	ldr	r2, [pc, #576]	; (8013de8 <http_post_request+0x2dc>)
 8013ba6:	6013      	str	r3, [r2, #0]
 char str[100]="";
 8013ba8:	2300      	movs	r3, #0
 8013baa:	617b      	str	r3, [r7, #20]
 8013bac:	f107 0318 	add.w	r3, r7, #24
 8013bb0:	2260      	movs	r2, #96	; 0x60
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f00b fc09 	bl	801f3cc <memset>
 MEMCPY(str,boundary_start,boundary_lens);
 8013bba:	4b88      	ldr	r3, [pc, #544]	; (8013ddc <http_post_request+0x2d0>)
 8013bbc:	6819      	ldr	r1, [r3, #0]
 8013bbe:	4b8a      	ldr	r3, [pc, #552]	; (8013de8 <http_post_request+0x2dc>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	f107 0314 	add.w	r3, r7, #20
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f00b fbd7 	bl	801f37c <memcpy>
 strcat(boundary,str);
 8013bce:	f107 0314 	add.w	r3, r7, #20
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	487e      	ldr	r0, [pc, #504]	; (8013dd0 <http_post_request+0x2c4>)
 8013bd6:	f00b fd94 	bl	801f702 <strcat>
 //printf("%s",boundary);


    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8013bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013bde:	1c58      	adds	r0, r3, #1
 8013be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013be4:	3301      	adds	r3, #1
 8013be6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	461a      	mov	r2, r3
 8013bee:	497f      	ldr	r1, [pc, #508]	; (8013dec <http_post_request+0x2e0>)
 8013bf0:	f000 fdce 	bl	8014790 <lwip_strnstr>
 8013bf4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (scontent_len != NULL) {
 8013bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	f000 80dc 	beq.w	8013dba <http_post_request+0x2ae>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8013c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c06:	3310      	adds	r3, #16
 8013c08:	220a      	movs	r2, #10
 8013c0a:	4975      	ldr	r1, [pc, #468]	; (8013de0 <http_post_request+0x2d4>)
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 fdbf 	bl	8014790 <lwip_strnstr>
 8013c12:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
      if (scontent_len_end != NULL) {
 8013c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	f000 80cd 	beq.w	8013dba <http_post_request+0x2ae>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8013c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c24:	3310      	adds	r3, #16
 8013c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        content_len = atoi(content_len_num);
 8013c2a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8013c2e:	f00b fb6f 	bl	801f310 <atoi>
 8013c32:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (content_len == 0) {
 8013c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d10e      	bne.n	8013c5c <http_post_request+0x150>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8013c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	2b30      	cmp	r3, #48	; 0x30
 8013c46:	d105      	bne.n	8013c54 <http_post_request+0x148>
 8013c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	781b      	ldrb	r3, [r3, #0]
 8013c50:	2b0d      	cmp	r3, #13
 8013c52:	d003      	beq.n	8013c5c <http_post_request+0x150>
            content_len = -1;
 8013c54:	f04f 33ff 	mov.w	r3, #4294967295
 8013c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
          }
        }
        if (content_len >= 0) {
 8013c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f2c0 80a7 	blt.w	8013db4 <http_post_request+0x2a8>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8013c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8013c70:	887a      	ldrh	r2, [r7, #2]
 8013c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c76:	1d19      	adds	r1, r3, #4
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	1acb      	subs	r3, r1, r3
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	db06      	blt.n	8013c8e <http_post_request+0x182>
 8013c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c84:	1d1a      	adds	r2, r3, #4
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	1ad3      	subs	r3, r2, r3
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	e000      	b.n	8013c90 <http_post_request+0x184>
 8013c8e:	887b      	ldrh	r3, [r7, #2]
 8013c90:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8013c94:	887a      	ldrh	r2, [r7, #2]
 8013c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c9a:	1d19      	adds	r1, r3, #4
 8013c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013ca0:	1acb      	subs	r3, r1, r3
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	db07      	blt.n	8013cb6 <http_post_request+0x1aa>
 8013ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013caa:	1d1a      	adds	r2, r3, #4
 8013cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013cb0:	1ad3      	subs	r3, r2, r3
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	e000      	b.n	8013cb8 <http_post_request+0x1ac>
 8013cb6:	887b      	ldrh	r3, [r7, #2]
 8013cb8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
          u8_t post_auto_wnd = 1;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
          http_uri_buf[0] = 0;
 8013cc2:	4b4b      	ldr	r3, [pc, #300]	; (8013df0 <http_post_request+0x2e4>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8013cc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ccc:	2200      	movs	r2, #0
 8013cce:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8013cd0:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8013cd4:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8013cd8:	9303      	str	r3, [sp, #12]
 8013cda:	233f      	movs	r3, #63	; 0x3f
 8013cdc:	9302      	str	r3, [sp, #8]
 8013cde:	4b44      	ldr	r3, [pc, #272]	; (8013df0 <http_post_request+0x2e4>)
 8013ce0:	9301      	str	r3, [sp, #4]
 8013ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013ce6:	9300      	str	r3, [sp, #0]
 8013ce8:	4613      	mov	r3, r2
 8013cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cee:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013cf2:	68b8      	ldr	r0, [r7, #8]
 8013cf4:	f7ff f9fa 	bl	80130ec <httpd_post_begin>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8013cfe:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d14f      	bne.n	8013da6 <http_post_request+0x29a>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            u16_t start_offset = hdr_len;
 8013d0c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013d10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8013d14:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 8013d1e:	e00c      	b.n	8013d3a <http_post_request+0x22e>
              start_offset -= q->len;
 8013d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d24:	895b      	ldrh	r3, [r3, #10]
 8013d26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013d2a:	1ad3      	subs	r3, r2, r3
 8013d2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
              q = q->next;
 8013d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            while ((q != NULL) && (q->len <= start_offset)) {
 8013d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d006      	beq.n	8013d50 <http_post_request+0x244>
 8013d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d46:	895b      	ldrh	r3, [r3, #10]
 8013d48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d2e7      	bcs.n	8013d20 <http_post_request+0x214>
            }
            if (q != NULL) {
 8013d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d011      	beq.n	8013d7c <http_post_request+0x270>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8013d58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8013d62:	f002 f843 	bl	8015dec <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 8013d66:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8013d6a:	f002 f97d 	bl	8016068 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8013d6e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013d72:	68b8      	ldr	r0, [r7, #8]
 8013d74:	f7ff fe8a 	bl	8013a8c <http_post_rxpbuf>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	e023      	b.n	8013dc4 <http_post_request+0x2b8>
            } else if (hs->post_content_len_left == 0) {
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d10d      	bne.n	8013da2 <http_post_request+0x296>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8013d86:	2241      	movs	r2, #65	; 0x41
 8013d88:	2100      	movs	r1, #0
 8013d8a:	2000      	movs	r0, #0
 8013d8c:	f001 fdd0 	bl	8015930 <pbuf_alloc>
 8013d90:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
              return http_post_rxpbuf(hs, q);
 8013d94:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013d98:	68b8      	ldr	r0, [r7, #8]
 8013d9a:	f7ff fe77 	bl	8013a8c <http_post_rxpbuf>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	e010      	b.n	8013dc4 <http_post_request+0x2b8>
            } else {
              return ERR_OK;
 8013da2:	2300      	movs	r3, #0
 8013da4:	e00e      	b.n	8013dc4 <http_post_request+0x2b8>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8013da6:	2200      	movs	r2, #0
 8013da8:	4911      	ldr	r1, [pc, #68]	; (8013df0 <http_post_request+0x2e4>)
 8013daa:	68b8      	ldr	r0, [r7, #8]
 8013dac:	f000 f950 	bl	8014050 <http_find_file>
 8013db0:	4603      	mov	r3, r0
 8013db2:	e007      	b.n	8013dc4 <http_post_request+0x2b8>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8013db4:	f06f 030f 	mvn.w	r3, #15
 8013db8:	e004      	b.n	8013dc4 <http_post_request+0x2b8>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8013dba:	f06f 030f 	mvn.w	r3, #15
 8013dbe:	e001      	b.n	8013dc4 <http_post_request+0x2b8>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8013dc0:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	37a0      	adds	r7, #160	; 0xa0
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	08021728 	.word	0x08021728
 8013dd0:	20011374 	.word	0x20011374
 8013dd4:	20000030 	.word	0x20000030
 8013dd8:	08021824 	.word	0x08021824
 8013ddc:	20010e10 	.word	0x20010e10
 8013de0:	08021724 	.word	0x08021724
 8013de4:	20010e30 	.word	0x20010e30
 8013de8:	20011130 	.word	0x20011130
 8013dec:	08021830 	.word	0x08021830
 8013df0:	2000c760 	.word	0x2000c760

08013df4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b092      	sub	sp, #72	; 0x48
 8013df8:	af02      	add	r7, sp, #8
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	60b9      	str	r1, [r7, #8]
 8013dfe:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <http_parse_request+0x24>
 8013e0a:	4b87      	ldr	r3, [pc, #540]	; (8014028 <http_parse_request+0x234>)
 8013e0c:	f640 120c 	movw	r2, #2316	; 0x90c
 8013e10:	4986      	ldr	r1, [pc, #536]	; (801402c <http_parse_request+0x238>)
 8013e12:	4887      	ldr	r0, [pc, #540]	; (8014030 <http_parse_request+0x23c>)
 8013e14:	f00b fae2 	bl	801f3dc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d106      	bne.n	8013e2c <http_parse_request+0x38>
 8013e1e:	4b82      	ldr	r3, [pc, #520]	; (8014028 <http_parse_request+0x234>)
 8013e20:	f640 120d 	movw	r2, #2317	; 0x90d
 8013e24:	4983      	ldr	r1, [pc, #524]	; (8014034 <http_parse_request+0x240>)
 8013e26:	4882      	ldr	r0, [pc, #520]	; (8014030 <http_parse_request+0x23c>)
 8013e28:	f00b fad8 	bl	801f3dc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	695b      	ldr	r3, [r3, #20]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d103      	bne.n	8013e3c <http_parse_request+0x48>
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	699b      	ldr	r3, [r3, #24]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d002      	beq.n	8013e42 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8013e3c:	f06f 0307 	mvn.w	r3, #7
 8013e40:	e0ed      	b.n	801401e <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	6a1b      	ldr	r3, [r3, #32]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d103      	bne.n	8013e52 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e4e:	621a      	str	r2, [r3, #32]
 8013e50:	e005      	b.n	8013e5e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	6a1b      	ldr	r3, [r3, #32]
 8013e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f002 f92d 	bl	80160b8 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8013e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e60:	f002 f902 	bl	8016068 <pbuf_ref>

  if (hs->req->next != NULL) {
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	6a1b      	ldr	r3, [r3, #32]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d012      	beq.n	8013e94 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	6a1b      	ldr	r3, [r3, #32]
 8013e72:	891b      	ldrh	r3, [r3, #8]
 8013e74:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	bf28      	it	cs
 8013e7c:	4613      	movcs	r3, r2
 8013e7e:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	6a18      	ldr	r0, [r3, #32]
 8013e84:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e86:	2300      	movs	r3, #0
 8013e88:	496b      	ldr	r1, [pc, #428]	; (8014038 <http_parse_request+0x244>)
 8013e8a:	f002 fa3d 	bl	8016308 <pbuf_copy_partial>
    data = httpd_req_buf;
 8013e8e:	4b6a      	ldr	r3, [pc, #424]	; (8014038 <http_parse_request+0x244>)
 8013e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e92:	e005      	b.n	8013ea0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8013e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9c:	895b      	ldrh	r3, [r3, #10]
 8013e9e:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8013ea0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ea2:	2b06      	cmp	r3, #6
 8013ea4:	f240 80a1 	bls.w	8013fea <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8013ea8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013eaa:	461a      	mov	r2, r3
 8013eac:	4963      	ldr	r1, [pc, #396]	; (801403c <http_parse_request+0x248>)
 8013eae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013eb0:	f000 fc6e 	bl	8014790 <lwip_strnstr>
 8013eb4:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8013eb6:	6a3b      	ldr	r3, [r7, #32]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f000 8096 	beq.w	8013fea <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8013ec6:	2204      	movs	r2, #4
 8013ec8:	495d      	ldr	r1, [pc, #372]	; (8014040 <http_parse_request+0x24c>)
 8013eca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ecc:	f00b fc3d 	bl	801f74a <strncmp>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d103      	bne.n	8013ede <http_parse_request+0xea>
        sp1 = data + 3;
 8013ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ed8:	3303      	adds	r3, #3
 8013eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013edc:	e014      	b.n	8013f08 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8013ede:	2205      	movs	r2, #5
 8013ee0:	4958      	ldr	r1, [pc, #352]	; (8014044 <http_parse_request+0x250>)
 8013ee2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ee4:	f00b fc31 	bl	801f74a <strncmp>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d105      	bne.n	8013efa <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8013ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ef4:	3304      	adds	r3, #4
 8013ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ef8:	e006      	b.n	8013f08 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8013efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013efc:	3304      	adds	r3, #4
 8013efe:	2200      	movs	r2, #0
 8013f00:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 8013f02:	f06f 030f 	mvn.w	r3, #15
 8013f06:	e08a      	b.n	801401e <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8013f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0a:	1c5a      	adds	r2, r3, #1
 8013f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f0e:	1ad3      	subs	r3, r2, r3
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f14:	1ad3      	subs	r3, r2, r3
 8013f16:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8013f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	8bfa      	ldrh	r2, [r7, #30]
 8013f1e:	494a      	ldr	r1, [pc, #296]	; (8014048 <http_parse_request+0x254>)
 8013f20:	4618      	mov	r0, r3
 8013f22:	f000 fc35 	bl	8014790 <lwip_strnstr>
 8013f26:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8013f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d10c      	bne.n	8013f48 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8013f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f30:	3301      	adds	r3, #1
 8013f32:	8bfa      	ldrh	r2, [r7, #30]
 8013f34:	4941      	ldr	r1, [pc, #260]	; (801403c <http_parse_request+0x248>)
 8013f36:	4618      	mov	r0, r3
 8013f38:	f000 fc2a 	bl	8014790 <lwip_strnstr>
 8013f3c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 8013f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d163      	bne.n	8014010 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8013f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f4e:	1ad3      	subs	r3, r2, r3
 8013f50:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8013f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d048      	beq.n	8013fea <http_parse_request+0x1f6>
 8013f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d944      	bls.n	8013fea <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8013f60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f62:	461a      	mov	r2, r3
 8013f64:	4939      	ldr	r1, [pc, #228]	; (801404c <http_parse_request+0x258>)
 8013f66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f68:	f000 fc12 	bl	8014790 <lwip_strnstr>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d03b      	beq.n	8013fea <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 8013f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f74:	3301      	adds	r3, #1
 8013f76:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8013f7e:	8bbb      	ldrh	r3, [r7, #28]
 8013f80:	69ba      	ldr	r2, [r7, #24]
 8013f82:	4413      	add	r3, r2
 8013f84:	2200      	movs	r2, #0
 8013f86:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8013f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d026      	beq.n	8013fdc <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	6a1b      	ldr	r3, [r3, #32]
 8013f92:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8013f94:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f98:	9301      	str	r3, [sp, #4]
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	9300      	str	r3, [sp, #0]
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fa2:	68b9      	ldr	r1, [r7, #8]
 8013fa4:	6978      	ldr	r0, [r7, #20]
 8013fa6:	f7ff fdb1 	bl	8013b0c <http_post_request>
 8013faa:	4603      	mov	r3, r0
 8013fac:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8013fae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00a      	beq.n	8013fcc <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8013fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb8:	2220      	movs	r2, #32
 8013fba:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8013fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbe:	2220      	movs	r2, #32
 8013fc0:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8013fc2:	8bbb      	ldrh	r3, [r7, #28]
 8013fc4:	69ba      	ldr	r2, [r7, #24]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	2220      	movs	r2, #32
 8013fca:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8013fcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013fd0:	f113 0f10 	cmn.w	r3, #16
 8013fd4:	d01e      	beq.n	8014014 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8013fd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013fda:	e020      	b.n	801401e <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8013fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fde:	69b9      	ldr	r1, [r7, #24]
 8013fe0:	68b8      	ldr	r0, [r7, #8]
 8013fe2:	f000 f835 	bl	8014050 <http_find_file>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	e019      	b.n	801401e <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	6a1b      	ldr	r3, [r3, #32]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f002 f822 	bl	8016038 <pbuf_clen>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	6a1b      	ldr	r3, [r3, #32]
 8013ffc:	891b      	ldrh	r3, [r3, #8]
 8013ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014002:	d209      	bcs.n	8014018 <http_parse_request+0x224>
 8014004:	8a3b      	ldrh	r3, [r7, #16]
 8014006:	2b05      	cmp	r3, #5
 8014008:	d806      	bhi.n	8014018 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 801400a:	f06f 0304 	mvn.w	r3, #4
 801400e:	e006      	b.n	801401e <http_parse_request+0x22a>
          goto badrequest;
 8014010:	bf00      	nop
 8014012:	e002      	b.n	801401a <http_parse_request+0x226>
              goto badrequest;
 8014014:	bf00      	nop
 8014016:	e000      	b.n	801401a <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8014018:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 801401a:	f06f 030f 	mvn.w	r3, #15
  }
}
 801401e:	4618      	mov	r0, r3
 8014020:	3740      	adds	r7, #64	; 0x40
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	08021758 	.word	0x08021758
 801402c:	08021844 	.word	0x08021844
 8014030:	080217a0 	.word	0x080217a0
 8014034:	08021850 	.word	0x08021850
 8014038:	2000c360 	.word	0x2000c360
 801403c:	08021724 	.word	0x08021724
 8014040:	0802185c 	.word	0x0802185c
 8014044:	08021864 	.word	0x08021864
 8014048:	0802186c 	.word	0x0802186c
 801404c:	08021728 	.word	0x08021728

08014050 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8014050:	b590      	push	{r4, r7, lr}
 8014052:	b093      	sub	sp, #76	; 0x4c
 8014054:	af02      	add	r7, sp, #8
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	60b9      	str	r1, [r7, #8]
 801405a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 801405c:	2300      	movs	r3, #0
 801405e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8014060:	2300      	movs	r3, #0
 8014062:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8014064:	2300      	movs	r3, #0
 8014066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	4618      	mov	r0, r3
 801406e:	f7ec f8b9 	bl	80001e4 <strlen>
 8014072:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8014074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014076:	2b00      	cmp	r3, #0
 8014078:	d06b      	beq.n	8014152 <http_find_file+0x102>
 801407a:	68ba      	ldr	r2, [r7, #8]
 801407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407e:	3b01      	subs	r3, #1
 8014080:	4413      	add	r3, r2
 8014082:	781b      	ldrb	r3, [r3, #0]
 8014084:	2b2f      	cmp	r3, #47	; 0x2f
 8014086:	d164      	bne.n	8014152 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8014088:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801408a:	4a72      	ldr	r2, [pc, #456]	; (8014254 <http_find_file+0x204>)
 801408c:	4293      	cmp	r3, r2
 801408e:	d102      	bne.n	8014096 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8014090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014092:	2b01      	cmp	r3, #1
 8014094:	d15d      	bne.n	8014152 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8014096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014098:	3b01      	subs	r3, #1
 801409a:	2b3f      	cmp	r3, #63	; 0x3f
 801409c:	bf28      	it	cs
 801409e:	233f      	movcs	r3, #63	; 0x3f
 80140a0:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80140a2:	6a3b      	ldr	r3, [r7, #32]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d00a      	beq.n	80140be <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	6a3a      	ldr	r2, [r7, #32]
 80140ac:	4619      	mov	r1, r3
 80140ae:	4869      	ldr	r0, [pc, #420]	; (8014254 <http_find_file+0x204>)
 80140b0:	f00b f964 	bl	801f37c <memcpy>
      http_uri_buf[copy_len] = 0;
 80140b4:	4a67      	ldr	r2, [pc, #412]	; (8014254 <http_find_file+0x204>)
 80140b6:	6a3b      	ldr	r3, [r7, #32]
 80140b8:	4413      	add	r3, r2
 80140ba:	2200      	movs	r2, #0
 80140bc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80140be:	2300      	movs	r3, #0
 80140c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140c2:	e043      	b.n	801414c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80140c4:	6a3b      	ldr	r3, [r7, #32]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d028      	beq.n	801411c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80140ca:	6a3b      	ldr	r3, [r7, #32]
 80140cc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80140d0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d01e      	beq.n	8014116 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80140d8:	4a5f      	ldr	r2, [pc, #380]	; (8014258 <http_find_file+0x208>)
 80140da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7ec f87f 	bl	80001e4 <strlen>
 80140e6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80140e8:	69ba      	ldr	r2, [r7, #24]
 80140ea:	69fb      	ldr	r3, [r7, #28]
 80140ec:	4293      	cmp	r3, r2
 80140ee:	bf28      	it	cs
 80140f0:	4613      	movcs	r3, r2
 80140f2:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80140f4:	6a3b      	ldr	r3, [r7, #32]
 80140f6:	4a57      	ldr	r2, [pc, #348]	; (8014254 <http_find_file+0x204>)
 80140f8:	1898      	adds	r0, r3, r2
 80140fa:	4a57      	ldr	r2, [pc, #348]	; (8014258 <http_find_file+0x208>)
 80140fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014102:	697a      	ldr	r2, [r7, #20]
 8014104:	4619      	mov	r1, r3
 8014106:	f00b f939 	bl	801f37c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801410a:	6a3a      	ldr	r2, [r7, #32]
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	4413      	add	r3, r2
 8014110:	4a50      	ldr	r2, [pc, #320]	; (8014254 <http_find_file+0x204>)
 8014112:	2100      	movs	r1, #0
 8014114:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8014116:	4b4f      	ldr	r3, [pc, #316]	; (8014254 <http_find_file+0x204>)
 8014118:	62fb      	str	r3, [r7, #44]	; 0x2c
 801411a:	e004      	b.n	8014126 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 801411c:	4a4e      	ldr	r2, [pc, #312]	; (8014258 <http_find_file+0x208>)
 801411e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014124:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801412a:	4618      	mov	r0, r3
 801412c:	f7fe ff68 	bl	8013000 <fs_open>
 8014130:	4603      	mov	r3, r0
 8014132:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8014134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d104      	bne.n	8014146 <http_find_file+0xf6>
        uri = file_name;
 801413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801413e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8014144:	e005      	b.n	8014152 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8014146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014148:	3301      	adds	r3, #1
 801414a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801414e:	2b04      	cmp	r3, #4
 8014150:	d9b8      	bls.n	80140c4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8014152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014154:	2b00      	cmp	r3, #0
 8014156:	d161      	bne.n	801421c <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	213f      	movs	r1, #63	; 0x3f
 801415c:	4618      	mov	r0, r3
 801415e:	f00b fadf 	bl	801f720 <strchr>
 8014162:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8014164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014166:	2b00      	cmp	r3, #0
 8014168:	d005      	beq.n	8014176 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 801416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801416c:	2200      	movs	r2, #0
 801416e:	701a      	strb	r2, [r3, #0]
      params++;
 8014170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014172:	3301      	adds	r3, #1
 8014174:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8014176:	4b39      	ldr	r3, [pc, #228]	; (801425c <http_find_file+0x20c>)
 8014178:	f04f 32ff 	mov.w	r2, #4294967295
 801417c:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 801417e:	4b38      	ldr	r3, [pc, #224]	; (8014260 <http_find_file+0x210>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d034      	beq.n	80141f0 <http_find_file+0x1a0>
 8014186:	4b37      	ldr	r3, [pc, #220]	; (8014264 <http_find_file+0x214>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d030      	beq.n	80141f0 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 801418e:	2300      	movs	r3, #0
 8014190:	633b      	str	r3, [r7, #48]	; 0x30
 8014192:	e028      	b.n	80141e6 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8014194:	68b8      	ldr	r0, [r7, #8]
 8014196:	4b33      	ldr	r3, [pc, #204]	; (8014264 <http_find_file+0x214>)
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	4413      	add	r3, r2
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	4619      	mov	r1, r3
 80141a4:	f7ec f814 	bl	80001d0 <strcmp>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d118      	bne.n	80141e0 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80141ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80141b0:	68f8      	ldr	r0, [r7, #12]
 80141b2:	f7ff fb0f 	bl	80137d4 <extract_uri_parameters>
 80141b6:	4603      	mov	r3, r0
 80141b8:	4a28      	ldr	r2, [pc, #160]	; (801425c <http_find_file+0x20c>)
 80141ba:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80141bc:	4b29      	ldr	r3, [pc, #164]	; (8014264 <http_find_file+0x214>)
 80141be:	681a      	ldr	r2, [r3, #0]
 80141c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c2:	00db      	lsls	r3, r3, #3
 80141c4:	4413      	add	r3, r2
 80141c6:	685c      	ldr	r4, [r3, #4]
 80141c8:	4b24      	ldr	r3, [pc, #144]	; (801425c <http_find_file+0x20c>)
 80141ca:	6819      	ldr	r1, [r3, #0]
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80141d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141d8:	47a0      	blx	r4
 80141da:	4603      	mov	r3, r0
 80141dc:	60bb      	str	r3, [r7, #8]
          break;
 80141de:	e007      	b.n	80141f0 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80141e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e2:	3301      	adds	r3, #1
 80141e4:	633b      	str	r3, [r7, #48]	; 0x30
 80141e6:	4b1e      	ldr	r3, [pc, #120]	; (8014260 <http_find_file+0x210>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141ec:	429a      	cmp	r2, r3
 80141ee:	dbd1      	blt.n	8014194 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	68ba      	ldr	r2, [r7, #8]
 80141f4:	4611      	mov	r1, r2
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7fe ff02 	bl	8013000 <fs_open>
 80141fc:	4603      	mov	r3, r0
 80141fe:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8014200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d102      	bne.n	801420e <http_find_file+0x1be>
      file = &hs->file_handle;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	63bb      	str	r3, [r7, #56]	; 0x38
 801420c:	e006      	b.n	801421c <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 801420e:	f107 0308 	add.w	r3, r7, #8
 8014212:	4619      	mov	r1, r3
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f7ff fbdb 	bl	80139d0 <http_get_404_file>
 801421a:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 801421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801421e:	2b00      	cmp	r3, #0
 8014220:	d106      	bne.n	8014230 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8014222:	f107 0308 	add.w	r3, r7, #8
 8014226:	4619      	mov	r1, r3
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f7ff fbd1 	bl	80139d0 <http_get_404_file>
 801422e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8014230:	68ba      	ldr	r2, [r7, #8]
 8014232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014234:	9301      	str	r3, [sp, #4]
 8014236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801423a:	9300      	str	r3, [sp, #0]
 801423c:	4613      	mov	r3, r2
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014242:	68f8      	ldr	r0, [r7, #12]
 8014244:	f000 f810 	bl	8014268 <http_init_file>
 8014248:	4603      	mov	r3, r0
}
 801424a:	4618      	mov	r0, r3
 801424c:	3744      	adds	r7, #68	; 0x44
 801424e:	46bd      	mov	sp, r7
 8014250:	bd90      	pop	{r4, r7, pc}
 8014252:	bf00      	nop
 8014254:	2000c760 	.word	0x2000c760
 8014258:	0807b030 	.word	0x0807b030
 801425c:	2000c7a8 	.word	0x2000c7a8
 8014260:	2000c7a4 	.word	0x2000c7a4
 8014264:	2000c7a0 	.word	0x2000c7a0

08014268 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b086      	sub	sp, #24
 801426c:	af00      	add	r7, sp, #0
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	607a      	str	r2, [r7, #4]
 8014274:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d05c      	beq.n	8014336 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d106      	bne.n	8014292 <http_init_file+0x2a>
 8014284:	4b35      	ldr	r3, [pc, #212]	; (801435c <http_init_file+0xf4>)
 8014286:	f640 2269 	movw	r2, #2665	; 0xa69
 801428a:	4935      	ldr	r1, [pc, #212]	; (8014360 <http_init_file+0xf8>)
 801428c:	4835      	ldr	r0, [pc, #212]	; (8014364 <http_init_file+0xfc>)
 801428e:	f00b f8a5 	bl	801f3dc <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	68ba      	ldr	r2, [r7, #8]
 8014296:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	685b      	ldr	r3, [r3, #4]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	da06      	bge.n	80142b6 <http_init_file+0x4e>
 80142a8:	4b2c      	ldr	r3, [pc, #176]	; (801435c <http_init_file+0xf4>)
 80142aa:	f640 2292 	movw	r2, #2706	; 0xa92
 80142ae:	492e      	ldr	r1, [pc, #184]	; (8014368 <http_init_file+0x100>)
 80142b0:	482c      	ldr	r0, [pc, #176]	; (8014364 <http_init_file+0xfc>)
 80142b2:	f00b f893 	bl	801f3dc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	461a      	mov	r2, r3
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2200      	movs	r2, #0
 80142c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	695b      	ldr	r3, [r3, #20]
 80142cc:	7c1b      	ldrb	r3, [r3, #16]
 80142ce:	f003 0301 	and.w	r3, r3, #1
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d106      	bne.n	80142e4 <http_init_file+0x7c>
 80142d6:	4b21      	ldr	r3, [pc, #132]	; (801435c <http_init_file+0xf4>)
 80142d8:	f640 22a1 	movw	r2, #2721	; 0xaa1
 80142dc:	4923      	ldr	r1, [pc, #140]	; (801436c <http_init_file+0x104>)
 80142de:	4821      	ldr	r0, [pc, #132]	; (8014364 <http_init_file+0xfc>)
 80142e0:	f00b f87c 	bl	801f3dc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d032      	beq.n	8014350 <http_init_file+0xe8>
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	695b      	ldr	r3, [r3, #20]
 80142ee:	7c1b      	ldrb	r3, [r3, #16]
 80142f0:	f003 0301 	and.w	r3, r3, #1
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d02b      	beq.n	8014350 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	6998      	ldr	r0, [r3, #24]
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014300:	461a      	mov	r2, r3
 8014302:	491b      	ldr	r1, [pc, #108]	; (8014370 <http_init_file+0x108>)
 8014304:	f000 fa44 	bl	8014790 <lwip_strnstr>
 8014308:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d01f      	beq.n	8014350 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	1d1a      	adds	r2, r3, #4
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	699b      	ldr	r3, [r3, #24]
 8014318:	1ad3      	subs	r3, r2, r3
 801431a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	699a      	ldr	r2, [r3, #24]
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	441a      	add	r2, r3
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	1ad2      	subs	r2, r2, r3
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	625a      	str	r2, [r3, #36]	; 0x24
 8014334:	e00c      	b.n	8014350 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2200      	movs	r2, #0
 801433a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	2200      	movs	r2, #0
 8014340:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2200      	movs	r2, #0
 8014346:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2200      	movs	r2, #0
 801434c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8014350:	2300      	movs	r3, #0
}
 8014352:	4618      	mov	r0, r3
 8014354:	3718      	adds	r7, #24
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}
 801435a:	bf00      	nop
 801435c:	08021758 	.word	0x08021758
 8014360:	08021870 	.word	0x08021870
 8014364:	080217a0 	.word	0x080217a0
 8014368:	08021884 	.word	0x08021884
 801436c:	080218a4 	.word	0x080218a4
 8014370:	08021728 	.word	0x08021728

08014374 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
 801437c:	460b      	mov	r3, r1
 801437e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d002      	beq.n	8014390 <http_err+0x1c>
    http_state_free(hs);
 801438a:	68f8      	ldr	r0, [r7, #12]
 801438c:	f7ff f938 	bl	8013600 <http_state_free>
  }
}
 8014390:	bf00      	nop
 8014392:	3710      	adds	r7, #16
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	4613      	mov	r3, r2
 80143a4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d101      	bne.n	80143b4 <http_sent+0x1c>
    return ERR_OK;
 80143b0:	2300      	movs	r3, #0
 80143b2:	e008      	b.n	80143c6 <http_sent+0x2e>
  }

  hs->retries = 0;
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	2200      	movs	r2, #0
 80143b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80143bc:	6979      	ldr	r1, [r7, #20]
 80143be:	68b8      	ldr	r0, [r7, #8]
 80143c0:	f7ff facf 	bl	8013962 <http_send>

  return ERR_OK;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3718      	adds	r7, #24
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}

080143ce <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80143ce:	b580      	push	{r7, lr}
 80143d0:	b084      	sub	sp, #16
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
 80143d6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d107      	bne.n	80143f2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80143e2:	2100      	movs	r1, #0
 80143e4:	6838      	ldr	r0, [r7, #0]
 80143e6:	f7ff f9d9 	bl	801379c <http_close_conn>
 80143ea:	4603      	mov	r3, r0
 80143ec:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80143ee:	2300      	movs	r3, #0
 80143f0:	e021      	b.n	8014436 <http_poll+0x68>
  } else {
    hs->retries++;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143f8:	3301      	adds	r3, #1
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014408:	2b04      	cmp	r3, #4
 801440a:	d105      	bne.n	8014418 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 801440c:	68f9      	ldr	r1, [r7, #12]
 801440e:	6838      	ldr	r0, [r7, #0]
 8014410:	f7ff f9c4 	bl	801379c <http_close_conn>
      return ERR_OK;
 8014414:	2300      	movs	r3, #0
 8014416:	e00e      	b.n	8014436 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	695b      	ldr	r3, [r3, #20]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d009      	beq.n	8014434 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8014420:	68f9      	ldr	r1, [r7, #12]
 8014422:	6838      	ldr	r0, [r7, #0]
 8014424:	f7ff fa9d 	bl	8013962 <http_send>
 8014428:	4603      	mov	r3, r0
 801442a:	2b00      	cmp	r3, #0
 801442c:	d002      	beq.n	8014434 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 801442e:	6838      	ldr	r0, [r7, #0]
 8014430:	f007 f8ee 	bl	801b610 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8014434:	2300      	movs	r3, #0
}
 8014436:	4618      	mov	r0, r3
 8014438:	3710      	adds	r7, #16
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
	...

08014440 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8014452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d105      	bne.n	8014466 <http_recv+0x26>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d002      	beq.n	8014466 <http_recv+0x26>
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d111      	bne.n	801448a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d008      	beq.n	801447e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	891b      	ldrh	r3, [r3, #8]
 8014470:	4619      	mov	r1, r3
 8014472:	68b8      	ldr	r0, [r7, #8]
 8014474:	f002 fcc0 	bl	8016df8 <tcp_recved>
      pbuf_free(p);
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f001 fd4f 	bl	8015f1c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 801447e:	6979      	ldr	r1, [r7, #20]
 8014480:	68b8      	ldr	r0, [r7, #8]
 8014482:	f7ff f98b 	bl	801379c <http_close_conn>
    return ERR_OK;
 8014486:	2300      	movs	r3, #0
 8014488:	e072      	b.n	8014570 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	891b      	ldrh	r3, [r3, #8]
 801448e:	4619      	mov	r1, r3
 8014490:	68b8      	ldr	r0, [r7, #8]
 8014492:	f002 fcb1 	bl	8016df8 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801449c:	2b00      	cmp	r3, #0
 801449e:	d012      	beq.n	80144c6 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	2200      	movs	r2, #0
 80144a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 80144a8:	6879      	ldr	r1, [r7, #4]
 80144aa:	6978      	ldr	r0, [r7, #20]
 80144ac:	f7ff faee 	bl	8013a8c <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d103      	bne.n	80144c2 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 80144ba:	6979      	ldr	r1, [r7, #20]
 80144bc:	68b8      	ldr	r0, [r7, #8]
 80144be:	f7ff fa50 	bl	8013962 <http_send>
    }
    return ERR_OK;
 80144c2:	2300      	movs	r3, #0
 80144c4:	e054      	b.n	8014570 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	695b      	ldr	r3, [r3, #20]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d14c      	bne.n	8014568 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 80144ce:	68ba      	ldr	r2, [r7, #8]
 80144d0:	6979      	ldr	r1, [r7, #20]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f7ff fc8e 	bl	8013df4 <http_parse_request>
 80144d8:	4603      	mov	r3, r0
 80144da:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80144dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d015      	beq.n	8014510 <http_recv+0xd0>
 80144e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144e8:	f113 0f05 	cmn.w	r3, #5
 80144ec:	d010      	beq.n	8014510 <http_recv+0xd0>
 80144ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144f2:	f113 0f10 	cmn.w	r3, #16
 80144f6:	d00b      	beq.n	8014510 <http_recv+0xd0>
 80144f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144fc:	f113 0f08 	cmn.w	r3, #8
 8014500:	d006      	beq.n	8014510 <http_recv+0xd0>
 8014502:	4b1d      	ldr	r3, [pc, #116]	; (8014578 <http_recv+0x138>)
 8014504:	f640 3262 	movw	r2, #2914	; 0xb62
 8014508:	491c      	ldr	r1, [pc, #112]	; (801457c <http_recv+0x13c>)
 801450a:	481d      	ldr	r0, [pc, #116]	; (8014580 <http_recv+0x140>)
 801450c:	f00a ff66 	bl	801f3dc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8014510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014514:	f113 0f05 	cmn.w	r3, #5
 8014518:	d00b      	beq.n	8014532 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	6a1b      	ldr	r3, [r3, #32]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d007      	beq.n	8014532 <http_recv+0xf2>
          pbuf_free(hs->req);
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	6a1b      	ldr	r3, [r3, #32]
 8014526:	4618      	mov	r0, r3
 8014528:	f001 fcf8 	bl	8015f1c <pbuf_free>
          hs->req = NULL;
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	2200      	movs	r2, #0
 8014530:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f001 fcf2 	bl	8015f1c <pbuf_free>
      if (parsed == ERR_OK) {
 8014538:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d109      	bne.n	8014554 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014546:	2b00      	cmp	r3, #0
 8014548:	d111      	bne.n	801456e <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 801454a:	6979      	ldr	r1, [r7, #20]
 801454c:	68b8      	ldr	r0, [r7, #8]
 801454e:	f7ff fa08 	bl	8013962 <http_send>
 8014552:	e00c      	b.n	801456e <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 8014554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014558:	f113 0f10 	cmn.w	r3, #16
 801455c:	d107      	bne.n	801456e <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 801455e:	6979      	ldr	r1, [r7, #20]
 8014560:	68b8      	ldr	r0, [r7, #8]
 8014562:	f7ff f91b 	bl	801379c <http_close_conn>
 8014566:	e002      	b.n	801456e <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f001 fcd7 	bl	8015f1c <pbuf_free>
    }
  }
  return ERR_OK;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	3718      	adds	r7, #24
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}
 8014578:	08021758 	.word	0x08021758
 801457c:	080218d0 	.word	0x080218d0
 8014580:	080217a0 	.word	0x080217a0

08014584 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b086      	sub	sp, #24
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	4613      	mov	r3, r2
 8014590:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8014592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d102      	bne.n	80145a0 <http_accept+0x1c>
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d102      	bne.n	80145a6 <http_accept+0x22>
    return ERR_VAL;
 80145a0:	f06f 0305 	mvn.w	r3, #5
 80145a4:	e025      	b.n	80145f2 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80145a6:	2101      	movs	r1, #1
 80145a8:	68b8      	ldr	r0, [r7, #8]
 80145aa:	f003 f909 	bl	80177c0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80145ae:	f7fe fd8b 	bl	80130c8 <http_state_alloc>
 80145b2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d102      	bne.n	80145c0 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80145ba:	f04f 33ff 	mov.w	r3, #4294967295
 80145be:	e018      	b.n	80145f2 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80145c0:	697b      	ldr	r3, [r7, #20]
 80145c2:	68ba      	ldr	r2, [r7, #8]
 80145c4:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80145c6:	6979      	ldr	r1, [r7, #20]
 80145c8:	68b8      	ldr	r0, [r7, #8]
 80145ca:	f003 faf9 	bl	8017bc0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80145ce:	490b      	ldr	r1, [pc, #44]	; (80145fc <http_accept+0x78>)
 80145d0:	68b8      	ldr	r0, [r7, #8]
 80145d2:	f003 fb07 	bl	8017be4 <tcp_recv>
  altcp_err(pcb, http_err);
 80145d6:	490a      	ldr	r1, [pc, #40]	; (8014600 <http_accept+0x7c>)
 80145d8:	68b8      	ldr	r0, [r7, #8]
 80145da:	f003 fb47 	bl	8017c6c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80145de:	2204      	movs	r2, #4
 80145e0:	4908      	ldr	r1, [pc, #32]	; (8014604 <http_accept+0x80>)
 80145e2:	68b8      	ldr	r0, [r7, #8]
 80145e4:	f003 fb7c 	bl	8017ce0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80145e8:	4907      	ldr	r1, [pc, #28]	; (8014608 <http_accept+0x84>)
 80145ea:	68b8      	ldr	r0, [r7, #8]
 80145ec:	f003 fb1c 	bl	8017c28 <tcp_sent>

  return ERR_OK;
 80145f0:	2300      	movs	r3, #0
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3718      	adds	r7, #24
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
 80145fa:	bf00      	nop
 80145fc:	08014441 	.word	0x08014441
 8014600:	08014375 	.word	0x08014375
 8014604:	080143cf 	.word	0x080143cf
 8014608:	08014399 	.word	0x08014399

0801460c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	460b      	mov	r3, r1
 8014616:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d029      	beq.n	8014672 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801461e:	2101      	movs	r1, #1
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f003 f8cd 	bl	80177c0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8014626:	887b      	ldrh	r3, [r7, #2]
 8014628:	461a      	mov	r2, r3
 801462a:	4914      	ldr	r1, [pc, #80]	; (801467c <httpd_init_pcb+0x70>)
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f002 fa15 	bl	8016a5c <tcp_bind>
 8014632:	4603      	mov	r3, r0
 8014634:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8014636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d006      	beq.n	801464c <httpd_init_pcb+0x40>
 801463e:	4b10      	ldr	r3, [pc, #64]	; (8014680 <httpd_init_pcb+0x74>)
 8014640:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8014644:	490f      	ldr	r1, [pc, #60]	; (8014684 <httpd_init_pcb+0x78>)
 8014646:	4810      	ldr	r0, [pc, #64]	; (8014688 <httpd_init_pcb+0x7c>)
 8014648:	f00a fec8 	bl	801f3dc <iprintf>
    pcb = altcp_listen(pcb);
 801464c:	21ff      	movs	r1, #255	; 0xff
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f002 fabc 	bl	8016bcc <tcp_listen_with_backlog>
 8014654:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d106      	bne.n	801466a <httpd_init_pcb+0x5e>
 801465c:	4b08      	ldr	r3, [pc, #32]	; (8014680 <httpd_init_pcb+0x74>)
 801465e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8014662:	490a      	ldr	r1, [pc, #40]	; (801468c <httpd_init_pcb+0x80>)
 8014664:	4808      	ldr	r0, [pc, #32]	; (8014688 <httpd_init_pcb+0x7c>)
 8014666:	f00a feb9 	bl	801f3dc <iprintf>
    altcp_accept(pcb, http_accept);
 801466a:	4909      	ldr	r1, [pc, #36]	; (8014690 <httpd_init_pcb+0x84>)
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f003 fb1f 	bl	8017cb0 <tcp_accept>
  }
}
 8014672:	bf00      	nop
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	0807b168 	.word	0x0807b168
 8014680:	08021758 	.word	0x08021758
 8014684:	080218fc 	.word	0x080218fc
 8014688:	080217a0 	.word	0x080217a0
 801468c:	08021918 	.word	0x08021918
 8014690:	08014585 	.word	0x08014585

08014694 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801469a:	202e      	movs	r0, #46	; 0x2e
 801469c:	f003 fa82 	bl	8017ba4 <tcp_new_ip_type>
 80146a0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d106      	bne.n	80146b6 <httpd_init+0x22>
 80146a8:	4b07      	ldr	r3, [pc, #28]	; (80146c8 <httpd_init+0x34>)
 80146aa:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 80146ae:	4907      	ldr	r1, [pc, #28]	; (80146cc <httpd_init+0x38>)
 80146b0:	4807      	ldr	r0, [pc, #28]	; (80146d0 <httpd_init+0x3c>)
 80146b2:	f00a fe93 	bl	801f3dc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80146b6:	2150      	movs	r1, #80	; 0x50
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f7ff ffa7 	bl	801460c <httpd_init_pcb>
}
 80146be:	bf00      	nop
 80146c0:	3708      	adds	r7, #8
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	08021758 	.word	0x08021758
 80146cc:	08021938 	.word	0x08021938
 80146d0:	080217a0 	.word	0x080217a0

080146d4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d106      	bne.n	80146f2 <http_set_cgi_handlers+0x1e>
 80146e4:	4b0d      	ldr	r3, [pc, #52]	; (801471c <http_set_cgi_handlers+0x48>)
 80146e6:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 80146ea:	490d      	ldr	r1, [pc, #52]	; (8014720 <http_set_cgi_handlers+0x4c>)
 80146ec:	480d      	ldr	r0, [pc, #52]	; (8014724 <http_set_cgi_handlers+0x50>)
 80146ee:	f00a fe75 	bl	801f3dc <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	dc06      	bgt.n	8014706 <http_set_cgi_handlers+0x32>
 80146f8:	4b08      	ldr	r3, [pc, #32]	; (801471c <http_set_cgi_handlers+0x48>)
 80146fa:	f640 4211 	movw	r2, #3089	; 0xc11
 80146fe:	490a      	ldr	r1, [pc, #40]	; (8014728 <http_set_cgi_handlers+0x54>)
 8014700:	4808      	ldr	r0, [pc, #32]	; (8014724 <http_set_cgi_handlers+0x50>)
 8014702:	f00a fe6b 	bl	801f3dc <iprintf>

  httpd_cgis = cgis;
 8014706:	4a09      	ldr	r2, [pc, #36]	; (801472c <http_set_cgi_handlers+0x58>)
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 801470c:	4a08      	ldr	r2, [pc, #32]	; (8014730 <http_set_cgi_handlers+0x5c>)
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	6013      	str	r3, [r2, #0]
}
 8014712:	bf00      	nop
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	08021758 	.word	0x08021758
 8014720:	08021954 	.word	0x08021954
 8014724:	080217a0 	.word	0x080217a0
 8014728:	08021964 	.word	0x08021964
 801472c:	2000c7a0 	.word	0x2000c7a0
 8014730:	2000c7a4 	.word	0x2000c7a4

08014734 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8014734:	b480      	push	{r7}
 8014736:	b083      	sub	sp, #12
 8014738:	af00      	add	r7, sp, #0
 801473a:	4603      	mov	r3, r0
 801473c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801473e:	88fb      	ldrh	r3, [r7, #6]
 8014740:	021b      	lsls	r3, r3, #8
 8014742:	b21a      	sxth	r2, r3
 8014744:	88fb      	ldrh	r3, [r7, #6]
 8014746:	0a1b      	lsrs	r3, r3, #8
 8014748:	b29b      	uxth	r3, r3
 801474a:	b21b      	sxth	r3, r3
 801474c:	4313      	orrs	r3, r2
 801474e:	b21b      	sxth	r3, r3
 8014750:	b29b      	uxth	r3, r3
}
 8014752:	4618      	mov	r0, r3
 8014754:	370c      	adds	r7, #12
 8014756:	46bd      	mov	sp, r7
 8014758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475c:	4770      	bx	lr

0801475e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801475e:	b480      	push	{r7}
 8014760:	b083      	sub	sp, #12
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	061a      	lsls	r2, r3, #24
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	021b      	lsls	r3, r3, #8
 801476e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014772:	431a      	orrs	r2, r3
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	0a1b      	lsrs	r3, r3, #8
 8014778:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801477c:	431a      	orrs	r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	0e1b      	lsrs	r3, r3, #24
 8014782:	4313      	orrs	r3, r2
}
 8014784:	4618      	mov	r0, r3
 8014786:	370c      	adds	r7, #12
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr

08014790 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b086      	sub	sp, #24
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	60b9      	str	r1, [r7, #8]
 801479a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 801479c:	68b8      	ldr	r0, [r7, #8]
 801479e:	f7eb fd21 	bl	80001e4 <strlen>
 80147a2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d101      	bne.n	80147ae <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	e022      	b.n	80147f4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	617b      	str	r3, [r7, #20]
 80147b2:	e012      	b.n	80147da <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	781a      	ldrb	r2, [r3, #0]
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	429a      	cmp	r2, r3
 80147be:	d109      	bne.n	80147d4 <lwip_strnstr+0x44>
 80147c0:	693a      	ldr	r2, [r7, #16]
 80147c2:	68b9      	ldr	r1, [r7, #8]
 80147c4:	6978      	ldr	r0, [r7, #20]
 80147c6:	f00a ffc0 	bl	801f74a <strncmp>
 80147ca:	4603      	mov	r3, r0
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d101      	bne.n	80147d4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	e00f      	b.n	80147f4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	3301      	adds	r3, #1
 80147d8:	617b      	str	r3, [r7, #20]
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d007      	beq.n	80147f2 <lwip_strnstr+0x62>
 80147e2:	697a      	ldr	r2, [r7, #20]
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	441a      	add	r2, r3
 80147e8:	68f9      	ldr	r1, [r7, #12]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	440b      	add	r3, r1
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d9e0      	bls.n	80147b4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80147f2:	2300      	movs	r3, #0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3718      	adds	r7, #24
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014802:	2300      	movs	r3, #0
 8014804:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014806:	f00a fcf9 	bl	801f1fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801480a:	f000 f8d5 	bl	80149b8 <mem_init>
  memp_init();
 801480e:	f000 fc31 	bl	8015074 <memp_init>
  pbuf_init();
  netif_init();
 8014812:	f000 fcf7 	bl	8015204 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014816:	f007 ffeb 	bl	801c7f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801481a:	f001 fe19 	bl	8016450 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801481e:	f007 ff2d 	bl	801c67c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014822:	bf00      	nop
 8014824:	3708      	adds	r7, #8
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
	...

0801482c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801482c:	b480      	push	{r7}
 801482e:	b083      	sub	sp, #12
 8014830:	af00      	add	r7, sp, #0
 8014832:	4603      	mov	r3, r0
 8014834:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8014836:	4b05      	ldr	r3, [pc, #20]	; (801484c <ptr_to_mem+0x20>)
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	88fb      	ldrh	r3, [r7, #6]
 801483c:	4413      	add	r3, r2
}
 801483e:	4618      	mov	r0, r3
 8014840:	370c      	adds	r7, #12
 8014842:	46bd      	mov	sp, r7
 8014844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014848:	4770      	bx	lr
 801484a:	bf00      	nop
 801484c:	2000c7b4 	.word	0x2000c7b4

08014850 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8014850:	b480      	push	{r7}
 8014852:	b083      	sub	sp, #12
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014858:	4b05      	ldr	r3, [pc, #20]	; (8014870 <mem_to_ptr+0x20>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	1ad3      	subs	r3, r2, r3
 8014860:	b29b      	uxth	r3, r3
}
 8014862:	4618      	mov	r0, r3
 8014864:	370c      	adds	r7, #12
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop
 8014870:	2000c7b4 	.word	0x2000c7b4

08014874 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014874:	b590      	push	{r4, r7, lr}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801487c:	4b45      	ldr	r3, [pc, #276]	; (8014994 <plug_holes+0x120>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	429a      	cmp	r2, r3
 8014884:	d206      	bcs.n	8014894 <plug_holes+0x20>
 8014886:	4b44      	ldr	r3, [pc, #272]	; (8014998 <plug_holes+0x124>)
 8014888:	f240 12df 	movw	r2, #479	; 0x1df
 801488c:	4943      	ldr	r1, [pc, #268]	; (801499c <plug_holes+0x128>)
 801488e:	4844      	ldr	r0, [pc, #272]	; (80149a0 <plug_holes+0x12c>)
 8014890:	f00a fda4 	bl	801f3dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014894:	4b43      	ldr	r3, [pc, #268]	; (80149a4 <plug_holes+0x130>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	429a      	cmp	r2, r3
 801489c:	d306      	bcc.n	80148ac <plug_holes+0x38>
 801489e:	4b3e      	ldr	r3, [pc, #248]	; (8014998 <plug_holes+0x124>)
 80148a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80148a4:	4940      	ldr	r1, [pc, #256]	; (80149a8 <plug_holes+0x134>)
 80148a6:	483e      	ldr	r0, [pc, #248]	; (80149a0 <plug_holes+0x12c>)
 80148a8:	f00a fd98 	bl	801f3dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	791b      	ldrb	r3, [r3, #4]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d006      	beq.n	80148c2 <plug_holes+0x4e>
 80148b4:	4b38      	ldr	r3, [pc, #224]	; (8014998 <plug_holes+0x124>)
 80148b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80148ba:	493c      	ldr	r1, [pc, #240]	; (80149ac <plug_holes+0x138>)
 80148bc:	4838      	ldr	r0, [pc, #224]	; (80149a0 <plug_holes+0x12c>)
 80148be:	f00a fd8d 	bl	801f3dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	881b      	ldrh	r3, [r3, #0]
 80148c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148ca:	d906      	bls.n	80148da <plug_holes+0x66>
 80148cc:	4b32      	ldr	r3, [pc, #200]	; (8014998 <plug_holes+0x124>)
 80148ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80148d2:	4937      	ldr	r1, [pc, #220]	; (80149b0 <plug_holes+0x13c>)
 80148d4:	4832      	ldr	r0, [pc, #200]	; (80149a0 <plug_holes+0x12c>)
 80148d6:	f00a fd81 	bl	801f3dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	881b      	ldrh	r3, [r3, #0]
 80148de:	4618      	mov	r0, r3
 80148e0:	f7ff ffa4 	bl	801482c <ptr_to_mem>
 80148e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80148e6:	687a      	ldr	r2, [r7, #4]
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d024      	beq.n	8014938 <plug_holes+0xc4>
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	791b      	ldrb	r3, [r3, #4]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d120      	bne.n	8014938 <plug_holes+0xc4>
 80148f6:	4b2b      	ldr	r3, [pc, #172]	; (80149a4 <plug_holes+0x130>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	68fa      	ldr	r2, [r7, #12]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d01b      	beq.n	8014938 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014900:	4b2c      	ldr	r3, [pc, #176]	; (80149b4 <plug_holes+0x140>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	68fa      	ldr	r2, [r7, #12]
 8014906:	429a      	cmp	r2, r3
 8014908:	d102      	bne.n	8014910 <plug_holes+0x9c>
      lfree = mem;
 801490a:	4a2a      	ldr	r2, [pc, #168]	; (80149b4 <plug_holes+0x140>)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	881a      	ldrh	r2, [r3, #0]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	881b      	ldrh	r3, [r3, #0]
 801491c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014920:	d00a      	beq.n	8014938 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	881b      	ldrh	r3, [r3, #0]
 8014926:	4618      	mov	r0, r3
 8014928:	f7ff ff80 	bl	801482c <ptr_to_mem>
 801492c:	4604      	mov	r4, r0
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f7ff ff8e 	bl	8014850 <mem_to_ptr>
 8014934:	4603      	mov	r3, r0
 8014936:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	885b      	ldrh	r3, [r3, #2]
 801493c:	4618      	mov	r0, r3
 801493e:	f7ff ff75 	bl	801482c <ptr_to_mem>
 8014942:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	429a      	cmp	r2, r3
 801494a:	d01f      	beq.n	801498c <plug_holes+0x118>
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	791b      	ldrb	r3, [r3, #4]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d11b      	bne.n	801498c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014954:	4b17      	ldr	r3, [pc, #92]	; (80149b4 <plug_holes+0x140>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	687a      	ldr	r2, [r7, #4]
 801495a:	429a      	cmp	r2, r3
 801495c:	d102      	bne.n	8014964 <plug_holes+0xf0>
      lfree = pmem;
 801495e:	4a15      	ldr	r2, [pc, #84]	; (80149b4 <plug_holes+0x140>)
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	881a      	ldrh	r2, [r3, #0]
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	881b      	ldrh	r3, [r3, #0]
 8014970:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014974:	d00a      	beq.n	801498c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	4618      	mov	r0, r3
 801497c:	f7ff ff56 	bl	801482c <ptr_to_mem>
 8014980:	4604      	mov	r4, r0
 8014982:	68b8      	ldr	r0, [r7, #8]
 8014984:	f7ff ff64 	bl	8014850 <mem_to_ptr>
 8014988:	4603      	mov	r3, r0
 801498a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801498c:	bf00      	nop
 801498e:	3714      	adds	r7, #20
 8014990:	46bd      	mov	sp, r7
 8014992:	bd90      	pop	{r4, r7, pc}
 8014994:	2000c7b4 	.word	0x2000c7b4
 8014998:	08021980 	.word	0x08021980
 801499c:	080219b0 	.word	0x080219b0
 80149a0:	080219c8 	.word	0x080219c8
 80149a4:	2000c7b8 	.word	0x2000c7b8
 80149a8:	080219f0 	.word	0x080219f0
 80149ac:	08021a0c 	.word	0x08021a0c
 80149b0:	08021a28 	.word	0x08021a28
 80149b4:	2000c7c0 	.word	0x2000c7c0

080149b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80149be:	4b1f      	ldr	r3, [pc, #124]	; (8014a3c <mem_init+0x84>)
 80149c0:	3303      	adds	r3, #3
 80149c2:	f023 0303 	bic.w	r3, r3, #3
 80149c6:	461a      	mov	r2, r3
 80149c8:	4b1d      	ldr	r3, [pc, #116]	; (8014a40 <mem_init+0x88>)
 80149ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80149cc:	4b1c      	ldr	r3, [pc, #112]	; (8014a40 <mem_init+0x88>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80149d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2200      	movs	r2, #0
 80149de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2200      	movs	r2, #0
 80149e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80149e6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80149ea:	f7ff ff1f 	bl	801482c <ptr_to_mem>
 80149ee:	4603      	mov	r3, r0
 80149f0:	4a14      	ldr	r2, [pc, #80]	; (8014a44 <mem_init+0x8c>)
 80149f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80149f4:	4b13      	ldr	r3, [pc, #76]	; (8014a44 <mem_init+0x8c>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2201      	movs	r2, #1
 80149fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80149fc:	4b11      	ldr	r3, [pc, #68]	; (8014a44 <mem_init+0x8c>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014a04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014a06:	4b0f      	ldr	r3, [pc, #60]	; (8014a44 <mem_init+0x8c>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014a0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014a10:	4b0b      	ldr	r3, [pc, #44]	; (8014a40 <mem_init+0x88>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4a0c      	ldr	r2, [pc, #48]	; (8014a48 <mem_init+0x90>)
 8014a16:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014a18:	480c      	ldr	r0, [pc, #48]	; (8014a4c <mem_init+0x94>)
 8014a1a:	f00a fbfd 	bl	801f218 <sys_mutex_new>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d006      	beq.n	8014a32 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014a24:	4b0a      	ldr	r3, [pc, #40]	; (8014a50 <mem_init+0x98>)
 8014a26:	f240 221f 	movw	r2, #543	; 0x21f
 8014a2a:	490a      	ldr	r1, [pc, #40]	; (8014a54 <mem_init+0x9c>)
 8014a2c:	480a      	ldr	r0, [pc, #40]	; (8014a58 <mem_init+0xa0>)
 8014a2e:	f00a fcd5 	bl	801f3dc <iprintf>
  }
}
 8014a32:	bf00      	nop
 8014a34:	3708      	adds	r7, #8
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
 8014a3a:	bf00      	nop
 8014a3c:	200114b8 	.word	0x200114b8
 8014a40:	2000c7b4 	.word	0x2000c7b4
 8014a44:	2000c7b8 	.word	0x2000c7b8
 8014a48:	2000c7c0 	.word	0x2000c7c0
 8014a4c:	2000c7bc 	.word	0x2000c7bc
 8014a50:	08021980 	.word	0x08021980
 8014a54:	08021a54 	.word	0x08021a54
 8014a58:	080219c8 	.word	0x080219c8

08014a5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b086      	sub	sp, #24
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f7ff fef3 	bl	8014850 <mem_to_ptr>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	881b      	ldrh	r3, [r3, #0]
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7ff feda 	bl	801482c <ptr_to_mem>
 8014a78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	885b      	ldrh	r3, [r3, #2]
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7ff fed4 	bl	801482c <ptr_to_mem>
 8014a84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	881b      	ldrh	r3, [r3, #0]
 8014a8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a8e:	d818      	bhi.n	8014ac2 <mem_link_valid+0x66>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	885b      	ldrh	r3, [r3, #2]
 8014a94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a98:	d813      	bhi.n	8014ac2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a9e:	8afa      	ldrh	r2, [r7, #22]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d004      	beq.n	8014aae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	881b      	ldrh	r3, [r3, #0]
 8014aa8:	8afa      	ldrh	r2, [r7, #22]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d109      	bne.n	8014ac2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014aae:	4b08      	ldr	r3, [pc, #32]	; (8014ad0 <mem_link_valid+0x74>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014ab2:	693a      	ldr	r2, [r7, #16]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d006      	beq.n	8014ac6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	885b      	ldrh	r3, [r3, #2]
 8014abc:	8afa      	ldrh	r2, [r7, #22]
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d001      	beq.n	8014ac6 <mem_link_valid+0x6a>
    return 0;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	e000      	b.n	8014ac8 <mem_link_valid+0x6c>
  }
  return 1;
 8014ac6:	2301      	movs	r3, #1
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3718      	adds	r7, #24
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	2000c7b8 	.word	0x2000c7b8

08014ad4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b088      	sub	sp, #32
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d070      	beq.n	8014bc4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f003 0303 	and.w	r3, r3, #3
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d00d      	beq.n	8014b08 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014aec:	4b37      	ldr	r3, [pc, #220]	; (8014bcc <mem_free+0xf8>)
 8014aee:	f240 2273 	movw	r2, #627	; 0x273
 8014af2:	4937      	ldr	r1, [pc, #220]	; (8014bd0 <mem_free+0xfc>)
 8014af4:	4837      	ldr	r0, [pc, #220]	; (8014bd4 <mem_free+0x100>)
 8014af6:	f00a fc71 	bl	801f3dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014afa:	f00a fbeb 	bl	801f2d4 <sys_arch_protect>
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f00a fbf5 	bl	801f2f0 <sys_arch_unprotect>
    return;
 8014b06:	e05e      	b.n	8014bc6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	3b08      	subs	r3, #8
 8014b0c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014b0e:	4b32      	ldr	r3, [pc, #200]	; (8014bd8 <mem_free+0x104>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	69fa      	ldr	r2, [r7, #28]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d306      	bcc.n	8014b26 <mem_free+0x52>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f103 020c 	add.w	r2, r3, #12
 8014b1e:	4b2f      	ldr	r3, [pc, #188]	; (8014bdc <mem_free+0x108>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d90d      	bls.n	8014b42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014b26:	4b29      	ldr	r3, [pc, #164]	; (8014bcc <mem_free+0xf8>)
 8014b28:	f240 227f 	movw	r2, #639	; 0x27f
 8014b2c:	492c      	ldr	r1, [pc, #176]	; (8014be0 <mem_free+0x10c>)
 8014b2e:	4829      	ldr	r0, [pc, #164]	; (8014bd4 <mem_free+0x100>)
 8014b30:	f00a fc54 	bl	801f3dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b34:	f00a fbce 	bl	801f2d4 <sys_arch_protect>
 8014b38:	6138      	str	r0, [r7, #16]
 8014b3a:	6938      	ldr	r0, [r7, #16]
 8014b3c:	f00a fbd8 	bl	801f2f0 <sys_arch_unprotect>
    return;
 8014b40:	e041      	b.n	8014bc6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014b42:	4828      	ldr	r0, [pc, #160]	; (8014be4 <mem_free+0x110>)
 8014b44:	f00a fb84 	bl	801f250 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	791b      	ldrb	r3, [r3, #4]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d110      	bne.n	8014b72 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014b50:	4b1e      	ldr	r3, [pc, #120]	; (8014bcc <mem_free+0xf8>)
 8014b52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014b56:	4924      	ldr	r1, [pc, #144]	; (8014be8 <mem_free+0x114>)
 8014b58:	481e      	ldr	r0, [pc, #120]	; (8014bd4 <mem_free+0x100>)
 8014b5a:	f00a fc3f 	bl	801f3dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b5e:	4821      	ldr	r0, [pc, #132]	; (8014be4 <mem_free+0x110>)
 8014b60:	f00a fb85 	bl	801f26e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b64:	f00a fbb6 	bl	801f2d4 <sys_arch_protect>
 8014b68:	6178      	str	r0, [r7, #20]
 8014b6a:	6978      	ldr	r0, [r7, #20]
 8014b6c:	f00a fbc0 	bl	801f2f0 <sys_arch_unprotect>
    return;
 8014b70:	e029      	b.n	8014bc6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8014b72:	69f8      	ldr	r0, [r7, #28]
 8014b74:	f7ff ff72 	bl	8014a5c <mem_link_valid>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d110      	bne.n	8014ba0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014b7e:	4b13      	ldr	r3, [pc, #76]	; (8014bcc <mem_free+0xf8>)
 8014b80:	f240 2295 	movw	r2, #661	; 0x295
 8014b84:	4919      	ldr	r1, [pc, #100]	; (8014bec <mem_free+0x118>)
 8014b86:	4813      	ldr	r0, [pc, #76]	; (8014bd4 <mem_free+0x100>)
 8014b88:	f00a fc28 	bl	801f3dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b8c:	4815      	ldr	r0, [pc, #84]	; (8014be4 <mem_free+0x110>)
 8014b8e:	f00a fb6e 	bl	801f26e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b92:	f00a fb9f 	bl	801f2d4 <sys_arch_protect>
 8014b96:	61b8      	str	r0, [r7, #24]
 8014b98:	69b8      	ldr	r0, [r7, #24]
 8014b9a:	f00a fba9 	bl	801f2f0 <sys_arch_unprotect>
    return;
 8014b9e:	e012      	b.n	8014bc6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014ba6:	4b12      	ldr	r3, [pc, #72]	; (8014bf0 <mem_free+0x11c>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	69fa      	ldr	r2, [r7, #28]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d202      	bcs.n	8014bb6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014bb0:	4a0f      	ldr	r2, [pc, #60]	; (8014bf0 <mem_free+0x11c>)
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014bb6:	69f8      	ldr	r0, [r7, #28]
 8014bb8:	f7ff fe5c 	bl	8014874 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014bbc:	4809      	ldr	r0, [pc, #36]	; (8014be4 <mem_free+0x110>)
 8014bbe:	f00a fb56 	bl	801f26e <sys_mutex_unlock>
 8014bc2:	e000      	b.n	8014bc6 <mem_free+0xf2>
    return;
 8014bc4:	bf00      	nop
}
 8014bc6:	3720      	adds	r7, #32
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	08021980 	.word	0x08021980
 8014bd0:	08021a70 	.word	0x08021a70
 8014bd4:	080219c8 	.word	0x080219c8
 8014bd8:	2000c7b4 	.word	0x2000c7b4
 8014bdc:	2000c7b8 	.word	0x2000c7b8
 8014be0:	08021a94 	.word	0x08021a94
 8014be4:	2000c7bc 	.word	0x2000c7bc
 8014be8:	08021ab0 	.word	0x08021ab0
 8014bec:	08021ad8 	.word	0x08021ad8
 8014bf0:	2000c7c0 	.word	0x2000c7c0

08014bf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b088      	sub	sp, #32
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014c00:	887b      	ldrh	r3, [r7, #2]
 8014c02:	3303      	adds	r3, #3
 8014c04:	b29b      	uxth	r3, r3
 8014c06:	f023 0303 	bic.w	r3, r3, #3
 8014c0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014c0c:	8bfb      	ldrh	r3, [r7, #30]
 8014c0e:	2b0b      	cmp	r3, #11
 8014c10:	d801      	bhi.n	8014c16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014c12:	230c      	movs	r3, #12
 8014c14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014c16:	8bfb      	ldrh	r3, [r7, #30]
 8014c18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014c1c:	d803      	bhi.n	8014c26 <mem_trim+0x32>
 8014c1e:	8bfa      	ldrh	r2, [r7, #30]
 8014c20:	887b      	ldrh	r3, [r7, #2]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d201      	bcs.n	8014c2a <mem_trim+0x36>
    return NULL;
 8014c26:	2300      	movs	r3, #0
 8014c28:	e0d8      	b.n	8014ddc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014c2a:	4b6e      	ldr	r3, [pc, #440]	; (8014de4 <mem_trim+0x1f0>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	687a      	ldr	r2, [r7, #4]
 8014c30:	429a      	cmp	r2, r3
 8014c32:	d304      	bcc.n	8014c3e <mem_trim+0x4a>
 8014c34:	4b6c      	ldr	r3, [pc, #432]	; (8014de8 <mem_trim+0x1f4>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d306      	bcc.n	8014c4c <mem_trim+0x58>
 8014c3e:	4b6b      	ldr	r3, [pc, #428]	; (8014dec <mem_trim+0x1f8>)
 8014c40:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014c44:	496a      	ldr	r1, [pc, #424]	; (8014df0 <mem_trim+0x1fc>)
 8014c46:	486b      	ldr	r0, [pc, #428]	; (8014df4 <mem_trim+0x200>)
 8014c48:	f00a fbc8 	bl	801f3dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014c4c:	4b65      	ldr	r3, [pc, #404]	; (8014de4 <mem_trim+0x1f0>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d304      	bcc.n	8014c60 <mem_trim+0x6c>
 8014c56:	4b64      	ldr	r3, [pc, #400]	; (8014de8 <mem_trim+0x1f4>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d307      	bcc.n	8014c70 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014c60:	f00a fb38 	bl	801f2d4 <sys_arch_protect>
 8014c64:	60b8      	str	r0, [r7, #8]
 8014c66:	68b8      	ldr	r0, [r7, #8]
 8014c68:	f00a fb42 	bl	801f2f0 <sys_arch_unprotect>
    return rmem;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	e0b5      	b.n	8014ddc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	3b08      	subs	r3, #8
 8014c74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014c76:	69b8      	ldr	r0, [r7, #24]
 8014c78:	f7ff fdea 	bl	8014850 <mem_to_ptr>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	881a      	ldrh	r2, [r3, #0]
 8014c84:	8afb      	ldrh	r3, [r7, #22]
 8014c86:	1ad3      	subs	r3, r2, r3
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	3b08      	subs	r3, #8
 8014c8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014c8e:	8bfa      	ldrh	r2, [r7, #30]
 8014c90:	8abb      	ldrh	r3, [r7, #20]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d906      	bls.n	8014ca4 <mem_trim+0xb0>
 8014c96:	4b55      	ldr	r3, [pc, #340]	; (8014dec <mem_trim+0x1f8>)
 8014c98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014c9c:	4956      	ldr	r1, [pc, #344]	; (8014df8 <mem_trim+0x204>)
 8014c9e:	4855      	ldr	r0, [pc, #340]	; (8014df4 <mem_trim+0x200>)
 8014ca0:	f00a fb9c 	bl	801f3dc <iprintf>
  if (newsize > size) {
 8014ca4:	8bfa      	ldrh	r2, [r7, #30]
 8014ca6:	8abb      	ldrh	r3, [r7, #20]
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	d901      	bls.n	8014cb0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8014cac:	2300      	movs	r3, #0
 8014cae:	e095      	b.n	8014ddc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8014cb0:	8bfa      	ldrh	r2, [r7, #30]
 8014cb2:	8abb      	ldrh	r3, [r7, #20]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d101      	bne.n	8014cbc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	e08f      	b.n	8014ddc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014cbc:	484f      	ldr	r0, [pc, #316]	; (8014dfc <mem_trim+0x208>)
 8014cbe:	f00a fac7 	bl	801f250 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014cc2:	69bb      	ldr	r3, [r7, #24]
 8014cc4:	881b      	ldrh	r3, [r3, #0]
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7ff fdb0 	bl	801482c <ptr_to_mem>
 8014ccc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	791b      	ldrb	r3, [r3, #4]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d13f      	bne.n	8014d56 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014cd6:	69bb      	ldr	r3, [r7, #24]
 8014cd8:	881b      	ldrh	r3, [r3, #0]
 8014cda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014cde:	d106      	bne.n	8014cee <mem_trim+0xfa>
 8014ce0:	4b42      	ldr	r3, [pc, #264]	; (8014dec <mem_trim+0x1f8>)
 8014ce2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014ce6:	4946      	ldr	r1, [pc, #280]	; (8014e00 <mem_trim+0x20c>)
 8014ce8:	4842      	ldr	r0, [pc, #264]	; (8014df4 <mem_trim+0x200>)
 8014cea:	f00a fb77 	bl	801f3dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	881b      	ldrh	r3, [r3, #0]
 8014cf2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014cf4:	8afa      	ldrh	r2, [r7, #22]
 8014cf6:	8bfb      	ldrh	r3, [r7, #30]
 8014cf8:	4413      	add	r3, r2
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	3308      	adds	r3, #8
 8014cfe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014d00:	4b40      	ldr	r3, [pc, #256]	; (8014e04 <mem_trim+0x210>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	693a      	ldr	r2, [r7, #16]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d106      	bne.n	8014d18 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8014d0a:	89fb      	ldrh	r3, [r7, #14]
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7ff fd8d 	bl	801482c <ptr_to_mem>
 8014d12:	4603      	mov	r3, r0
 8014d14:	4a3b      	ldr	r2, [pc, #236]	; (8014e04 <mem_trim+0x210>)
 8014d16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014d18:	89fb      	ldrh	r3, [r7, #14]
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7ff fd86 	bl	801482c <ptr_to_mem>
 8014d20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	2200      	movs	r2, #0
 8014d26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	89ba      	ldrh	r2, [r7, #12]
 8014d2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	8afa      	ldrh	r2, [r7, #22]
 8014d32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	89fa      	ldrh	r2, [r7, #14]
 8014d38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	881b      	ldrh	r3, [r3, #0]
 8014d3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d42:	d047      	beq.n	8014dd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	881b      	ldrh	r3, [r3, #0]
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7ff fd6f 	bl	801482c <ptr_to_mem>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	89fb      	ldrh	r3, [r7, #14]
 8014d52:	8053      	strh	r3, [r2, #2]
 8014d54:	e03e      	b.n	8014dd4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014d56:	8bfb      	ldrh	r3, [r7, #30]
 8014d58:	f103 0214 	add.w	r2, r3, #20
 8014d5c:	8abb      	ldrh	r3, [r7, #20]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d838      	bhi.n	8014dd4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014d62:	8afa      	ldrh	r2, [r7, #22]
 8014d64:	8bfb      	ldrh	r3, [r7, #30]
 8014d66:	4413      	add	r3, r2
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	3308      	adds	r3, #8
 8014d6c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	881b      	ldrh	r3, [r3, #0]
 8014d72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d76:	d106      	bne.n	8014d86 <mem_trim+0x192>
 8014d78:	4b1c      	ldr	r3, [pc, #112]	; (8014dec <mem_trim+0x1f8>)
 8014d7a:	f240 3216 	movw	r2, #790	; 0x316
 8014d7e:	4920      	ldr	r1, [pc, #128]	; (8014e00 <mem_trim+0x20c>)
 8014d80:	481c      	ldr	r0, [pc, #112]	; (8014df4 <mem_trim+0x200>)
 8014d82:	f00a fb2b 	bl	801f3dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014d86:	89fb      	ldrh	r3, [r7, #14]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7ff fd4f 	bl	801482c <ptr_to_mem>
 8014d8e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014d90:	4b1c      	ldr	r3, [pc, #112]	; (8014e04 <mem_trim+0x210>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	693a      	ldr	r2, [r7, #16]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d202      	bcs.n	8014da0 <mem_trim+0x1ac>
      lfree = mem2;
 8014d9a:	4a1a      	ldr	r2, [pc, #104]	; (8014e04 <mem_trim+0x210>)
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	2200      	movs	r2, #0
 8014da4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014da6:	69bb      	ldr	r3, [r7, #24]
 8014da8:	881a      	ldrh	r2, [r3, #0]
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	8afa      	ldrh	r2, [r7, #22]
 8014db2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014db4:	69bb      	ldr	r3, [r7, #24]
 8014db6:	89fa      	ldrh	r2, [r7, #14]
 8014db8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	881b      	ldrh	r3, [r3, #0]
 8014dbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014dc2:	d007      	beq.n	8014dd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	881b      	ldrh	r3, [r3, #0]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7ff fd2f 	bl	801482c <ptr_to_mem>
 8014dce:	4602      	mov	r2, r0
 8014dd0:	89fb      	ldrh	r3, [r7, #14]
 8014dd2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014dd4:	4809      	ldr	r0, [pc, #36]	; (8014dfc <mem_trim+0x208>)
 8014dd6:	f00a fa4a 	bl	801f26e <sys_mutex_unlock>
  return rmem;
 8014dda:	687b      	ldr	r3, [r7, #4]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3720      	adds	r7, #32
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}
 8014de4:	2000c7b4 	.word	0x2000c7b4
 8014de8:	2000c7b8 	.word	0x2000c7b8
 8014dec:	08021980 	.word	0x08021980
 8014df0:	08021b0c 	.word	0x08021b0c
 8014df4:	080219c8 	.word	0x080219c8
 8014df8:	08021b24 	.word	0x08021b24
 8014dfc:	2000c7bc 	.word	0x2000c7bc
 8014e00:	08021b44 	.word	0x08021b44
 8014e04:	2000c7c0 	.word	0x2000c7c0

08014e08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b088      	sub	sp, #32
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	4603      	mov	r3, r0
 8014e10:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014e12:	88fb      	ldrh	r3, [r7, #6]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d101      	bne.n	8014e1c <mem_malloc+0x14>
    return NULL;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	e0e2      	b.n	8014fe2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014e1c:	88fb      	ldrh	r3, [r7, #6]
 8014e1e:	3303      	adds	r3, #3
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	f023 0303 	bic.w	r3, r3, #3
 8014e26:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014e28:	8bbb      	ldrh	r3, [r7, #28]
 8014e2a:	2b0b      	cmp	r3, #11
 8014e2c:	d801      	bhi.n	8014e32 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014e2e:	230c      	movs	r3, #12
 8014e30:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014e32:	8bbb      	ldrh	r3, [r7, #28]
 8014e34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e38:	d803      	bhi.n	8014e42 <mem_malloc+0x3a>
 8014e3a:	8bba      	ldrh	r2, [r7, #28]
 8014e3c:	88fb      	ldrh	r3, [r7, #6]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d201      	bcs.n	8014e46 <mem_malloc+0x3e>
    return NULL;
 8014e42:	2300      	movs	r3, #0
 8014e44:	e0cd      	b.n	8014fe2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014e46:	4869      	ldr	r0, [pc, #420]	; (8014fec <mem_malloc+0x1e4>)
 8014e48:	f00a fa02 	bl	801f250 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014e4c:	4b68      	ldr	r3, [pc, #416]	; (8014ff0 <mem_malloc+0x1e8>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ff fcfd 	bl	8014850 <mem_to_ptr>
 8014e56:	4603      	mov	r3, r0
 8014e58:	83fb      	strh	r3, [r7, #30]
 8014e5a:	e0b7      	b.n	8014fcc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014e5c:	8bfb      	ldrh	r3, [r7, #30]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7ff fce4 	bl	801482c <ptr_to_mem>
 8014e64:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	791b      	ldrb	r3, [r3, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	f040 80a7 	bne.w	8014fbe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	881b      	ldrh	r3, [r3, #0]
 8014e74:	461a      	mov	r2, r3
 8014e76:	8bfb      	ldrh	r3, [r7, #30]
 8014e78:	1ad3      	subs	r3, r2, r3
 8014e7a:	f1a3 0208 	sub.w	r2, r3, #8
 8014e7e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014e80:	429a      	cmp	r2, r3
 8014e82:	f0c0 809c 	bcc.w	8014fbe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	881b      	ldrh	r3, [r3, #0]
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	8bfb      	ldrh	r3, [r7, #30]
 8014e8e:	1ad3      	subs	r3, r2, r3
 8014e90:	f1a3 0208 	sub.w	r2, r3, #8
 8014e94:	8bbb      	ldrh	r3, [r7, #28]
 8014e96:	3314      	adds	r3, #20
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d333      	bcc.n	8014f04 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014e9c:	8bfa      	ldrh	r2, [r7, #30]
 8014e9e:	8bbb      	ldrh	r3, [r7, #28]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	3308      	adds	r3, #8
 8014ea6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014ea8:	8a7b      	ldrh	r3, [r7, #18]
 8014eaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014eae:	d106      	bne.n	8014ebe <mem_malloc+0xb6>
 8014eb0:	4b50      	ldr	r3, [pc, #320]	; (8014ff4 <mem_malloc+0x1ec>)
 8014eb2:	f240 3287 	movw	r2, #903	; 0x387
 8014eb6:	4950      	ldr	r1, [pc, #320]	; (8014ff8 <mem_malloc+0x1f0>)
 8014eb8:	4850      	ldr	r0, [pc, #320]	; (8014ffc <mem_malloc+0x1f4>)
 8014eba:	f00a fa8f 	bl	801f3dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014ebe:	8a7b      	ldrh	r3, [r7, #18]
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7ff fcb3 	bl	801482c <ptr_to_mem>
 8014ec6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	881a      	ldrh	r2, [r3, #0]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	8bfa      	ldrh	r2, [r7, #30]
 8014eda:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	8a7a      	ldrh	r2, [r7, #18]
 8014ee0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	881b      	ldrh	r3, [r3, #0]
 8014eec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014ef0:	d00b      	beq.n	8014f0a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	881b      	ldrh	r3, [r3, #0]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7ff fc98 	bl	801482c <ptr_to_mem>
 8014efc:	4602      	mov	r2, r0
 8014efe:	8a7b      	ldrh	r3, [r7, #18]
 8014f00:	8053      	strh	r3, [r2, #2]
 8014f02:	e002      	b.n	8014f0a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	2201      	movs	r2, #1
 8014f08:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014f0a:	4b39      	ldr	r3, [pc, #228]	; (8014ff0 <mem_malloc+0x1e8>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	697a      	ldr	r2, [r7, #20]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d127      	bne.n	8014f64 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014f14:	4b36      	ldr	r3, [pc, #216]	; (8014ff0 <mem_malloc+0x1e8>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014f1a:	e005      	b.n	8014f28 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	881b      	ldrh	r3, [r3, #0]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7ff fc83 	bl	801482c <ptr_to_mem>
 8014f26:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014f28:	69bb      	ldr	r3, [r7, #24]
 8014f2a:	791b      	ldrb	r3, [r3, #4]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d004      	beq.n	8014f3a <mem_malloc+0x132>
 8014f30:	4b33      	ldr	r3, [pc, #204]	; (8015000 <mem_malloc+0x1f8>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	69ba      	ldr	r2, [r7, #24]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d1f0      	bne.n	8014f1c <mem_malloc+0x114>
          }
          lfree = cur;
 8014f3a:	4a2d      	ldr	r2, [pc, #180]	; (8014ff0 <mem_malloc+0x1e8>)
 8014f3c:	69bb      	ldr	r3, [r7, #24]
 8014f3e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014f40:	4b2b      	ldr	r3, [pc, #172]	; (8014ff0 <mem_malloc+0x1e8>)
 8014f42:	681a      	ldr	r2, [r3, #0]
 8014f44:	4b2e      	ldr	r3, [pc, #184]	; (8015000 <mem_malloc+0x1f8>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d00b      	beq.n	8014f64 <mem_malloc+0x15c>
 8014f4c:	4b28      	ldr	r3, [pc, #160]	; (8014ff0 <mem_malloc+0x1e8>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	791b      	ldrb	r3, [r3, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d006      	beq.n	8014f64 <mem_malloc+0x15c>
 8014f56:	4b27      	ldr	r3, [pc, #156]	; (8014ff4 <mem_malloc+0x1ec>)
 8014f58:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014f5c:	4929      	ldr	r1, [pc, #164]	; (8015004 <mem_malloc+0x1fc>)
 8014f5e:	4827      	ldr	r0, [pc, #156]	; (8014ffc <mem_malloc+0x1f4>)
 8014f60:	f00a fa3c 	bl	801f3dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014f64:	4821      	ldr	r0, [pc, #132]	; (8014fec <mem_malloc+0x1e4>)
 8014f66:	f00a f982 	bl	801f26e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014f6a:	8bba      	ldrh	r2, [r7, #28]
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	4413      	add	r3, r2
 8014f70:	3308      	adds	r3, #8
 8014f72:	4a23      	ldr	r2, [pc, #140]	; (8015000 <mem_malloc+0x1f8>)
 8014f74:	6812      	ldr	r2, [r2, #0]
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d906      	bls.n	8014f88 <mem_malloc+0x180>
 8014f7a:	4b1e      	ldr	r3, [pc, #120]	; (8014ff4 <mem_malloc+0x1ec>)
 8014f7c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8014f80:	4921      	ldr	r1, [pc, #132]	; (8015008 <mem_malloc+0x200>)
 8014f82:	481e      	ldr	r0, [pc, #120]	; (8014ffc <mem_malloc+0x1f4>)
 8014f84:	f00a fa2a 	bl	801f3dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	f003 0303 	and.w	r3, r3, #3
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d006      	beq.n	8014fa0 <mem_malloc+0x198>
 8014f92:	4b18      	ldr	r3, [pc, #96]	; (8014ff4 <mem_malloc+0x1ec>)
 8014f94:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014f98:	491c      	ldr	r1, [pc, #112]	; (801500c <mem_malloc+0x204>)
 8014f9a:	4818      	ldr	r0, [pc, #96]	; (8014ffc <mem_malloc+0x1f4>)
 8014f9c:	f00a fa1e 	bl	801f3dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	f003 0303 	and.w	r3, r3, #3
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d006      	beq.n	8014fb8 <mem_malloc+0x1b0>
 8014faa:	4b12      	ldr	r3, [pc, #72]	; (8014ff4 <mem_malloc+0x1ec>)
 8014fac:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014fb0:	4917      	ldr	r1, [pc, #92]	; (8015010 <mem_malloc+0x208>)
 8014fb2:	4812      	ldr	r0, [pc, #72]	; (8014ffc <mem_malloc+0x1f4>)
 8014fb4:	f00a fa12 	bl	801f3dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	3308      	adds	r3, #8
 8014fbc:	e011      	b.n	8014fe2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014fbe:	8bfb      	ldrh	r3, [r7, #30]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7ff fc33 	bl	801482c <ptr_to_mem>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	881b      	ldrh	r3, [r3, #0]
 8014fca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014fcc:	8bfa      	ldrh	r2, [r7, #30]
 8014fce:	8bbb      	ldrh	r3, [r7, #28]
 8014fd0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	f4ff af41 	bcc.w	8014e5c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014fda:	4804      	ldr	r0, [pc, #16]	; (8014fec <mem_malloc+0x1e4>)
 8014fdc:	f00a f947 	bl	801f26e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014fe0:	2300      	movs	r3, #0
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3720      	adds	r7, #32
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	2000c7bc 	.word	0x2000c7bc
 8014ff0:	2000c7c0 	.word	0x2000c7c0
 8014ff4:	08021980 	.word	0x08021980
 8014ff8:	08021b44 	.word	0x08021b44
 8014ffc:	080219c8 	.word	0x080219c8
 8015000:	2000c7b8 	.word	0x2000c7b8
 8015004:	08021b58 	.word	0x08021b58
 8015008:	08021b74 	.word	0x08021b74
 801500c:	08021ba4 	.word	0x08021ba4
 8015010:	08021bd4 	.word	0x08021bd4

08015014 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015014:	b480      	push	{r7}
 8015016:	b085      	sub	sp, #20
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	689b      	ldr	r3, [r3, #8]
 8015020:	2200      	movs	r2, #0
 8015022:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	3303      	adds	r3, #3
 801502a:	f023 0303 	bic.w	r3, r3, #3
 801502e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015030:	2300      	movs	r3, #0
 8015032:	60fb      	str	r3, [r7, #12]
 8015034:	e011      	b.n	801505a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	689b      	ldr	r3, [r3, #8]
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	689b      	ldr	r3, [r3, #8]
 8015044:	68ba      	ldr	r2, [r7, #8]
 8015046:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	881b      	ldrh	r3, [r3, #0]
 801504c:	461a      	mov	r2, r3
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	4413      	add	r3, r2
 8015052:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	3301      	adds	r3, #1
 8015058:	60fb      	str	r3, [r7, #12]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	885b      	ldrh	r3, [r3, #2]
 801505e:	461a      	mov	r2, r3
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	4293      	cmp	r3, r2
 8015064:	dbe7      	blt.n	8015036 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015066:	bf00      	nop
 8015068:	bf00      	nop
 801506a:	3714      	adds	r7, #20
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr

08015074 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801507a:	2300      	movs	r3, #0
 801507c:	80fb      	strh	r3, [r7, #6]
 801507e:	e009      	b.n	8015094 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015080:	88fb      	ldrh	r3, [r7, #6]
 8015082:	4a08      	ldr	r2, [pc, #32]	; (80150a4 <memp_init+0x30>)
 8015084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015088:	4618      	mov	r0, r3
 801508a:	f7ff ffc3 	bl	8015014 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801508e:	88fb      	ldrh	r3, [r7, #6]
 8015090:	3301      	adds	r3, #1
 8015092:	80fb      	strh	r3, [r7, #6]
 8015094:	88fb      	ldrh	r3, [r7, #6]
 8015096:	2b0c      	cmp	r3, #12
 8015098:	d9f2      	bls.n	8015080 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801509a:	bf00      	nop
 801509c:	bf00      	nop
 801509e:	3708      	adds	r7, #8
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	0807b0f4 	.word	0x0807b0f4

080150a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80150b0:	f00a f910 	bl	801f2d4 <sys_arch_protect>
 80150b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	689b      	ldr	r3, [r3, #8]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d015      	beq.n	80150f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	689b      	ldr	r3, [r3, #8]
 80150c8:	68ba      	ldr	r2, [r7, #8]
 80150ca:	6812      	ldr	r2, [r2, #0]
 80150cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	f003 0303 	and.w	r3, r3, #3
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d006      	beq.n	80150e6 <do_memp_malloc_pool+0x3e>
 80150d8:	4b09      	ldr	r3, [pc, #36]	; (8015100 <do_memp_malloc_pool+0x58>)
 80150da:	f44f 728c 	mov.w	r2, #280	; 0x118
 80150de:	4909      	ldr	r1, [pc, #36]	; (8015104 <do_memp_malloc_pool+0x5c>)
 80150e0:	4809      	ldr	r0, [pc, #36]	; (8015108 <do_memp_malloc_pool+0x60>)
 80150e2:	f00a f97b 	bl	801f3dc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	f00a f902 	bl	801f2f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	e003      	b.n	80150f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80150f0:	68f8      	ldr	r0, [r7, #12]
 80150f2:	f00a f8fd 	bl	801f2f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80150f6:	2300      	movs	r3, #0
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3710      	adds	r7, #16
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	08021bf8 	.word	0x08021bf8
 8015104:	08021c28 	.word	0x08021c28
 8015108:	08021c4c 	.word	0x08021c4c

0801510c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b084      	sub	sp, #16
 8015110:	af00      	add	r7, sp, #0
 8015112:	4603      	mov	r3, r0
 8015114:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015116:	79fb      	ldrb	r3, [r7, #7]
 8015118:	2b0c      	cmp	r3, #12
 801511a:	d908      	bls.n	801512e <memp_malloc+0x22>
 801511c:	4b0a      	ldr	r3, [pc, #40]	; (8015148 <memp_malloc+0x3c>)
 801511e:	f240 1257 	movw	r2, #343	; 0x157
 8015122:	490a      	ldr	r1, [pc, #40]	; (801514c <memp_malloc+0x40>)
 8015124:	480a      	ldr	r0, [pc, #40]	; (8015150 <memp_malloc+0x44>)
 8015126:	f00a f959 	bl	801f3dc <iprintf>
 801512a:	2300      	movs	r3, #0
 801512c:	e008      	b.n	8015140 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801512e:	79fb      	ldrb	r3, [r7, #7]
 8015130:	4a08      	ldr	r2, [pc, #32]	; (8015154 <memp_malloc+0x48>)
 8015132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff ffb6 	bl	80150a8 <do_memp_malloc_pool>
 801513c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801513e:	68fb      	ldr	r3, [r7, #12]
}
 8015140:	4618      	mov	r0, r3
 8015142:	3710      	adds	r7, #16
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	08021bf8 	.word	0x08021bf8
 801514c:	08021c88 	.word	0x08021c88
 8015150:	08021c4c 	.word	0x08021c4c
 8015154:	0807b0f4 	.word	0x0807b0f4

08015158 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b084      	sub	sp, #16
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	f003 0303 	and.w	r3, r3, #3
 8015168:	2b00      	cmp	r3, #0
 801516a:	d006      	beq.n	801517a <do_memp_free_pool+0x22>
 801516c:	4b0d      	ldr	r3, [pc, #52]	; (80151a4 <do_memp_free_pool+0x4c>)
 801516e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8015172:	490d      	ldr	r1, [pc, #52]	; (80151a8 <do_memp_free_pool+0x50>)
 8015174:	480d      	ldr	r0, [pc, #52]	; (80151ac <do_memp_free_pool+0x54>)
 8015176:	f00a f931 	bl	801f3dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801517e:	f00a f8a9 	bl	801f2d4 <sys_arch_protect>
 8015182:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	689b      	ldr	r3, [r3, #8]
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	689b      	ldr	r3, [r3, #8]
 8015192:	68fa      	ldr	r2, [r7, #12]
 8015194:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8015196:	68b8      	ldr	r0, [r7, #8]
 8015198:	f00a f8aa 	bl	801f2f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801519c:	bf00      	nop
 801519e:	3710      	adds	r7, #16
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	08021bf8 	.word	0x08021bf8
 80151a8:	08021ca8 	.word	0x08021ca8
 80151ac:	08021c4c 	.word	0x08021c4c

080151b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	4603      	mov	r3, r0
 80151b8:	6039      	str	r1, [r7, #0]
 80151ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80151bc:	79fb      	ldrb	r3, [r7, #7]
 80151be:	2b0c      	cmp	r3, #12
 80151c0:	d907      	bls.n	80151d2 <memp_free+0x22>
 80151c2:	4b0c      	ldr	r3, [pc, #48]	; (80151f4 <memp_free+0x44>)
 80151c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80151c8:	490b      	ldr	r1, [pc, #44]	; (80151f8 <memp_free+0x48>)
 80151ca:	480c      	ldr	r0, [pc, #48]	; (80151fc <memp_free+0x4c>)
 80151cc:	f00a f906 	bl	801f3dc <iprintf>
 80151d0:	e00c      	b.n	80151ec <memp_free+0x3c>

  if (mem == NULL) {
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d008      	beq.n	80151ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80151d8:	79fb      	ldrb	r3, [r7, #7]
 80151da:	4a09      	ldr	r2, [pc, #36]	; (8015200 <memp_free+0x50>)
 80151dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151e0:	6839      	ldr	r1, [r7, #0]
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7ff ffb8 	bl	8015158 <do_memp_free_pool>
 80151e8:	e000      	b.n	80151ec <memp_free+0x3c>
    return;
 80151ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80151ec:	3708      	adds	r7, #8
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	08021bf8 	.word	0x08021bf8
 80151f8:	08021cc8 	.word	0x08021cc8
 80151fc:	08021c4c 	.word	0x08021c4c
 8015200:	0807b0f4 	.word	0x0807b0f4

08015204 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015204:	b480      	push	{r7}
 8015206:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015208:	bf00      	nop
 801520a:	46bd      	mov	sp, r7
 801520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015210:	4770      	bx	lr
	...

08015214 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b086      	sub	sp, #24
 8015218:	af00      	add	r7, sp, #0
 801521a:	60f8      	str	r0, [r7, #12]
 801521c:	60b9      	str	r1, [r7, #8]
 801521e:	607a      	str	r2, [r7, #4]
 8015220:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d108      	bne.n	801523a <netif_add+0x26>
 8015228:	4b57      	ldr	r3, [pc, #348]	; (8015388 <netif_add+0x174>)
 801522a:	f240 1227 	movw	r2, #295	; 0x127
 801522e:	4957      	ldr	r1, [pc, #348]	; (801538c <netif_add+0x178>)
 8015230:	4857      	ldr	r0, [pc, #348]	; (8015390 <netif_add+0x17c>)
 8015232:	f00a f8d3 	bl	801f3dc <iprintf>
 8015236:	2300      	movs	r3, #0
 8015238:	e0a2      	b.n	8015380 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523c:	2b00      	cmp	r3, #0
 801523e:	d108      	bne.n	8015252 <netif_add+0x3e>
 8015240:	4b51      	ldr	r3, [pc, #324]	; (8015388 <netif_add+0x174>)
 8015242:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015246:	4953      	ldr	r1, [pc, #332]	; (8015394 <netif_add+0x180>)
 8015248:	4851      	ldr	r0, [pc, #324]	; (8015390 <netif_add+0x17c>)
 801524a:	f00a f8c7 	bl	801f3dc <iprintf>
 801524e:	2300      	movs	r3, #0
 8015250:	e096      	b.n	8015380 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d101      	bne.n	801525c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015258:	4b4f      	ldr	r3, [pc, #316]	; (8015398 <netif_add+0x184>)
 801525a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d101      	bne.n	8015266 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015262:	4b4d      	ldr	r3, [pc, #308]	; (8015398 <netif_add+0x184>)
 8015264:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d101      	bne.n	8015270 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801526c:	4b4a      	ldr	r3, [pc, #296]	; (8015398 <netif_add+0x184>)
 801526e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2200      	movs	r2, #0
 8015274:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2200      	movs	r2, #0
 801527a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	2200      	movs	r2, #0
 8015280:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	4a45      	ldr	r2, [pc, #276]	; (801539c <netif_add+0x188>)
 8015286:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2200      	movs	r2, #0
 801528c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	2200      	movs	r2, #0
 8015292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2200      	movs	r2, #0
 801529a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	6a3a      	ldr	r2, [r7, #32]
 80152a0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80152a2:	4b3f      	ldr	r3, [pc, #252]	; (80153a0 <netif_add+0x18c>)
 80152a4:	781a      	ldrb	r2, [r3, #0]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152b0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	68b9      	ldr	r1, [r7, #8]
 80152b8:	68f8      	ldr	r0, [r7, #12]
 80152ba:	f000 f913 	bl	80154e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80152be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	4798      	blx	r3
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d001      	beq.n	80152ce <netif_add+0xba>
    return NULL;
 80152ca:	2300      	movs	r3, #0
 80152cc:	e058      	b.n	8015380 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152d4:	2bff      	cmp	r3, #255	; 0xff
 80152d6:	d103      	bne.n	80152e0 <netif_add+0xcc>
        netif->num = 0;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	2200      	movs	r2, #0
 80152dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80152e0:	2300      	movs	r3, #0
 80152e2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80152e4:	4b2f      	ldr	r3, [pc, #188]	; (80153a4 <netif_add+0x190>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	617b      	str	r3, [r7, #20]
 80152ea:	e02b      	b.n	8015344 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80152ec:	697a      	ldr	r2, [r7, #20]
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d106      	bne.n	8015302 <netif_add+0xee>
 80152f4:	4b24      	ldr	r3, [pc, #144]	; (8015388 <netif_add+0x174>)
 80152f6:	f240 128b 	movw	r2, #395	; 0x18b
 80152fa:	492b      	ldr	r1, [pc, #172]	; (80153a8 <netif_add+0x194>)
 80152fc:	4824      	ldr	r0, [pc, #144]	; (8015390 <netif_add+0x17c>)
 80152fe:	f00a f86d 	bl	801f3dc <iprintf>
        num_netifs++;
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	3301      	adds	r3, #1
 8015306:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	2bff      	cmp	r3, #255	; 0xff
 801530c:	dd06      	ble.n	801531c <netif_add+0x108>
 801530e:	4b1e      	ldr	r3, [pc, #120]	; (8015388 <netif_add+0x174>)
 8015310:	f240 128d 	movw	r2, #397	; 0x18d
 8015314:	4925      	ldr	r1, [pc, #148]	; (80153ac <netif_add+0x198>)
 8015316:	481e      	ldr	r0, [pc, #120]	; (8015390 <netif_add+0x17c>)
 8015318:	f00a f860 	bl	801f3dc <iprintf>
        if (netif2->num == netif->num) {
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015328:	429a      	cmp	r2, r3
 801532a:	d108      	bne.n	801533e <netif_add+0x12a>
          netif->num++;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015332:	3301      	adds	r3, #1
 8015334:	b2da      	uxtb	r2, r3
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 801533c:	e005      	b.n	801534a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	617b      	str	r3, [r7, #20]
 8015344:	697b      	ldr	r3, [r7, #20]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d1d0      	bne.n	80152ec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d1be      	bne.n	80152ce <netif_add+0xba>
  }
  if (netif->num == 254) {
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015356:	2bfe      	cmp	r3, #254	; 0xfe
 8015358:	d103      	bne.n	8015362 <netif_add+0x14e>
    netif_num = 0;
 801535a:	4b11      	ldr	r3, [pc, #68]	; (80153a0 <netif_add+0x18c>)
 801535c:	2200      	movs	r2, #0
 801535e:	701a      	strb	r2, [r3, #0]
 8015360:	e006      	b.n	8015370 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015368:	3301      	adds	r3, #1
 801536a:	b2da      	uxtb	r2, r3
 801536c:	4b0c      	ldr	r3, [pc, #48]	; (80153a0 <netif_add+0x18c>)
 801536e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015370:	4b0c      	ldr	r3, [pc, #48]	; (80153a4 <netif_add+0x190>)
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015378:	4a0a      	ldr	r2, [pc, #40]	; (80153a4 <netif_add+0x190>)
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801537e:	68fb      	ldr	r3, [r7, #12]
}
 8015380:	4618      	mov	r0, r3
 8015382:	3718      	adds	r7, #24
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	08021ce4 	.word	0x08021ce4
 801538c:	08021d78 	.word	0x08021d78
 8015390:	08021d34 	.word	0x08021d34
 8015394:	08021d94 	.word	0x08021d94
 8015398:	0807b168 	.word	0x0807b168
 801539c:	080157bf 	.word	0x080157bf
 80153a0:	2000c7f8 	.word	0x2000c7f8
 80153a4:	20014ba4 	.word	0x20014ba4
 80153a8:	08021db8 	.word	0x08021db8
 80153ac:	08021dcc 	.word	0x08021dcc

080153b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80153ba:	6839      	ldr	r1, [r7, #0]
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f002 fe35 	bl	801802c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80153c2:	6839      	ldr	r1, [r7, #0]
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f007 fb9d 	bl	801cb04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80153ca:	bf00      	nop
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}
	...

080153d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b086      	sub	sp, #24
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d106      	bne.n	80153f4 <netif_do_set_ipaddr+0x20>
 80153e6:	4b1d      	ldr	r3, [pc, #116]	; (801545c <netif_do_set_ipaddr+0x88>)
 80153e8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80153ec:	491c      	ldr	r1, [pc, #112]	; (8015460 <netif_do_set_ipaddr+0x8c>)
 80153ee:	481d      	ldr	r0, [pc, #116]	; (8015464 <netif_do_set_ipaddr+0x90>)
 80153f0:	f009 fff4 	bl	801f3dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d106      	bne.n	8015408 <netif_do_set_ipaddr+0x34>
 80153fa:	4b18      	ldr	r3, [pc, #96]	; (801545c <netif_do_set_ipaddr+0x88>)
 80153fc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015400:	4917      	ldr	r1, [pc, #92]	; (8015460 <netif_do_set_ipaddr+0x8c>)
 8015402:	4818      	ldr	r0, [pc, #96]	; (8015464 <netif_do_set_ipaddr+0x90>)
 8015404:	f009 ffea 	bl	801f3dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	681a      	ldr	r2, [r3, #0]
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	3304      	adds	r3, #4
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	429a      	cmp	r2, r3
 8015414:	d01c      	beq.n	8015450 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	3304      	adds	r3, #4
 8015420:	681a      	ldr	r2, [r3, #0]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015426:	f107 0314 	add.w	r3, r7, #20
 801542a:	4619      	mov	r1, r3
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f7ff ffbf 	bl	80153b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d002      	beq.n	801543e <netif_do_set_ipaddr+0x6a>
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	e000      	b.n	8015440 <netif_do_set_ipaddr+0x6c>
 801543e:	2300      	movs	r3, #0
 8015440:	68fa      	ldr	r2, [r7, #12]
 8015442:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015444:	2101      	movs	r1, #1
 8015446:	68f8      	ldr	r0, [r7, #12]
 8015448:	f000 f8d2 	bl	80155f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801544c:	2301      	movs	r3, #1
 801544e:	e000      	b.n	8015452 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8015450:	2300      	movs	r3, #0
}
 8015452:	4618      	mov	r0, r3
 8015454:	3718      	adds	r7, #24
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	08021ce4 	.word	0x08021ce4
 8015460:	08021dfc 	.word	0x08021dfc
 8015464:	08021d34 	.word	0x08021d34

08015468 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015468:	b480      	push	{r7}
 801546a:	b085      	sub	sp, #20
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	681a      	ldr	r2, [r3, #0]
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	3308      	adds	r3, #8
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	429a      	cmp	r2, r3
 8015480:	d00a      	beq.n	8015498 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d002      	beq.n	801548e <netif_do_set_netmask+0x26>
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	e000      	b.n	8015490 <netif_do_set_netmask+0x28>
 801548e:	2300      	movs	r3, #0
 8015490:	68fa      	ldr	r2, [r7, #12]
 8015492:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015494:	2301      	movs	r3, #1
 8015496:	e000      	b.n	801549a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015498:	2300      	movs	r3, #0
}
 801549a:	4618      	mov	r0, r3
 801549c:	3714      	adds	r7, #20
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr

080154a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80154a6:	b480      	push	{r7}
 80154a8:	b085      	sub	sp, #20
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	60f8      	str	r0, [r7, #12]
 80154ae:	60b9      	str	r1, [r7, #8]
 80154b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	681a      	ldr	r2, [r3, #0]
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	330c      	adds	r3, #12
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d00a      	beq.n	80154d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d002      	beq.n	80154cc <netif_do_set_gw+0x26>
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	e000      	b.n	80154ce <netif_do_set_gw+0x28>
 80154cc:	2300      	movs	r3, #0
 80154ce:	68fa      	ldr	r2, [r7, #12]
 80154d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80154d2:	2301      	movs	r3, #1
 80154d4:	e000      	b.n	80154d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80154d6:	2300      	movs	r3, #0
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3714      	adds	r7, #20
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr

080154e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b088      	sub	sp, #32
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80154f2:	2300      	movs	r3, #0
 80154f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80154f6:	2300      	movs	r3, #0
 80154f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d101      	bne.n	8015504 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015500:	4b1c      	ldr	r3, [pc, #112]	; (8015574 <netif_set_addr+0x90>)
 8015502:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d101      	bne.n	801550e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801550a:	4b1a      	ldr	r3, [pc, #104]	; (8015574 <netif_set_addr+0x90>)
 801550c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d101      	bne.n	8015518 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015514:	4b17      	ldr	r3, [pc, #92]	; (8015574 <netif_set_addr+0x90>)
 8015516:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d003      	beq.n	8015526 <netif_set_addr+0x42>
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d101      	bne.n	801552a <netif_set_addr+0x46>
 8015526:	2301      	movs	r3, #1
 8015528:	e000      	b.n	801552c <netif_set_addr+0x48>
 801552a:	2300      	movs	r3, #0
 801552c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d006      	beq.n	8015542 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015534:	f107 0310 	add.w	r3, r7, #16
 8015538:	461a      	mov	r2, r3
 801553a:	68b9      	ldr	r1, [r7, #8]
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	f7ff ff49 	bl	80153d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015542:	69fa      	ldr	r2, [r7, #28]
 8015544:	6879      	ldr	r1, [r7, #4]
 8015546:	68f8      	ldr	r0, [r7, #12]
 8015548:	f7ff ff8e 	bl	8015468 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801554c:	69ba      	ldr	r2, [r7, #24]
 801554e:	6839      	ldr	r1, [r7, #0]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f7ff ffa8 	bl	80154a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d106      	bne.n	801556a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801555c:	f107 0310 	add.w	r3, r7, #16
 8015560:	461a      	mov	r2, r3
 8015562:	68b9      	ldr	r1, [r7, #8]
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f7ff ff35 	bl	80153d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801556a:	bf00      	nop
 801556c:	3720      	adds	r7, #32
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
 8015572:	bf00      	nop
 8015574:	0807b168 	.word	0x0807b168

08015578 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015580:	4a04      	ldr	r2, [pc, #16]	; (8015594 <netif_set_default+0x1c>)
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015586:	bf00      	nop
 8015588:	370c      	adds	r7, #12
 801558a:	46bd      	mov	sp, r7
 801558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015590:	4770      	bx	lr
 8015592:	bf00      	nop
 8015594:	20014ba8 	.word	0x20014ba8

08015598 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d107      	bne.n	80155b6 <netif_set_up+0x1e>
 80155a6:	4b0f      	ldr	r3, [pc, #60]	; (80155e4 <netif_set_up+0x4c>)
 80155a8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80155ac:	490e      	ldr	r1, [pc, #56]	; (80155e8 <netif_set_up+0x50>)
 80155ae:	480f      	ldr	r0, [pc, #60]	; (80155ec <netif_set_up+0x54>)
 80155b0:	f009 ff14 	bl	801f3dc <iprintf>
 80155b4:	e013      	b.n	80155de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155bc:	f003 0301 	and.w	r3, r3, #1
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d10c      	bne.n	80155de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155ca:	f043 0301 	orr.w	r3, r3, #1
 80155ce:	b2da      	uxtb	r2, r3
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80155d6:	2103      	movs	r1, #3
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 f809 	bl	80155f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80155de:	3708      	adds	r7, #8
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	08021ce4 	.word	0x08021ce4
 80155e8:	08021e6c 	.word	0x08021e6c
 80155ec:	08021d34 	.word	0x08021d34

080155f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	460b      	mov	r3, r1
 80155fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d106      	bne.n	8015610 <netif_issue_reports+0x20>
 8015602:	4b18      	ldr	r3, [pc, #96]	; (8015664 <netif_issue_reports+0x74>)
 8015604:	f240 326d 	movw	r2, #877	; 0x36d
 8015608:	4917      	ldr	r1, [pc, #92]	; (8015668 <netif_issue_reports+0x78>)
 801560a:	4818      	ldr	r0, [pc, #96]	; (801566c <netif_issue_reports+0x7c>)
 801560c:	f009 fee6 	bl	801f3dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015616:	f003 0304 	and.w	r3, r3, #4
 801561a:	2b00      	cmp	r3, #0
 801561c:	d01e      	beq.n	801565c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015624:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015628:	2b00      	cmp	r3, #0
 801562a:	d017      	beq.n	801565c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801562c:	78fb      	ldrb	r3, [r7, #3]
 801562e:	f003 0301 	and.w	r3, r3, #1
 8015632:	2b00      	cmp	r3, #0
 8015634:	d013      	beq.n	801565e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	3304      	adds	r3, #4
 801563a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801563c:	2b00      	cmp	r3, #0
 801563e:	d00e      	beq.n	801565e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015646:	f003 0308 	and.w	r3, r3, #8
 801564a:	2b00      	cmp	r3, #0
 801564c:	d007      	beq.n	801565e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	3304      	adds	r3, #4
 8015652:	4619      	mov	r1, r3
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f008 f9bf 	bl	801d9d8 <etharp_request>
 801565a:	e000      	b.n	801565e <netif_issue_reports+0x6e>
    return;
 801565c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801565e:	3708      	adds	r7, #8
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	08021ce4 	.word	0x08021ce4
 8015668:	08021e88 	.word	0x08021e88
 801566c:	08021d34 	.word	0x08021d34

08015670 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d107      	bne.n	801568e <netif_set_down+0x1e>
 801567e:	4b12      	ldr	r3, [pc, #72]	; (80156c8 <netif_set_down+0x58>)
 8015680:	f240 329b 	movw	r2, #923	; 0x39b
 8015684:	4911      	ldr	r1, [pc, #68]	; (80156cc <netif_set_down+0x5c>)
 8015686:	4812      	ldr	r0, [pc, #72]	; (80156d0 <netif_set_down+0x60>)
 8015688:	f009 fea8 	bl	801f3dc <iprintf>
 801568c:	e019      	b.n	80156c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015694:	f003 0301 	and.w	r3, r3, #1
 8015698:	2b00      	cmp	r3, #0
 801569a:	d012      	beq.n	80156c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156a2:	f023 0301 	bic.w	r3, r3, #1
 80156a6:	b2da      	uxtb	r2, r3
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156b4:	f003 0308 	and.w	r3, r3, #8
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d002      	beq.n	80156c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f007 fd49 	bl	801d154 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	08021ce4 	.word	0x08021ce4
 80156cc:	08021eac 	.word	0x08021eac
 80156d0:	08021d34 	.word	0x08021d34

080156d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d107      	bne.n	80156f2 <netif_set_link_up+0x1e>
 80156e2:	4b13      	ldr	r3, [pc, #76]	; (8015730 <netif_set_link_up+0x5c>)
 80156e4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80156e8:	4912      	ldr	r1, [pc, #72]	; (8015734 <netif_set_link_up+0x60>)
 80156ea:	4813      	ldr	r0, [pc, #76]	; (8015738 <netif_set_link_up+0x64>)
 80156ec:	f009 fe76 	bl	801f3dc <iprintf>
 80156f0:	e01b      	b.n	801572a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156f8:	f003 0304 	and.w	r3, r3, #4
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d114      	bne.n	801572a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015706:	f043 0304 	orr.w	r3, r3, #4
 801570a:	b2da      	uxtb	r2, r3
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015712:	2103      	movs	r1, #3
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f7ff ff6b 	bl	80155f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	69db      	ldr	r3, [r3, #28]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d003      	beq.n	801572a <netif_set_link_up+0x56>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	69db      	ldr	r3, [r3, #28]
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	08021ce4 	.word	0x08021ce4
 8015734:	08021ecc 	.word	0x08021ecc
 8015738:	08021d34 	.word	0x08021d34

0801573c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b082      	sub	sp, #8
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d107      	bne.n	801575a <netif_set_link_down+0x1e>
 801574a:	4b11      	ldr	r3, [pc, #68]	; (8015790 <netif_set_link_down+0x54>)
 801574c:	f240 4206 	movw	r2, #1030	; 0x406
 8015750:	4910      	ldr	r1, [pc, #64]	; (8015794 <netif_set_link_down+0x58>)
 8015752:	4811      	ldr	r0, [pc, #68]	; (8015798 <netif_set_link_down+0x5c>)
 8015754:	f009 fe42 	bl	801f3dc <iprintf>
 8015758:	e017      	b.n	801578a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015760:	f003 0304 	and.w	r3, r3, #4
 8015764:	2b00      	cmp	r3, #0
 8015766:	d010      	beq.n	801578a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801576e:	f023 0304 	bic.w	r3, r3, #4
 8015772:	b2da      	uxtb	r2, r3
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	69db      	ldr	r3, [r3, #28]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d003      	beq.n	801578a <netif_set_link_down+0x4e>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	69db      	ldr	r3, [r3, #28]
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	08021ce4 	.word	0x08021ce4
 8015794:	08021ef0 	.word	0x08021ef0
 8015798:	08021d34 	.word	0x08021d34

0801579c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801579c:	b480      	push	{r7}
 801579e:	b083      	sub	sp, #12
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
 80157a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d002      	beq.n	80157b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	683a      	ldr	r2, [r7, #0]
 80157b0:	61da      	str	r2, [r3, #28]
  }
}
 80157b2:	bf00      	nop
 80157b4:	370c      	adds	r7, #12
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr

080157be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80157be:	b480      	push	{r7}
 80157c0:	b085      	sub	sp, #20
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	60f8      	str	r0, [r7, #12]
 80157c6:	60b9      	str	r1, [r7, #8]
 80157c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80157ca:	f06f 030b 	mvn.w	r3, #11
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3714      	adds	r7, #20
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr
	...

080157dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80157dc:	b480      	push	{r7}
 80157de:	b085      	sub	sp, #20
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	4603      	mov	r3, r0
 80157e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80157e6:	79fb      	ldrb	r3, [r7, #7]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d013      	beq.n	8015814 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80157ec:	4b0d      	ldr	r3, [pc, #52]	; (8015824 <netif_get_by_index+0x48>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	60fb      	str	r3, [r7, #12]
 80157f2:	e00c      	b.n	801580e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80157fa:	3301      	adds	r3, #1
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	79fa      	ldrb	r2, [r7, #7]
 8015800:	429a      	cmp	r2, r3
 8015802:	d101      	bne.n	8015808 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	e006      	b.n	8015816 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	60fb      	str	r3, [r7, #12]
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d1ef      	bne.n	80157f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015814:	2300      	movs	r3, #0
}
 8015816:	4618      	mov	r0, r3
 8015818:	3714      	adds	r7, #20
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr
 8015822:	bf00      	nop
 8015824:	20014ba4 	.word	0x20014ba4

08015828 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801582e:	f009 fd51 	bl	801f2d4 <sys_arch_protect>
 8015832:	6038      	str	r0, [r7, #0]
 8015834:	4b0d      	ldr	r3, [pc, #52]	; (801586c <pbuf_free_ooseq+0x44>)
 8015836:	2200      	movs	r2, #0
 8015838:	701a      	strb	r2, [r3, #0]
 801583a:	6838      	ldr	r0, [r7, #0]
 801583c:	f009 fd58 	bl	801f2f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015840:	4b0b      	ldr	r3, [pc, #44]	; (8015870 <pbuf_free_ooseq+0x48>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	607b      	str	r3, [r7, #4]
 8015846:	e00a      	b.n	801585e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801584c:	2b00      	cmp	r3, #0
 801584e:	d003      	beq.n	8015858 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f002 fc29 	bl	80180a8 <tcp_free_ooseq>
      return;
 8015856:	e005      	b.n	8015864 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	607b      	str	r3, [r7, #4]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d1f1      	bne.n	8015848 <pbuf_free_ooseq+0x20>
    }
  }
}
 8015864:	3708      	adds	r7, #8
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	20014bac 	.word	0x20014bac
 8015870:	20014bb4 	.word	0x20014bb4

08015874 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801587c:	f7ff ffd4 	bl	8015828 <pbuf_free_ooseq>
}
 8015880:	bf00      	nop
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801588e:	f009 fd21 	bl	801f2d4 <sys_arch_protect>
 8015892:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8015894:	4b0f      	ldr	r3, [pc, #60]	; (80158d4 <pbuf_pool_is_empty+0x4c>)
 8015896:	781b      	ldrb	r3, [r3, #0]
 8015898:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801589a:	4b0e      	ldr	r3, [pc, #56]	; (80158d4 <pbuf_pool_is_empty+0x4c>)
 801589c:	2201      	movs	r2, #1
 801589e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f009 fd25 	bl	801f2f0 <sys_arch_unprotect>

  if (!queued) {
 80158a6:	78fb      	ldrb	r3, [r7, #3]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d10f      	bne.n	80158cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80158ac:	2100      	movs	r1, #0
 80158ae:	480a      	ldr	r0, [pc, #40]	; (80158d8 <pbuf_pool_is_empty+0x50>)
 80158b0:	f7fd fb1c 	bl	8012eec <tcpip_try_callback>
 80158b4:	4603      	mov	r3, r0
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d008      	beq.n	80158cc <pbuf_pool_is_empty+0x44>
 80158ba:	f009 fd0b 	bl	801f2d4 <sys_arch_protect>
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	4b04      	ldr	r3, [pc, #16]	; (80158d4 <pbuf_pool_is_empty+0x4c>)
 80158c2:	2200      	movs	r2, #0
 80158c4:	701a      	strb	r2, [r3, #0]
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f009 fd12 	bl	801f2f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80158cc:	bf00      	nop
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	20014bac 	.word	0x20014bac
 80158d8:	08015875 	.word	0x08015875

080158dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80158dc:	b480      	push	{r7}
 80158de:	b085      	sub	sp, #20
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	60f8      	str	r0, [r7, #12]
 80158e4:	60b9      	str	r1, [r7, #8]
 80158e6:	4611      	mov	r1, r2
 80158e8:	461a      	mov	r2, r3
 80158ea:	460b      	mov	r3, r1
 80158ec:	80fb      	strh	r3, [r7, #6]
 80158ee:	4613      	mov	r3, r2
 80158f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2200      	movs	r2, #0
 80158f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	68ba      	ldr	r2, [r7, #8]
 80158fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	88fa      	ldrh	r2, [r7, #6]
 8015902:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	88ba      	ldrh	r2, [r7, #4]
 8015908:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801590a:	8b3b      	ldrh	r3, [r7, #24]
 801590c:	b2da      	uxtb	r2, r3
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	7f3a      	ldrb	r2, [r7, #28]
 8015916:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	2201      	movs	r2, #1
 801591c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2200      	movs	r2, #0
 8015922:	73da      	strb	r2, [r3, #15]
}
 8015924:	bf00      	nop
 8015926:	3714      	adds	r7, #20
 8015928:	46bd      	mov	sp, r7
 801592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592e:	4770      	bx	lr

08015930 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b08c      	sub	sp, #48	; 0x30
 8015934:	af02      	add	r7, sp, #8
 8015936:	4603      	mov	r3, r0
 8015938:	71fb      	strb	r3, [r7, #7]
 801593a:	460b      	mov	r3, r1
 801593c:	80bb      	strh	r3, [r7, #4]
 801593e:	4613      	mov	r3, r2
 8015940:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8015942:	79fb      	ldrb	r3, [r7, #7]
 8015944:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8015946:	887b      	ldrh	r3, [r7, #2]
 8015948:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801594c:	d07f      	beq.n	8015a4e <pbuf_alloc+0x11e>
 801594e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015952:	f300 80c8 	bgt.w	8015ae6 <pbuf_alloc+0x1b6>
 8015956:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801595a:	d010      	beq.n	801597e <pbuf_alloc+0x4e>
 801595c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015960:	f300 80c1 	bgt.w	8015ae6 <pbuf_alloc+0x1b6>
 8015964:	2b01      	cmp	r3, #1
 8015966:	d002      	beq.n	801596e <pbuf_alloc+0x3e>
 8015968:	2b41      	cmp	r3, #65	; 0x41
 801596a:	f040 80bc 	bne.w	8015ae6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801596e:	887a      	ldrh	r2, [r7, #2]
 8015970:	88bb      	ldrh	r3, [r7, #4]
 8015972:	4619      	mov	r1, r3
 8015974:	2000      	movs	r0, #0
 8015976:	f000 f8d1 	bl	8015b1c <pbuf_alloc_reference>
 801597a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801597c:	e0bd      	b.n	8015afa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801597e:	2300      	movs	r3, #0
 8015980:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015982:	2300      	movs	r3, #0
 8015984:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015986:	88bb      	ldrh	r3, [r7, #4]
 8015988:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801598a:	200c      	movs	r0, #12
 801598c:	f7ff fbbe 	bl	801510c <memp_malloc>
 8015990:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d109      	bne.n	80159ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8015998:	f7ff ff76 	bl	8015888 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d002      	beq.n	80159a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80159a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159a4:	f000 faba 	bl	8015f1c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80159a8:	2300      	movs	r3, #0
 80159aa:	e0a7      	b.n	8015afc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80159ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159ae:	3303      	adds	r3, #3
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	f023 0303 	bic.w	r3, r3, #3
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80159bc:	b29b      	uxth	r3, r3
 80159be:	8b7a      	ldrh	r2, [r7, #26]
 80159c0:	4293      	cmp	r3, r2
 80159c2:	bf28      	it	cs
 80159c4:	4613      	movcs	r3, r2
 80159c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80159c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159ca:	3310      	adds	r3, #16
 80159cc:	693a      	ldr	r2, [r7, #16]
 80159ce:	4413      	add	r3, r2
 80159d0:	3303      	adds	r3, #3
 80159d2:	f023 0303 	bic.w	r3, r3, #3
 80159d6:	4618      	mov	r0, r3
 80159d8:	89f9      	ldrh	r1, [r7, #14]
 80159da:	8b7a      	ldrh	r2, [r7, #26]
 80159dc:	2300      	movs	r3, #0
 80159de:	9301      	str	r3, [sp, #4]
 80159e0:	887b      	ldrh	r3, [r7, #2]
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	460b      	mov	r3, r1
 80159e6:	4601      	mov	r1, r0
 80159e8:	6938      	ldr	r0, [r7, #16]
 80159ea:	f7ff ff77 	bl	80158dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	685b      	ldr	r3, [r3, #4]
 80159f2:	f003 0303 	and.w	r3, r3, #3
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d006      	beq.n	8015a08 <pbuf_alloc+0xd8>
 80159fa:	4b42      	ldr	r3, [pc, #264]	; (8015b04 <pbuf_alloc+0x1d4>)
 80159fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015a00:	4941      	ldr	r1, [pc, #260]	; (8015b08 <pbuf_alloc+0x1d8>)
 8015a02:	4842      	ldr	r0, [pc, #264]	; (8015b0c <pbuf_alloc+0x1dc>)
 8015a04:	f009 fcea 	bl	801f3dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015a08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a0a:	3303      	adds	r3, #3
 8015a0c:	f023 0303 	bic.w	r3, r3, #3
 8015a10:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015a14:	d106      	bne.n	8015a24 <pbuf_alloc+0xf4>
 8015a16:	4b3b      	ldr	r3, [pc, #236]	; (8015b04 <pbuf_alloc+0x1d4>)
 8015a18:	f44f 7281 	mov.w	r2, #258	; 0x102
 8015a1c:	493c      	ldr	r1, [pc, #240]	; (8015b10 <pbuf_alloc+0x1e0>)
 8015a1e:	483b      	ldr	r0, [pc, #236]	; (8015b0c <pbuf_alloc+0x1dc>)
 8015a20:	f009 fcdc 	bl	801f3dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d102      	bne.n	8015a30 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8015a2e:	e002      	b.n	8015a36 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015a30:	69fb      	ldr	r3, [r7, #28]
 8015a32:	693a      	ldr	r2, [r7, #16]
 8015a34:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015a3a:	8b7a      	ldrh	r2, [r7, #26]
 8015a3c:	89fb      	ldrh	r3, [r7, #14]
 8015a3e:	1ad3      	subs	r3, r2, r3
 8015a40:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015a42:	2300      	movs	r3, #0
 8015a44:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015a46:	8b7b      	ldrh	r3, [r7, #26]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d19e      	bne.n	801598a <pbuf_alloc+0x5a>
      break;
 8015a4c:	e055      	b.n	8015afa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015a4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a50:	3303      	adds	r3, #3
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	f023 0303 	bic.w	r3, r3, #3
 8015a58:	b29a      	uxth	r2, r3
 8015a5a:	88bb      	ldrh	r3, [r7, #4]
 8015a5c:	3303      	adds	r3, #3
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	f023 0303 	bic.w	r3, r3, #3
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	4413      	add	r3, r2
 8015a68:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015a6a:	8b3b      	ldrh	r3, [r7, #24]
 8015a6c:	3310      	adds	r3, #16
 8015a6e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015a70:	8b3a      	ldrh	r2, [r7, #24]
 8015a72:	88bb      	ldrh	r3, [r7, #4]
 8015a74:	3303      	adds	r3, #3
 8015a76:	f023 0303 	bic.w	r3, r3, #3
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d306      	bcc.n	8015a8c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015a7e:	8afa      	ldrh	r2, [r7, #22]
 8015a80:	88bb      	ldrh	r3, [r7, #4]
 8015a82:	3303      	adds	r3, #3
 8015a84:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	d201      	bcs.n	8015a90 <pbuf_alloc+0x160>
        return NULL;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	e035      	b.n	8015afc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015a90:	8afb      	ldrh	r3, [r7, #22]
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7ff f9b8 	bl	8014e08 <mem_malloc>
 8015a98:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d101      	bne.n	8015aa4 <pbuf_alloc+0x174>
        return NULL;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	e02b      	b.n	8015afc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015aa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015aa6:	3310      	adds	r3, #16
 8015aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015aaa:	4413      	add	r3, r2
 8015aac:	3303      	adds	r3, #3
 8015aae:	f023 0303 	bic.w	r3, r3, #3
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	88b9      	ldrh	r1, [r7, #4]
 8015ab6:	88ba      	ldrh	r2, [r7, #4]
 8015ab8:	2300      	movs	r3, #0
 8015aba:	9301      	str	r3, [sp, #4]
 8015abc:	887b      	ldrh	r3, [r7, #2]
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	460b      	mov	r3, r1
 8015ac2:	4601      	mov	r1, r0
 8015ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ac6:	f7ff ff09 	bl	80158dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	f003 0303 	and.w	r3, r3, #3
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d010      	beq.n	8015af8 <pbuf_alloc+0x1c8>
 8015ad6:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <pbuf_alloc+0x1d4>)
 8015ad8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8015adc:	490d      	ldr	r1, [pc, #52]	; (8015b14 <pbuf_alloc+0x1e4>)
 8015ade:	480b      	ldr	r0, [pc, #44]	; (8015b0c <pbuf_alloc+0x1dc>)
 8015ae0:	f009 fc7c 	bl	801f3dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015ae4:	e008      	b.n	8015af8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015ae6:	4b07      	ldr	r3, [pc, #28]	; (8015b04 <pbuf_alloc+0x1d4>)
 8015ae8:	f240 1227 	movw	r2, #295	; 0x127
 8015aec:	490a      	ldr	r1, [pc, #40]	; (8015b18 <pbuf_alloc+0x1e8>)
 8015aee:	4807      	ldr	r0, [pc, #28]	; (8015b0c <pbuf_alloc+0x1dc>)
 8015af0:	f009 fc74 	bl	801f3dc <iprintf>
      return NULL;
 8015af4:	2300      	movs	r3, #0
 8015af6:	e001      	b.n	8015afc <pbuf_alloc+0x1cc>
      break;
 8015af8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3728      	adds	r7, #40	; 0x28
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	08021f14 	.word	0x08021f14
 8015b08:	08021f44 	.word	0x08021f44
 8015b0c:	08021f74 	.word	0x08021f74
 8015b10:	08021f9c 	.word	0x08021f9c
 8015b14:	08021fd0 	.word	0x08021fd0
 8015b18:	08021ffc 	.word	0x08021ffc

08015b1c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b086      	sub	sp, #24
 8015b20:	af02      	add	r7, sp, #8
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	460b      	mov	r3, r1
 8015b26:	807b      	strh	r3, [r7, #2]
 8015b28:	4613      	mov	r3, r2
 8015b2a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015b2c:	883b      	ldrh	r3, [r7, #0]
 8015b2e:	2b41      	cmp	r3, #65	; 0x41
 8015b30:	d009      	beq.n	8015b46 <pbuf_alloc_reference+0x2a>
 8015b32:	883b      	ldrh	r3, [r7, #0]
 8015b34:	2b01      	cmp	r3, #1
 8015b36:	d006      	beq.n	8015b46 <pbuf_alloc_reference+0x2a>
 8015b38:	4b0f      	ldr	r3, [pc, #60]	; (8015b78 <pbuf_alloc_reference+0x5c>)
 8015b3a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015b3e:	490f      	ldr	r1, [pc, #60]	; (8015b7c <pbuf_alloc_reference+0x60>)
 8015b40:	480f      	ldr	r0, [pc, #60]	; (8015b80 <pbuf_alloc_reference+0x64>)
 8015b42:	f009 fc4b 	bl	801f3dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015b46:	200b      	movs	r0, #11
 8015b48:	f7ff fae0 	bl	801510c <memp_malloc>
 8015b4c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d101      	bne.n	8015b58 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015b54:	2300      	movs	r3, #0
 8015b56:	e00b      	b.n	8015b70 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015b58:	8879      	ldrh	r1, [r7, #2]
 8015b5a:	887a      	ldrh	r2, [r7, #2]
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	9301      	str	r3, [sp, #4]
 8015b60:	883b      	ldrh	r3, [r7, #0]
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	460b      	mov	r3, r1
 8015b66:	6879      	ldr	r1, [r7, #4]
 8015b68:	68f8      	ldr	r0, [r7, #12]
 8015b6a:	f7ff feb7 	bl	80158dc <pbuf_init_alloced_pbuf>
  return p;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3710      	adds	r7, #16
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}
 8015b78:	08021f14 	.word	0x08021f14
 8015b7c:	08022018 	.word	0x08022018
 8015b80:	08021f74 	.word	0x08021f74

08015b84 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b088      	sub	sp, #32
 8015b88:	af02      	add	r7, sp, #8
 8015b8a:	607b      	str	r3, [r7, #4]
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73fb      	strb	r3, [r7, #15]
 8015b90:	460b      	mov	r3, r1
 8015b92:	81bb      	strh	r3, [r7, #12]
 8015b94:	4613      	mov	r3, r2
 8015b96:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015b98:	7bfb      	ldrb	r3, [r7, #15]
 8015b9a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015b9c:	8a7b      	ldrh	r3, [r7, #18]
 8015b9e:	3303      	adds	r3, #3
 8015ba0:	f023 0203 	bic.w	r2, r3, #3
 8015ba4:	89bb      	ldrh	r3, [r7, #12]
 8015ba6:	441a      	add	r2, r3
 8015ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d901      	bls.n	8015bb2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	e018      	b.n	8015be4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015bb2:	6a3b      	ldr	r3, [r7, #32]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d007      	beq.n	8015bc8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015bb8:	8a7b      	ldrh	r3, [r7, #18]
 8015bba:	3303      	adds	r3, #3
 8015bbc:	f023 0303 	bic.w	r3, r3, #3
 8015bc0:	6a3a      	ldr	r2, [r7, #32]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	617b      	str	r3, [r7, #20]
 8015bc6:	e001      	b.n	8015bcc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	89b9      	ldrh	r1, [r7, #12]
 8015bd0:	89ba      	ldrh	r2, [r7, #12]
 8015bd2:	2302      	movs	r3, #2
 8015bd4:	9301      	str	r3, [sp, #4]
 8015bd6:	897b      	ldrh	r3, [r7, #10]
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	460b      	mov	r3, r1
 8015bdc:	6979      	ldr	r1, [r7, #20]
 8015bde:	f7ff fe7d 	bl	80158dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015be2:	687b      	ldr	r3, [r7, #4]
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3718      	adds	r7, #24
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}

08015bec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d106      	bne.n	8015c0c <pbuf_realloc+0x20>
 8015bfe:	4b3a      	ldr	r3, [pc, #232]	; (8015ce8 <pbuf_realloc+0xfc>)
 8015c00:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015c04:	4939      	ldr	r1, [pc, #228]	; (8015cec <pbuf_realloc+0x100>)
 8015c06:	483a      	ldr	r0, [pc, #232]	; (8015cf0 <pbuf_realloc+0x104>)
 8015c08:	f009 fbe8 	bl	801f3dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	891b      	ldrh	r3, [r3, #8]
 8015c10:	887a      	ldrh	r2, [r7, #2]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d263      	bcs.n	8015cde <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	891a      	ldrh	r2, [r3, #8]
 8015c1a:	887b      	ldrh	r3, [r7, #2]
 8015c1c:	1ad3      	subs	r3, r2, r3
 8015c1e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015c20:	887b      	ldrh	r3, [r7, #2]
 8015c22:	817b      	strh	r3, [r7, #10]
  q = p;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015c28:	e018      	b.n	8015c5c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	895b      	ldrh	r3, [r3, #10]
 8015c2e:	897a      	ldrh	r2, [r7, #10]
 8015c30:	1ad3      	subs	r3, r2, r3
 8015c32:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	891a      	ldrh	r2, [r3, #8]
 8015c38:	893b      	ldrh	r3, [r7, #8]
 8015c3a:	1ad3      	subs	r3, r2, r3
 8015c3c:	b29a      	uxth	r2, r3
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d106      	bne.n	8015c5c <pbuf_realloc+0x70>
 8015c4e:	4b26      	ldr	r3, [pc, #152]	; (8015ce8 <pbuf_realloc+0xfc>)
 8015c50:	f240 12af 	movw	r2, #431	; 0x1af
 8015c54:	4927      	ldr	r1, [pc, #156]	; (8015cf4 <pbuf_realloc+0x108>)
 8015c56:	4826      	ldr	r0, [pc, #152]	; (8015cf0 <pbuf_realloc+0x104>)
 8015c58:	f009 fbc0 	bl	801f3dc <iprintf>
  while (rem_len > q->len) {
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	895b      	ldrh	r3, [r3, #10]
 8015c60:	897a      	ldrh	r2, [r7, #10]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d8e1      	bhi.n	8015c2a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	7b1b      	ldrb	r3, [r3, #12]
 8015c6a:	f003 030f 	and.w	r3, r3, #15
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d121      	bne.n	8015cb6 <pbuf_realloc+0xca>
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	895b      	ldrh	r3, [r3, #10]
 8015c76:	897a      	ldrh	r2, [r7, #10]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d01c      	beq.n	8015cb6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	7b5b      	ldrb	r3, [r3, #13]
 8015c80:	f003 0302 	and.w	r3, r3, #2
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d116      	bne.n	8015cb6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	685a      	ldr	r2, [r3, #4]
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	1ad3      	subs	r3, r2, r3
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	897b      	ldrh	r3, [r7, #10]
 8015c94:	4413      	add	r3, r2
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	4619      	mov	r1, r3
 8015c9a:	68f8      	ldr	r0, [r7, #12]
 8015c9c:	f7fe ffaa 	bl	8014bf4 <mem_trim>
 8015ca0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d106      	bne.n	8015cb6 <pbuf_realloc+0xca>
 8015ca8:	4b0f      	ldr	r3, [pc, #60]	; (8015ce8 <pbuf_realloc+0xfc>)
 8015caa:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015cae:	4912      	ldr	r1, [pc, #72]	; (8015cf8 <pbuf_realloc+0x10c>)
 8015cb0:	480f      	ldr	r0, [pc, #60]	; (8015cf0 <pbuf_realloc+0x104>)
 8015cb2:	f009 fb93 	bl	801f3dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	897a      	ldrh	r2, [r7, #10]
 8015cba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	895a      	ldrh	r2, [r3, #10]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d004      	beq.n	8015cd6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f000 f923 	bl	8015f1c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	601a      	str	r2, [r3, #0]
 8015cdc:	e000      	b.n	8015ce0 <pbuf_realloc+0xf4>
    return;
 8015cde:	bf00      	nop

}
 8015ce0:	3710      	adds	r7, #16
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
 8015ce6:	bf00      	nop
 8015ce8:	08021f14 	.word	0x08021f14
 8015cec:	0802202c 	.word	0x0802202c
 8015cf0:	08021f74 	.word	0x08021f74
 8015cf4:	08022044 	.word	0x08022044
 8015cf8:	0802205c 	.word	0x0802205c

08015cfc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b086      	sub	sp, #24
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	4613      	mov	r3, r2
 8015d08:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d106      	bne.n	8015d1e <pbuf_add_header_impl+0x22>
 8015d10:	4b2b      	ldr	r3, [pc, #172]	; (8015dc0 <pbuf_add_header_impl+0xc4>)
 8015d12:	f240 12df 	movw	r2, #479	; 0x1df
 8015d16:	492b      	ldr	r1, [pc, #172]	; (8015dc4 <pbuf_add_header_impl+0xc8>)
 8015d18:	482b      	ldr	r0, [pc, #172]	; (8015dc8 <pbuf_add_header_impl+0xcc>)
 8015d1a:	f009 fb5f 	bl	801f3dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d003      	beq.n	8015d2c <pbuf_add_header_impl+0x30>
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d2a:	d301      	bcc.n	8015d30 <pbuf_add_header_impl+0x34>
    return 1;
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e043      	b.n	8015db8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d101      	bne.n	8015d3a <pbuf_add_header_impl+0x3e>
    return 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	e03e      	b.n	8015db8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	891a      	ldrh	r2, [r3, #8]
 8015d42:	8a7b      	ldrh	r3, [r7, #18]
 8015d44:	4413      	add	r3, r2
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	8a7a      	ldrh	r2, [r7, #18]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d901      	bls.n	8015d52 <pbuf_add_header_impl+0x56>
    return 1;
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e032      	b.n	8015db8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	7b1b      	ldrb	r3, [r3, #12]
 8015d56:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015d58:	8a3b      	ldrh	r3, [r7, #16]
 8015d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d00c      	beq.n	8015d7c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	685a      	ldr	r2, [r3, #4]
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	425b      	negs	r3, r3
 8015d6a:	4413      	add	r3, r2
 8015d6c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	3310      	adds	r3, #16
 8015d72:	697a      	ldr	r2, [r7, #20]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d20d      	bcs.n	8015d94 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e01d      	b.n	8015db8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015d7c:	79fb      	ldrb	r3, [r7, #7]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d006      	beq.n	8015d90 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	685a      	ldr	r2, [r3, #4]
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	425b      	negs	r3, r3
 8015d8a:	4413      	add	r3, r2
 8015d8c:	617b      	str	r3, [r7, #20]
 8015d8e:	e001      	b.n	8015d94 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015d90:	2301      	movs	r3, #1
 8015d92:	e011      	b.n	8015db8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	697a      	ldr	r2, [r7, #20]
 8015d98:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	895a      	ldrh	r2, [r3, #10]
 8015d9e:	8a7b      	ldrh	r3, [r7, #18]
 8015da0:	4413      	add	r3, r2
 8015da2:	b29a      	uxth	r2, r3
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	891a      	ldrh	r2, [r3, #8]
 8015dac:	8a7b      	ldrh	r3, [r7, #18]
 8015dae:	4413      	add	r3, r2
 8015db0:	b29a      	uxth	r2, r3
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	811a      	strh	r2, [r3, #8]


  return 0;
 8015db6:	2300      	movs	r3, #0
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3718      	adds	r7, #24
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	08021f14 	.word	0x08021f14
 8015dc4:	08022078 	.word	0x08022078
 8015dc8:	08021f74 	.word	0x08021f74

08015dcc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b082      	sub	sp, #8
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	6839      	ldr	r1, [r7, #0]
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f7ff ff8e 	bl	8015cfc <pbuf_add_header_impl>
 8015de0:	4603      	mov	r3, r0
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3708      	adds	r7, #8
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}
	...

08015dec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b084      	sub	sp, #16
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d106      	bne.n	8015e0a <pbuf_remove_header+0x1e>
 8015dfc:	4b20      	ldr	r3, [pc, #128]	; (8015e80 <pbuf_remove_header+0x94>)
 8015dfe:	f240 224b 	movw	r2, #587	; 0x24b
 8015e02:	4920      	ldr	r1, [pc, #128]	; (8015e84 <pbuf_remove_header+0x98>)
 8015e04:	4820      	ldr	r0, [pc, #128]	; (8015e88 <pbuf_remove_header+0x9c>)
 8015e06:	f009 fae9 	bl	801f3dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d003      	beq.n	8015e18 <pbuf_remove_header+0x2c>
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e16:	d301      	bcc.n	8015e1c <pbuf_remove_header+0x30>
    return 1;
 8015e18:	2301      	movs	r3, #1
 8015e1a:	e02c      	b.n	8015e76 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d101      	bne.n	8015e26 <pbuf_remove_header+0x3a>
    return 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	e027      	b.n	8015e76 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	895b      	ldrh	r3, [r3, #10]
 8015e2e:	89fa      	ldrh	r2, [r7, #14]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d908      	bls.n	8015e46 <pbuf_remove_header+0x5a>
 8015e34:	4b12      	ldr	r3, [pc, #72]	; (8015e80 <pbuf_remove_header+0x94>)
 8015e36:	f240 2255 	movw	r2, #597	; 0x255
 8015e3a:	4914      	ldr	r1, [pc, #80]	; (8015e8c <pbuf_remove_header+0xa0>)
 8015e3c:	4812      	ldr	r0, [pc, #72]	; (8015e88 <pbuf_remove_header+0x9c>)
 8015e3e:	f009 facd 	bl	801f3dc <iprintf>
 8015e42:	2301      	movs	r3, #1
 8015e44:	e017      	b.n	8015e76 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	685b      	ldr	r3, [r3, #4]
 8015e4a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	685a      	ldr	r2, [r3, #4]
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	441a      	add	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	895a      	ldrh	r2, [r3, #10]
 8015e5c:	89fb      	ldrh	r3, [r7, #14]
 8015e5e:	1ad3      	subs	r3, r2, r3
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	891a      	ldrh	r2, [r3, #8]
 8015e6a:	89fb      	ldrh	r3, [r7, #14]
 8015e6c:	1ad3      	subs	r3, r2, r3
 8015e6e:	b29a      	uxth	r2, r3
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015e74:	2300      	movs	r3, #0
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3710      	adds	r7, #16
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	08021f14 	.word	0x08021f14
 8015e84:	08022078 	.word	0x08022078
 8015e88:	08021f74 	.word	0x08021f74
 8015e8c:	08022084 	.word	0x08022084

08015e90 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b082      	sub	sp, #8
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	460b      	mov	r3, r1
 8015e9a:	807b      	strh	r3, [r7, #2]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015ea0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	da08      	bge.n	8015eba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015ea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015eac:	425b      	negs	r3, r3
 8015eae:	4619      	mov	r1, r3
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f7ff ff9b 	bl	8015dec <pbuf_remove_header>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	e007      	b.n	8015eca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015eba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ebe:	787a      	ldrb	r2, [r7, #1]
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f7ff ff1a 	bl	8015cfc <pbuf_add_header_impl>
 8015ec8:	4603      	mov	r3, r0
  }
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3708      	adds	r7, #8
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}

08015ed2 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8015ed2:	b580      	push	{r7, lr}
 8015ed4:	b082      	sub	sp, #8
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	6078      	str	r0, [r7, #4]
 8015eda:	460b      	mov	r3, r1
 8015edc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 0);
 8015ede:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f7ff ffd2 	bl	8015e90 <pbuf_header_impl>
 8015eec:	4603      	mov	r3, r0
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3708      	adds	r7, #8
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}

08015ef6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015ef6:	b580      	push	{r7, lr}
 8015ef8:	b082      	sub	sp, #8
 8015efa:	af00      	add	r7, sp, #0
 8015efc:	6078      	str	r0, [r7, #4]
 8015efe:	460b      	mov	r3, r1
 8015f00:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015f02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f06:	2201      	movs	r2, #1
 8015f08:	4619      	mov	r1, r3
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f7ff ffc0 	bl	8015e90 <pbuf_header_impl>
 8015f10:	4603      	mov	r3, r0
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3708      	adds	r7, #8
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
	...

08015f1c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b088      	sub	sp, #32
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d10b      	bne.n	8015f42 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d106      	bne.n	8015f3e <pbuf_free+0x22>
 8015f30:	4b3b      	ldr	r3, [pc, #236]	; (8016020 <pbuf_free+0x104>)
 8015f32:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015f36:	493b      	ldr	r1, [pc, #236]	; (8016024 <pbuf_free+0x108>)
 8015f38:	483b      	ldr	r0, [pc, #236]	; (8016028 <pbuf_free+0x10c>)
 8015f3a:	f009 fa4f 	bl	801f3dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	e069      	b.n	8016016 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015f42:	2300      	movs	r3, #0
 8015f44:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015f46:	e062      	b.n	801600e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015f48:	f009 f9c4 	bl	801f2d4 <sys_arch_protect>
 8015f4c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	7b9b      	ldrb	r3, [r3, #14]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d106      	bne.n	8015f64 <pbuf_free+0x48>
 8015f56:	4b32      	ldr	r3, [pc, #200]	; (8016020 <pbuf_free+0x104>)
 8015f58:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015f5c:	4933      	ldr	r1, [pc, #204]	; (801602c <pbuf_free+0x110>)
 8015f5e:	4832      	ldr	r0, [pc, #200]	; (8016028 <pbuf_free+0x10c>)
 8015f60:	f009 fa3c 	bl	801f3dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	7b9b      	ldrb	r3, [r3, #14]
 8015f68:	3b01      	subs	r3, #1
 8015f6a:	b2da      	uxtb	r2, r3
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	739a      	strb	r2, [r3, #14]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	7b9b      	ldrb	r3, [r3, #14]
 8015f74:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015f76:	69b8      	ldr	r0, [r7, #24]
 8015f78:	f009 f9ba 	bl	801f2f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015f7c:	7dfb      	ldrb	r3, [r7, #23]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d143      	bne.n	801600a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	7b1b      	ldrb	r3, [r3, #12]
 8015f8c:	f003 030f 	and.w	r3, r3, #15
 8015f90:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	7b5b      	ldrb	r3, [r3, #13]
 8015f96:	f003 0302 	and.w	r3, r3, #2
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d011      	beq.n	8015fc2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	691b      	ldr	r3, [r3, #16]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d106      	bne.n	8015fb8 <pbuf_free+0x9c>
 8015faa:	4b1d      	ldr	r3, [pc, #116]	; (8016020 <pbuf_free+0x104>)
 8015fac:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015fb0:	491f      	ldr	r1, [pc, #124]	; (8016030 <pbuf_free+0x114>)
 8015fb2:	481d      	ldr	r0, [pc, #116]	; (8016028 <pbuf_free+0x10c>)
 8015fb4:	f009 fa12 	bl	801f3dc <iprintf>
        pc->custom_free_function(p);
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	691b      	ldr	r3, [r3, #16]
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	4798      	blx	r3
 8015fc0:	e01d      	b.n	8015ffe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015fc2:	7bfb      	ldrb	r3, [r7, #15]
 8015fc4:	2b02      	cmp	r3, #2
 8015fc6:	d104      	bne.n	8015fd2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8015fc8:	6879      	ldr	r1, [r7, #4]
 8015fca:	200c      	movs	r0, #12
 8015fcc:	f7ff f8f0 	bl	80151b0 <memp_free>
 8015fd0:	e015      	b.n	8015ffe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015fd2:	7bfb      	ldrb	r3, [r7, #15]
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d104      	bne.n	8015fe2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8015fd8:	6879      	ldr	r1, [r7, #4]
 8015fda:	200b      	movs	r0, #11
 8015fdc:	f7ff f8e8 	bl	80151b0 <memp_free>
 8015fe0:	e00d      	b.n	8015ffe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015fe2:	7bfb      	ldrb	r3, [r7, #15]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d103      	bne.n	8015ff0 <pbuf_free+0xd4>
          mem_free(p);
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f7fe fd73 	bl	8014ad4 <mem_free>
 8015fee:	e006      	b.n	8015ffe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015ff0:	4b0b      	ldr	r3, [pc, #44]	; (8016020 <pbuf_free+0x104>)
 8015ff2:	f240 320f 	movw	r2, #783	; 0x30f
 8015ff6:	490f      	ldr	r1, [pc, #60]	; (8016034 <pbuf_free+0x118>)
 8015ff8:	480b      	ldr	r0, [pc, #44]	; (8016028 <pbuf_free+0x10c>)
 8015ffa:	f009 f9ef 	bl	801f3dc <iprintf>
        }
      }
      count++;
 8015ffe:	7ffb      	ldrb	r3, [r7, #31]
 8016000:	3301      	adds	r3, #1
 8016002:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	607b      	str	r3, [r7, #4]
 8016008:	e001      	b.n	801600e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801600a:	2300      	movs	r3, #0
 801600c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d199      	bne.n	8015f48 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016014:	7ffb      	ldrb	r3, [r7, #31]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3720      	adds	r7, #32
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	08021f14 	.word	0x08021f14
 8016024:	08022078 	.word	0x08022078
 8016028:	08021f74 	.word	0x08021f74
 801602c:	080220a4 	.word	0x080220a4
 8016030:	080220bc 	.word	0x080220bc
 8016034:	080220e0 	.word	0x080220e0

08016038 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016038:	b480      	push	{r7}
 801603a:	b085      	sub	sp, #20
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016040:	2300      	movs	r3, #0
 8016042:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016044:	e005      	b.n	8016052 <pbuf_clen+0x1a>
    ++len;
 8016046:	89fb      	ldrh	r3, [r7, #14]
 8016048:	3301      	adds	r3, #1
 801604a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d1f6      	bne.n	8016046 <pbuf_clen+0xe>
  }
  return len;
 8016058:	89fb      	ldrh	r3, [r7, #14]
}
 801605a:	4618      	mov	r0, r3
 801605c:	3714      	adds	r7, #20
 801605e:	46bd      	mov	sp, r7
 8016060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016064:	4770      	bx	lr
	...

08016068 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d016      	beq.n	80160a4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016076:	f009 f92d 	bl	801f2d4 <sys_arch_protect>
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	7b9b      	ldrb	r3, [r3, #14]
 8016080:	3301      	adds	r3, #1
 8016082:	b2da      	uxtb	r2, r3
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	739a      	strb	r2, [r3, #14]
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f009 f931 	bl	801f2f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	7b9b      	ldrb	r3, [r3, #14]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d106      	bne.n	80160a4 <pbuf_ref+0x3c>
 8016096:	4b05      	ldr	r3, [pc, #20]	; (80160ac <pbuf_ref+0x44>)
 8016098:	f240 3242 	movw	r2, #834	; 0x342
 801609c:	4904      	ldr	r1, [pc, #16]	; (80160b0 <pbuf_ref+0x48>)
 801609e:	4805      	ldr	r0, [pc, #20]	; (80160b4 <pbuf_ref+0x4c>)
 80160a0:	f009 f99c 	bl	801f3dc <iprintf>
  }
}
 80160a4:	bf00      	nop
 80160a6:	3710      	adds	r7, #16
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}
 80160ac:	08021f14 	.word	0x08021f14
 80160b0:	080220f4 	.word	0x080220f4
 80160b4:	08021f74 	.word	0x08021f74

080160b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d002      	beq.n	80160ce <pbuf_cat+0x16>
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d107      	bne.n	80160de <pbuf_cat+0x26>
 80160ce:	4b20      	ldr	r3, [pc, #128]	; (8016150 <pbuf_cat+0x98>)
 80160d0:	f240 3259 	movw	r2, #857	; 0x359
 80160d4:	491f      	ldr	r1, [pc, #124]	; (8016154 <pbuf_cat+0x9c>)
 80160d6:	4820      	ldr	r0, [pc, #128]	; (8016158 <pbuf_cat+0xa0>)
 80160d8:	f009 f980 	bl	801f3dc <iprintf>
 80160dc:	e034      	b.n	8016148 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	60fb      	str	r3, [r7, #12]
 80160e2:	e00a      	b.n	80160fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	891a      	ldrh	r2, [r3, #8]
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	891b      	ldrh	r3, [r3, #8]
 80160ec:	4413      	add	r3, r2
 80160ee:	b29a      	uxth	r2, r3
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	60fb      	str	r3, [r7, #12]
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d1f0      	bne.n	80160e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	891a      	ldrh	r2, [r3, #8]
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	895b      	ldrh	r3, [r3, #10]
 801610a:	429a      	cmp	r2, r3
 801610c:	d006      	beq.n	801611c <pbuf_cat+0x64>
 801610e:	4b10      	ldr	r3, [pc, #64]	; (8016150 <pbuf_cat+0x98>)
 8016110:	f240 3262 	movw	r2, #866	; 0x362
 8016114:	4911      	ldr	r1, [pc, #68]	; (801615c <pbuf_cat+0xa4>)
 8016116:	4810      	ldr	r0, [pc, #64]	; (8016158 <pbuf_cat+0xa0>)
 8016118:	f009 f960 	bl	801f3dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d006      	beq.n	8016132 <pbuf_cat+0x7a>
 8016124:	4b0a      	ldr	r3, [pc, #40]	; (8016150 <pbuf_cat+0x98>)
 8016126:	f240 3263 	movw	r2, #867	; 0x363
 801612a:	490d      	ldr	r1, [pc, #52]	; (8016160 <pbuf_cat+0xa8>)
 801612c:	480a      	ldr	r0, [pc, #40]	; (8016158 <pbuf_cat+0xa0>)
 801612e:	f009 f955 	bl	801f3dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	891a      	ldrh	r2, [r3, #8]
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	891b      	ldrh	r3, [r3, #8]
 801613a:	4413      	add	r3, r2
 801613c:	b29a      	uxth	r2, r3
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	683a      	ldr	r2, [r7, #0]
 8016146:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016148:	3710      	adds	r7, #16
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}
 801614e:	bf00      	nop
 8016150:	08021f14 	.word	0x08021f14
 8016154:	08022108 	.word	0x08022108
 8016158:	08021f74 	.word	0x08021f74
 801615c:	08022140 	.word	0x08022140
 8016160:	08022170 	.word	0x08022170

08016164 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801616e:	2300      	movs	r3, #0
 8016170:	617b      	str	r3, [r7, #20]
 8016172:	2300      	movs	r3, #0
 8016174:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d008      	beq.n	801618e <pbuf_copy+0x2a>
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d005      	beq.n	801618e <pbuf_copy+0x2a>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	891a      	ldrh	r2, [r3, #8]
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	891b      	ldrh	r3, [r3, #8]
 801618a:	429a      	cmp	r2, r3
 801618c:	d209      	bcs.n	80161a2 <pbuf_copy+0x3e>
 801618e:	4b57      	ldr	r3, [pc, #348]	; (80162ec <pbuf_copy+0x188>)
 8016190:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016194:	4956      	ldr	r1, [pc, #344]	; (80162f0 <pbuf_copy+0x18c>)
 8016196:	4857      	ldr	r0, [pc, #348]	; (80162f4 <pbuf_copy+0x190>)
 8016198:	f009 f920 	bl	801f3dc <iprintf>
 801619c:	f06f 030f 	mvn.w	r3, #15
 80161a0:	e09f      	b.n	80162e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	895b      	ldrh	r3, [r3, #10]
 80161a6:	461a      	mov	r2, r3
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	1ad2      	subs	r2, r2, r3
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	895b      	ldrh	r3, [r3, #10]
 80161b0:	4619      	mov	r1, r3
 80161b2:	693b      	ldr	r3, [r7, #16]
 80161b4:	1acb      	subs	r3, r1, r3
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d306      	bcc.n	80161c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	895b      	ldrh	r3, [r3, #10]
 80161be:	461a      	mov	r2, r3
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	1ad3      	subs	r3, r2, r3
 80161c4:	60fb      	str	r3, [r7, #12]
 80161c6:	e005      	b.n	80161d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	895b      	ldrh	r3, [r3, #10]
 80161cc:	461a      	mov	r2, r3
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	1ad3      	subs	r3, r2, r3
 80161d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	685a      	ldr	r2, [r3, #4]
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	18d0      	adds	r0, r2, r3
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	685a      	ldr	r2, [r3, #4]
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	4413      	add	r3, r2
 80161e4:	68fa      	ldr	r2, [r7, #12]
 80161e6:	4619      	mov	r1, r3
 80161e8:	f009 f8c8 	bl	801f37c <memcpy>
    offset_to += len;
 80161ec:	697a      	ldr	r2, [r7, #20]
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	4413      	add	r3, r2
 80161f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80161f4:	693a      	ldr	r2, [r7, #16]
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	4413      	add	r3, r2
 80161fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	895b      	ldrh	r3, [r3, #10]
 8016200:	461a      	mov	r2, r3
 8016202:	697b      	ldr	r3, [r7, #20]
 8016204:	4293      	cmp	r3, r2
 8016206:	d906      	bls.n	8016216 <pbuf_copy+0xb2>
 8016208:	4b38      	ldr	r3, [pc, #224]	; (80162ec <pbuf_copy+0x188>)
 801620a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801620e:	493a      	ldr	r1, [pc, #232]	; (80162f8 <pbuf_copy+0x194>)
 8016210:	4838      	ldr	r0, [pc, #224]	; (80162f4 <pbuf_copy+0x190>)
 8016212:	f009 f8e3 	bl	801f3dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	895b      	ldrh	r3, [r3, #10]
 801621a:	461a      	mov	r2, r3
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	4293      	cmp	r3, r2
 8016220:	d906      	bls.n	8016230 <pbuf_copy+0xcc>
 8016222:	4b32      	ldr	r3, [pc, #200]	; (80162ec <pbuf_copy+0x188>)
 8016224:	f240 32da 	movw	r2, #986	; 0x3da
 8016228:	4934      	ldr	r1, [pc, #208]	; (80162fc <pbuf_copy+0x198>)
 801622a:	4832      	ldr	r0, [pc, #200]	; (80162f4 <pbuf_copy+0x190>)
 801622c:	f009 f8d6 	bl	801f3dc <iprintf>
    if (offset_from >= p_from->len) {
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	895b      	ldrh	r3, [r3, #10]
 8016234:	461a      	mov	r2, r3
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	4293      	cmp	r3, r2
 801623a:	d304      	bcc.n	8016246 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801623c:	2300      	movs	r3, #0
 801623e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	895b      	ldrh	r3, [r3, #10]
 801624a:	461a      	mov	r2, r3
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	4293      	cmp	r3, r2
 8016250:	d114      	bne.n	801627c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016252:	2300      	movs	r3, #0
 8016254:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d10c      	bne.n	801627c <pbuf_copy+0x118>
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d009      	beq.n	801627c <pbuf_copy+0x118>
 8016268:	4b20      	ldr	r3, [pc, #128]	; (80162ec <pbuf_copy+0x188>)
 801626a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801626e:	4924      	ldr	r1, [pc, #144]	; (8016300 <pbuf_copy+0x19c>)
 8016270:	4820      	ldr	r0, [pc, #128]	; (80162f4 <pbuf_copy+0x190>)
 8016272:	f009 f8b3 	bl	801f3dc <iprintf>
 8016276:	f06f 030f 	mvn.w	r3, #15
 801627a:	e032      	b.n	80162e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d013      	beq.n	80162aa <pbuf_copy+0x146>
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	895a      	ldrh	r2, [r3, #10]
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	891b      	ldrh	r3, [r3, #8]
 801628a:	429a      	cmp	r2, r3
 801628c:	d10d      	bne.n	80162aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d009      	beq.n	80162aa <pbuf_copy+0x146>
 8016296:	4b15      	ldr	r3, [pc, #84]	; (80162ec <pbuf_copy+0x188>)
 8016298:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801629c:	4919      	ldr	r1, [pc, #100]	; (8016304 <pbuf_copy+0x1a0>)
 801629e:	4815      	ldr	r0, [pc, #84]	; (80162f4 <pbuf_copy+0x190>)
 80162a0:	f009 f89c 	bl	801f3dc <iprintf>
 80162a4:	f06f 0305 	mvn.w	r3, #5
 80162a8:	e01b      	b.n	80162e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d013      	beq.n	80162d8 <pbuf_copy+0x174>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	895a      	ldrh	r2, [r3, #10]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	891b      	ldrh	r3, [r3, #8]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d10d      	bne.n	80162d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d009      	beq.n	80162d8 <pbuf_copy+0x174>
 80162c4:	4b09      	ldr	r3, [pc, #36]	; (80162ec <pbuf_copy+0x188>)
 80162c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80162ca:	490e      	ldr	r1, [pc, #56]	; (8016304 <pbuf_copy+0x1a0>)
 80162cc:	4809      	ldr	r0, [pc, #36]	; (80162f4 <pbuf_copy+0x190>)
 80162ce:	f009 f885 	bl	801f3dc <iprintf>
 80162d2:	f06f 0305 	mvn.w	r3, #5
 80162d6:	e004      	b.n	80162e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	f47f af61 	bne.w	80161a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80162e0:	2300      	movs	r3, #0
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3718      	adds	r7, #24
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	08021f14 	.word	0x08021f14
 80162f0:	080221bc 	.word	0x080221bc
 80162f4:	08021f74 	.word	0x08021f74
 80162f8:	080221ec 	.word	0x080221ec
 80162fc:	08022204 	.word	0x08022204
 8016300:	08022220 	.word	0x08022220
 8016304:	08022230 	.word	0x08022230

08016308 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b088      	sub	sp, #32
 801630c:	af00      	add	r7, sp, #0
 801630e:	60f8      	str	r0, [r7, #12]
 8016310:	60b9      	str	r1, [r7, #8]
 8016312:	4611      	mov	r1, r2
 8016314:	461a      	mov	r2, r3
 8016316:	460b      	mov	r3, r1
 8016318:	80fb      	strh	r3, [r7, #6]
 801631a:	4613      	mov	r3, r2
 801631c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801631e:	2300      	movs	r3, #0
 8016320:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016322:	2300      	movs	r3, #0
 8016324:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d108      	bne.n	801633e <pbuf_copy_partial+0x36>
 801632c:	4b2b      	ldr	r3, [pc, #172]	; (80163dc <pbuf_copy_partial+0xd4>)
 801632e:	f240 420a 	movw	r2, #1034	; 0x40a
 8016332:	492b      	ldr	r1, [pc, #172]	; (80163e0 <pbuf_copy_partial+0xd8>)
 8016334:	482b      	ldr	r0, [pc, #172]	; (80163e4 <pbuf_copy_partial+0xdc>)
 8016336:	f009 f851 	bl	801f3dc <iprintf>
 801633a:	2300      	movs	r3, #0
 801633c:	e04a      	b.n	80163d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d108      	bne.n	8016356 <pbuf_copy_partial+0x4e>
 8016344:	4b25      	ldr	r3, [pc, #148]	; (80163dc <pbuf_copy_partial+0xd4>)
 8016346:	f240 420b 	movw	r2, #1035	; 0x40b
 801634a:	4927      	ldr	r1, [pc, #156]	; (80163e8 <pbuf_copy_partial+0xe0>)
 801634c:	4825      	ldr	r0, [pc, #148]	; (80163e4 <pbuf_copy_partial+0xdc>)
 801634e:	f009 f845 	bl	801f3dc <iprintf>
 8016352:	2300      	movs	r3, #0
 8016354:	e03e      	b.n	80163d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	61fb      	str	r3, [r7, #28]
 801635a:	e034      	b.n	80163c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801635c:	88bb      	ldrh	r3, [r7, #4]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d00a      	beq.n	8016378 <pbuf_copy_partial+0x70>
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	895b      	ldrh	r3, [r3, #10]
 8016366:	88ba      	ldrh	r2, [r7, #4]
 8016368:	429a      	cmp	r2, r3
 801636a:	d305      	bcc.n	8016378 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801636c:	69fb      	ldr	r3, [r7, #28]
 801636e:	895b      	ldrh	r3, [r3, #10]
 8016370:	88ba      	ldrh	r2, [r7, #4]
 8016372:	1ad3      	subs	r3, r2, r3
 8016374:	80bb      	strh	r3, [r7, #4]
 8016376:	e023      	b.n	80163c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	895a      	ldrh	r2, [r3, #10]
 801637c:	88bb      	ldrh	r3, [r7, #4]
 801637e:	1ad3      	subs	r3, r2, r3
 8016380:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016382:	8b3a      	ldrh	r2, [r7, #24]
 8016384:	88fb      	ldrh	r3, [r7, #6]
 8016386:	429a      	cmp	r2, r3
 8016388:	d901      	bls.n	801638e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801638a:	88fb      	ldrh	r3, [r7, #6]
 801638c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801638e:	8b7b      	ldrh	r3, [r7, #26]
 8016390:	68ba      	ldr	r2, [r7, #8]
 8016392:	18d0      	adds	r0, r2, r3
 8016394:	69fb      	ldr	r3, [r7, #28]
 8016396:	685a      	ldr	r2, [r3, #4]
 8016398:	88bb      	ldrh	r3, [r7, #4]
 801639a:	4413      	add	r3, r2
 801639c:	8b3a      	ldrh	r2, [r7, #24]
 801639e:	4619      	mov	r1, r3
 80163a0:	f008 ffec 	bl	801f37c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80163a4:	8afa      	ldrh	r2, [r7, #22]
 80163a6:	8b3b      	ldrh	r3, [r7, #24]
 80163a8:	4413      	add	r3, r2
 80163aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80163ac:	8b7a      	ldrh	r2, [r7, #26]
 80163ae:	8b3b      	ldrh	r3, [r7, #24]
 80163b0:	4413      	add	r3, r2
 80163b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80163b4:	88fa      	ldrh	r2, [r7, #6]
 80163b6:	8b3b      	ldrh	r3, [r7, #24]
 80163b8:	1ad3      	subs	r3, r2, r3
 80163ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80163bc:	2300      	movs	r3, #0
 80163be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80163c0:	69fb      	ldr	r3, [r7, #28]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	61fb      	str	r3, [r7, #28]
 80163c6:	88fb      	ldrh	r3, [r7, #6]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d002      	beq.n	80163d2 <pbuf_copy_partial+0xca>
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d1c4      	bne.n	801635c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80163d2:	8afb      	ldrh	r3, [r7, #22]
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3720      	adds	r7, #32
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	08021f14 	.word	0x08021f14
 80163e0:	0802225c 	.word	0x0802225c
 80163e4:	08021f74 	.word	0x08021f74
 80163e8:	0802227c 	.word	0x0802227c

080163ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b084      	sub	sp, #16
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	4603      	mov	r3, r0
 80163f4:	603a      	str	r2, [r7, #0]
 80163f6:	71fb      	strb	r3, [r7, #7]
 80163f8:	460b      	mov	r3, r1
 80163fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	8919      	ldrh	r1, [r3, #8]
 8016400:	88ba      	ldrh	r2, [r7, #4]
 8016402:	79fb      	ldrb	r3, [r7, #7]
 8016404:	4618      	mov	r0, r3
 8016406:	f7ff fa93 	bl	8015930 <pbuf_alloc>
 801640a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d101      	bne.n	8016416 <pbuf_clone+0x2a>
    return NULL;
 8016412:	2300      	movs	r3, #0
 8016414:	e011      	b.n	801643a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016416:	6839      	ldr	r1, [r7, #0]
 8016418:	68f8      	ldr	r0, [r7, #12]
 801641a:	f7ff fea3 	bl	8016164 <pbuf_copy>
 801641e:	4603      	mov	r3, r0
 8016420:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016422:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d006      	beq.n	8016438 <pbuf_clone+0x4c>
 801642a:	4b06      	ldr	r3, [pc, #24]	; (8016444 <pbuf_clone+0x58>)
 801642c:	f240 5224 	movw	r2, #1316	; 0x524
 8016430:	4905      	ldr	r1, [pc, #20]	; (8016448 <pbuf_clone+0x5c>)
 8016432:	4806      	ldr	r0, [pc, #24]	; (801644c <pbuf_clone+0x60>)
 8016434:	f008 ffd2 	bl	801f3dc <iprintf>
  return q;
 8016438:	68fb      	ldr	r3, [r7, #12]
}
 801643a:	4618      	mov	r0, r3
 801643c:	3710      	adds	r7, #16
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	08021f14 	.word	0x08021f14
 8016448:	08022388 	.word	0x08022388
 801644c:	08021f74 	.word	0x08021f74

08016450 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016454:	f009 f850 	bl	801f4f8 <rand>
 8016458:	4603      	mov	r3, r0
 801645a:	b29b      	uxth	r3, r3
 801645c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016460:	b29b      	uxth	r3, r3
 8016462:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016466:	b29a      	uxth	r2, r3
 8016468:	4b01      	ldr	r3, [pc, #4]	; (8016470 <tcp_init+0x20>)
 801646a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801646c:	bf00      	nop
 801646e:	bd80      	pop	{r7, pc}
 8016470:	20000036 	.word	0x20000036

08016474 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	7d1b      	ldrb	r3, [r3, #20]
 8016480:	2b01      	cmp	r3, #1
 8016482:	d105      	bne.n	8016490 <tcp_free+0x1c>
 8016484:	4b06      	ldr	r3, [pc, #24]	; (80164a0 <tcp_free+0x2c>)
 8016486:	22d4      	movs	r2, #212	; 0xd4
 8016488:	4906      	ldr	r1, [pc, #24]	; (80164a4 <tcp_free+0x30>)
 801648a:	4807      	ldr	r0, [pc, #28]	; (80164a8 <tcp_free+0x34>)
 801648c:	f008 ffa6 	bl	801f3dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016490:	6879      	ldr	r1, [r7, #4]
 8016492:	2001      	movs	r0, #1
 8016494:	f7fe fe8c 	bl	80151b0 <memp_free>
}
 8016498:	bf00      	nop
 801649a:	3708      	adds	r7, #8
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}
 80164a0:	08022414 	.word	0x08022414
 80164a4:	08022444 	.word	0x08022444
 80164a8:	08022458 	.word	0x08022458

080164ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b082      	sub	sp, #8
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	7d1b      	ldrb	r3, [r3, #20]
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	d105      	bne.n	80164c8 <tcp_free_listen+0x1c>
 80164bc:	4b06      	ldr	r3, [pc, #24]	; (80164d8 <tcp_free_listen+0x2c>)
 80164be:	22df      	movs	r2, #223	; 0xdf
 80164c0:	4906      	ldr	r1, [pc, #24]	; (80164dc <tcp_free_listen+0x30>)
 80164c2:	4807      	ldr	r0, [pc, #28]	; (80164e0 <tcp_free_listen+0x34>)
 80164c4:	f008 ff8a 	bl	801f3dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80164c8:	6879      	ldr	r1, [r7, #4]
 80164ca:	2002      	movs	r0, #2
 80164cc:	f7fe fe70 	bl	80151b0 <memp_free>
}
 80164d0:	bf00      	nop
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	08022414 	.word	0x08022414
 80164dc:	08022480 	.word	0x08022480
 80164e0:	08022458 	.word	0x08022458

080164e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80164e8:	f001 f85c 	bl	80175a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80164ec:	4b07      	ldr	r3, [pc, #28]	; (801650c <tcp_tmr+0x28>)
 80164ee:	781b      	ldrb	r3, [r3, #0]
 80164f0:	3301      	adds	r3, #1
 80164f2:	b2da      	uxtb	r2, r3
 80164f4:	4b05      	ldr	r3, [pc, #20]	; (801650c <tcp_tmr+0x28>)
 80164f6:	701a      	strb	r2, [r3, #0]
 80164f8:	4b04      	ldr	r3, [pc, #16]	; (801650c <tcp_tmr+0x28>)
 80164fa:	781b      	ldrb	r3, [r3, #0]
 80164fc:	f003 0301 	and.w	r3, r3, #1
 8016500:	2b00      	cmp	r3, #0
 8016502:	d001      	beq.n	8016508 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016504:	f000 fd0e 	bl	8016f24 <tcp_slowtmr>
  }
}
 8016508:	bf00      	nop
 801650a:	bd80      	pop	{r7, pc}
 801650c:	2000c7f9 	.word	0x2000c7f9

08016510 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b084      	sub	sp, #16
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d105      	bne.n	801652c <tcp_remove_listener+0x1c>
 8016520:	4b0d      	ldr	r3, [pc, #52]	; (8016558 <tcp_remove_listener+0x48>)
 8016522:	22ff      	movs	r2, #255	; 0xff
 8016524:	490d      	ldr	r1, [pc, #52]	; (801655c <tcp_remove_listener+0x4c>)
 8016526:	480e      	ldr	r0, [pc, #56]	; (8016560 <tcp_remove_listener+0x50>)
 8016528:	f008 ff58 	bl	801f3dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	60fb      	str	r3, [r7, #12]
 8016530:	e00a      	b.n	8016548 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016536:	683a      	ldr	r2, [r7, #0]
 8016538:	429a      	cmp	r2, r3
 801653a:	d102      	bne.n	8016542 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	2200      	movs	r2, #0
 8016540:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	60fb      	str	r3, [r7, #12]
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d1f1      	bne.n	8016532 <tcp_remove_listener+0x22>
    }
  }
}
 801654e:	bf00      	nop
 8016550:	bf00      	nop
 8016552:	3710      	adds	r7, #16
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	08022414 	.word	0x08022414
 801655c:	0802249c 	.word	0x0802249c
 8016560:	08022458 	.word	0x08022458

08016564 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b084      	sub	sp, #16
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d106      	bne.n	8016580 <tcp_listen_closed+0x1c>
 8016572:	4b14      	ldr	r3, [pc, #80]	; (80165c4 <tcp_listen_closed+0x60>)
 8016574:	f240 1211 	movw	r2, #273	; 0x111
 8016578:	4913      	ldr	r1, [pc, #76]	; (80165c8 <tcp_listen_closed+0x64>)
 801657a:	4814      	ldr	r0, [pc, #80]	; (80165cc <tcp_listen_closed+0x68>)
 801657c:	f008 ff2e 	bl	801f3dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	7d1b      	ldrb	r3, [r3, #20]
 8016584:	2b01      	cmp	r3, #1
 8016586:	d006      	beq.n	8016596 <tcp_listen_closed+0x32>
 8016588:	4b0e      	ldr	r3, [pc, #56]	; (80165c4 <tcp_listen_closed+0x60>)
 801658a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801658e:	4910      	ldr	r1, [pc, #64]	; (80165d0 <tcp_listen_closed+0x6c>)
 8016590:	480e      	ldr	r0, [pc, #56]	; (80165cc <tcp_listen_closed+0x68>)
 8016592:	f008 ff23 	bl	801f3dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016596:	2301      	movs	r3, #1
 8016598:	60fb      	str	r3, [r7, #12]
 801659a:	e00b      	b.n	80165b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801659c:	4a0d      	ldr	r2, [pc, #52]	; (80165d4 <tcp_listen_closed+0x70>)
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	6879      	ldr	r1, [r7, #4]
 80165a8:	4618      	mov	r0, r3
 80165aa:	f7ff ffb1 	bl	8016510 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	3301      	adds	r3, #1
 80165b2:	60fb      	str	r3, [r7, #12]
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2b03      	cmp	r3, #3
 80165b8:	d9f0      	bls.n	801659c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80165ba:	bf00      	nop
 80165bc:	bf00      	nop
 80165be:	3710      	adds	r7, #16
 80165c0:	46bd      	mov	sp, r7
 80165c2:	bd80      	pop	{r7, pc}
 80165c4:	08022414 	.word	0x08022414
 80165c8:	080224c4 	.word	0x080224c4
 80165cc:	08022458 	.word	0x08022458
 80165d0:	080224d0 	.word	0x080224d0
 80165d4:	0807b140 	.word	0x0807b140

080165d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80165d8:	b5b0      	push	{r4, r5, r7, lr}
 80165da:	b088      	sub	sp, #32
 80165dc:	af04      	add	r7, sp, #16
 80165de:	6078      	str	r0, [r7, #4]
 80165e0:	460b      	mov	r3, r1
 80165e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d106      	bne.n	80165f8 <tcp_close_shutdown+0x20>
 80165ea:	4b63      	ldr	r3, [pc, #396]	; (8016778 <tcp_close_shutdown+0x1a0>)
 80165ec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80165f0:	4962      	ldr	r1, [pc, #392]	; (801677c <tcp_close_shutdown+0x1a4>)
 80165f2:	4863      	ldr	r0, [pc, #396]	; (8016780 <tcp_close_shutdown+0x1a8>)
 80165f4:	f008 fef2 	bl	801f3dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80165f8:	78fb      	ldrb	r3, [r7, #3]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d066      	beq.n	80166cc <tcp_close_shutdown+0xf4>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	7d1b      	ldrb	r3, [r3, #20]
 8016602:	2b04      	cmp	r3, #4
 8016604:	d003      	beq.n	801660e <tcp_close_shutdown+0x36>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	7d1b      	ldrb	r3, [r3, #20]
 801660a:	2b07      	cmp	r3, #7
 801660c:	d15e      	bne.n	80166cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016612:	2b00      	cmp	r3, #0
 8016614:	d104      	bne.n	8016620 <tcp_close_shutdown+0x48>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801661a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801661e:	d055      	beq.n	80166cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	8b5b      	ldrh	r3, [r3, #26]
 8016624:	f003 0310 	and.w	r3, r3, #16
 8016628:	2b00      	cmp	r3, #0
 801662a:	d106      	bne.n	801663a <tcp_close_shutdown+0x62>
 801662c:	4b52      	ldr	r3, [pc, #328]	; (8016778 <tcp_close_shutdown+0x1a0>)
 801662e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8016632:	4954      	ldr	r1, [pc, #336]	; (8016784 <tcp_close_shutdown+0x1ac>)
 8016634:	4852      	ldr	r0, [pc, #328]	; (8016780 <tcp_close_shutdown+0x1a8>)
 8016636:	f008 fed1 	bl	801f3dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016642:	687d      	ldr	r5, [r7, #4]
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	3304      	adds	r3, #4
 8016648:	687a      	ldr	r2, [r7, #4]
 801664a:	8ad2      	ldrh	r2, [r2, #22]
 801664c:	6879      	ldr	r1, [r7, #4]
 801664e:	8b09      	ldrh	r1, [r1, #24]
 8016650:	9102      	str	r1, [sp, #8]
 8016652:	9201      	str	r2, [sp, #4]
 8016654:	9300      	str	r3, [sp, #0]
 8016656:	462b      	mov	r3, r5
 8016658:	4622      	mov	r2, r4
 801665a:	4601      	mov	r1, r0
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f005 fd8b 	bl	801c178 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f001 fb6c 	bl	8017d40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016668:	4b47      	ldr	r3, [pc, #284]	; (8016788 <tcp_close_shutdown+0x1b0>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	429a      	cmp	r2, r3
 8016670:	d105      	bne.n	801667e <tcp_close_shutdown+0xa6>
 8016672:	4b45      	ldr	r3, [pc, #276]	; (8016788 <tcp_close_shutdown+0x1b0>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	68db      	ldr	r3, [r3, #12]
 8016678:	4a43      	ldr	r2, [pc, #268]	; (8016788 <tcp_close_shutdown+0x1b0>)
 801667a:	6013      	str	r3, [r2, #0]
 801667c:	e013      	b.n	80166a6 <tcp_close_shutdown+0xce>
 801667e:	4b42      	ldr	r3, [pc, #264]	; (8016788 <tcp_close_shutdown+0x1b0>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	60fb      	str	r3, [r7, #12]
 8016684:	e00c      	b.n	80166a0 <tcp_close_shutdown+0xc8>
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	68db      	ldr	r3, [r3, #12]
 801668a:	687a      	ldr	r2, [r7, #4]
 801668c:	429a      	cmp	r2, r3
 801668e:	d104      	bne.n	801669a <tcp_close_shutdown+0xc2>
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	68da      	ldr	r2, [r3, #12]
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	60da      	str	r2, [r3, #12]
 8016698:	e005      	b.n	80166a6 <tcp_close_shutdown+0xce>
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	60fb      	str	r3, [r7, #12]
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d1ef      	bne.n	8016686 <tcp_close_shutdown+0xae>
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2200      	movs	r2, #0
 80166aa:	60da      	str	r2, [r3, #12]
 80166ac:	4b37      	ldr	r3, [pc, #220]	; (801678c <tcp_close_shutdown+0x1b4>)
 80166ae:	2201      	movs	r2, #1
 80166b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80166b2:	4b37      	ldr	r3, [pc, #220]	; (8016790 <tcp_close_shutdown+0x1b8>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	687a      	ldr	r2, [r7, #4]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d102      	bne.n	80166c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80166bc:	f004 f800 	bl	801a6c0 <tcp_trigger_input_pcb_close>
 80166c0:	e002      	b.n	80166c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7ff fed6 	bl	8016474 <tcp_free>
      }
      return ERR_OK;
 80166c8:	2300      	movs	r3, #0
 80166ca:	e050      	b.n	801676e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	7d1b      	ldrb	r3, [r3, #20]
 80166d0:	2b02      	cmp	r3, #2
 80166d2:	d03b      	beq.n	801674c <tcp_close_shutdown+0x174>
 80166d4:	2b02      	cmp	r3, #2
 80166d6:	dc44      	bgt.n	8016762 <tcp_close_shutdown+0x18a>
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d002      	beq.n	80166e2 <tcp_close_shutdown+0x10a>
 80166dc:	2b01      	cmp	r3, #1
 80166de:	d02a      	beq.n	8016736 <tcp_close_shutdown+0x15e>
 80166e0:	e03f      	b.n	8016762 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	8adb      	ldrh	r3, [r3, #22]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d021      	beq.n	801672e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80166ea:	4b2a      	ldr	r3, [pc, #168]	; (8016794 <tcp_close_shutdown+0x1bc>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d105      	bne.n	8016700 <tcp_close_shutdown+0x128>
 80166f4:	4b27      	ldr	r3, [pc, #156]	; (8016794 <tcp_close_shutdown+0x1bc>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	68db      	ldr	r3, [r3, #12]
 80166fa:	4a26      	ldr	r2, [pc, #152]	; (8016794 <tcp_close_shutdown+0x1bc>)
 80166fc:	6013      	str	r3, [r2, #0]
 80166fe:	e013      	b.n	8016728 <tcp_close_shutdown+0x150>
 8016700:	4b24      	ldr	r3, [pc, #144]	; (8016794 <tcp_close_shutdown+0x1bc>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	60bb      	str	r3, [r7, #8]
 8016706:	e00c      	b.n	8016722 <tcp_close_shutdown+0x14a>
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	68db      	ldr	r3, [r3, #12]
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	429a      	cmp	r2, r3
 8016710:	d104      	bne.n	801671c <tcp_close_shutdown+0x144>
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	68da      	ldr	r2, [r3, #12]
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	60da      	str	r2, [r3, #12]
 801671a:	e005      	b.n	8016728 <tcp_close_shutdown+0x150>
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	68db      	ldr	r3, [r3, #12]
 8016720:	60bb      	str	r3, [r7, #8]
 8016722:	68bb      	ldr	r3, [r7, #8]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d1ef      	bne.n	8016708 <tcp_close_shutdown+0x130>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2200      	movs	r2, #0
 801672c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f7ff fea0 	bl	8016474 <tcp_free>
      break;
 8016734:	e01a      	b.n	801676c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f7ff ff14 	bl	8016564 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801673c:	6879      	ldr	r1, [r7, #4]
 801673e:	4816      	ldr	r0, [pc, #88]	; (8016798 <tcp_close_shutdown+0x1c0>)
 8016740:	f001 fb4e 	bl	8017de0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f7ff feb1 	bl	80164ac <tcp_free_listen>
      break;
 801674a:	e00f      	b.n	801676c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801674c:	6879      	ldr	r1, [r7, #4]
 801674e:	480e      	ldr	r0, [pc, #56]	; (8016788 <tcp_close_shutdown+0x1b0>)
 8016750:	f001 fb46 	bl	8017de0 <tcp_pcb_remove>
 8016754:	4b0d      	ldr	r3, [pc, #52]	; (801678c <tcp_close_shutdown+0x1b4>)
 8016756:	2201      	movs	r2, #1
 8016758:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f7ff fe8a 	bl	8016474 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016760:	e004      	b.n	801676c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f000 f81a 	bl	801679c <tcp_close_shutdown_fin>
 8016768:	4603      	mov	r3, r0
 801676a:	e000      	b.n	801676e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801676c:	2300      	movs	r3, #0
}
 801676e:	4618      	mov	r0, r3
 8016770:	3710      	adds	r7, #16
 8016772:	46bd      	mov	sp, r7
 8016774:	bdb0      	pop	{r4, r5, r7, pc}
 8016776:	bf00      	nop
 8016778:	08022414 	.word	0x08022414
 801677c:	080224e8 	.word	0x080224e8
 8016780:	08022458 	.word	0x08022458
 8016784:	08022508 	.word	0x08022508
 8016788:	20014bb4 	.word	0x20014bb4
 801678c:	20014bb0 	.word	0x20014bb0
 8016790:	20014bc8 	.word	0x20014bc8
 8016794:	20014bc0 	.word	0x20014bc0
 8016798:	20014bbc 	.word	0x20014bbc

0801679c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d106      	bne.n	80167b8 <tcp_close_shutdown_fin+0x1c>
 80167aa:	4b2e      	ldr	r3, [pc, #184]	; (8016864 <tcp_close_shutdown_fin+0xc8>)
 80167ac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80167b0:	492d      	ldr	r1, [pc, #180]	; (8016868 <tcp_close_shutdown_fin+0xcc>)
 80167b2:	482e      	ldr	r0, [pc, #184]	; (801686c <tcp_close_shutdown_fin+0xd0>)
 80167b4:	f008 fe12 	bl	801f3dc <iprintf>

  switch (pcb->state) {
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	7d1b      	ldrb	r3, [r3, #20]
 80167bc:	2b07      	cmp	r3, #7
 80167be:	d020      	beq.n	8016802 <tcp_close_shutdown_fin+0x66>
 80167c0:	2b07      	cmp	r3, #7
 80167c2:	dc2b      	bgt.n	801681c <tcp_close_shutdown_fin+0x80>
 80167c4:	2b03      	cmp	r3, #3
 80167c6:	d002      	beq.n	80167ce <tcp_close_shutdown_fin+0x32>
 80167c8:	2b04      	cmp	r3, #4
 80167ca:	d00d      	beq.n	80167e8 <tcp_close_shutdown_fin+0x4c>
 80167cc:	e026      	b.n	801681c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f004 fde0 	bl	801b394 <tcp_send_fin>
 80167d4:	4603      	mov	r3, r0
 80167d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80167d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d11f      	bne.n	8016820 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2205      	movs	r2, #5
 80167e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80167e6:	e01b      	b.n	8016820 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f004 fdd3 	bl	801b394 <tcp_send_fin>
 80167ee:	4603      	mov	r3, r0
 80167f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80167f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d114      	bne.n	8016824 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2205      	movs	r2, #5
 80167fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016800:	e010      	b.n	8016824 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f004 fdc6 	bl	801b394 <tcp_send_fin>
 8016808:	4603      	mov	r3, r0
 801680a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801680c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d109      	bne.n	8016828 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2209      	movs	r2, #9
 8016818:	751a      	strb	r2, [r3, #20]
      }
      break;
 801681a:	e005      	b.n	8016828 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801681c:	2300      	movs	r3, #0
 801681e:	e01c      	b.n	801685a <tcp_close_shutdown_fin+0xbe>
      break;
 8016820:	bf00      	nop
 8016822:	e002      	b.n	801682a <tcp_close_shutdown_fin+0x8e>
      break;
 8016824:	bf00      	nop
 8016826:	e000      	b.n	801682a <tcp_close_shutdown_fin+0x8e>
      break;
 8016828:	bf00      	nop
  }

  if (err == ERR_OK) {
 801682a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d103      	bne.n	801683a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	f004 feec 	bl	801b610 <tcp_output>
 8016838:	e00d      	b.n	8016856 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801683a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016842:	d108      	bne.n	8016856 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	8b5b      	ldrh	r3, [r3, #26]
 8016848:	f043 0308 	orr.w	r3, r3, #8
 801684c:	b29a      	uxth	r2, r3
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016852:	2300      	movs	r3, #0
 8016854:	e001      	b.n	801685a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8016856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801685a:	4618      	mov	r0, r3
 801685c:	3710      	adds	r7, #16
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	08022414 	.word	0x08022414
 8016868:	080224c4 	.word	0x080224c4
 801686c:	08022458 	.word	0x08022458

08016870 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d109      	bne.n	8016892 <tcp_close+0x22>
 801687e:	4b0f      	ldr	r3, [pc, #60]	; (80168bc <tcp_close+0x4c>)
 8016880:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016884:	490e      	ldr	r1, [pc, #56]	; (80168c0 <tcp_close+0x50>)
 8016886:	480f      	ldr	r0, [pc, #60]	; (80168c4 <tcp_close+0x54>)
 8016888:	f008 fda8 	bl	801f3dc <iprintf>
 801688c:	f06f 030f 	mvn.w	r3, #15
 8016890:	e00f      	b.n	80168b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	7d1b      	ldrb	r3, [r3, #20]
 8016896:	2b01      	cmp	r3, #1
 8016898:	d006      	beq.n	80168a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	8b5b      	ldrh	r3, [r3, #26]
 801689e:	f043 0310 	orr.w	r3, r3, #16
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80168a8:	2101      	movs	r1, #1
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f7ff fe94 	bl	80165d8 <tcp_close_shutdown>
 80168b0:	4603      	mov	r3, r0
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3708      	adds	r7, #8
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	08022414 	.word	0x08022414
 80168c0:	08022524 	.word	0x08022524
 80168c4:	08022458 	.word	0x08022458

080168c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b08e      	sub	sp, #56	; 0x38
 80168cc:	af04      	add	r7, sp, #16
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d107      	bne.n	80168e8 <tcp_abandon+0x20>
 80168d8:	4b52      	ldr	r3, [pc, #328]	; (8016a24 <tcp_abandon+0x15c>)
 80168da:	f240 223d 	movw	r2, #573	; 0x23d
 80168de:	4952      	ldr	r1, [pc, #328]	; (8016a28 <tcp_abandon+0x160>)
 80168e0:	4852      	ldr	r0, [pc, #328]	; (8016a2c <tcp_abandon+0x164>)
 80168e2:	f008 fd7b 	bl	801f3dc <iprintf>
 80168e6:	e099      	b.n	8016a1c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	7d1b      	ldrb	r3, [r3, #20]
 80168ec:	2b01      	cmp	r3, #1
 80168ee:	d106      	bne.n	80168fe <tcp_abandon+0x36>
 80168f0:	4b4c      	ldr	r3, [pc, #304]	; (8016a24 <tcp_abandon+0x15c>)
 80168f2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80168f6:	494e      	ldr	r1, [pc, #312]	; (8016a30 <tcp_abandon+0x168>)
 80168f8:	484c      	ldr	r0, [pc, #304]	; (8016a2c <tcp_abandon+0x164>)
 80168fa:	f008 fd6f 	bl	801f3dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	7d1b      	ldrb	r3, [r3, #20]
 8016902:	2b0a      	cmp	r3, #10
 8016904:	d107      	bne.n	8016916 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016906:	6879      	ldr	r1, [r7, #4]
 8016908:	484a      	ldr	r0, [pc, #296]	; (8016a34 <tcp_abandon+0x16c>)
 801690a:	f001 fa69 	bl	8017de0 <tcp_pcb_remove>
    tcp_free(pcb);
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f7ff fdb0 	bl	8016474 <tcp_free>
 8016914:	e082      	b.n	8016a1c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016916:	2300      	movs	r3, #0
 8016918:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801691a:	2300      	movs	r3, #0
 801691c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016922:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016928:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016930:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	691b      	ldr	r3, [r3, #16]
 8016936:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	7d1b      	ldrb	r3, [r3, #20]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d126      	bne.n	801698e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	8adb      	ldrh	r3, [r3, #22]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d02e      	beq.n	80169a6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016948:	4b3b      	ldr	r3, [pc, #236]	; (8016a38 <tcp_abandon+0x170>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	687a      	ldr	r2, [r7, #4]
 801694e:	429a      	cmp	r2, r3
 8016950:	d105      	bne.n	801695e <tcp_abandon+0x96>
 8016952:	4b39      	ldr	r3, [pc, #228]	; (8016a38 <tcp_abandon+0x170>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	68db      	ldr	r3, [r3, #12]
 8016958:	4a37      	ldr	r2, [pc, #220]	; (8016a38 <tcp_abandon+0x170>)
 801695a:	6013      	str	r3, [r2, #0]
 801695c:	e013      	b.n	8016986 <tcp_abandon+0xbe>
 801695e:	4b36      	ldr	r3, [pc, #216]	; (8016a38 <tcp_abandon+0x170>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	61fb      	str	r3, [r7, #28]
 8016964:	e00c      	b.n	8016980 <tcp_abandon+0xb8>
 8016966:	69fb      	ldr	r3, [r7, #28]
 8016968:	68db      	ldr	r3, [r3, #12]
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	429a      	cmp	r2, r3
 801696e:	d104      	bne.n	801697a <tcp_abandon+0xb2>
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	68da      	ldr	r2, [r3, #12]
 8016974:	69fb      	ldr	r3, [r7, #28]
 8016976:	60da      	str	r2, [r3, #12]
 8016978:	e005      	b.n	8016986 <tcp_abandon+0xbe>
 801697a:	69fb      	ldr	r3, [r7, #28]
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	61fb      	str	r3, [r7, #28]
 8016980:	69fb      	ldr	r3, [r7, #28]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d1ef      	bne.n	8016966 <tcp_abandon+0x9e>
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	2200      	movs	r2, #0
 801698a:	60da      	str	r2, [r3, #12]
 801698c:	e00b      	b.n	80169a6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	8adb      	ldrh	r3, [r3, #22]
 8016996:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016998:	6879      	ldr	r1, [r7, #4]
 801699a:	4828      	ldr	r0, [pc, #160]	; (8016a3c <tcp_abandon+0x174>)
 801699c:	f001 fa20 	bl	8017de0 <tcp_pcb_remove>
 80169a0:	4b27      	ldr	r3, [pc, #156]	; (8016a40 <tcp_abandon+0x178>)
 80169a2:	2201      	movs	r2, #1
 80169a4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d004      	beq.n	80169b8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169b2:	4618      	mov	r0, r3
 80169b4:	f000 fed6 	bl	8017764 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d004      	beq.n	80169ca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c4:	4618      	mov	r0, r3
 80169c6:	f000 fecd 	bl	8017764 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d004      	beq.n	80169dc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169d6:	4618      	mov	r0, r3
 80169d8:	f000 fec4 	bl	8017764 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80169dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00e      	beq.n	8016a00 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80169e2:	6879      	ldr	r1, [r7, #4]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	3304      	adds	r3, #4
 80169e8:	687a      	ldr	r2, [r7, #4]
 80169ea:	8b12      	ldrh	r2, [r2, #24]
 80169ec:	9202      	str	r2, [sp, #8]
 80169ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80169f0:	9201      	str	r2, [sp, #4]
 80169f2:	9300      	str	r3, [sp, #0]
 80169f4:	460b      	mov	r3, r1
 80169f6:	697a      	ldr	r2, [r7, #20]
 80169f8:	69b9      	ldr	r1, [r7, #24]
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f005 fbbc 	bl	801c178 <tcp_rst>
    }
    last_state = pcb->state;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	7d1b      	ldrb	r3, [r3, #20]
 8016a04:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016a06:	6878      	ldr	r0, [r7, #4]
 8016a08:	f7ff fd34 	bl	8016474 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d004      	beq.n	8016a1c <tcp_abandon+0x154>
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	f06f 010c 	mvn.w	r1, #12
 8016a18:	68f8      	ldr	r0, [r7, #12]
 8016a1a:	4798      	blx	r3
  }
}
 8016a1c:	3728      	adds	r7, #40	; 0x28
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	08022414 	.word	0x08022414
 8016a28:	08022558 	.word	0x08022558
 8016a2c:	08022458 	.word	0x08022458
 8016a30:	08022574 	.word	0x08022574
 8016a34:	20014bc4 	.word	0x20014bc4
 8016a38:	20014bc0 	.word	0x20014bc0
 8016a3c:	20014bb4 	.word	0x20014bb4
 8016a40:	20014bb0 	.word	0x20014bb0

08016a44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b082      	sub	sp, #8
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016a4c:	2101      	movs	r1, #1
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f7ff ff3a 	bl	80168c8 <tcp_abandon>
}
 8016a54:	bf00      	nop
 8016a56:	3708      	adds	r7, #8
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b088      	sub	sp, #32
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	60f8      	str	r0, [r7, #12]
 8016a64:	60b9      	str	r1, [r7, #8]
 8016a66:	4613      	mov	r3, r2
 8016a68:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8016a6a:	2304      	movs	r3, #4
 8016a6c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d101      	bne.n	8016a78 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016a74:	4b3e      	ldr	r3, [pc, #248]	; (8016b70 <tcp_bind+0x114>)
 8016a76:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d109      	bne.n	8016a92 <tcp_bind+0x36>
 8016a7e:	4b3d      	ldr	r3, [pc, #244]	; (8016b74 <tcp_bind+0x118>)
 8016a80:	f240 22a9 	movw	r2, #681	; 0x2a9
 8016a84:	493c      	ldr	r1, [pc, #240]	; (8016b78 <tcp_bind+0x11c>)
 8016a86:	483d      	ldr	r0, [pc, #244]	; (8016b7c <tcp_bind+0x120>)
 8016a88:	f008 fca8 	bl	801f3dc <iprintf>
 8016a8c:	f06f 030f 	mvn.w	r3, #15
 8016a90:	e06a      	b.n	8016b68 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	7d1b      	ldrb	r3, [r3, #20]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d009      	beq.n	8016aae <tcp_bind+0x52>
 8016a9a:	4b36      	ldr	r3, [pc, #216]	; (8016b74 <tcp_bind+0x118>)
 8016a9c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016aa0:	4937      	ldr	r1, [pc, #220]	; (8016b80 <tcp_bind+0x124>)
 8016aa2:	4836      	ldr	r0, [pc, #216]	; (8016b7c <tcp_bind+0x120>)
 8016aa4:	f008 fc9a 	bl	801f3dc <iprintf>
 8016aa8:	f06f 0305 	mvn.w	r3, #5
 8016aac:	e05c      	b.n	8016b68 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8016aae:	88fb      	ldrh	r3, [r7, #6]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d109      	bne.n	8016ac8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8016ab4:	f000 f9f0 	bl	8016e98 <tcp_new_port>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016abc:	88fb      	ldrh	r3, [r7, #6]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d135      	bne.n	8016b2e <tcp_bind+0xd2>
      return ERR_BUF;
 8016ac2:	f06f 0301 	mvn.w	r3, #1
 8016ac6:	e04f      	b.n	8016b68 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016ac8:	2300      	movs	r3, #0
 8016aca:	61fb      	str	r3, [r7, #28]
 8016acc:	e02b      	b.n	8016b26 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016ace:	4a2d      	ldr	r2, [pc, #180]	; (8016b84 <tcp_bind+0x128>)
 8016ad0:	69fb      	ldr	r3, [r7, #28]
 8016ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	61bb      	str	r3, [r7, #24]
 8016ada:	e01e      	b.n	8016b1a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016adc:	69bb      	ldr	r3, [r7, #24]
 8016ade:	8adb      	ldrh	r3, [r3, #22]
 8016ae0:	88fa      	ldrh	r2, [r7, #6]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d116      	bne.n	8016b14 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016ae6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d010      	beq.n	8016b0e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016aec:	69bb      	ldr	r3, [r7, #24]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d00c      	beq.n	8016b0e <tcp_bind+0xb2>
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d009      	beq.n	8016b0e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d005      	beq.n	8016b0e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016b02:	69bb      	ldr	r3, [r7, #24]
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d102      	bne.n	8016b14 <tcp_bind+0xb8>
              return ERR_USE;
 8016b0e:	f06f 0307 	mvn.w	r3, #7
 8016b12:	e029      	b.n	8016b68 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016b14:	69bb      	ldr	r3, [r7, #24]
 8016b16:	68db      	ldr	r3, [r3, #12]
 8016b18:	61bb      	str	r3, [r7, #24]
 8016b1a:	69bb      	ldr	r3, [r7, #24]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d1dd      	bne.n	8016adc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016b20:	69fb      	ldr	r3, [r7, #28]
 8016b22:	3301      	adds	r3, #1
 8016b24:	61fb      	str	r3, [r7, #28]
 8016b26:	69fa      	ldr	r2, [r7, #28]
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	429a      	cmp	r2, r3
 8016b2c:	dbcf      	blt.n	8016ace <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8016b2e:	68bb      	ldr	r3, [r7, #8]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d00c      	beq.n	8016b4e <tcp_bind+0xf2>
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d008      	beq.n	8016b4e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d002      	beq.n	8016b48 <tcp_bind+0xec>
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	e000      	b.n	8016b4a <tcp_bind+0xee>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	68fa      	ldr	r2, [r7, #12]
 8016b4c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	88fa      	ldrh	r2, [r7, #6]
 8016b52:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016b54:	4b0c      	ldr	r3, [pc, #48]	; (8016b88 <tcp_bind+0x12c>)
 8016b56:	681a      	ldr	r2, [r3, #0]
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	60da      	str	r2, [r3, #12]
 8016b5c:	4a0a      	ldr	r2, [pc, #40]	; (8016b88 <tcp_bind+0x12c>)
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	6013      	str	r3, [r2, #0]
 8016b62:	f005 fccb 	bl	801c4fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016b66:	2300      	movs	r3, #0
}
 8016b68:	4618      	mov	r0, r3
 8016b6a:	3720      	adds	r7, #32
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}
 8016b70:	0807b168 	.word	0x0807b168
 8016b74:	08022414 	.word	0x08022414
 8016b78:	080225a8 	.word	0x080225a8
 8016b7c:	08022458 	.word	0x08022458
 8016b80:	080225c0 	.word	0x080225c0
 8016b84:	0807b140 	.word	0x0807b140
 8016b88:	20014bc0 	.word	0x20014bc0

08016b8c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	60f8      	str	r0, [r7, #12]
 8016b94:	60b9      	str	r1, [r7, #8]
 8016b96:	4613      	mov	r3, r2
 8016b98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d106      	bne.n	8016bae <tcp_accept_null+0x22>
 8016ba0:	4b07      	ldr	r3, [pc, #28]	; (8016bc0 <tcp_accept_null+0x34>)
 8016ba2:	f240 320f 	movw	r2, #783	; 0x30f
 8016ba6:	4907      	ldr	r1, [pc, #28]	; (8016bc4 <tcp_accept_null+0x38>)
 8016ba8:	4807      	ldr	r0, [pc, #28]	; (8016bc8 <tcp_accept_null+0x3c>)
 8016baa:	f008 fc17 	bl	801f3dc <iprintf>

  tcp_abort(pcb);
 8016bae:	68b8      	ldr	r0, [r7, #8]
 8016bb0:	f7ff ff48 	bl	8016a44 <tcp_abort>

  return ERR_ABRT;
 8016bb4:	f06f 030c 	mvn.w	r3, #12
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3710      	adds	r7, #16
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}
 8016bc0:	08022414 	.word	0x08022414
 8016bc4:	080225e8 	.word	0x080225e8
 8016bc8:	08022458 	.word	0x08022458

08016bcc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016bd8:	78fb      	ldrb	r3, [r7, #3]
 8016bda:	2200      	movs	r2, #0
 8016bdc:	4619      	mov	r1, r3
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f000 f806 	bl	8016bf0 <tcp_listen_with_backlog_and_err>
 8016be4:	4603      	mov	r3, r0
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3708      	adds	r7, #8
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
	...

08016bf0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b088      	sub	sp, #32
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d109      	bne.n	8016c1c <tcp_listen_with_backlog_and_err+0x2c>
 8016c08:	4b47      	ldr	r3, [pc, #284]	; (8016d28 <tcp_listen_with_backlog_and_err+0x138>)
 8016c0a:	f240 3259 	movw	r2, #857	; 0x359
 8016c0e:	4947      	ldr	r1, [pc, #284]	; (8016d2c <tcp_listen_with_backlog_and_err+0x13c>)
 8016c10:	4847      	ldr	r0, [pc, #284]	; (8016d30 <tcp_listen_with_backlog_and_err+0x140>)
 8016c12:	f008 fbe3 	bl	801f3dc <iprintf>
 8016c16:	23f0      	movs	r3, #240	; 0xf0
 8016c18:	76fb      	strb	r3, [r7, #27]
 8016c1a:	e079      	b.n	8016d10 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	7d1b      	ldrb	r3, [r3, #20]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d009      	beq.n	8016c38 <tcp_listen_with_backlog_and_err+0x48>
 8016c24:	4b40      	ldr	r3, [pc, #256]	; (8016d28 <tcp_listen_with_backlog_and_err+0x138>)
 8016c26:	f240 325a 	movw	r2, #858	; 0x35a
 8016c2a:	4942      	ldr	r1, [pc, #264]	; (8016d34 <tcp_listen_with_backlog_and_err+0x144>)
 8016c2c:	4840      	ldr	r0, [pc, #256]	; (8016d30 <tcp_listen_with_backlog_and_err+0x140>)
 8016c2e:	f008 fbd5 	bl	801f3dc <iprintf>
 8016c32:	23f1      	movs	r3, #241	; 0xf1
 8016c34:	76fb      	strb	r3, [r7, #27]
 8016c36:	e06b      	b.n	8016d10 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	7d1b      	ldrb	r3, [r3, #20]
 8016c3c:	2b01      	cmp	r3, #1
 8016c3e:	d104      	bne.n	8016c4a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016c44:	23f7      	movs	r3, #247	; 0xf7
 8016c46:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016c48:	e062      	b.n	8016d10 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016c4a:	2002      	movs	r0, #2
 8016c4c:	f7fe fa5e 	bl	801510c <memp_malloc>
 8016c50:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d102      	bne.n	8016c5e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8016c58:	23ff      	movs	r3, #255	; 0xff
 8016c5a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016c5c:	e058      	b.n	8016d10 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	691a      	ldr	r2, [r3, #16]
 8016c62:	69fb      	ldr	r3, [r7, #28]
 8016c64:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	8ada      	ldrh	r2, [r3, #22]
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8016c6e:	69fb      	ldr	r3, [r7, #28]
 8016c70:	2201      	movs	r2, #1
 8016c72:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	7d5a      	ldrb	r2, [r3, #21]
 8016c78:	69fb      	ldr	r3, [r7, #28]
 8016c7a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	7a5a      	ldrb	r2, [r3, #9]
 8016c80:	69fb      	ldr	r3, [r7, #28]
 8016c82:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016c84:	69fb      	ldr	r3, [r7, #28]
 8016c86:	2200      	movs	r2, #0
 8016c88:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	7ada      	ldrb	r2, [r3, #11]
 8016c8e:	69fb      	ldr	r3, [r7, #28]
 8016c90:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	7a9a      	ldrb	r2, [r3, #10]
 8016c96:	69fb      	ldr	r3, [r7, #28]
 8016c98:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	69fb      	ldr	r3, [r7, #28]
 8016ca0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	8adb      	ldrh	r3, [r3, #22]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d021      	beq.n	8016cee <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016caa:	4b23      	ldr	r3, [pc, #140]	; (8016d38 <tcp_listen_with_backlog_and_err+0x148>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	68fa      	ldr	r2, [r7, #12]
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	d105      	bne.n	8016cc0 <tcp_listen_with_backlog_and_err+0xd0>
 8016cb4:	4b20      	ldr	r3, [pc, #128]	; (8016d38 <tcp_listen_with_backlog_and_err+0x148>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	68db      	ldr	r3, [r3, #12]
 8016cba:	4a1f      	ldr	r2, [pc, #124]	; (8016d38 <tcp_listen_with_backlog_and_err+0x148>)
 8016cbc:	6013      	str	r3, [r2, #0]
 8016cbe:	e013      	b.n	8016ce8 <tcp_listen_with_backlog_and_err+0xf8>
 8016cc0:	4b1d      	ldr	r3, [pc, #116]	; (8016d38 <tcp_listen_with_backlog_and_err+0x148>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	617b      	str	r3, [r7, #20]
 8016cc6:	e00c      	b.n	8016ce2 <tcp_listen_with_backlog_and_err+0xf2>
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	68db      	ldr	r3, [r3, #12]
 8016ccc:	68fa      	ldr	r2, [r7, #12]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d104      	bne.n	8016cdc <tcp_listen_with_backlog_and_err+0xec>
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	68da      	ldr	r2, [r3, #12]
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	60da      	str	r2, [r3, #12]
 8016cda:	e005      	b.n	8016ce8 <tcp_listen_with_backlog_and_err+0xf8>
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	617b      	str	r3, [r7, #20]
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d1ef      	bne.n	8016cc8 <tcp_listen_with_backlog_and_err+0xd8>
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	2200      	movs	r2, #0
 8016cec:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016cee:	68f8      	ldr	r0, [r7, #12]
 8016cf0:	f7ff fbc0 	bl	8016474 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016cf4:	69fb      	ldr	r3, [r7, #28]
 8016cf6:	4a11      	ldr	r2, [pc, #68]	; (8016d3c <tcp_listen_with_backlog_and_err+0x14c>)
 8016cf8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016cfa:	4b11      	ldr	r3, [pc, #68]	; (8016d40 <tcp_listen_with_backlog_and_err+0x150>)
 8016cfc:	681a      	ldr	r2, [r3, #0]
 8016cfe:	69fb      	ldr	r3, [r7, #28]
 8016d00:	60da      	str	r2, [r3, #12]
 8016d02:	4a0f      	ldr	r2, [pc, #60]	; (8016d40 <tcp_listen_with_backlog_and_err+0x150>)
 8016d04:	69fb      	ldr	r3, [r7, #28]
 8016d06:	6013      	str	r3, [r2, #0]
 8016d08:	f005 fbf8 	bl	801c4fc <tcp_timer_needed>
  res = ERR_OK;
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d002      	beq.n	8016d1c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	7efa      	ldrb	r2, [r7, #27]
 8016d1a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016d1c:	69fb      	ldr	r3, [r7, #28]
}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	3720      	adds	r7, #32
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}
 8016d26:	bf00      	nop
 8016d28:	08022414 	.word	0x08022414
 8016d2c:	08022608 	.word	0x08022608
 8016d30:	08022458 	.word	0x08022458
 8016d34:	08022638 	.word	0x08022638
 8016d38:	20014bc0 	.word	0x20014bc0
 8016d3c:	08016b8d 	.word	0x08016b8d
 8016d40:	20014bbc 	.word	0x20014bbc

08016d44 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b084      	sub	sp, #16
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d106      	bne.n	8016d60 <tcp_update_rcv_ann_wnd+0x1c>
 8016d52:	4b25      	ldr	r3, [pc, #148]	; (8016de8 <tcp_update_rcv_ann_wnd+0xa4>)
 8016d54:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016d58:	4924      	ldr	r1, [pc, #144]	; (8016dec <tcp_update_rcv_ann_wnd+0xa8>)
 8016d5a:	4825      	ldr	r0, [pc, #148]	; (8016df0 <tcp_update_rcv_ann_wnd+0xac>)
 8016d5c:	f008 fb3e 	bl	801f3dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016d68:	4413      	add	r3, r2
 8016d6a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d70:	687a      	ldr	r2, [r7, #4]
 8016d72:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016d74:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016d78:	bf28      	it	cs
 8016d7a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016d7e:	b292      	uxth	r2, r2
 8016d80:	4413      	add	r3, r2
 8016d82:	68fa      	ldr	r2, [r7, #12]
 8016d84:	1ad3      	subs	r3, r2, r3
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	db08      	blt.n	8016d9c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d96:	68fa      	ldr	r2, [r7, #12]
 8016d98:	1ad3      	subs	r3, r2, r3
 8016d9a:	e020      	b.n	8016dde <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016da4:	1ad3      	subs	r3, r2, r3
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	dd03      	ble.n	8016db2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016db0:	e014      	b.n	8016ddc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dba:	1ad3      	subs	r3, r2, r3
 8016dbc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dc4:	d306      	bcc.n	8016dd4 <tcp_update_rcv_ann_wnd+0x90>
 8016dc6:	4b08      	ldr	r3, [pc, #32]	; (8016de8 <tcp_update_rcv_ann_wnd+0xa4>)
 8016dc8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016dcc:	4909      	ldr	r1, [pc, #36]	; (8016df4 <tcp_update_rcv_ann_wnd+0xb0>)
 8016dce:	4808      	ldr	r0, [pc, #32]	; (8016df0 <tcp_update_rcv_ann_wnd+0xac>)
 8016dd0:	f008 fb04 	bl	801f3dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016dd4:	68bb      	ldr	r3, [r7, #8]
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016ddc:	2300      	movs	r3, #0
  }
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3710      	adds	r7, #16
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
 8016de6:	bf00      	nop
 8016de8:	08022414 	.word	0x08022414
 8016dec:	08022670 	.word	0x08022670
 8016df0:	08022458 	.word	0x08022458
 8016df4:	08022694 	.word	0x08022694

08016df8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b084      	sub	sp, #16
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	460b      	mov	r3, r1
 8016e02:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d107      	bne.n	8016e1a <tcp_recved+0x22>
 8016e0a:	4b1f      	ldr	r3, [pc, #124]	; (8016e88 <tcp_recved+0x90>)
 8016e0c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016e10:	491e      	ldr	r1, [pc, #120]	; (8016e8c <tcp_recved+0x94>)
 8016e12:	481f      	ldr	r0, [pc, #124]	; (8016e90 <tcp_recved+0x98>)
 8016e14:	f008 fae2 	bl	801f3dc <iprintf>
 8016e18:	e032      	b.n	8016e80 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	7d1b      	ldrb	r3, [r3, #20]
 8016e1e:	2b01      	cmp	r3, #1
 8016e20:	d106      	bne.n	8016e30 <tcp_recved+0x38>
 8016e22:	4b19      	ldr	r3, [pc, #100]	; (8016e88 <tcp_recved+0x90>)
 8016e24:	f240 32d2 	movw	r2, #978	; 0x3d2
 8016e28:	491a      	ldr	r1, [pc, #104]	; (8016e94 <tcp_recved+0x9c>)
 8016e2a:	4819      	ldr	r0, [pc, #100]	; (8016e90 <tcp_recved+0x98>)
 8016e2c:	f008 fad6 	bl	801f3dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e34:	887b      	ldrh	r3, [r7, #2]
 8016e36:	4413      	add	r3, r2
 8016e38:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016e3a:	89fb      	ldrh	r3, [r7, #14]
 8016e3c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016e40:	d804      	bhi.n	8016e4c <tcp_recved+0x54>
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e46:	89fa      	ldrh	r2, [r7, #14]
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d204      	bcs.n	8016e56 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016e52:	851a      	strh	r2, [r3, #40]	; 0x28
 8016e54:	e002      	b.n	8016e5c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	89fa      	ldrh	r2, [r7, #14]
 8016e5a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f7ff ff71 	bl	8016d44 <tcp_update_rcv_ann_wnd>
 8016e62:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016e64:	68bb      	ldr	r3, [r7, #8]
 8016e66:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016e6a:	d309      	bcc.n	8016e80 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	8b5b      	ldrh	r3, [r3, #26]
 8016e70:	f043 0302 	orr.w	r3, r3, #2
 8016e74:	b29a      	uxth	r2, r3
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f004 fbc8 	bl	801b610 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	08022414 	.word	0x08022414
 8016e8c:	080226b0 	.word	0x080226b0
 8016e90:	08022458 	.word	0x08022458
 8016e94:	080226c8 	.word	0x080226c8

08016e98 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016e98:	b480      	push	{r7}
 8016e9a:	b083      	sub	sp, #12
 8016e9c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016ea2:	4b1e      	ldr	r3, [pc, #120]	; (8016f1c <tcp_new_port+0x84>)
 8016ea4:	881b      	ldrh	r3, [r3, #0]
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	b29a      	uxth	r2, r3
 8016eaa:	4b1c      	ldr	r3, [pc, #112]	; (8016f1c <tcp_new_port+0x84>)
 8016eac:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016eae:	4b1b      	ldr	r3, [pc, #108]	; (8016f1c <tcp_new_port+0x84>)
 8016eb0:	881b      	ldrh	r3, [r3, #0]
 8016eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016eb6:	4293      	cmp	r3, r2
 8016eb8:	d103      	bne.n	8016ec2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016eba:	4b18      	ldr	r3, [pc, #96]	; (8016f1c <tcp_new_port+0x84>)
 8016ebc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016ec0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	71fb      	strb	r3, [r7, #7]
 8016ec6:	e01e      	b.n	8016f06 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016ec8:	79fb      	ldrb	r3, [r7, #7]
 8016eca:	4a15      	ldr	r2, [pc, #84]	; (8016f20 <tcp_new_port+0x88>)
 8016ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	603b      	str	r3, [r7, #0]
 8016ed4:	e011      	b.n	8016efa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016ed6:	683b      	ldr	r3, [r7, #0]
 8016ed8:	8ada      	ldrh	r2, [r3, #22]
 8016eda:	4b10      	ldr	r3, [pc, #64]	; (8016f1c <tcp_new_port+0x84>)
 8016edc:	881b      	ldrh	r3, [r3, #0]
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	d108      	bne.n	8016ef4 <tcp_new_port+0x5c>
        n++;
 8016ee2:	88bb      	ldrh	r3, [r7, #4]
 8016ee4:	3301      	adds	r3, #1
 8016ee6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016ee8:	88bb      	ldrh	r3, [r7, #4]
 8016eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016eee:	d3d8      	bcc.n	8016ea2 <tcp_new_port+0xa>
          return 0;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	e00d      	b.n	8016f10 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	603b      	str	r3, [r7, #0]
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d1ea      	bne.n	8016ed6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016f00:	79fb      	ldrb	r3, [r7, #7]
 8016f02:	3301      	adds	r3, #1
 8016f04:	71fb      	strb	r3, [r7, #7]
 8016f06:	79fb      	ldrb	r3, [r7, #7]
 8016f08:	2b03      	cmp	r3, #3
 8016f0a:	d9dd      	bls.n	8016ec8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016f0c:	4b03      	ldr	r3, [pc, #12]	; (8016f1c <tcp_new_port+0x84>)
 8016f0e:	881b      	ldrh	r3, [r3, #0]
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	370c      	adds	r7, #12
 8016f14:	46bd      	mov	sp, r7
 8016f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1a:	4770      	bx	lr
 8016f1c:	20000036 	.word	0x20000036
 8016f20:	0807b140 	.word	0x0807b140

08016f24 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016f24:	b5b0      	push	{r4, r5, r7, lr}
 8016f26:	b090      	sub	sp, #64	; 0x40
 8016f28:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016f30:	4b94      	ldr	r3, [pc, #592]	; (8017184 <tcp_slowtmr+0x260>)
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	3301      	adds	r3, #1
 8016f36:	4a93      	ldr	r2, [pc, #588]	; (8017184 <tcp_slowtmr+0x260>)
 8016f38:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016f3a:	4b93      	ldr	r3, [pc, #588]	; (8017188 <tcp_slowtmr+0x264>)
 8016f3c:	781b      	ldrb	r3, [r3, #0]
 8016f3e:	3301      	adds	r3, #1
 8016f40:	b2da      	uxtb	r2, r3
 8016f42:	4b91      	ldr	r3, [pc, #580]	; (8017188 <tcp_slowtmr+0x264>)
 8016f44:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016f46:	2300      	movs	r3, #0
 8016f48:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016f4a:	4b90      	ldr	r3, [pc, #576]	; (801718c <tcp_slowtmr+0x268>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016f50:	e29f      	b.n	8017492 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f54:	7d1b      	ldrb	r3, [r3, #20]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d106      	bne.n	8016f68 <tcp_slowtmr+0x44>
 8016f5a:	4b8d      	ldr	r3, [pc, #564]	; (8017190 <tcp_slowtmr+0x26c>)
 8016f5c:	f240 42be 	movw	r2, #1214	; 0x4be
 8016f60:	498c      	ldr	r1, [pc, #560]	; (8017194 <tcp_slowtmr+0x270>)
 8016f62:	488d      	ldr	r0, [pc, #564]	; (8017198 <tcp_slowtmr+0x274>)
 8016f64:	f008 fa3a 	bl	801f3dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f6a:	7d1b      	ldrb	r3, [r3, #20]
 8016f6c:	2b01      	cmp	r3, #1
 8016f6e:	d106      	bne.n	8016f7e <tcp_slowtmr+0x5a>
 8016f70:	4b87      	ldr	r3, [pc, #540]	; (8017190 <tcp_slowtmr+0x26c>)
 8016f72:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016f76:	4989      	ldr	r1, [pc, #548]	; (801719c <tcp_slowtmr+0x278>)
 8016f78:	4887      	ldr	r0, [pc, #540]	; (8017198 <tcp_slowtmr+0x274>)
 8016f7a:	f008 fa2f 	bl	801f3dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f80:	7d1b      	ldrb	r3, [r3, #20]
 8016f82:	2b0a      	cmp	r3, #10
 8016f84:	d106      	bne.n	8016f94 <tcp_slowtmr+0x70>
 8016f86:	4b82      	ldr	r3, [pc, #520]	; (8017190 <tcp_slowtmr+0x26c>)
 8016f88:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016f8c:	4984      	ldr	r1, [pc, #528]	; (80171a0 <tcp_slowtmr+0x27c>)
 8016f8e:	4882      	ldr	r0, [pc, #520]	; (8017198 <tcp_slowtmr+0x274>)
 8016f90:	f008 fa24 	bl	801f3dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f96:	7f9a      	ldrb	r2, [r3, #30]
 8016f98:	4b7b      	ldr	r3, [pc, #492]	; (8017188 <tcp_slowtmr+0x264>)
 8016f9a:	781b      	ldrb	r3, [r3, #0]
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d105      	bne.n	8016fac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa6:	68db      	ldr	r3, [r3, #12]
 8016fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016faa:	e272      	b.n	8017492 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016fac:	4b76      	ldr	r3, [pc, #472]	; (8017188 <tcp_slowtmr+0x264>)
 8016fae:	781a      	ldrb	r2, [r3, #0]
 8016fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016fba:	2300      	movs	r3, #0
 8016fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc2:	7d1b      	ldrb	r3, [r3, #20]
 8016fc4:	2b02      	cmp	r3, #2
 8016fc6:	d10a      	bne.n	8016fde <tcp_slowtmr+0xba>
 8016fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016fce:	2b05      	cmp	r3, #5
 8016fd0:	d905      	bls.n	8016fde <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016fdc:	e11e      	b.n	801721c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016fe4:	2b0b      	cmp	r3, #11
 8016fe6:	d905      	bls.n	8016ff4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fec:	3301      	adds	r3, #1
 8016fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ff2:	e113      	b.n	801721c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d075      	beq.n	80170ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017002:	2b00      	cmp	r3, #0
 8017004:	d006      	beq.n	8017014 <tcp_slowtmr+0xf0>
 8017006:	4b62      	ldr	r3, [pc, #392]	; (8017190 <tcp_slowtmr+0x26c>)
 8017008:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801700c:	4965      	ldr	r1, [pc, #404]	; (80171a4 <tcp_slowtmr+0x280>)
 801700e:	4862      	ldr	r0, [pc, #392]	; (8017198 <tcp_slowtmr+0x274>)
 8017010:	f008 f9e4 	bl	801f3dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017018:	2b00      	cmp	r3, #0
 801701a:	d106      	bne.n	801702a <tcp_slowtmr+0x106>
 801701c:	4b5c      	ldr	r3, [pc, #368]	; (8017190 <tcp_slowtmr+0x26c>)
 801701e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017022:	4961      	ldr	r1, [pc, #388]	; (80171a8 <tcp_slowtmr+0x284>)
 8017024:	485c      	ldr	r0, [pc, #368]	; (8017198 <tcp_slowtmr+0x274>)
 8017026:	f008 f9d9 	bl	801f3dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017030:	2b0b      	cmp	r3, #11
 8017032:	d905      	bls.n	8017040 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017038:	3301      	adds	r3, #1
 801703a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801703e:	e0ed      	b.n	801721c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017042:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017046:	3b01      	subs	r3, #1
 8017048:	4a58      	ldr	r2, [pc, #352]	; (80171ac <tcp_slowtmr+0x288>)
 801704a:	5cd3      	ldrb	r3, [r2, r3]
 801704c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017050:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017054:	7c7a      	ldrb	r2, [r7, #17]
 8017056:	429a      	cmp	r2, r3
 8017058:	d907      	bls.n	801706a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017060:	3301      	adds	r3, #1
 8017062:	b2da      	uxtb	r2, r3
 8017064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017066:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801706c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017070:	7c7a      	ldrb	r2, [r7, #17]
 8017072:	429a      	cmp	r2, r3
 8017074:	f200 80d2 	bhi.w	801721c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017078:	2301      	movs	r3, #1
 801707a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801707e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017082:	2b00      	cmp	r3, #0
 8017084:	d108      	bne.n	8017098 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017088:	f005 f96a 	bl	801c360 <tcp_zero_window_probe>
 801708c:	4603      	mov	r3, r0
 801708e:	2b00      	cmp	r3, #0
 8017090:	d014      	beq.n	80170bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8017092:	2300      	movs	r3, #0
 8017094:	623b      	str	r3, [r7, #32]
 8017096:	e011      	b.n	80170bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801709e:	4619      	mov	r1, r3
 80170a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170a2:	f004 f82f 	bl	801b104 <tcp_split_unsent_seg>
 80170a6:	4603      	mov	r3, r0
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d107      	bne.n	80170bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80170ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170ae:	f004 faaf 	bl	801b610 <tcp_output>
 80170b2:	4603      	mov	r3, r0
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d101      	bne.n	80170bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80170b8:	2300      	movs	r3, #0
 80170ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80170bc:	6a3b      	ldr	r3, [r7, #32]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	f000 80ac 	beq.w	801721c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80170c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c6:	2200      	movs	r2, #0
 80170c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80170cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80170d2:	2b06      	cmp	r3, #6
 80170d4:	f200 80a2 	bhi.w	801721c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80170d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80170de:	3301      	adds	r3, #1
 80170e0:	b2da      	uxtb	r2, r3
 80170e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80170e8:	e098      	b.n	801721c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80170ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	db0f      	blt.n	8017114 <tcp_slowtmr+0x1f0>
 80170f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80170fe:	4293      	cmp	r3, r2
 8017100:	d008      	beq.n	8017114 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017104:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017108:	b29b      	uxth	r3, r3
 801710a:	3301      	adds	r3, #1
 801710c:	b29b      	uxth	r3, r3
 801710e:	b21a      	sxth	r2, r3
 8017110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017112:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017116:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017120:	429a      	cmp	r2, r3
 8017122:	db7b      	blt.n	801721c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017126:	f004 fd65 	bl	801bbf4 <tcp_rexmit_rto_prepare>
 801712a:	4603      	mov	r3, r0
 801712c:	2b00      	cmp	r3, #0
 801712e:	d007      	beq.n	8017140 <tcp_slowtmr+0x21c>
 8017130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017134:	2b00      	cmp	r3, #0
 8017136:	d171      	bne.n	801721c <tcp_slowtmr+0x2f8>
 8017138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801713c:	2b00      	cmp	r3, #0
 801713e:	d06d      	beq.n	801721c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8017140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017142:	7d1b      	ldrb	r3, [r3, #20]
 8017144:	2b02      	cmp	r3, #2
 8017146:	d03a      	beq.n	80171be <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801714e:	2b0c      	cmp	r3, #12
 8017150:	bf28      	it	cs
 8017152:	230c      	movcs	r3, #12
 8017154:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017158:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801715c:	10db      	asrs	r3, r3, #3
 801715e:	b21b      	sxth	r3, r3
 8017160:	461a      	mov	r2, r3
 8017162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017164:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017168:	4413      	add	r3, r2
 801716a:	7efa      	ldrb	r2, [r7, #27]
 801716c:	4910      	ldr	r1, [pc, #64]	; (80171b0 <tcp_slowtmr+0x28c>)
 801716e:	5c8a      	ldrb	r2, [r1, r2]
 8017170:	4093      	lsls	r3, r2
 8017172:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801717a:	4293      	cmp	r3, r2
 801717c:	dc1a      	bgt.n	80171b4 <tcp_slowtmr+0x290>
 801717e:	697b      	ldr	r3, [r7, #20]
 8017180:	b21a      	sxth	r2, r3
 8017182:	e019      	b.n	80171b8 <tcp_slowtmr+0x294>
 8017184:	20014bb8 	.word	0x20014bb8
 8017188:	2000c7fa 	.word	0x2000c7fa
 801718c:	20014bb4 	.word	0x20014bb4
 8017190:	08022414 	.word	0x08022414
 8017194:	08022758 	.word	0x08022758
 8017198:	08022458 	.word	0x08022458
 801719c:	08022784 	.word	0x08022784
 80171a0:	080227b0 	.word	0x080227b0
 80171a4:	080227e0 	.word	0x080227e0
 80171a8:	08022814 	.word	0x08022814
 80171ac:	0807b138 	.word	0x0807b138
 80171b0:	0807b128 	.word	0x0807b128
 80171b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80171b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80171be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c0:	2200      	movs	r2, #0
 80171c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80171c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80171ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80171d0:	4293      	cmp	r3, r2
 80171d2:	bf28      	it	cs
 80171d4:	4613      	movcs	r3, r2
 80171d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80171d8:	8a7b      	ldrh	r3, [r7, #18]
 80171da:	085b      	lsrs	r3, r3, #1
 80171dc:	b29a      	uxth	r2, r3
 80171de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80171e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80171ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171ee:	005b      	lsls	r3, r3, #1
 80171f0:	b29b      	uxth	r3, r3
 80171f2:	429a      	cmp	r2, r3
 80171f4:	d206      	bcs.n	8017204 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80171f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171fa:	005b      	lsls	r3, r3, #1
 80171fc:	b29a      	uxth	r2, r3
 80171fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017200:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017206:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801720a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017210:	2200      	movs	r2, #0
 8017212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8017216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017218:	f004 fd5c 	bl	801bcd4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721e:	7d1b      	ldrb	r3, [r3, #20]
 8017220:	2b06      	cmp	r3, #6
 8017222:	d111      	bne.n	8017248 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017226:	8b5b      	ldrh	r3, [r3, #26]
 8017228:	f003 0310 	and.w	r3, r3, #16
 801722c:	2b00      	cmp	r3, #0
 801722e:	d00b      	beq.n	8017248 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017230:	4b9d      	ldr	r3, [pc, #628]	; (80174a8 <tcp_slowtmr+0x584>)
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017236:	6a1b      	ldr	r3, [r3, #32]
 8017238:	1ad3      	subs	r3, r2, r3
 801723a:	2b28      	cmp	r3, #40	; 0x28
 801723c:	d904      	bls.n	8017248 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801723e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017242:	3301      	adds	r3, #1
 8017244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801724a:	7a5b      	ldrb	r3, [r3, #9]
 801724c:	f003 0308 	and.w	r3, r3, #8
 8017250:	2b00      	cmp	r3, #0
 8017252:	d04c      	beq.n	80172ee <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8017254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017256:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017258:	2b04      	cmp	r3, #4
 801725a:	d003      	beq.n	8017264 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8017260:	2b07      	cmp	r3, #7
 8017262:	d144      	bne.n	80172ee <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017264:	4b90      	ldr	r3, [pc, #576]	; (80174a8 <tcp_slowtmr+0x584>)
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726a:	6a1b      	ldr	r3, [r3, #32]
 801726c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017274:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8017278:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801727c:	498b      	ldr	r1, [pc, #556]	; (80174ac <tcp_slowtmr+0x588>)
 801727e:	fba1 1303 	umull	r1, r3, r1, r3
 8017282:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017284:	429a      	cmp	r2, r3
 8017286:	d90a      	bls.n	801729e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801728c:	3301      	adds	r3, #1
 801728e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017296:	3301      	adds	r3, #1
 8017298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801729c:	e027      	b.n	80172ee <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801729e:	4b82      	ldr	r3, [pc, #520]	; (80174a8 <tcp_slowtmr+0x584>)
 80172a0:	681a      	ldr	r2, [r3, #0]
 80172a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a4:	6a1b      	ldr	r3, [r3, #32]
 80172a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80172a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80172ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80172b4:	4618      	mov	r0, r3
 80172b6:	4b7e      	ldr	r3, [pc, #504]	; (80174b0 <tcp_slowtmr+0x58c>)
 80172b8:	fb03 f300 	mul.w	r3, r3, r0
 80172bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80172be:	497b      	ldr	r1, [pc, #492]	; (80174ac <tcp_slowtmr+0x588>)
 80172c0:	fba1 1303 	umull	r1, r3, r1, r3
 80172c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d911      	bls.n	80172ee <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80172ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172cc:	f005 f808 	bl	801c2e0 <tcp_keepalive>
 80172d0:	4603      	mov	r3, r0
 80172d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80172d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d107      	bne.n	80172ee <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80172de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80172e4:	3301      	adds	r3, #1
 80172e6:	b2da      	uxtb	r2, r3
 80172e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80172ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d011      	beq.n	801731a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80172f6:	4b6c      	ldr	r3, [pc, #432]	; (80174a8 <tcp_slowtmr+0x584>)
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172fc:	6a1b      	ldr	r3, [r3, #32]
 80172fe:	1ad2      	subs	r2, r2, r3
 8017300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017302:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017306:	4619      	mov	r1, r3
 8017308:	460b      	mov	r3, r1
 801730a:	005b      	lsls	r3, r3, #1
 801730c:	440b      	add	r3, r1
 801730e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017310:	429a      	cmp	r2, r3
 8017312:	d302      	bcc.n	801731a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017316:	f000 fec7 	bl	80180a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731c:	7d1b      	ldrb	r3, [r3, #20]
 801731e:	2b03      	cmp	r3, #3
 8017320:	d10b      	bne.n	801733a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017322:	4b61      	ldr	r3, [pc, #388]	; (80174a8 <tcp_slowtmr+0x584>)
 8017324:	681a      	ldr	r2, [r3, #0]
 8017326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017328:	6a1b      	ldr	r3, [r3, #32]
 801732a:	1ad3      	subs	r3, r2, r3
 801732c:	2b28      	cmp	r3, #40	; 0x28
 801732e:	d904      	bls.n	801733a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017334:	3301      	adds	r3, #1
 8017336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801733c:	7d1b      	ldrb	r3, [r3, #20]
 801733e:	2b09      	cmp	r3, #9
 8017340:	d10b      	bne.n	801735a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017342:	4b59      	ldr	r3, [pc, #356]	; (80174a8 <tcp_slowtmr+0x584>)
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017348:	6a1b      	ldr	r3, [r3, #32]
 801734a:	1ad3      	subs	r3, r2, r3
 801734c:	2bf0      	cmp	r3, #240	; 0xf0
 801734e:	d904      	bls.n	801735a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8017350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017354:	3301      	adds	r3, #1
 8017356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801735a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801735e:	2b00      	cmp	r3, #0
 8017360:	d060      	beq.n	8017424 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8017362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017368:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801736a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801736c:	f000 fce8 	bl	8017d40 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017372:	2b00      	cmp	r3, #0
 8017374:	d010      	beq.n	8017398 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017376:	4b4f      	ldr	r3, [pc, #316]	; (80174b4 <tcp_slowtmr+0x590>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801737c:	429a      	cmp	r2, r3
 801737e:	d106      	bne.n	801738e <tcp_slowtmr+0x46a>
 8017380:	4b4d      	ldr	r3, [pc, #308]	; (80174b8 <tcp_slowtmr+0x594>)
 8017382:	f240 526d 	movw	r2, #1389	; 0x56d
 8017386:	494d      	ldr	r1, [pc, #308]	; (80174bc <tcp_slowtmr+0x598>)
 8017388:	484d      	ldr	r0, [pc, #308]	; (80174c0 <tcp_slowtmr+0x59c>)
 801738a:	f008 f827 	bl	801f3dc <iprintf>
        prev->next = pcb->next;
 801738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017390:	68da      	ldr	r2, [r3, #12]
 8017392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017394:	60da      	str	r2, [r3, #12]
 8017396:	e00f      	b.n	80173b8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017398:	4b46      	ldr	r3, [pc, #280]	; (80174b4 <tcp_slowtmr+0x590>)
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801739e:	429a      	cmp	r2, r3
 80173a0:	d006      	beq.n	80173b0 <tcp_slowtmr+0x48c>
 80173a2:	4b45      	ldr	r3, [pc, #276]	; (80174b8 <tcp_slowtmr+0x594>)
 80173a4:	f240 5271 	movw	r2, #1393	; 0x571
 80173a8:	4946      	ldr	r1, [pc, #280]	; (80174c4 <tcp_slowtmr+0x5a0>)
 80173aa:	4845      	ldr	r0, [pc, #276]	; (80174c0 <tcp_slowtmr+0x59c>)
 80173ac:	f008 f816 	bl	801f3dc <iprintf>
        tcp_active_pcbs = pcb->next;
 80173b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b2:	68db      	ldr	r3, [r3, #12]
 80173b4:	4a3f      	ldr	r2, [pc, #252]	; (80174b4 <tcp_slowtmr+0x590>)
 80173b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80173b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d013      	beq.n	80173e8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80173c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80173c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80173c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80173ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173cc:	3304      	adds	r3, #4
 80173ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173d0:	8ad2      	ldrh	r2, [r2, #22]
 80173d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80173d4:	8b09      	ldrh	r1, [r1, #24]
 80173d6:	9102      	str	r1, [sp, #8]
 80173d8:	9201      	str	r2, [sp, #4]
 80173da:	9300      	str	r3, [sp, #0]
 80173dc:	462b      	mov	r3, r5
 80173de:	4622      	mov	r2, r4
 80173e0:	4601      	mov	r1, r0
 80173e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173e4:	f004 fec8 	bl	801c178 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80173e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ea:	691b      	ldr	r3, [r3, #16]
 80173ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80173ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f0:	7d1b      	ldrb	r3, [r3, #20]
 80173f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80173f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80173f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173fa:	68db      	ldr	r3, [r3, #12]
 80173fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80173fe:	6838      	ldr	r0, [r7, #0]
 8017400:	f7ff f838 	bl	8016474 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017404:	4b30      	ldr	r3, [pc, #192]	; (80174c8 <tcp_slowtmr+0x5a4>)
 8017406:	2200      	movs	r2, #0
 8017408:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d004      	beq.n	801741a <tcp_slowtmr+0x4f6>
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	f06f 010c 	mvn.w	r1, #12
 8017416:	68b8      	ldr	r0, [r7, #8]
 8017418:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801741a:	4b2b      	ldr	r3, [pc, #172]	; (80174c8 <tcp_slowtmr+0x5a4>)
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d037      	beq.n	8017492 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8017422:	e590      	b.n	8016f46 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017426:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742a:	68db      	ldr	r3, [r3, #12]
 801742c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017430:	7f1b      	ldrb	r3, [r3, #28]
 8017432:	3301      	adds	r3, #1
 8017434:	b2da      	uxtb	r2, r3
 8017436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017438:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801743c:	7f1a      	ldrb	r2, [r3, #28]
 801743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017440:	7f5b      	ldrb	r3, [r3, #29]
 8017442:	429a      	cmp	r2, r3
 8017444:	d325      	bcc.n	8017492 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8017446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017448:	2200      	movs	r2, #0
 801744a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801744c:	4b1e      	ldr	r3, [pc, #120]	; (80174c8 <tcp_slowtmr+0x5a4>)
 801744e:	2200      	movs	r2, #0
 8017450:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017458:	2b00      	cmp	r3, #0
 801745a:	d00b      	beq.n	8017474 <tcp_slowtmr+0x550>
 801745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801745e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017464:	6912      	ldr	r2, [r2, #16]
 8017466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017468:	4610      	mov	r0, r2
 801746a:	4798      	blx	r3
 801746c:	4603      	mov	r3, r0
 801746e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017472:	e002      	b.n	801747a <tcp_slowtmr+0x556>
 8017474:	2300      	movs	r3, #0
 8017476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801747a:	4b13      	ldr	r3, [pc, #76]	; (80174c8 <tcp_slowtmr+0x5a4>)
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d000      	beq.n	8017484 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8017482:	e560      	b.n	8016f46 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017484:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017488:	2b00      	cmp	r3, #0
 801748a:	d102      	bne.n	8017492 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801748c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801748e:	f004 f8bf 	bl	801b610 <tcp_output>
  while (pcb != NULL) {
 8017492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017494:	2b00      	cmp	r3, #0
 8017496:	f47f ad5c 	bne.w	8016f52 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801749a:	2300      	movs	r3, #0
 801749c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801749e:	4b0b      	ldr	r3, [pc, #44]	; (80174cc <tcp_slowtmr+0x5a8>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80174a4:	e067      	b.n	8017576 <tcp_slowtmr+0x652>
 80174a6:	bf00      	nop
 80174a8:	20014bb8 	.word	0x20014bb8
 80174ac:	10624dd3 	.word	0x10624dd3
 80174b0:	000124f8 	.word	0x000124f8
 80174b4:	20014bb4 	.word	0x20014bb4
 80174b8:	08022414 	.word	0x08022414
 80174bc:	0802284c 	.word	0x0802284c
 80174c0:	08022458 	.word	0x08022458
 80174c4:	08022878 	.word	0x08022878
 80174c8:	20014bb0 	.word	0x20014bb0
 80174cc:	20014bc4 	.word	0x20014bc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80174d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d2:	7d1b      	ldrb	r3, [r3, #20]
 80174d4:	2b0a      	cmp	r3, #10
 80174d6:	d006      	beq.n	80174e6 <tcp_slowtmr+0x5c2>
 80174d8:	4b2b      	ldr	r3, [pc, #172]	; (8017588 <tcp_slowtmr+0x664>)
 80174da:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80174de:	492b      	ldr	r1, [pc, #172]	; (801758c <tcp_slowtmr+0x668>)
 80174e0:	482b      	ldr	r0, [pc, #172]	; (8017590 <tcp_slowtmr+0x66c>)
 80174e2:	f007 ff7b 	bl	801f3dc <iprintf>
    pcb_remove = 0;
 80174e6:	2300      	movs	r3, #0
 80174e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80174ec:	4b29      	ldr	r3, [pc, #164]	; (8017594 <tcp_slowtmr+0x670>)
 80174ee:	681a      	ldr	r2, [r3, #0]
 80174f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f2:	6a1b      	ldr	r3, [r3, #32]
 80174f4:	1ad3      	subs	r3, r2, r3
 80174f6:	2bf0      	cmp	r3, #240	; 0xf0
 80174f8:	d904      	bls.n	8017504 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80174fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174fe:	3301      	adds	r3, #1
 8017500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017508:	2b00      	cmp	r3, #0
 801750a:	d02f      	beq.n	801756c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801750c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801750e:	f000 fc17 	bl	8017d40 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017514:	2b00      	cmp	r3, #0
 8017516:	d010      	beq.n	801753a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017518:	4b1f      	ldr	r3, [pc, #124]	; (8017598 <tcp_slowtmr+0x674>)
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801751e:	429a      	cmp	r2, r3
 8017520:	d106      	bne.n	8017530 <tcp_slowtmr+0x60c>
 8017522:	4b19      	ldr	r3, [pc, #100]	; (8017588 <tcp_slowtmr+0x664>)
 8017524:	f240 52af 	movw	r2, #1455	; 0x5af
 8017528:	491c      	ldr	r1, [pc, #112]	; (801759c <tcp_slowtmr+0x678>)
 801752a:	4819      	ldr	r0, [pc, #100]	; (8017590 <tcp_slowtmr+0x66c>)
 801752c:	f007 ff56 	bl	801f3dc <iprintf>
        prev->next = pcb->next;
 8017530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017532:	68da      	ldr	r2, [r3, #12]
 8017534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017536:	60da      	str	r2, [r3, #12]
 8017538:	e00f      	b.n	801755a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801753a:	4b17      	ldr	r3, [pc, #92]	; (8017598 <tcp_slowtmr+0x674>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017540:	429a      	cmp	r2, r3
 8017542:	d006      	beq.n	8017552 <tcp_slowtmr+0x62e>
 8017544:	4b10      	ldr	r3, [pc, #64]	; (8017588 <tcp_slowtmr+0x664>)
 8017546:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801754a:	4915      	ldr	r1, [pc, #84]	; (80175a0 <tcp_slowtmr+0x67c>)
 801754c:	4810      	ldr	r0, [pc, #64]	; (8017590 <tcp_slowtmr+0x66c>)
 801754e:	f007 ff45 	bl	801f3dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017554:	68db      	ldr	r3, [r3, #12]
 8017556:	4a10      	ldr	r2, [pc, #64]	; (8017598 <tcp_slowtmr+0x674>)
 8017558:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801755c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017560:	68db      	ldr	r3, [r3, #12]
 8017562:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017564:	69f8      	ldr	r0, [r7, #28]
 8017566:	f7fe ff85 	bl	8016474 <tcp_free>
 801756a:	e004      	b.n	8017576 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017578:	2b00      	cmp	r3, #0
 801757a:	d1a9      	bne.n	80174d0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801757c:	bf00      	nop
 801757e:	bf00      	nop
 8017580:	3730      	adds	r7, #48	; 0x30
 8017582:	46bd      	mov	sp, r7
 8017584:	bdb0      	pop	{r4, r5, r7, pc}
 8017586:	bf00      	nop
 8017588:	08022414 	.word	0x08022414
 801758c:	080228a4 	.word	0x080228a4
 8017590:	08022458 	.word	0x08022458
 8017594:	20014bb8 	.word	0x20014bb8
 8017598:	20014bc4 	.word	0x20014bc4
 801759c:	080228d4 	.word	0x080228d4
 80175a0:	080228fc 	.word	0x080228fc

080175a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80175aa:	4b2d      	ldr	r3, [pc, #180]	; (8017660 <tcp_fasttmr+0xbc>)
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	3301      	adds	r3, #1
 80175b0:	b2da      	uxtb	r2, r3
 80175b2:	4b2b      	ldr	r3, [pc, #172]	; (8017660 <tcp_fasttmr+0xbc>)
 80175b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80175b6:	4b2b      	ldr	r3, [pc, #172]	; (8017664 <tcp_fasttmr+0xc0>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80175bc:	e048      	b.n	8017650 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	7f9a      	ldrb	r2, [r3, #30]
 80175c2:	4b27      	ldr	r3, [pc, #156]	; (8017660 <tcp_fasttmr+0xbc>)
 80175c4:	781b      	ldrb	r3, [r3, #0]
 80175c6:	429a      	cmp	r2, r3
 80175c8:	d03f      	beq.n	801764a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80175ca:	4b25      	ldr	r3, [pc, #148]	; (8017660 <tcp_fasttmr+0xbc>)
 80175cc:	781a      	ldrb	r2, [r3, #0]
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	8b5b      	ldrh	r3, [r3, #26]
 80175d6:	f003 0301 	and.w	r3, r3, #1
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d010      	beq.n	8017600 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	8b5b      	ldrh	r3, [r3, #26]
 80175e2:	f043 0302 	orr.w	r3, r3, #2
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	f004 f80f 	bl	801b610 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	8b5b      	ldrh	r3, [r3, #26]
 80175f6:	f023 0303 	bic.w	r3, r3, #3
 80175fa:	b29a      	uxth	r2, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	8b5b      	ldrh	r3, [r3, #26]
 8017604:	f003 0308 	and.w	r3, r3, #8
 8017608:	2b00      	cmp	r3, #0
 801760a:	d009      	beq.n	8017620 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	8b5b      	ldrh	r3, [r3, #26]
 8017610:	f023 0308 	bic.w	r3, r3, #8
 8017614:	b29a      	uxth	r2, r3
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f7ff f8be 	bl	801679c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	68db      	ldr	r3, [r3, #12]
 8017624:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801762a:	2b00      	cmp	r3, #0
 801762c:	d00a      	beq.n	8017644 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801762e:	4b0e      	ldr	r3, [pc, #56]	; (8017668 <tcp_fasttmr+0xc4>)
 8017630:	2200      	movs	r2, #0
 8017632:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f000 f819 	bl	801766c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801763a:	4b0b      	ldr	r3, [pc, #44]	; (8017668 <tcp_fasttmr+0xc4>)
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d000      	beq.n	8017644 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8017642:	e7b8      	b.n	80175b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	607b      	str	r3, [r7, #4]
 8017648:	e002      	b.n	8017650 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d1b3      	bne.n	80175be <tcp_fasttmr+0x1a>
    }
  }
}
 8017656:	bf00      	nop
 8017658:	bf00      	nop
 801765a:	3708      	adds	r7, #8
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}
 8017660:	2000c7fa 	.word	0x2000c7fa
 8017664:	20014bb4 	.word	0x20014bb4
 8017668:	20014bb0 	.word	0x20014bb0

0801766c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801766c:	b590      	push	{r4, r7, lr}
 801766e:	b085      	sub	sp, #20
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d109      	bne.n	801768e <tcp_process_refused_data+0x22>
 801767a:	4b37      	ldr	r3, [pc, #220]	; (8017758 <tcp_process_refused_data+0xec>)
 801767c:	f240 6209 	movw	r2, #1545	; 0x609
 8017680:	4936      	ldr	r1, [pc, #216]	; (801775c <tcp_process_refused_data+0xf0>)
 8017682:	4837      	ldr	r0, [pc, #220]	; (8017760 <tcp_process_refused_data+0xf4>)
 8017684:	f007 feaa 	bl	801f3dc <iprintf>
 8017688:	f06f 030f 	mvn.w	r3, #15
 801768c:	e060      	b.n	8017750 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017692:	7b5b      	ldrb	r3, [r3, #13]
 8017694:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801769a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2200      	movs	r2, #0
 80176a0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d00b      	beq.n	80176c4 <tcp_process_refused_data+0x58>
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6918      	ldr	r0, [r3, #16]
 80176b6:	2300      	movs	r3, #0
 80176b8:	68ba      	ldr	r2, [r7, #8]
 80176ba:	6879      	ldr	r1, [r7, #4]
 80176bc:	47a0      	blx	r4
 80176be:	4603      	mov	r3, r0
 80176c0:	73fb      	strb	r3, [r7, #15]
 80176c2:	e007      	b.n	80176d4 <tcp_process_refused_data+0x68>
 80176c4:	2300      	movs	r3, #0
 80176c6:	68ba      	ldr	r2, [r7, #8]
 80176c8:	6879      	ldr	r1, [r7, #4]
 80176ca:	2000      	movs	r0, #0
 80176cc:	f000 f8c2 	bl	8017854 <tcp_recv_null>
 80176d0:	4603      	mov	r3, r0
 80176d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80176d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d12a      	bne.n	8017732 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80176dc:	7bbb      	ldrb	r3, [r7, #14]
 80176de:	f003 0320 	and.w	r3, r3, #32
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d033      	beq.n	801774e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80176ee:	d005      	beq.n	80176fc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176f4:	3301      	adds	r3, #1
 80176f6:	b29a      	uxth	r2, r3
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017702:	2b00      	cmp	r3, #0
 8017704:	d00b      	beq.n	801771e <tcp_process_refused_data+0xb2>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	6918      	ldr	r0, [r3, #16]
 8017710:	2300      	movs	r3, #0
 8017712:	2200      	movs	r2, #0
 8017714:	6879      	ldr	r1, [r7, #4]
 8017716:	47a0      	blx	r4
 8017718:	4603      	mov	r3, r0
 801771a:	73fb      	strb	r3, [r7, #15]
 801771c:	e001      	b.n	8017722 <tcp_process_refused_data+0xb6>
 801771e:	2300      	movs	r3, #0
 8017720:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017726:	f113 0f0d 	cmn.w	r3, #13
 801772a:	d110      	bne.n	801774e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801772c:	f06f 030c 	mvn.w	r3, #12
 8017730:	e00e      	b.n	8017750 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8017732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017736:	f113 0f0d 	cmn.w	r3, #13
 801773a:	d102      	bne.n	8017742 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801773c:	f06f 030c 	mvn.w	r3, #12
 8017740:	e006      	b.n	8017750 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	68ba      	ldr	r2, [r7, #8]
 8017746:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017748:	f06f 0304 	mvn.w	r3, #4
 801774c:	e000      	b.n	8017750 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801774e:	2300      	movs	r3, #0
}
 8017750:	4618      	mov	r0, r3
 8017752:	3714      	adds	r7, #20
 8017754:	46bd      	mov	sp, r7
 8017756:	bd90      	pop	{r4, r7, pc}
 8017758:	08022414 	.word	0x08022414
 801775c:	08022924 	.word	0x08022924
 8017760:	08022458 	.word	0x08022458

08017764 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b084      	sub	sp, #16
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801776c:	e007      	b.n	801777e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017774:	6878      	ldr	r0, [r7, #4]
 8017776:	f000 f80a 	bl	801778e <tcp_seg_free>
    seg = next;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1f4      	bne.n	801776e <tcp_segs_free+0xa>
  }
}
 8017784:	bf00      	nop
 8017786:	bf00      	nop
 8017788:	3710      	adds	r7, #16
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}

0801778e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801778e:	b580      	push	{r7, lr}
 8017790:	b082      	sub	sp, #8
 8017792:	af00      	add	r7, sp, #0
 8017794:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d00c      	beq.n	80177b6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	685b      	ldr	r3, [r3, #4]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d004      	beq.n	80177ae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	685b      	ldr	r3, [r3, #4]
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7fe fbb7 	bl	8015f1c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80177ae:	6879      	ldr	r1, [r7, #4]
 80177b0:	2003      	movs	r0, #3
 80177b2:	f7fd fcfd 	bl	80151b0 <memp_free>
  }
}
 80177b6:	bf00      	nop
 80177b8:	3708      	adds	r7, #8
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}
	...

080177c0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b082      	sub	sp, #8
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	460b      	mov	r3, r1
 80177ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d107      	bne.n	80177e2 <tcp_setprio+0x22>
 80177d2:	4b07      	ldr	r3, [pc, #28]	; (80177f0 <tcp_setprio+0x30>)
 80177d4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80177d8:	4906      	ldr	r1, [pc, #24]	; (80177f4 <tcp_setprio+0x34>)
 80177da:	4807      	ldr	r0, [pc, #28]	; (80177f8 <tcp_setprio+0x38>)
 80177dc:	f007 fdfe 	bl	801f3dc <iprintf>
 80177e0:	e002      	b.n	80177e8 <tcp_setprio+0x28>

  pcb->prio = prio;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	78fa      	ldrb	r2, [r7, #3]
 80177e6:	755a      	strb	r2, [r3, #21]
}
 80177e8:	3708      	adds	r7, #8
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	08022414 	.word	0x08022414
 80177f4:	0802294c 	.word	0x0802294c
 80177f8:	08022458 	.word	0x08022458

080177fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b084      	sub	sp, #16
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d106      	bne.n	8017818 <tcp_seg_copy+0x1c>
 801780a:	4b0f      	ldr	r3, [pc, #60]	; (8017848 <tcp_seg_copy+0x4c>)
 801780c:	f240 6282 	movw	r2, #1666	; 0x682
 8017810:	490e      	ldr	r1, [pc, #56]	; (801784c <tcp_seg_copy+0x50>)
 8017812:	480f      	ldr	r0, [pc, #60]	; (8017850 <tcp_seg_copy+0x54>)
 8017814:	f007 fde2 	bl	801f3dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017818:	2003      	movs	r0, #3
 801781a:	f7fd fc77 	bl	801510c <memp_malloc>
 801781e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d101      	bne.n	801782a <tcp_seg_copy+0x2e>
    return NULL;
 8017826:	2300      	movs	r3, #0
 8017828:	e00a      	b.n	8017840 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801782a:	2210      	movs	r2, #16
 801782c:	6879      	ldr	r1, [r7, #4]
 801782e:	68f8      	ldr	r0, [r7, #12]
 8017830:	f007 fda4 	bl	801f37c <memcpy>
  pbuf_ref(cseg->p);
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	685b      	ldr	r3, [r3, #4]
 8017838:	4618      	mov	r0, r3
 801783a:	f7fe fc15 	bl	8016068 <pbuf_ref>
  return cseg;
 801783e:	68fb      	ldr	r3, [r7, #12]
}
 8017840:	4618      	mov	r0, r3
 8017842:	3710      	adds	r7, #16
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}
 8017848:	08022414 	.word	0x08022414
 801784c:	08022968 	.word	0x08022968
 8017850:	08022458 	.word	0x08022458

08017854 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b084      	sub	sp, #16
 8017858:	af00      	add	r7, sp, #0
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	60b9      	str	r1, [r7, #8]
 801785e:	607a      	str	r2, [r7, #4]
 8017860:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d109      	bne.n	801787c <tcp_recv_null+0x28>
 8017868:	4b12      	ldr	r3, [pc, #72]	; (80178b4 <tcp_recv_null+0x60>)
 801786a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801786e:	4912      	ldr	r1, [pc, #72]	; (80178b8 <tcp_recv_null+0x64>)
 8017870:	4812      	ldr	r0, [pc, #72]	; (80178bc <tcp_recv_null+0x68>)
 8017872:	f007 fdb3 	bl	801f3dc <iprintf>
 8017876:	f06f 030f 	mvn.w	r3, #15
 801787a:	e016      	b.n	80178aa <tcp_recv_null+0x56>

  if (p != NULL) {
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d009      	beq.n	8017896 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	891b      	ldrh	r3, [r3, #8]
 8017886:	4619      	mov	r1, r3
 8017888:	68b8      	ldr	r0, [r7, #8]
 801788a:	f7ff fab5 	bl	8016df8 <tcp_recved>
    pbuf_free(p);
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f7fe fb44 	bl	8015f1c <pbuf_free>
 8017894:	e008      	b.n	80178a8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8017896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d104      	bne.n	80178a8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801789e:	68b8      	ldr	r0, [r7, #8]
 80178a0:	f7fe ffe6 	bl	8016870 <tcp_close>
 80178a4:	4603      	mov	r3, r0
 80178a6:	e000      	b.n	80178aa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80178a8:	2300      	movs	r3, #0
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3710      	adds	r7, #16
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	08022414 	.word	0x08022414
 80178b8:	08022984 	.word	0x08022984
 80178bc:	08022458 	.word	0x08022458

080178c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b086      	sub	sp, #24
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	4603      	mov	r3, r0
 80178c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80178ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	db01      	blt.n	80178d6 <tcp_kill_prio+0x16>
 80178d2:	79fb      	ldrb	r3, [r7, #7]
 80178d4:	e000      	b.n	80178d8 <tcp_kill_prio+0x18>
 80178d6:	237f      	movs	r3, #127	; 0x7f
 80178d8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80178da:	7afb      	ldrb	r3, [r7, #11]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d034      	beq.n	801794a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80178e0:	7afb      	ldrb	r3, [r7, #11]
 80178e2:	3b01      	subs	r3, #1
 80178e4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80178e6:	2300      	movs	r3, #0
 80178e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80178ea:	2300      	movs	r3, #0
 80178ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178ee:	4b19      	ldr	r3, [pc, #100]	; (8017954 <tcp_kill_prio+0x94>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	617b      	str	r3, [r7, #20]
 80178f4:	e01f      	b.n	8017936 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	7d5b      	ldrb	r3, [r3, #21]
 80178fa:	7afa      	ldrb	r2, [r7, #11]
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d80c      	bhi.n	801791a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017904:	7afa      	ldrb	r2, [r7, #11]
 8017906:	429a      	cmp	r2, r3
 8017908:	d112      	bne.n	8017930 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801790a:	4b13      	ldr	r3, [pc, #76]	; (8017958 <tcp_kill_prio+0x98>)
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	6a1b      	ldr	r3, [r3, #32]
 8017912:	1ad3      	subs	r3, r2, r3
 8017914:	68fa      	ldr	r2, [r7, #12]
 8017916:	429a      	cmp	r2, r3
 8017918:	d80a      	bhi.n	8017930 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801791a:	4b0f      	ldr	r3, [pc, #60]	; (8017958 <tcp_kill_prio+0x98>)
 801791c:	681a      	ldr	r2, [r3, #0]
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	6a1b      	ldr	r3, [r3, #32]
 8017922:	1ad3      	subs	r3, r2, r3
 8017924:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017926:	697b      	ldr	r3, [r7, #20]
 8017928:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801792a:	697b      	ldr	r3, [r7, #20]
 801792c:	7d5b      	ldrb	r3, [r3, #21]
 801792e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	68db      	ldr	r3, [r3, #12]
 8017934:	617b      	str	r3, [r7, #20]
 8017936:	697b      	ldr	r3, [r7, #20]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d1dc      	bne.n	80178f6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801793c:	693b      	ldr	r3, [r7, #16]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d004      	beq.n	801794c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017942:	6938      	ldr	r0, [r7, #16]
 8017944:	f7ff f87e 	bl	8016a44 <tcp_abort>
 8017948:	e000      	b.n	801794c <tcp_kill_prio+0x8c>
    return;
 801794a:	bf00      	nop
  }
}
 801794c:	3718      	adds	r7, #24
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}
 8017952:	bf00      	nop
 8017954:	20014bb4 	.word	0x20014bb4
 8017958:	20014bb8 	.word	0x20014bb8

0801795c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b086      	sub	sp, #24
 8017960:	af00      	add	r7, sp, #0
 8017962:	4603      	mov	r3, r0
 8017964:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017966:	79fb      	ldrb	r3, [r7, #7]
 8017968:	2b08      	cmp	r3, #8
 801796a:	d009      	beq.n	8017980 <tcp_kill_state+0x24>
 801796c:	79fb      	ldrb	r3, [r7, #7]
 801796e:	2b09      	cmp	r3, #9
 8017970:	d006      	beq.n	8017980 <tcp_kill_state+0x24>
 8017972:	4b1a      	ldr	r3, [pc, #104]	; (80179dc <tcp_kill_state+0x80>)
 8017974:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017978:	4919      	ldr	r1, [pc, #100]	; (80179e0 <tcp_kill_state+0x84>)
 801797a:	481a      	ldr	r0, [pc, #104]	; (80179e4 <tcp_kill_state+0x88>)
 801797c:	f007 fd2e 	bl	801f3dc <iprintf>

  inactivity = 0;
 8017980:	2300      	movs	r3, #0
 8017982:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017984:	2300      	movs	r3, #0
 8017986:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017988:	4b17      	ldr	r3, [pc, #92]	; (80179e8 <tcp_kill_state+0x8c>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	617b      	str	r3, [r7, #20]
 801798e:	e017      	b.n	80179c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017990:	697b      	ldr	r3, [r7, #20]
 8017992:	7d1b      	ldrb	r3, [r3, #20]
 8017994:	79fa      	ldrb	r2, [r7, #7]
 8017996:	429a      	cmp	r2, r3
 8017998:	d10f      	bne.n	80179ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801799a:	4b14      	ldr	r3, [pc, #80]	; (80179ec <tcp_kill_state+0x90>)
 801799c:	681a      	ldr	r2, [r3, #0]
 801799e:	697b      	ldr	r3, [r7, #20]
 80179a0:	6a1b      	ldr	r3, [r3, #32]
 80179a2:	1ad3      	subs	r3, r2, r3
 80179a4:	68fa      	ldr	r2, [r7, #12]
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d807      	bhi.n	80179ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80179aa:	4b10      	ldr	r3, [pc, #64]	; (80179ec <tcp_kill_state+0x90>)
 80179ac:	681a      	ldr	r2, [r3, #0]
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	6a1b      	ldr	r3, [r3, #32]
 80179b2:	1ad3      	subs	r3, r2, r3
 80179b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	68db      	ldr	r3, [r3, #12]
 80179be:	617b      	str	r3, [r7, #20]
 80179c0:	697b      	ldr	r3, [r7, #20]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d1e4      	bne.n	8017990 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80179c6:	693b      	ldr	r3, [r7, #16]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d003      	beq.n	80179d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80179cc:	2100      	movs	r1, #0
 80179ce:	6938      	ldr	r0, [r7, #16]
 80179d0:	f7fe ff7a 	bl	80168c8 <tcp_abandon>
  }
}
 80179d4:	bf00      	nop
 80179d6:	3718      	adds	r7, #24
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	08022414 	.word	0x08022414
 80179e0:	080229a0 	.word	0x080229a0
 80179e4:	08022458 	.word	0x08022458
 80179e8:	20014bb4 	.word	0x20014bb4
 80179ec:	20014bb8 	.word	0x20014bb8

080179f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b084      	sub	sp, #16
 80179f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80179f6:	2300      	movs	r3, #0
 80179f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80179fa:	2300      	movs	r3, #0
 80179fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80179fe:	4b12      	ldr	r3, [pc, #72]	; (8017a48 <tcp_kill_timewait+0x58>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	60fb      	str	r3, [r7, #12]
 8017a04:	e012      	b.n	8017a2c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017a06:	4b11      	ldr	r3, [pc, #68]	; (8017a4c <tcp_kill_timewait+0x5c>)
 8017a08:	681a      	ldr	r2, [r3, #0]
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	6a1b      	ldr	r3, [r3, #32]
 8017a0e:	1ad3      	subs	r3, r2, r3
 8017a10:	687a      	ldr	r2, [r7, #4]
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d807      	bhi.n	8017a26 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017a16:	4b0d      	ldr	r3, [pc, #52]	; (8017a4c <tcp_kill_timewait+0x5c>)
 8017a18:	681a      	ldr	r2, [r3, #0]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	6a1b      	ldr	r3, [r3, #32]
 8017a1e:	1ad3      	subs	r3, r2, r3
 8017a20:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	68db      	ldr	r3, [r3, #12]
 8017a2a:	60fb      	str	r3, [r7, #12]
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d1e9      	bne.n	8017a06 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d002      	beq.n	8017a3e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017a38:	68b8      	ldr	r0, [r7, #8]
 8017a3a:	f7ff f803 	bl	8016a44 <tcp_abort>
  }
}
 8017a3e:	bf00      	nop
 8017a40:	3710      	adds	r7, #16
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}
 8017a46:	bf00      	nop
 8017a48:	20014bc4 	.word	0x20014bc4
 8017a4c:	20014bb8 	.word	0x20014bb8

08017a50 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017a56:	4b10      	ldr	r3, [pc, #64]	; (8017a98 <tcp_handle_closepend+0x48>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017a5c:	e014      	b.n	8017a88 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	68db      	ldr	r3, [r3, #12]
 8017a62:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	8b5b      	ldrh	r3, [r3, #26]
 8017a68:	f003 0308 	and.w	r3, r3, #8
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d009      	beq.n	8017a84 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	8b5b      	ldrh	r3, [r3, #26]
 8017a74:	f023 0308 	bic.w	r3, r3, #8
 8017a78:	b29a      	uxth	r2, r3
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017a7e:	6878      	ldr	r0, [r7, #4]
 8017a80:	f7fe fe8c 	bl	801679c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d1e7      	bne.n	8017a5e <tcp_handle_closepend+0xe>
  }
}
 8017a8e:	bf00      	nop
 8017a90:	bf00      	nop
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	20014bb4 	.word	0x20014bb4

08017a9c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b084      	sub	sp, #16
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017aa6:	2001      	movs	r0, #1
 8017aa8:	f7fd fb30 	bl	801510c <memp_malloc>
 8017aac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d126      	bne.n	8017b02 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017ab4:	f7ff ffcc 	bl	8017a50 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017ab8:	f7ff ff9a 	bl	80179f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017abc:	2001      	movs	r0, #1
 8017abe:	f7fd fb25 	bl	801510c <memp_malloc>
 8017ac2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d11b      	bne.n	8017b02 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017aca:	2009      	movs	r0, #9
 8017acc:	f7ff ff46 	bl	801795c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017ad0:	2001      	movs	r0, #1
 8017ad2:	f7fd fb1b 	bl	801510c <memp_malloc>
 8017ad6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d111      	bne.n	8017b02 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017ade:	2008      	movs	r0, #8
 8017ae0:	f7ff ff3c 	bl	801795c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017ae4:	2001      	movs	r0, #1
 8017ae6:	f7fd fb11 	bl	801510c <memp_malloc>
 8017aea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d107      	bne.n	8017b02 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017af2:	79fb      	ldrb	r3, [r7, #7]
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7ff fee3 	bl	80178c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017afa:	2001      	movs	r0, #1
 8017afc:	f7fd fb06 	bl	801510c <memp_malloc>
 8017b00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d03f      	beq.n	8017b88 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017b08:	229c      	movs	r2, #156	; 0x9c
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	68f8      	ldr	r0, [r7, #12]
 8017b0e:	f007 fc5d 	bl	801f3cc <memset>
    pcb->prio = prio;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	79fa      	ldrb	r2, [r7, #7]
 8017b16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017b1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017b28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	22ff      	movs	r2, #255	; 0xff
 8017b36:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017b3e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	2206      	movs	r2, #6
 8017b44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	2206      	movs	r2, #6
 8017b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b54:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	2201      	movs	r2, #1
 8017b5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017b5e:	4b0d      	ldr	r3, [pc, #52]	; (8017b94 <tcp_alloc+0xf8>)
 8017b60:	681a      	ldr	r2, [r3, #0]
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017b66:	4b0c      	ldr	r3, [pc, #48]	; (8017b98 <tcp_alloc+0xfc>)
 8017b68:	781a      	ldrb	r2, [r3, #0]
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017b74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	4a08      	ldr	r2, [pc, #32]	; (8017b9c <tcp_alloc+0x100>)
 8017b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	4a07      	ldr	r2, [pc, #28]	; (8017ba0 <tcp_alloc+0x104>)
 8017b84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017b88:	68fb      	ldr	r3, [r7, #12]
}
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	3710      	adds	r7, #16
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	20014bb8 	.word	0x20014bb8
 8017b98:	2000c7fa 	.word	0x2000c7fa
 8017b9c:	08017855 	.word	0x08017855
 8017ba0:	006ddd00 	.word	0x006ddd00

08017ba4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b084      	sub	sp, #16
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	4603      	mov	r3, r0
 8017bac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017bae:	2040      	movs	r0, #64	; 0x40
 8017bb0:	f7ff ff74 	bl	8017a9c <tcp_alloc>
 8017bb4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017bb6:	68fb      	ldr	r3, [r7, #12]
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	3710      	adds	r7, #16
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}

08017bc0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017bc0:	b480      	push	{r7}
 8017bc2:	b083      	sub	sp, #12
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
 8017bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d002      	beq.n	8017bd6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	683a      	ldr	r2, [r7, #0]
 8017bd4:	611a      	str	r2, [r3, #16]
  }
}
 8017bd6:	bf00      	nop
 8017bd8:	370c      	adds	r7, #12
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be0:	4770      	bx	lr
	...

08017be4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b082      	sub	sp, #8
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
 8017bec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d00e      	beq.n	8017c12 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	7d1b      	ldrb	r3, [r3, #20]
 8017bf8:	2b01      	cmp	r3, #1
 8017bfa:	d106      	bne.n	8017c0a <tcp_recv+0x26>
 8017bfc:	4b07      	ldr	r3, [pc, #28]	; (8017c1c <tcp_recv+0x38>)
 8017bfe:	f240 72df 	movw	r2, #2015	; 0x7df
 8017c02:	4907      	ldr	r1, [pc, #28]	; (8017c20 <tcp_recv+0x3c>)
 8017c04:	4807      	ldr	r0, [pc, #28]	; (8017c24 <tcp_recv+0x40>)
 8017c06:	f007 fbe9 	bl	801f3dc <iprintf>
    pcb->recv = recv;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	683a      	ldr	r2, [r7, #0]
 8017c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017c12:	bf00      	nop
 8017c14:	3708      	adds	r7, #8
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	08022414 	.word	0x08022414
 8017c20:	080229b0 	.word	0x080229b0
 8017c24:	08022458 	.word	0x08022458

08017c28 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b082      	sub	sp, #8
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d00e      	beq.n	8017c56 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	7d1b      	ldrb	r3, [r3, #20]
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d106      	bne.n	8017c4e <tcp_sent+0x26>
 8017c40:	4b07      	ldr	r3, [pc, #28]	; (8017c60 <tcp_sent+0x38>)
 8017c42:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017c46:	4907      	ldr	r1, [pc, #28]	; (8017c64 <tcp_sent+0x3c>)
 8017c48:	4807      	ldr	r0, [pc, #28]	; (8017c68 <tcp_sent+0x40>)
 8017c4a:	f007 fbc7 	bl	801f3dc <iprintf>
    pcb->sent = sent;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	683a      	ldr	r2, [r7, #0]
 8017c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8017c56:	bf00      	nop
 8017c58:	3708      	adds	r7, #8
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}
 8017c5e:	bf00      	nop
 8017c60:	08022414 	.word	0x08022414
 8017c64:	080229d8 	.word	0x080229d8
 8017c68:	08022458 	.word	0x08022458

08017c6c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d00e      	beq.n	8017c9a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	7d1b      	ldrb	r3, [r3, #20]
 8017c80:	2b01      	cmp	r3, #1
 8017c82:	d106      	bne.n	8017c92 <tcp_err+0x26>
 8017c84:	4b07      	ldr	r3, [pc, #28]	; (8017ca4 <tcp_err+0x38>)
 8017c86:	f640 020d 	movw	r2, #2061	; 0x80d
 8017c8a:	4907      	ldr	r1, [pc, #28]	; (8017ca8 <tcp_err+0x3c>)
 8017c8c:	4807      	ldr	r0, [pc, #28]	; (8017cac <tcp_err+0x40>)
 8017c8e:	f007 fba5 	bl	801f3dc <iprintf>
    pcb->errf = err;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	683a      	ldr	r2, [r7, #0]
 8017c96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017c9a:	bf00      	nop
 8017c9c:	3708      	adds	r7, #8
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	08022414 	.word	0x08022414
 8017ca8:	08022a00 	.word	0x08022a00
 8017cac:	08022458 	.word	0x08022458

08017cb0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017cb0:	b480      	push	{r7}
 8017cb2:	b085      	sub	sp, #20
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d008      	beq.n	8017cd2 <tcp_accept+0x22>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	7d1b      	ldrb	r3, [r3, #20]
 8017cc4:	2b01      	cmp	r3, #1
 8017cc6:	d104      	bne.n	8017cd2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	683a      	ldr	r2, [r7, #0]
 8017cd0:	619a      	str	r2, [r3, #24]
  }
}
 8017cd2:	bf00      	nop
 8017cd4:	3714      	adds	r7, #20
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cdc:	4770      	bx	lr
	...

08017ce0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b084      	sub	sp, #16
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	60f8      	str	r0, [r7, #12]
 8017ce8:	60b9      	str	r1, [r7, #8]
 8017cea:	4613      	mov	r3, r2
 8017cec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d107      	bne.n	8017d04 <tcp_poll+0x24>
 8017cf4:	4b0e      	ldr	r3, [pc, #56]	; (8017d30 <tcp_poll+0x50>)
 8017cf6:	f640 023d 	movw	r2, #2109	; 0x83d
 8017cfa:	490e      	ldr	r1, [pc, #56]	; (8017d34 <tcp_poll+0x54>)
 8017cfc:	480e      	ldr	r0, [pc, #56]	; (8017d38 <tcp_poll+0x58>)
 8017cfe:	f007 fb6d 	bl	801f3dc <iprintf>
 8017d02:	e011      	b.n	8017d28 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	7d1b      	ldrb	r3, [r3, #20]
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d106      	bne.n	8017d1a <tcp_poll+0x3a>
 8017d0c:	4b08      	ldr	r3, [pc, #32]	; (8017d30 <tcp_poll+0x50>)
 8017d0e:	f640 023e 	movw	r2, #2110	; 0x83e
 8017d12:	490a      	ldr	r1, [pc, #40]	; (8017d3c <tcp_poll+0x5c>)
 8017d14:	4808      	ldr	r0, [pc, #32]	; (8017d38 <tcp_poll+0x58>)
 8017d16:	f007 fb61 	bl	801f3dc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	68ba      	ldr	r2, [r7, #8]
 8017d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	79fa      	ldrb	r2, [r7, #7]
 8017d26:	775a      	strb	r2, [r3, #29]
}
 8017d28:	3710      	adds	r7, #16
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bd80      	pop	{r7, pc}
 8017d2e:	bf00      	nop
 8017d30:	08022414 	.word	0x08022414
 8017d34:	08022a28 	.word	0x08022a28
 8017d38:	08022458 	.word	0x08022458
 8017d3c:	08022a40 	.word	0x08022a40

08017d40 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b082      	sub	sp, #8
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d107      	bne.n	8017d5e <tcp_pcb_purge+0x1e>
 8017d4e:	4b21      	ldr	r3, [pc, #132]	; (8017dd4 <tcp_pcb_purge+0x94>)
 8017d50:	f640 0251 	movw	r2, #2129	; 0x851
 8017d54:	4920      	ldr	r1, [pc, #128]	; (8017dd8 <tcp_pcb_purge+0x98>)
 8017d56:	4821      	ldr	r0, [pc, #132]	; (8017ddc <tcp_pcb_purge+0x9c>)
 8017d58:	f007 fb40 	bl	801f3dc <iprintf>
 8017d5c:	e037      	b.n	8017dce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	7d1b      	ldrb	r3, [r3, #20]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d033      	beq.n	8017dce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017d6a:	2b0a      	cmp	r3, #10
 8017d6c:	d02f      	beq.n	8017dce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017d72:	2b01      	cmp	r3, #1
 8017d74:	d02b      	beq.n	8017dce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d007      	beq.n	8017d8e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d82:	4618      	mov	r0, r3
 8017d84:	f7fe f8ca 	bl	8015f1c <pbuf_free>
      pcb->refused_data = NULL;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d002      	beq.n	8017d9c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017d96:	6878      	ldr	r0, [r7, #4]
 8017d98:	f000 f986 	bl	80180a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017da2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7ff fcdb 	bl	8017764 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7ff fcd6 	bl	8017764 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2200      	movs	r2, #0
 8017dbc:	66da      	str	r2, [r3, #108]	; 0x6c
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	2200      	movs	r2, #0
 8017dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017dce:	3708      	adds	r7, #8
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}
 8017dd4:	08022414 	.word	0x08022414
 8017dd8:	08022a60 	.word	0x08022a60
 8017ddc:	08022458 	.word	0x08022458

08017de0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b084      	sub	sp, #16
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
 8017de8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d106      	bne.n	8017dfe <tcp_pcb_remove+0x1e>
 8017df0:	4b3e      	ldr	r3, [pc, #248]	; (8017eec <tcp_pcb_remove+0x10c>)
 8017df2:	f640 0283 	movw	r2, #2179	; 0x883
 8017df6:	493e      	ldr	r1, [pc, #248]	; (8017ef0 <tcp_pcb_remove+0x110>)
 8017df8:	483e      	ldr	r0, [pc, #248]	; (8017ef4 <tcp_pcb_remove+0x114>)
 8017dfa:	f007 faef 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d106      	bne.n	8017e12 <tcp_pcb_remove+0x32>
 8017e04:	4b39      	ldr	r3, [pc, #228]	; (8017eec <tcp_pcb_remove+0x10c>)
 8017e06:	f640 0284 	movw	r2, #2180	; 0x884
 8017e0a:	493b      	ldr	r1, [pc, #236]	; (8017ef8 <tcp_pcb_remove+0x118>)
 8017e0c:	4839      	ldr	r0, [pc, #228]	; (8017ef4 <tcp_pcb_remove+0x114>)
 8017e0e:	f007 fae5 	bl	801f3dc <iprintf>

  TCP_RMV(pcblist, pcb);
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	683a      	ldr	r2, [r7, #0]
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d105      	bne.n	8017e28 <tcp_pcb_remove+0x48>
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	68da      	ldr	r2, [r3, #12]
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	601a      	str	r2, [r3, #0]
 8017e26:	e013      	b.n	8017e50 <tcp_pcb_remove+0x70>
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	60fb      	str	r3, [r7, #12]
 8017e2e:	e00c      	b.n	8017e4a <tcp_pcb_remove+0x6a>
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	68db      	ldr	r3, [r3, #12]
 8017e34:	683a      	ldr	r2, [r7, #0]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d104      	bne.n	8017e44 <tcp_pcb_remove+0x64>
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	68da      	ldr	r2, [r3, #12]
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	60da      	str	r2, [r3, #12]
 8017e42:	e005      	b.n	8017e50 <tcp_pcb_remove+0x70>
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	68db      	ldr	r3, [r3, #12]
 8017e48:	60fb      	str	r3, [r7, #12]
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d1ef      	bne.n	8017e30 <tcp_pcb_remove+0x50>
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	2200      	movs	r2, #0
 8017e54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017e56:	6838      	ldr	r0, [r7, #0]
 8017e58:	f7ff ff72 	bl	8017d40 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	7d1b      	ldrb	r3, [r3, #20]
 8017e60:	2b0a      	cmp	r3, #10
 8017e62:	d013      	beq.n	8017e8c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017e64:	683b      	ldr	r3, [r7, #0]
 8017e66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017e68:	2b01      	cmp	r3, #1
 8017e6a:	d00f      	beq.n	8017e8c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	8b5b      	ldrh	r3, [r3, #26]
 8017e70:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d009      	beq.n	8017e8c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	8b5b      	ldrh	r3, [r3, #26]
 8017e7c:	f043 0302 	orr.w	r3, r3, #2
 8017e80:	b29a      	uxth	r2, r3
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017e86:	6838      	ldr	r0, [r7, #0]
 8017e88:	f003 fbc2 	bl	801b610 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	7d1b      	ldrb	r3, [r3, #20]
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d020      	beq.n	8017ed6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d006      	beq.n	8017eaa <tcp_pcb_remove+0xca>
 8017e9c:	4b13      	ldr	r3, [pc, #76]	; (8017eec <tcp_pcb_remove+0x10c>)
 8017e9e:	f640 0293 	movw	r2, #2195	; 0x893
 8017ea2:	4916      	ldr	r1, [pc, #88]	; (8017efc <tcp_pcb_remove+0x11c>)
 8017ea4:	4813      	ldr	r0, [pc, #76]	; (8017ef4 <tcp_pcb_remove+0x114>)
 8017ea6:	f007 fa99 	bl	801f3dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d006      	beq.n	8017ec0 <tcp_pcb_remove+0xe0>
 8017eb2:	4b0e      	ldr	r3, [pc, #56]	; (8017eec <tcp_pcb_remove+0x10c>)
 8017eb4:	f640 0294 	movw	r2, #2196	; 0x894
 8017eb8:	4911      	ldr	r1, [pc, #68]	; (8017f00 <tcp_pcb_remove+0x120>)
 8017eba:	480e      	ldr	r0, [pc, #56]	; (8017ef4 <tcp_pcb_remove+0x114>)
 8017ebc:	f007 fa8e 	bl	801f3dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d006      	beq.n	8017ed6 <tcp_pcb_remove+0xf6>
 8017ec8:	4b08      	ldr	r3, [pc, #32]	; (8017eec <tcp_pcb_remove+0x10c>)
 8017eca:	f640 0296 	movw	r2, #2198	; 0x896
 8017ece:	490d      	ldr	r1, [pc, #52]	; (8017f04 <tcp_pcb_remove+0x124>)
 8017ed0:	4808      	ldr	r0, [pc, #32]	; (8017ef4 <tcp_pcb_remove+0x114>)
 8017ed2:	f007 fa83 	bl	801f3dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017ed6:	683b      	ldr	r3, [r7, #0]
 8017ed8:	2200      	movs	r2, #0
 8017eda:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017edc:	683b      	ldr	r3, [r7, #0]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017ee2:	bf00      	nop
 8017ee4:	3710      	adds	r7, #16
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}
 8017eea:	bf00      	nop
 8017eec:	08022414 	.word	0x08022414
 8017ef0:	08022a7c 	.word	0x08022a7c
 8017ef4:	08022458 	.word	0x08022458
 8017ef8:	08022a98 	.word	0x08022a98
 8017efc:	08022ab8 	.word	0x08022ab8
 8017f00:	08022ad0 	.word	0x08022ad0
 8017f04:	08022aec 	.word	0x08022aec

08017f08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b082      	sub	sp, #8
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d106      	bne.n	8017f24 <tcp_next_iss+0x1c>
 8017f16:	4b0a      	ldr	r3, [pc, #40]	; (8017f40 <tcp_next_iss+0x38>)
 8017f18:	f640 02af 	movw	r2, #2223	; 0x8af
 8017f1c:	4909      	ldr	r1, [pc, #36]	; (8017f44 <tcp_next_iss+0x3c>)
 8017f1e:	480a      	ldr	r0, [pc, #40]	; (8017f48 <tcp_next_iss+0x40>)
 8017f20:	f007 fa5c 	bl	801f3dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017f24:	4b09      	ldr	r3, [pc, #36]	; (8017f4c <tcp_next_iss+0x44>)
 8017f26:	681a      	ldr	r2, [r3, #0]
 8017f28:	4b09      	ldr	r3, [pc, #36]	; (8017f50 <tcp_next_iss+0x48>)
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	4413      	add	r3, r2
 8017f2e:	4a07      	ldr	r2, [pc, #28]	; (8017f4c <tcp_next_iss+0x44>)
 8017f30:	6013      	str	r3, [r2, #0]
  return iss;
 8017f32:	4b06      	ldr	r3, [pc, #24]	; (8017f4c <tcp_next_iss+0x44>)
 8017f34:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3708      	adds	r7, #8
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	08022414 	.word	0x08022414
 8017f44:	08022b04 	.word	0x08022b04
 8017f48:	08022458 	.word	0x08022458
 8017f4c:	20000038 	.word	0x20000038
 8017f50:	20014bb8 	.word	0x20014bb8

08017f54 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b086      	sub	sp, #24
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	60b9      	str	r1, [r7, #8]
 8017f5e:	607a      	str	r2, [r7, #4]
 8017f60:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d106      	bne.n	8017f76 <tcp_eff_send_mss_netif+0x22>
 8017f68:	4b14      	ldr	r3, [pc, #80]	; (8017fbc <tcp_eff_send_mss_netif+0x68>)
 8017f6a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017f6e:	4914      	ldr	r1, [pc, #80]	; (8017fc0 <tcp_eff_send_mss_netif+0x6c>)
 8017f70:	4814      	ldr	r0, [pc, #80]	; (8017fc4 <tcp_eff_send_mss_netif+0x70>)
 8017f72:	f007 fa33 	bl	801f3dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d101      	bne.n	8017f80 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017f7c:	89fb      	ldrh	r3, [r7, #14]
 8017f7e:	e019      	b.n	8017fb4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017f86:	8afb      	ldrh	r3, [r7, #22]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d012      	beq.n	8017fb2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017f8c:	2328      	movs	r3, #40	; 0x28
 8017f8e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017f90:	8afa      	ldrh	r2, [r7, #22]
 8017f92:	8abb      	ldrh	r3, [r7, #20]
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d904      	bls.n	8017fa2 <tcp_eff_send_mss_netif+0x4e>
 8017f98:	8afa      	ldrh	r2, [r7, #22]
 8017f9a:	8abb      	ldrh	r3, [r7, #20]
 8017f9c:	1ad3      	subs	r3, r2, r3
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	e000      	b.n	8017fa4 <tcp_eff_send_mss_netif+0x50>
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017fa6:	8a7a      	ldrh	r2, [r7, #18]
 8017fa8:	89fb      	ldrh	r3, [r7, #14]
 8017faa:	4293      	cmp	r3, r2
 8017fac:	bf28      	it	cs
 8017fae:	4613      	movcs	r3, r2
 8017fb0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017fb2:	89fb      	ldrh	r3, [r7, #14]
}
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	3718      	adds	r7, #24
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}
 8017fbc:	08022414 	.word	0x08022414
 8017fc0:	08022b20 	.word	0x08022b20
 8017fc4:	08022458 	.word	0x08022458

08017fc8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b084      	sub	sp, #16
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d119      	bne.n	8018010 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017fdc:	4b10      	ldr	r3, [pc, #64]	; (8018020 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017fde:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017fe2:	4910      	ldr	r1, [pc, #64]	; (8018024 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017fe4:	4810      	ldr	r0, [pc, #64]	; (8018028 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017fe6:	f007 f9f9 	bl	801f3dc <iprintf>

  while (pcb != NULL) {
 8017fea:	e011      	b.n	8018010 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	681a      	ldr	r2, [r3, #0]
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	d108      	bne.n	801800a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	68db      	ldr	r3, [r3, #12]
 8017ffc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017ffe:	68f8      	ldr	r0, [r7, #12]
 8018000:	f7fe fd20 	bl	8016a44 <tcp_abort>
      pcb = next;
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	60fb      	str	r3, [r7, #12]
 8018008:	e002      	b.n	8018010 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	68db      	ldr	r3, [r3, #12]
 801800e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d1ea      	bne.n	8017fec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8018016:	bf00      	nop
 8018018:	bf00      	nop
 801801a:	3710      	adds	r7, #16
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}
 8018020:	08022414 	.word	0x08022414
 8018024:	08022b48 	.word	0x08022b48
 8018028:	08022458 	.word	0x08022458

0801802c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b084      	sub	sp, #16
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
 8018034:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d02a      	beq.n	8018092 <tcp_netif_ip_addr_changed+0x66>
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d026      	beq.n	8018092 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8018044:	4b15      	ldr	r3, [pc, #84]	; (801809c <tcp_netif_ip_addr_changed+0x70>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	4619      	mov	r1, r3
 801804a:	6878      	ldr	r0, [r7, #4]
 801804c:	f7ff ffbc 	bl	8017fc8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018050:	4b13      	ldr	r3, [pc, #76]	; (80180a0 <tcp_netif_ip_addr_changed+0x74>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	4619      	mov	r1, r3
 8018056:	6878      	ldr	r0, [r7, #4]
 8018058:	f7ff ffb6 	bl	8017fc8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d017      	beq.n	8018092 <tcp_netif_ip_addr_changed+0x66>
 8018062:	683b      	ldr	r3, [r7, #0]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d013      	beq.n	8018092 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801806a:	4b0e      	ldr	r3, [pc, #56]	; (80180a4 <tcp_netif_ip_addr_changed+0x78>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	60fb      	str	r3, [r7, #12]
 8018070:	e00c      	b.n	801808c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	681a      	ldr	r2, [r3, #0]
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	429a      	cmp	r2, r3
 801807c:	d103      	bne.n	8018086 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	681a      	ldr	r2, [r3, #0]
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	68db      	ldr	r3, [r3, #12]
 801808a:	60fb      	str	r3, [r7, #12]
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d1ef      	bne.n	8018072 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8018092:	bf00      	nop
 8018094:	3710      	adds	r7, #16
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	20014bb4 	.word	0x20014bb4
 80180a0:	20014bc0 	.word	0x20014bc0
 80180a4:	20014bbc 	.word	0x20014bbc

080180a8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d007      	beq.n	80180c8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80180bc:	4618      	mov	r0, r3
 80180be:	f7ff fb51 	bl	8017764 <tcp_segs_free>
    pcb->ooseq = NULL;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2200      	movs	r2, #0
 80180c6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80180c8:	bf00      	nop
 80180ca:	3708      	adds	r7, #8
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}

080180d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80180d0:	b590      	push	{r4, r7, lr}
 80180d2:	b08d      	sub	sp, #52	; 0x34
 80180d4:	af04      	add	r7, sp, #16
 80180d6:	6078      	str	r0, [r7, #4]
 80180d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d105      	bne.n	80180ec <tcp_input+0x1c>
 80180e0:	4b9b      	ldr	r3, [pc, #620]	; (8018350 <tcp_input+0x280>)
 80180e2:	2283      	movs	r2, #131	; 0x83
 80180e4:	499b      	ldr	r1, [pc, #620]	; (8018354 <tcp_input+0x284>)
 80180e6:	489c      	ldr	r0, [pc, #624]	; (8018358 <tcp_input+0x288>)
 80180e8:	f007 f978 	bl	801f3dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	4a9a      	ldr	r2, [pc, #616]	; (801835c <tcp_input+0x28c>)
 80180f2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	895b      	ldrh	r3, [r3, #10]
 80180f8:	2b13      	cmp	r3, #19
 80180fa:	f240 83c4 	bls.w	8018886 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80180fe:	4b98      	ldr	r3, [pc, #608]	; (8018360 <tcp_input+0x290>)
 8018100:	695b      	ldr	r3, [r3, #20]
 8018102:	4a97      	ldr	r2, [pc, #604]	; (8018360 <tcp_input+0x290>)
 8018104:	6812      	ldr	r2, [r2, #0]
 8018106:	4611      	mov	r1, r2
 8018108:	4618      	mov	r0, r3
 801810a:	f006 f89b 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801810e:	4603      	mov	r3, r0
 8018110:	2b00      	cmp	r3, #0
 8018112:	f040 83ba 	bne.w	801888a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018116:	4b92      	ldr	r3, [pc, #584]	; (8018360 <tcp_input+0x290>)
 8018118:	695b      	ldr	r3, [r3, #20]
 801811a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801811e:	2be0      	cmp	r3, #224	; 0xe0
 8018120:	f000 83b3 	beq.w	801888a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8018124:	4b8d      	ldr	r3, [pc, #564]	; (801835c <tcp_input+0x28c>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	899b      	ldrh	r3, [r3, #12]
 801812a:	b29b      	uxth	r3, r3
 801812c:	4618      	mov	r0, r3
 801812e:	f7fc fb01 	bl	8014734 <lwip_htons>
 8018132:	4603      	mov	r3, r0
 8018134:	0b1b      	lsrs	r3, r3, #12
 8018136:	b29b      	uxth	r3, r3
 8018138:	b2db      	uxtb	r3, r3
 801813a:	009b      	lsls	r3, r3, #2
 801813c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801813e:	7cbb      	ldrb	r3, [r7, #18]
 8018140:	2b13      	cmp	r3, #19
 8018142:	f240 83a4 	bls.w	801888e <tcp_input+0x7be>
 8018146:	7cbb      	ldrb	r3, [r7, #18]
 8018148:	b29a      	uxth	r2, r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	891b      	ldrh	r3, [r3, #8]
 801814e:	429a      	cmp	r2, r3
 8018150:	f200 839d 	bhi.w	801888e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018154:	7cbb      	ldrb	r3, [r7, #18]
 8018156:	b29b      	uxth	r3, r3
 8018158:	3b14      	subs	r3, #20
 801815a:	b29a      	uxth	r2, r3
 801815c:	4b81      	ldr	r3, [pc, #516]	; (8018364 <tcp_input+0x294>)
 801815e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018160:	4b81      	ldr	r3, [pc, #516]	; (8018368 <tcp_input+0x298>)
 8018162:	2200      	movs	r2, #0
 8018164:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	895a      	ldrh	r2, [r3, #10]
 801816a:	7cbb      	ldrb	r3, [r7, #18]
 801816c:	b29b      	uxth	r3, r3
 801816e:	429a      	cmp	r2, r3
 8018170:	d309      	bcc.n	8018186 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8018172:	4b7c      	ldr	r3, [pc, #496]	; (8018364 <tcp_input+0x294>)
 8018174:	881a      	ldrh	r2, [r3, #0]
 8018176:	4b7d      	ldr	r3, [pc, #500]	; (801836c <tcp_input+0x29c>)
 8018178:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801817a:	7cbb      	ldrb	r3, [r7, #18]
 801817c:	4619      	mov	r1, r3
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	f7fd fe34 	bl	8015dec <pbuf_remove_header>
 8018184:	e04e      	b.n	8018224 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d105      	bne.n	801819a <tcp_input+0xca>
 801818e:	4b70      	ldr	r3, [pc, #448]	; (8018350 <tcp_input+0x280>)
 8018190:	22c2      	movs	r2, #194	; 0xc2
 8018192:	4977      	ldr	r1, [pc, #476]	; (8018370 <tcp_input+0x2a0>)
 8018194:	4870      	ldr	r0, [pc, #448]	; (8018358 <tcp_input+0x288>)
 8018196:	f007 f921 	bl	801f3dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801819a:	2114      	movs	r1, #20
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f7fd fe25 	bl	8015dec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	895a      	ldrh	r2, [r3, #10]
 80181a6:	4b71      	ldr	r3, [pc, #452]	; (801836c <tcp_input+0x29c>)
 80181a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80181aa:	4b6e      	ldr	r3, [pc, #440]	; (8018364 <tcp_input+0x294>)
 80181ac:	881a      	ldrh	r2, [r3, #0]
 80181ae:	4b6f      	ldr	r3, [pc, #444]	; (801836c <tcp_input+0x29c>)
 80181b0:	881b      	ldrh	r3, [r3, #0]
 80181b2:	1ad3      	subs	r3, r2, r3
 80181b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80181b6:	4b6d      	ldr	r3, [pc, #436]	; (801836c <tcp_input+0x29c>)
 80181b8:	881b      	ldrh	r3, [r3, #0]
 80181ba:	4619      	mov	r1, r3
 80181bc:	6878      	ldr	r0, [r7, #4]
 80181be:	f7fd fe15 	bl	8015dec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	895b      	ldrh	r3, [r3, #10]
 80181c8:	8a3a      	ldrh	r2, [r7, #16]
 80181ca:	429a      	cmp	r2, r3
 80181cc:	f200 8361 	bhi.w	8018892 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	685b      	ldr	r3, [r3, #4]
 80181d6:	4a64      	ldr	r2, [pc, #400]	; (8018368 <tcp_input+0x298>)
 80181d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	8a3a      	ldrh	r2, [r7, #16]
 80181e0:	4611      	mov	r1, r2
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7fd fe02 	bl	8015dec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	891a      	ldrh	r2, [r3, #8]
 80181ec:	8a3b      	ldrh	r3, [r7, #16]
 80181ee:	1ad3      	subs	r3, r2, r3
 80181f0:	b29a      	uxth	r2, r3
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	895b      	ldrh	r3, [r3, #10]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d005      	beq.n	801820a <tcp_input+0x13a>
 80181fe:	4b54      	ldr	r3, [pc, #336]	; (8018350 <tcp_input+0x280>)
 8018200:	22df      	movs	r2, #223	; 0xdf
 8018202:	495c      	ldr	r1, [pc, #368]	; (8018374 <tcp_input+0x2a4>)
 8018204:	4854      	ldr	r0, [pc, #336]	; (8018358 <tcp_input+0x288>)
 8018206:	f007 f8e9 	bl	801f3dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	891a      	ldrh	r2, [r3, #8]
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	891b      	ldrh	r3, [r3, #8]
 8018214:	429a      	cmp	r2, r3
 8018216:	d005      	beq.n	8018224 <tcp_input+0x154>
 8018218:	4b4d      	ldr	r3, [pc, #308]	; (8018350 <tcp_input+0x280>)
 801821a:	22e0      	movs	r2, #224	; 0xe0
 801821c:	4956      	ldr	r1, [pc, #344]	; (8018378 <tcp_input+0x2a8>)
 801821e:	484e      	ldr	r0, [pc, #312]	; (8018358 <tcp_input+0x288>)
 8018220:	f007 f8dc 	bl	801f3dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018224:	4b4d      	ldr	r3, [pc, #308]	; (801835c <tcp_input+0x28c>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	881b      	ldrh	r3, [r3, #0]
 801822a:	b29b      	uxth	r3, r3
 801822c:	4a4b      	ldr	r2, [pc, #300]	; (801835c <tcp_input+0x28c>)
 801822e:	6814      	ldr	r4, [r2, #0]
 8018230:	4618      	mov	r0, r3
 8018232:	f7fc fa7f 	bl	8014734 <lwip_htons>
 8018236:	4603      	mov	r3, r0
 8018238:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801823a:	4b48      	ldr	r3, [pc, #288]	; (801835c <tcp_input+0x28c>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	885b      	ldrh	r3, [r3, #2]
 8018240:	b29b      	uxth	r3, r3
 8018242:	4a46      	ldr	r2, [pc, #280]	; (801835c <tcp_input+0x28c>)
 8018244:	6814      	ldr	r4, [r2, #0]
 8018246:	4618      	mov	r0, r3
 8018248:	f7fc fa74 	bl	8014734 <lwip_htons>
 801824c:	4603      	mov	r3, r0
 801824e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018250:	4b42      	ldr	r3, [pc, #264]	; (801835c <tcp_input+0x28c>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	685b      	ldr	r3, [r3, #4]
 8018256:	4a41      	ldr	r2, [pc, #260]	; (801835c <tcp_input+0x28c>)
 8018258:	6814      	ldr	r4, [r2, #0]
 801825a:	4618      	mov	r0, r3
 801825c:	f7fc fa7f 	bl	801475e <lwip_htonl>
 8018260:	4603      	mov	r3, r0
 8018262:	6063      	str	r3, [r4, #4]
 8018264:	6863      	ldr	r3, [r4, #4]
 8018266:	4a45      	ldr	r2, [pc, #276]	; (801837c <tcp_input+0x2ac>)
 8018268:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801826a:	4b3c      	ldr	r3, [pc, #240]	; (801835c <tcp_input+0x28c>)
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	689b      	ldr	r3, [r3, #8]
 8018270:	4a3a      	ldr	r2, [pc, #232]	; (801835c <tcp_input+0x28c>)
 8018272:	6814      	ldr	r4, [r2, #0]
 8018274:	4618      	mov	r0, r3
 8018276:	f7fc fa72 	bl	801475e <lwip_htonl>
 801827a:	4603      	mov	r3, r0
 801827c:	60a3      	str	r3, [r4, #8]
 801827e:	68a3      	ldr	r3, [r4, #8]
 8018280:	4a3f      	ldr	r2, [pc, #252]	; (8018380 <tcp_input+0x2b0>)
 8018282:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018284:	4b35      	ldr	r3, [pc, #212]	; (801835c <tcp_input+0x28c>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	89db      	ldrh	r3, [r3, #14]
 801828a:	b29b      	uxth	r3, r3
 801828c:	4a33      	ldr	r2, [pc, #204]	; (801835c <tcp_input+0x28c>)
 801828e:	6814      	ldr	r4, [r2, #0]
 8018290:	4618      	mov	r0, r3
 8018292:	f7fc fa4f 	bl	8014734 <lwip_htons>
 8018296:	4603      	mov	r3, r0
 8018298:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801829a:	4b30      	ldr	r3, [pc, #192]	; (801835c <tcp_input+0x28c>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	899b      	ldrh	r3, [r3, #12]
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7fc fa46 	bl	8014734 <lwip_htons>
 80182a8:	4603      	mov	r3, r0
 80182aa:	b2db      	uxtb	r3, r3
 80182ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182b0:	b2da      	uxtb	r2, r3
 80182b2:	4b34      	ldr	r3, [pc, #208]	; (8018384 <tcp_input+0x2b4>)
 80182b4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	891a      	ldrh	r2, [r3, #8]
 80182ba:	4b33      	ldr	r3, [pc, #204]	; (8018388 <tcp_input+0x2b8>)
 80182bc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80182be:	4b31      	ldr	r3, [pc, #196]	; (8018384 <tcp_input+0x2b4>)
 80182c0:	781b      	ldrb	r3, [r3, #0]
 80182c2:	f003 0303 	and.w	r3, r3, #3
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d00c      	beq.n	80182e4 <tcp_input+0x214>
    tcplen++;
 80182ca:	4b2f      	ldr	r3, [pc, #188]	; (8018388 <tcp_input+0x2b8>)
 80182cc:	881b      	ldrh	r3, [r3, #0]
 80182ce:	3301      	adds	r3, #1
 80182d0:	b29a      	uxth	r2, r3
 80182d2:	4b2d      	ldr	r3, [pc, #180]	; (8018388 <tcp_input+0x2b8>)
 80182d4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	891a      	ldrh	r2, [r3, #8]
 80182da:	4b2b      	ldr	r3, [pc, #172]	; (8018388 <tcp_input+0x2b8>)
 80182dc:	881b      	ldrh	r3, [r3, #0]
 80182de:	429a      	cmp	r2, r3
 80182e0:	f200 82d9 	bhi.w	8018896 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80182e4:	2300      	movs	r3, #0
 80182e6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80182e8:	4b28      	ldr	r3, [pc, #160]	; (801838c <tcp_input+0x2bc>)
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	61fb      	str	r3, [r7, #28]
 80182ee:	e09d      	b.n	801842c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80182f0:	69fb      	ldr	r3, [r7, #28]
 80182f2:	7d1b      	ldrb	r3, [r3, #20]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d105      	bne.n	8018304 <tcp_input+0x234>
 80182f8:	4b15      	ldr	r3, [pc, #84]	; (8018350 <tcp_input+0x280>)
 80182fa:	22fb      	movs	r2, #251	; 0xfb
 80182fc:	4924      	ldr	r1, [pc, #144]	; (8018390 <tcp_input+0x2c0>)
 80182fe:	4816      	ldr	r0, [pc, #88]	; (8018358 <tcp_input+0x288>)
 8018300:	f007 f86c 	bl	801f3dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	7d1b      	ldrb	r3, [r3, #20]
 8018308:	2b0a      	cmp	r3, #10
 801830a:	d105      	bne.n	8018318 <tcp_input+0x248>
 801830c:	4b10      	ldr	r3, [pc, #64]	; (8018350 <tcp_input+0x280>)
 801830e:	22fc      	movs	r2, #252	; 0xfc
 8018310:	4920      	ldr	r1, [pc, #128]	; (8018394 <tcp_input+0x2c4>)
 8018312:	4811      	ldr	r0, [pc, #68]	; (8018358 <tcp_input+0x288>)
 8018314:	f007 f862 	bl	801f3dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018318:	69fb      	ldr	r3, [r7, #28]
 801831a:	7d1b      	ldrb	r3, [r3, #20]
 801831c:	2b01      	cmp	r3, #1
 801831e:	d105      	bne.n	801832c <tcp_input+0x25c>
 8018320:	4b0b      	ldr	r3, [pc, #44]	; (8018350 <tcp_input+0x280>)
 8018322:	22fd      	movs	r2, #253	; 0xfd
 8018324:	491c      	ldr	r1, [pc, #112]	; (8018398 <tcp_input+0x2c8>)
 8018326:	480c      	ldr	r0, [pc, #48]	; (8018358 <tcp_input+0x288>)
 8018328:	f007 f858 	bl	801f3dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801832c:	69fb      	ldr	r3, [r7, #28]
 801832e:	7a1b      	ldrb	r3, [r3, #8]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d033      	beq.n	801839c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018334:	69fb      	ldr	r3, [r7, #28]
 8018336:	7a1a      	ldrb	r2, [r3, #8]
 8018338:	4b09      	ldr	r3, [pc, #36]	; (8018360 <tcp_input+0x290>)
 801833a:	685b      	ldr	r3, [r3, #4]
 801833c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018340:	3301      	adds	r3, #1
 8018342:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018344:	429a      	cmp	r2, r3
 8018346:	d029      	beq.n	801839c <tcp_input+0x2cc>
      prev = pcb;
 8018348:	69fb      	ldr	r3, [r7, #28]
 801834a:	61bb      	str	r3, [r7, #24]
      continue;
 801834c:	e06b      	b.n	8018426 <tcp_input+0x356>
 801834e:	bf00      	nop
 8018350:	08022b7c 	.word	0x08022b7c
 8018354:	08022bb0 	.word	0x08022bb0
 8018358:	08022bc8 	.word	0x08022bc8
 801835c:	2000c80c 	.word	0x2000c80c
 8018360:	200114a0 	.word	0x200114a0
 8018364:	2000c810 	.word	0x2000c810
 8018368:	2000c814 	.word	0x2000c814
 801836c:	2000c812 	.word	0x2000c812
 8018370:	08022bf0 	.word	0x08022bf0
 8018374:	08022c00 	.word	0x08022c00
 8018378:	08022c0c 	.word	0x08022c0c
 801837c:	2000c81c 	.word	0x2000c81c
 8018380:	2000c820 	.word	0x2000c820
 8018384:	2000c828 	.word	0x2000c828
 8018388:	2000c826 	.word	0x2000c826
 801838c:	20014bb4 	.word	0x20014bb4
 8018390:	08022c2c 	.word	0x08022c2c
 8018394:	08022c54 	.word	0x08022c54
 8018398:	08022c80 	.word	0x08022c80
    }

    if (pcb->remote_port == tcphdr->src &&
 801839c:	69fb      	ldr	r3, [r7, #28]
 801839e:	8b1a      	ldrh	r2, [r3, #24]
 80183a0:	4b94      	ldr	r3, [pc, #592]	; (80185f4 <tcp_input+0x524>)
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	881b      	ldrh	r3, [r3, #0]
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	429a      	cmp	r2, r3
 80183aa:	d13a      	bne.n	8018422 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80183ac:	69fb      	ldr	r3, [r7, #28]
 80183ae:	8ada      	ldrh	r2, [r3, #22]
 80183b0:	4b90      	ldr	r3, [pc, #576]	; (80185f4 <tcp_input+0x524>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	885b      	ldrh	r3, [r3, #2]
 80183b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d132      	bne.n	8018422 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80183bc:	69fb      	ldr	r3, [r7, #28]
 80183be:	685a      	ldr	r2, [r3, #4]
 80183c0:	4b8d      	ldr	r3, [pc, #564]	; (80185f8 <tcp_input+0x528>)
 80183c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80183c4:	429a      	cmp	r2, r3
 80183c6:	d12c      	bne.n	8018422 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80183c8:	69fb      	ldr	r3, [r7, #28]
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	4b8a      	ldr	r3, [pc, #552]	; (80185f8 <tcp_input+0x528>)
 80183ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80183d0:	429a      	cmp	r2, r3
 80183d2:	d126      	bne.n	8018422 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80183d4:	69fb      	ldr	r3, [r7, #28]
 80183d6:	68db      	ldr	r3, [r3, #12]
 80183d8:	69fa      	ldr	r2, [r7, #28]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d106      	bne.n	80183ec <tcp_input+0x31c>
 80183de:	4b87      	ldr	r3, [pc, #540]	; (80185fc <tcp_input+0x52c>)
 80183e0:	f240 120d 	movw	r2, #269	; 0x10d
 80183e4:	4986      	ldr	r1, [pc, #536]	; (8018600 <tcp_input+0x530>)
 80183e6:	4887      	ldr	r0, [pc, #540]	; (8018604 <tcp_input+0x534>)
 80183e8:	f006 fff8 	bl	801f3dc <iprintf>
      if (prev != NULL) {
 80183ec:	69bb      	ldr	r3, [r7, #24]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d00a      	beq.n	8018408 <tcp_input+0x338>
        prev->next = pcb->next;
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	68da      	ldr	r2, [r3, #12]
 80183f6:	69bb      	ldr	r3, [r7, #24]
 80183f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80183fa:	4b83      	ldr	r3, [pc, #524]	; (8018608 <tcp_input+0x538>)
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	69fb      	ldr	r3, [r7, #28]
 8018400:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018402:	4a81      	ldr	r2, [pc, #516]	; (8018608 <tcp_input+0x538>)
 8018404:	69fb      	ldr	r3, [r7, #28]
 8018406:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018408:	69fb      	ldr	r3, [r7, #28]
 801840a:	68db      	ldr	r3, [r3, #12]
 801840c:	69fa      	ldr	r2, [r7, #28]
 801840e:	429a      	cmp	r2, r3
 8018410:	d111      	bne.n	8018436 <tcp_input+0x366>
 8018412:	4b7a      	ldr	r3, [pc, #488]	; (80185fc <tcp_input+0x52c>)
 8018414:	f240 1215 	movw	r2, #277	; 0x115
 8018418:	497c      	ldr	r1, [pc, #496]	; (801860c <tcp_input+0x53c>)
 801841a:	487a      	ldr	r0, [pc, #488]	; (8018604 <tcp_input+0x534>)
 801841c:	f006 ffde 	bl	801f3dc <iprintf>
      break;
 8018420:	e009      	b.n	8018436 <tcp_input+0x366>
    }
    prev = pcb;
 8018422:	69fb      	ldr	r3, [r7, #28]
 8018424:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018426:	69fb      	ldr	r3, [r7, #28]
 8018428:	68db      	ldr	r3, [r3, #12]
 801842a:	61fb      	str	r3, [r7, #28]
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	2b00      	cmp	r3, #0
 8018430:	f47f af5e 	bne.w	80182f0 <tcp_input+0x220>
 8018434:	e000      	b.n	8018438 <tcp_input+0x368>
      break;
 8018436:	bf00      	nop
  }

  if (pcb == NULL) {
 8018438:	69fb      	ldr	r3, [r7, #28]
 801843a:	2b00      	cmp	r3, #0
 801843c:	f040 8095 	bne.w	801856a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018440:	4b73      	ldr	r3, [pc, #460]	; (8018610 <tcp_input+0x540>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	61fb      	str	r3, [r7, #28]
 8018446:	e03f      	b.n	80184c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018448:	69fb      	ldr	r3, [r7, #28]
 801844a:	7d1b      	ldrb	r3, [r3, #20]
 801844c:	2b0a      	cmp	r3, #10
 801844e:	d006      	beq.n	801845e <tcp_input+0x38e>
 8018450:	4b6a      	ldr	r3, [pc, #424]	; (80185fc <tcp_input+0x52c>)
 8018452:	f240 121f 	movw	r2, #287	; 0x11f
 8018456:	496f      	ldr	r1, [pc, #444]	; (8018614 <tcp_input+0x544>)
 8018458:	486a      	ldr	r0, [pc, #424]	; (8018604 <tcp_input+0x534>)
 801845a:	f006 ffbf 	bl	801f3dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801845e:	69fb      	ldr	r3, [r7, #28]
 8018460:	7a1b      	ldrb	r3, [r3, #8]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d009      	beq.n	801847a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018466:	69fb      	ldr	r3, [r7, #28]
 8018468:	7a1a      	ldrb	r2, [r3, #8]
 801846a:	4b63      	ldr	r3, [pc, #396]	; (80185f8 <tcp_input+0x528>)
 801846c:	685b      	ldr	r3, [r3, #4]
 801846e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018472:	3301      	adds	r3, #1
 8018474:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018476:	429a      	cmp	r2, r3
 8018478:	d122      	bne.n	80184c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801847a:	69fb      	ldr	r3, [r7, #28]
 801847c:	8b1a      	ldrh	r2, [r3, #24]
 801847e:	4b5d      	ldr	r3, [pc, #372]	; (80185f4 <tcp_input+0x524>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	881b      	ldrh	r3, [r3, #0]
 8018484:	b29b      	uxth	r3, r3
 8018486:	429a      	cmp	r2, r3
 8018488:	d11b      	bne.n	80184c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801848a:	69fb      	ldr	r3, [r7, #28]
 801848c:	8ada      	ldrh	r2, [r3, #22]
 801848e:	4b59      	ldr	r3, [pc, #356]	; (80185f4 <tcp_input+0x524>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	885b      	ldrh	r3, [r3, #2]
 8018494:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018496:	429a      	cmp	r2, r3
 8018498:	d113      	bne.n	80184c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801849a:	69fb      	ldr	r3, [r7, #28]
 801849c:	685a      	ldr	r2, [r3, #4]
 801849e:	4b56      	ldr	r3, [pc, #344]	; (80185f8 <tcp_input+0x528>)
 80184a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d10d      	bne.n	80184c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80184a6:	69fb      	ldr	r3, [r7, #28]
 80184a8:	681a      	ldr	r2, [r3, #0]
 80184aa:	4b53      	ldr	r3, [pc, #332]	; (80185f8 <tcp_input+0x528>)
 80184ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184ae:	429a      	cmp	r2, r3
 80184b0:	d107      	bne.n	80184c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80184b2:	69f8      	ldr	r0, [r7, #28]
 80184b4:	f000 fb54 	bl	8018b60 <tcp_timewait_input>
        }
        pbuf_free(p);
 80184b8:	6878      	ldr	r0, [r7, #4]
 80184ba:	f7fd fd2f 	bl	8015f1c <pbuf_free>
        return;
 80184be:	e1f0      	b.n	80188a2 <tcp_input+0x7d2>
        continue;
 80184c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80184c2:	69fb      	ldr	r3, [r7, #28]
 80184c4:	68db      	ldr	r3, [r3, #12]
 80184c6:	61fb      	str	r3, [r7, #28]
 80184c8:	69fb      	ldr	r3, [r7, #28]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d1bc      	bne.n	8018448 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80184ce:	2300      	movs	r3, #0
 80184d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80184d2:	4b51      	ldr	r3, [pc, #324]	; (8018618 <tcp_input+0x548>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	617b      	str	r3, [r7, #20]
 80184d8:	e02a      	b.n	8018530 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80184da:	697b      	ldr	r3, [r7, #20]
 80184dc:	7a1b      	ldrb	r3, [r3, #8]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d00c      	beq.n	80184fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	7a1a      	ldrb	r2, [r3, #8]
 80184e6:	4b44      	ldr	r3, [pc, #272]	; (80185f8 <tcp_input+0x528>)
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80184ee:	3301      	adds	r3, #1
 80184f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d002      	beq.n	80184fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80184f6:	697b      	ldr	r3, [r7, #20]
 80184f8:	61bb      	str	r3, [r7, #24]
        continue;
 80184fa:	e016      	b.n	801852a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	8ada      	ldrh	r2, [r3, #22]
 8018500:	4b3c      	ldr	r3, [pc, #240]	; (80185f4 <tcp_input+0x524>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	885b      	ldrh	r3, [r3, #2]
 8018506:	b29b      	uxth	r3, r3
 8018508:	429a      	cmp	r2, r3
 801850a:	d10c      	bne.n	8018526 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	681a      	ldr	r2, [r3, #0]
 8018510:	4b39      	ldr	r3, [pc, #228]	; (80185f8 <tcp_input+0x528>)
 8018512:	695b      	ldr	r3, [r3, #20]
 8018514:	429a      	cmp	r2, r3
 8018516:	d00f      	beq.n	8018538 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018518:	697b      	ldr	r3, [r7, #20]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d00d      	beq.n	801853a <tcp_input+0x46a>
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d009      	beq.n	801853a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018526:	697b      	ldr	r3, [r7, #20]
 8018528:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801852a:	697b      	ldr	r3, [r7, #20]
 801852c:	68db      	ldr	r3, [r3, #12]
 801852e:	617b      	str	r3, [r7, #20]
 8018530:	697b      	ldr	r3, [r7, #20]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d1d1      	bne.n	80184da <tcp_input+0x40a>
 8018536:	e000      	b.n	801853a <tcp_input+0x46a>
            break;
 8018538:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d014      	beq.n	801856a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018540:	69bb      	ldr	r3, [r7, #24]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d00a      	beq.n	801855c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018546:	697b      	ldr	r3, [r7, #20]
 8018548:	68da      	ldr	r2, [r3, #12]
 801854a:	69bb      	ldr	r3, [r7, #24]
 801854c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801854e:	4b32      	ldr	r3, [pc, #200]	; (8018618 <tcp_input+0x548>)
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	697b      	ldr	r3, [r7, #20]
 8018554:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018556:	4a30      	ldr	r2, [pc, #192]	; (8018618 <tcp_input+0x548>)
 8018558:	697b      	ldr	r3, [r7, #20]
 801855a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801855c:	6978      	ldr	r0, [r7, #20]
 801855e:	f000 fa01 	bl	8018964 <tcp_listen_input>
      }
      pbuf_free(p);
 8018562:	6878      	ldr	r0, [r7, #4]
 8018564:	f7fd fcda 	bl	8015f1c <pbuf_free>
      return;
 8018568:	e19b      	b.n	80188a2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801856a:	69fb      	ldr	r3, [r7, #28]
 801856c:	2b00      	cmp	r3, #0
 801856e:	f000 8160 	beq.w	8018832 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018572:	4b2a      	ldr	r3, [pc, #168]	; (801861c <tcp_input+0x54c>)
 8018574:	2200      	movs	r2, #0
 8018576:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	891a      	ldrh	r2, [r3, #8]
 801857c:	4b27      	ldr	r3, [pc, #156]	; (801861c <tcp_input+0x54c>)
 801857e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018580:	4a26      	ldr	r2, [pc, #152]	; (801861c <tcp_input+0x54c>)
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018586:	4b1b      	ldr	r3, [pc, #108]	; (80185f4 <tcp_input+0x524>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	4a24      	ldr	r2, [pc, #144]	; (801861c <tcp_input+0x54c>)
 801858c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801858e:	4b24      	ldr	r3, [pc, #144]	; (8018620 <tcp_input+0x550>)
 8018590:	2200      	movs	r2, #0
 8018592:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018594:	4b23      	ldr	r3, [pc, #140]	; (8018624 <tcp_input+0x554>)
 8018596:	2200      	movs	r2, #0
 8018598:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801859a:	4b23      	ldr	r3, [pc, #140]	; (8018628 <tcp_input+0x558>)
 801859c:	2200      	movs	r2, #0
 801859e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80185a0:	4b22      	ldr	r3, [pc, #136]	; (801862c <tcp_input+0x55c>)
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	f003 0308 	and.w	r3, r3, #8
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d006      	beq.n	80185ba <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	7b5b      	ldrb	r3, [r3, #13]
 80185b0:	f043 0301 	orr.w	r3, r3, #1
 80185b4:	b2da      	uxtb	r2, r3
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80185ba:	69fb      	ldr	r3, [r7, #28]
 80185bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d038      	beq.n	8018634 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80185c2:	69f8      	ldr	r0, [r7, #28]
 80185c4:	f7ff f852 	bl	801766c <tcp_process_refused_data>
 80185c8:	4603      	mov	r3, r0
 80185ca:	f113 0f0d 	cmn.w	r3, #13
 80185ce:	d007      	beq.n	80185e0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80185d0:	69fb      	ldr	r3, [r7, #28]
 80185d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d02d      	beq.n	8018634 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80185d8:	4b15      	ldr	r3, [pc, #84]	; (8018630 <tcp_input+0x560>)
 80185da:	881b      	ldrh	r3, [r3, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d029      	beq.n	8018634 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80185e0:	69fb      	ldr	r3, [r7, #28]
 80185e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	f040 8104 	bne.w	80187f2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80185ea:	69f8      	ldr	r0, [r7, #28]
 80185ec:	f003 fe16 	bl	801c21c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80185f0:	e0ff      	b.n	80187f2 <tcp_input+0x722>
 80185f2:	bf00      	nop
 80185f4:	2000c80c 	.word	0x2000c80c
 80185f8:	200114a0 	.word	0x200114a0
 80185fc:	08022b7c 	.word	0x08022b7c
 8018600:	08022ca8 	.word	0x08022ca8
 8018604:	08022bc8 	.word	0x08022bc8
 8018608:	20014bb4 	.word	0x20014bb4
 801860c:	08022cd4 	.word	0x08022cd4
 8018610:	20014bc4 	.word	0x20014bc4
 8018614:	08022d00 	.word	0x08022d00
 8018618:	20014bbc 	.word	0x20014bbc
 801861c:	2000c7fc 	.word	0x2000c7fc
 8018620:	2000c82c 	.word	0x2000c82c
 8018624:	2000c829 	.word	0x2000c829
 8018628:	2000c824 	.word	0x2000c824
 801862c:	2000c828 	.word	0x2000c828
 8018630:	2000c826 	.word	0x2000c826
      }
    }
    tcp_input_pcb = pcb;
 8018634:	4a9c      	ldr	r2, [pc, #624]	; (80188a8 <tcp_input+0x7d8>)
 8018636:	69fb      	ldr	r3, [r7, #28]
 8018638:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801863a:	69f8      	ldr	r0, [r7, #28]
 801863c:	f000 fb0a 	bl	8018c54 <tcp_process>
 8018640:	4603      	mov	r3, r0
 8018642:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018644:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018648:	f113 0f0d 	cmn.w	r3, #13
 801864c:	f000 80d3 	beq.w	80187f6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8018650:	4b96      	ldr	r3, [pc, #600]	; (80188ac <tcp_input+0x7dc>)
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	f003 0308 	and.w	r3, r3, #8
 8018658:	2b00      	cmp	r3, #0
 801865a:	d015      	beq.n	8018688 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801865c:	69fb      	ldr	r3, [r7, #28]
 801865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018662:	2b00      	cmp	r3, #0
 8018664:	d008      	beq.n	8018678 <tcp_input+0x5a8>
 8018666:	69fb      	ldr	r3, [r7, #28]
 8018668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801866c:	69fa      	ldr	r2, [r7, #28]
 801866e:	6912      	ldr	r2, [r2, #16]
 8018670:	f06f 010d 	mvn.w	r1, #13
 8018674:	4610      	mov	r0, r2
 8018676:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018678:	69f9      	ldr	r1, [r7, #28]
 801867a:	488d      	ldr	r0, [pc, #564]	; (80188b0 <tcp_input+0x7e0>)
 801867c:	f7ff fbb0 	bl	8017de0 <tcp_pcb_remove>
        tcp_free(pcb);
 8018680:	69f8      	ldr	r0, [r7, #28]
 8018682:	f7fd fef7 	bl	8016474 <tcp_free>
 8018686:	e0c1      	b.n	801880c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8018688:	2300      	movs	r3, #0
 801868a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801868c:	4b89      	ldr	r3, [pc, #548]	; (80188b4 <tcp_input+0x7e4>)
 801868e:	881b      	ldrh	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d01d      	beq.n	80186d0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018694:	4b87      	ldr	r3, [pc, #540]	; (80188b4 <tcp_input+0x7e4>)
 8018696:	881b      	ldrh	r3, [r3, #0]
 8018698:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801869a:	69fb      	ldr	r3, [r7, #28]
 801869c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d00a      	beq.n	80186ba <tcp_input+0x5ea>
 80186a4:	69fb      	ldr	r3, [r7, #28]
 80186a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186aa:	69fa      	ldr	r2, [r7, #28]
 80186ac:	6910      	ldr	r0, [r2, #16]
 80186ae:	89fa      	ldrh	r2, [r7, #14]
 80186b0:	69f9      	ldr	r1, [r7, #28]
 80186b2:	4798      	blx	r3
 80186b4:	4603      	mov	r3, r0
 80186b6:	74fb      	strb	r3, [r7, #19]
 80186b8:	e001      	b.n	80186be <tcp_input+0x5ee>
 80186ba:	2300      	movs	r3, #0
 80186bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80186be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186c2:	f113 0f0d 	cmn.w	r3, #13
 80186c6:	f000 8098 	beq.w	80187fa <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80186ca:	4b7a      	ldr	r3, [pc, #488]	; (80188b4 <tcp_input+0x7e4>)
 80186cc:	2200      	movs	r2, #0
 80186ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80186d0:	69f8      	ldr	r0, [r7, #28]
 80186d2:	f000 f907 	bl	80188e4 <tcp_input_delayed_close>
 80186d6:	4603      	mov	r3, r0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	f040 8090 	bne.w	80187fe <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80186de:	4b76      	ldr	r3, [pc, #472]	; (80188b8 <tcp_input+0x7e8>)
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d041      	beq.n	801876a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80186e6:	69fb      	ldr	r3, [r7, #28]
 80186e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d006      	beq.n	80186fc <tcp_input+0x62c>
 80186ee:	4b73      	ldr	r3, [pc, #460]	; (80188bc <tcp_input+0x7ec>)
 80186f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80186f4:	4972      	ldr	r1, [pc, #456]	; (80188c0 <tcp_input+0x7f0>)
 80186f6:	4873      	ldr	r0, [pc, #460]	; (80188c4 <tcp_input+0x7f4>)
 80186f8:	f006 fe70 	bl	801f3dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80186fc:	69fb      	ldr	r3, [r7, #28]
 80186fe:	8b5b      	ldrh	r3, [r3, #26]
 8018700:	f003 0310 	and.w	r3, r3, #16
 8018704:	2b00      	cmp	r3, #0
 8018706:	d008      	beq.n	801871a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018708:	4b6b      	ldr	r3, [pc, #428]	; (80188b8 <tcp_input+0x7e8>)
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	4618      	mov	r0, r3
 801870e:	f7fd fc05 	bl	8015f1c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018712:	69f8      	ldr	r0, [r7, #28]
 8018714:	f7fe f996 	bl	8016a44 <tcp_abort>
            goto aborted;
 8018718:	e078      	b.n	801880c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801871a:	69fb      	ldr	r3, [r7, #28]
 801871c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018720:	2b00      	cmp	r3, #0
 8018722:	d00c      	beq.n	801873e <tcp_input+0x66e>
 8018724:	69fb      	ldr	r3, [r7, #28]
 8018726:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801872a:	69fb      	ldr	r3, [r7, #28]
 801872c:	6918      	ldr	r0, [r3, #16]
 801872e:	4b62      	ldr	r3, [pc, #392]	; (80188b8 <tcp_input+0x7e8>)
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	2300      	movs	r3, #0
 8018734:	69f9      	ldr	r1, [r7, #28]
 8018736:	47a0      	blx	r4
 8018738:	4603      	mov	r3, r0
 801873a:	74fb      	strb	r3, [r7, #19]
 801873c:	e008      	b.n	8018750 <tcp_input+0x680>
 801873e:	4b5e      	ldr	r3, [pc, #376]	; (80188b8 <tcp_input+0x7e8>)
 8018740:	681a      	ldr	r2, [r3, #0]
 8018742:	2300      	movs	r3, #0
 8018744:	69f9      	ldr	r1, [r7, #28]
 8018746:	2000      	movs	r0, #0
 8018748:	f7ff f884 	bl	8017854 <tcp_recv_null>
 801874c:	4603      	mov	r3, r0
 801874e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018750:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018754:	f113 0f0d 	cmn.w	r3, #13
 8018758:	d053      	beq.n	8018802 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801875a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d003      	beq.n	801876a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8018762:	4b55      	ldr	r3, [pc, #340]	; (80188b8 <tcp_input+0x7e8>)
 8018764:	681a      	ldr	r2, [r3, #0]
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801876a:	4b50      	ldr	r3, [pc, #320]	; (80188ac <tcp_input+0x7dc>)
 801876c:	781b      	ldrb	r3, [r3, #0]
 801876e:	f003 0320 	and.w	r3, r3, #32
 8018772:	2b00      	cmp	r3, #0
 8018774:	d030      	beq.n	80187d8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8018776:	69fb      	ldr	r3, [r7, #28]
 8018778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801877a:	2b00      	cmp	r3, #0
 801877c:	d009      	beq.n	8018792 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801877e:	69fb      	ldr	r3, [r7, #28]
 8018780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018782:	7b5a      	ldrb	r2, [r3, #13]
 8018784:	69fb      	ldr	r3, [r7, #28]
 8018786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018788:	f042 0220 	orr.w	r2, r2, #32
 801878c:	b2d2      	uxtb	r2, r2
 801878e:	735a      	strb	r2, [r3, #13]
 8018790:	e022      	b.n	80187d8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018792:	69fb      	ldr	r3, [r7, #28]
 8018794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018796:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801879a:	d005      	beq.n	80187a8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801879c:	69fb      	ldr	r3, [r7, #28]
 801879e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187a0:	3301      	adds	r3, #1
 80187a2:	b29a      	uxth	r2, r3
 80187a4:	69fb      	ldr	r3, [r7, #28]
 80187a6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80187a8:	69fb      	ldr	r3, [r7, #28]
 80187aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d00b      	beq.n	80187ca <tcp_input+0x6fa>
 80187b2:	69fb      	ldr	r3, [r7, #28]
 80187b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80187b8:	69fb      	ldr	r3, [r7, #28]
 80187ba:	6918      	ldr	r0, [r3, #16]
 80187bc:	2300      	movs	r3, #0
 80187be:	2200      	movs	r2, #0
 80187c0:	69f9      	ldr	r1, [r7, #28]
 80187c2:	47a0      	blx	r4
 80187c4:	4603      	mov	r3, r0
 80187c6:	74fb      	strb	r3, [r7, #19]
 80187c8:	e001      	b.n	80187ce <tcp_input+0x6fe>
 80187ca:	2300      	movs	r3, #0
 80187cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80187ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187d2:	f113 0f0d 	cmn.w	r3, #13
 80187d6:	d016      	beq.n	8018806 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80187d8:	4b33      	ldr	r3, [pc, #204]	; (80188a8 <tcp_input+0x7d8>)
 80187da:	2200      	movs	r2, #0
 80187dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80187de:	69f8      	ldr	r0, [r7, #28]
 80187e0:	f000 f880 	bl	80188e4 <tcp_input_delayed_close>
 80187e4:	4603      	mov	r3, r0
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d10f      	bne.n	801880a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80187ea:	69f8      	ldr	r0, [r7, #28]
 80187ec:	f002 ff10 	bl	801b610 <tcp_output>
 80187f0:	e00c      	b.n	801880c <tcp_input+0x73c>
        goto aborted;
 80187f2:	bf00      	nop
 80187f4:	e00a      	b.n	801880c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80187f6:	bf00      	nop
 80187f8:	e008      	b.n	801880c <tcp_input+0x73c>
              goto aborted;
 80187fa:	bf00      	nop
 80187fc:	e006      	b.n	801880c <tcp_input+0x73c>
          goto aborted;
 80187fe:	bf00      	nop
 8018800:	e004      	b.n	801880c <tcp_input+0x73c>
            goto aborted;
 8018802:	bf00      	nop
 8018804:	e002      	b.n	801880c <tcp_input+0x73c>
              goto aborted;
 8018806:	bf00      	nop
 8018808:	e000      	b.n	801880c <tcp_input+0x73c>
          goto aborted;
 801880a:	bf00      	nop
    tcp_input_pcb = NULL;
 801880c:	4b26      	ldr	r3, [pc, #152]	; (80188a8 <tcp_input+0x7d8>)
 801880e:	2200      	movs	r2, #0
 8018810:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8018812:	4b29      	ldr	r3, [pc, #164]	; (80188b8 <tcp_input+0x7e8>)
 8018814:	2200      	movs	r2, #0
 8018816:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018818:	4b2b      	ldr	r3, [pc, #172]	; (80188c8 <tcp_input+0x7f8>)
 801881a:	685b      	ldr	r3, [r3, #4]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d03f      	beq.n	80188a0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8018820:	4b29      	ldr	r3, [pc, #164]	; (80188c8 <tcp_input+0x7f8>)
 8018822:	685b      	ldr	r3, [r3, #4]
 8018824:	4618      	mov	r0, r3
 8018826:	f7fd fb79 	bl	8015f1c <pbuf_free>
      inseg.p = NULL;
 801882a:	4b27      	ldr	r3, [pc, #156]	; (80188c8 <tcp_input+0x7f8>)
 801882c:	2200      	movs	r2, #0
 801882e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018830:	e036      	b.n	80188a0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018832:	4b26      	ldr	r3, [pc, #152]	; (80188cc <tcp_input+0x7fc>)
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	899b      	ldrh	r3, [r3, #12]
 8018838:	b29b      	uxth	r3, r3
 801883a:	4618      	mov	r0, r3
 801883c:	f7fb ff7a 	bl	8014734 <lwip_htons>
 8018840:	4603      	mov	r3, r0
 8018842:	b2db      	uxtb	r3, r3
 8018844:	f003 0304 	and.w	r3, r3, #4
 8018848:	2b00      	cmp	r3, #0
 801884a:	d118      	bne.n	801887e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801884c:	4b20      	ldr	r3, [pc, #128]	; (80188d0 <tcp_input+0x800>)
 801884e:	6819      	ldr	r1, [r3, #0]
 8018850:	4b20      	ldr	r3, [pc, #128]	; (80188d4 <tcp_input+0x804>)
 8018852:	881b      	ldrh	r3, [r3, #0]
 8018854:	461a      	mov	r2, r3
 8018856:	4b20      	ldr	r3, [pc, #128]	; (80188d8 <tcp_input+0x808>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801885c:	4b1b      	ldr	r3, [pc, #108]	; (80188cc <tcp_input+0x7fc>)
 801885e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018860:	885b      	ldrh	r3, [r3, #2]
 8018862:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018864:	4a19      	ldr	r2, [pc, #100]	; (80188cc <tcp_input+0x7fc>)
 8018866:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018868:	8812      	ldrh	r2, [r2, #0]
 801886a:	b292      	uxth	r2, r2
 801886c:	9202      	str	r2, [sp, #8]
 801886e:	9301      	str	r3, [sp, #4]
 8018870:	4b1a      	ldr	r3, [pc, #104]	; (80188dc <tcp_input+0x80c>)
 8018872:	9300      	str	r3, [sp, #0]
 8018874:	4b1a      	ldr	r3, [pc, #104]	; (80188e0 <tcp_input+0x810>)
 8018876:	4602      	mov	r2, r0
 8018878:	2000      	movs	r0, #0
 801887a:	f003 fc7d 	bl	801c178 <tcp_rst>
    pbuf_free(p);
 801887e:	6878      	ldr	r0, [r7, #4]
 8018880:	f7fd fb4c 	bl	8015f1c <pbuf_free>
  return;
 8018884:	e00c      	b.n	80188a0 <tcp_input+0x7d0>
    goto dropped;
 8018886:	bf00      	nop
 8018888:	e006      	b.n	8018898 <tcp_input+0x7c8>
    goto dropped;
 801888a:	bf00      	nop
 801888c:	e004      	b.n	8018898 <tcp_input+0x7c8>
    goto dropped;
 801888e:	bf00      	nop
 8018890:	e002      	b.n	8018898 <tcp_input+0x7c8>
      goto dropped;
 8018892:	bf00      	nop
 8018894:	e000      	b.n	8018898 <tcp_input+0x7c8>
      goto dropped;
 8018896:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018898:	6878      	ldr	r0, [r7, #4]
 801889a:	f7fd fb3f 	bl	8015f1c <pbuf_free>
 801889e:	e000      	b.n	80188a2 <tcp_input+0x7d2>
  return;
 80188a0:	bf00      	nop
}
 80188a2:	3724      	adds	r7, #36	; 0x24
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd90      	pop	{r4, r7, pc}
 80188a8:	20014bc8 	.word	0x20014bc8
 80188ac:	2000c829 	.word	0x2000c829
 80188b0:	20014bb4 	.word	0x20014bb4
 80188b4:	2000c824 	.word	0x2000c824
 80188b8:	2000c82c 	.word	0x2000c82c
 80188bc:	08022b7c 	.word	0x08022b7c
 80188c0:	08022d30 	.word	0x08022d30
 80188c4:	08022bc8 	.word	0x08022bc8
 80188c8:	2000c7fc 	.word	0x2000c7fc
 80188cc:	2000c80c 	.word	0x2000c80c
 80188d0:	2000c820 	.word	0x2000c820
 80188d4:	2000c826 	.word	0x2000c826
 80188d8:	2000c81c 	.word	0x2000c81c
 80188dc:	200114b0 	.word	0x200114b0
 80188e0:	200114b4 	.word	0x200114b4

080188e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b082      	sub	sp, #8
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d106      	bne.n	8018900 <tcp_input_delayed_close+0x1c>
 80188f2:	4b17      	ldr	r3, [pc, #92]	; (8018950 <tcp_input_delayed_close+0x6c>)
 80188f4:	f240 225a 	movw	r2, #602	; 0x25a
 80188f8:	4916      	ldr	r1, [pc, #88]	; (8018954 <tcp_input_delayed_close+0x70>)
 80188fa:	4817      	ldr	r0, [pc, #92]	; (8018958 <tcp_input_delayed_close+0x74>)
 80188fc:	f006 fd6e 	bl	801f3dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018900:	4b16      	ldr	r3, [pc, #88]	; (801895c <tcp_input_delayed_close+0x78>)
 8018902:	781b      	ldrb	r3, [r3, #0]
 8018904:	f003 0310 	and.w	r3, r3, #16
 8018908:	2b00      	cmp	r3, #0
 801890a:	d01c      	beq.n	8018946 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	8b5b      	ldrh	r3, [r3, #26]
 8018910:	f003 0310 	and.w	r3, r3, #16
 8018914:	2b00      	cmp	r3, #0
 8018916:	d10d      	bne.n	8018934 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801891e:	2b00      	cmp	r3, #0
 8018920:	d008      	beq.n	8018934 <tcp_input_delayed_close+0x50>
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018928:	687a      	ldr	r2, [r7, #4]
 801892a:	6912      	ldr	r2, [r2, #16]
 801892c:	f06f 010e 	mvn.w	r1, #14
 8018930:	4610      	mov	r0, r2
 8018932:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018934:	6879      	ldr	r1, [r7, #4]
 8018936:	480a      	ldr	r0, [pc, #40]	; (8018960 <tcp_input_delayed_close+0x7c>)
 8018938:	f7ff fa52 	bl	8017de0 <tcp_pcb_remove>
    tcp_free(pcb);
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f7fd fd99 	bl	8016474 <tcp_free>
    return 1;
 8018942:	2301      	movs	r3, #1
 8018944:	e000      	b.n	8018948 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018946:	2300      	movs	r3, #0
}
 8018948:	4618      	mov	r0, r3
 801894a:	3708      	adds	r7, #8
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}
 8018950:	08022b7c 	.word	0x08022b7c
 8018954:	08022d4c 	.word	0x08022d4c
 8018958:	08022bc8 	.word	0x08022bc8
 801895c:	2000c829 	.word	0x2000c829
 8018960:	20014bb4 	.word	0x20014bb4

08018964 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018964:	b590      	push	{r4, r7, lr}
 8018966:	b08b      	sub	sp, #44	; 0x2c
 8018968:	af04      	add	r7, sp, #16
 801896a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801896c:	4b6f      	ldr	r3, [pc, #444]	; (8018b2c <tcp_listen_input+0x1c8>)
 801896e:	781b      	ldrb	r3, [r3, #0]
 8018970:	f003 0304 	and.w	r3, r3, #4
 8018974:	2b00      	cmp	r3, #0
 8018976:	f040 80d2 	bne.w	8018b1e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d106      	bne.n	801898e <tcp_listen_input+0x2a>
 8018980:	4b6b      	ldr	r3, [pc, #428]	; (8018b30 <tcp_listen_input+0x1cc>)
 8018982:	f240 2281 	movw	r2, #641	; 0x281
 8018986:	496b      	ldr	r1, [pc, #428]	; (8018b34 <tcp_listen_input+0x1d0>)
 8018988:	486b      	ldr	r0, [pc, #428]	; (8018b38 <tcp_listen_input+0x1d4>)
 801898a:	f006 fd27 	bl	801f3dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801898e:	4b67      	ldr	r3, [pc, #412]	; (8018b2c <tcp_listen_input+0x1c8>)
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	f003 0310 	and.w	r3, r3, #16
 8018996:	2b00      	cmp	r3, #0
 8018998:	d019      	beq.n	80189ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801899a:	4b68      	ldr	r3, [pc, #416]	; (8018b3c <tcp_listen_input+0x1d8>)
 801899c:	6819      	ldr	r1, [r3, #0]
 801899e:	4b68      	ldr	r3, [pc, #416]	; (8018b40 <tcp_listen_input+0x1dc>)
 80189a0:	881b      	ldrh	r3, [r3, #0]
 80189a2:	461a      	mov	r2, r3
 80189a4:	4b67      	ldr	r3, [pc, #412]	; (8018b44 <tcp_listen_input+0x1e0>)
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80189aa:	4b67      	ldr	r3, [pc, #412]	; (8018b48 <tcp_listen_input+0x1e4>)
 80189ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80189ae:	885b      	ldrh	r3, [r3, #2]
 80189b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80189b2:	4a65      	ldr	r2, [pc, #404]	; (8018b48 <tcp_listen_input+0x1e4>)
 80189b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80189b6:	8812      	ldrh	r2, [r2, #0]
 80189b8:	b292      	uxth	r2, r2
 80189ba:	9202      	str	r2, [sp, #8]
 80189bc:	9301      	str	r3, [sp, #4]
 80189be:	4b63      	ldr	r3, [pc, #396]	; (8018b4c <tcp_listen_input+0x1e8>)
 80189c0:	9300      	str	r3, [sp, #0]
 80189c2:	4b63      	ldr	r3, [pc, #396]	; (8018b50 <tcp_listen_input+0x1ec>)
 80189c4:	4602      	mov	r2, r0
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	f003 fbd6 	bl	801c178 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80189cc:	e0a9      	b.n	8018b22 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80189ce:	4b57      	ldr	r3, [pc, #348]	; (8018b2c <tcp_listen_input+0x1c8>)
 80189d0:	781b      	ldrb	r3, [r3, #0]
 80189d2:	f003 0302 	and.w	r3, r3, #2
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	f000 80a3 	beq.w	8018b22 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	7d5b      	ldrb	r3, [r3, #21]
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7ff f85b 	bl	8017a9c <tcp_alloc>
 80189e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d111      	bne.n	8018a12 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	699b      	ldr	r3, [r3, #24]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d00a      	beq.n	8018a0c <tcp_listen_input+0xa8>
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	699b      	ldr	r3, [r3, #24]
 80189fa:	687a      	ldr	r2, [r7, #4]
 80189fc:	6910      	ldr	r0, [r2, #16]
 80189fe:	f04f 32ff 	mov.w	r2, #4294967295
 8018a02:	2100      	movs	r1, #0
 8018a04:	4798      	blx	r3
 8018a06:	4603      	mov	r3, r0
 8018a08:	73bb      	strb	r3, [r7, #14]
      return;
 8018a0a:	e08b      	b.n	8018b24 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018a0c:	23f0      	movs	r3, #240	; 0xf0
 8018a0e:	73bb      	strb	r3, [r7, #14]
      return;
 8018a10:	e088      	b.n	8018b24 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018a12:	4b50      	ldr	r3, [pc, #320]	; (8018b54 <tcp_listen_input+0x1f0>)
 8018a14:	695a      	ldr	r2, [r3, #20]
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018a1a:	4b4e      	ldr	r3, [pc, #312]	; (8018b54 <tcp_listen_input+0x1f0>)
 8018a1c:	691a      	ldr	r2, [r3, #16]
 8018a1e:	697b      	ldr	r3, [r7, #20]
 8018a20:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	8ada      	ldrh	r2, [r3, #22]
 8018a26:	697b      	ldr	r3, [r7, #20]
 8018a28:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018a2a:	4b47      	ldr	r3, [pc, #284]	; (8018b48 <tcp_listen_input+0x1e4>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	881b      	ldrh	r3, [r3, #0]
 8018a30:	b29a      	uxth	r2, r3
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018a36:	697b      	ldr	r3, [r7, #20]
 8018a38:	2203      	movs	r2, #3
 8018a3a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018a3c:	4b41      	ldr	r3, [pc, #260]	; (8018b44 <tcp_listen_input+0x1e0>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	1c5a      	adds	r2, r3, #1
 8018a42:	697b      	ldr	r3, [r7, #20]
 8018a44:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018a4a:	697b      	ldr	r3, [r7, #20]
 8018a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018a4e:	6978      	ldr	r0, [r7, #20]
 8018a50:	f7ff fa5a 	bl	8017f08 <tcp_next_iss>
 8018a54:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	693a      	ldr	r2, [r7, #16]
 8018a5a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	693a      	ldr	r2, [r7, #16]
 8018a60:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8018a62:	697b      	ldr	r3, [r7, #20]
 8018a64:	693a      	ldr	r2, [r7, #16]
 8018a66:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	693a      	ldr	r2, [r7, #16]
 8018a6c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018a6e:	4b35      	ldr	r3, [pc, #212]	; (8018b44 <tcp_listen_input+0x1e0>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	1e5a      	subs	r2, r3, #1
 8018a74:	697b      	ldr	r3, [r7, #20]
 8018a76:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	691a      	ldr	r2, [r3, #16]
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018a80:	697b      	ldr	r3, [r7, #20]
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	7a5b      	ldrb	r3, [r3, #9]
 8018a8a:	f003 030c 	and.w	r3, r3, #12
 8018a8e:	b2da      	uxtb	r2, r3
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	7a1a      	ldrb	r2, [r3, #8]
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018a9c:	4b2e      	ldr	r3, [pc, #184]	; (8018b58 <tcp_listen_input+0x1f4>)
 8018a9e:	681a      	ldr	r2, [r3, #0]
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	60da      	str	r2, [r3, #12]
 8018aa4:	4a2c      	ldr	r2, [pc, #176]	; (8018b58 <tcp_listen_input+0x1f4>)
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	6013      	str	r3, [r2, #0]
 8018aaa:	f003 fd27 	bl	801c4fc <tcp_timer_needed>
 8018aae:	4b2b      	ldr	r3, [pc, #172]	; (8018b5c <tcp_listen_input+0x1f8>)
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018ab4:	6978      	ldr	r0, [r7, #20]
 8018ab6:	f001 fd8d 	bl	801a5d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018aba:	4b23      	ldr	r3, [pc, #140]	; (8018b48 <tcp_listen_input+0x1e4>)
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	89db      	ldrh	r3, [r3, #14]
 8018ac0:	b29a      	uxth	r2, r3
 8018ac2:	697b      	ldr	r3, [r7, #20]
 8018ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018ace:	697b      	ldr	r3, [r7, #20]
 8018ad0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018ad8:	697b      	ldr	r3, [r7, #20]
 8018ada:	3304      	adds	r3, #4
 8018adc:	4618      	mov	r0, r3
 8018ade:	f005 f91b 	bl	801dd18 <ip4_route>
 8018ae2:	4601      	mov	r1, r0
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	3304      	adds	r3, #4
 8018ae8:	461a      	mov	r2, r3
 8018aea:	4620      	mov	r0, r4
 8018aec:	f7ff fa32 	bl	8017f54 <tcp_eff_send_mss_netif>
 8018af0:	4603      	mov	r3, r0
 8018af2:	461a      	mov	r2, r3
 8018af4:	697b      	ldr	r3, [r7, #20]
 8018af6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018af8:	2112      	movs	r1, #18
 8018afa:	6978      	ldr	r0, [r7, #20]
 8018afc:	f002 fc9a 	bl	801b434 <tcp_enqueue_flags>
 8018b00:	4603      	mov	r3, r0
 8018b02:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d004      	beq.n	8018b16 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018b0c:	2100      	movs	r1, #0
 8018b0e:	6978      	ldr	r0, [r7, #20]
 8018b10:	f7fd feda 	bl	80168c8 <tcp_abandon>
      return;
 8018b14:	e006      	b.n	8018b24 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018b16:	6978      	ldr	r0, [r7, #20]
 8018b18:	f002 fd7a 	bl	801b610 <tcp_output>
  return;
 8018b1c:	e001      	b.n	8018b22 <tcp_listen_input+0x1be>
    return;
 8018b1e:	bf00      	nop
 8018b20:	e000      	b.n	8018b24 <tcp_listen_input+0x1c0>
  return;
 8018b22:	bf00      	nop
}
 8018b24:	371c      	adds	r7, #28
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd90      	pop	{r4, r7, pc}
 8018b2a:	bf00      	nop
 8018b2c:	2000c828 	.word	0x2000c828
 8018b30:	08022b7c 	.word	0x08022b7c
 8018b34:	08022d74 	.word	0x08022d74
 8018b38:	08022bc8 	.word	0x08022bc8
 8018b3c:	2000c820 	.word	0x2000c820
 8018b40:	2000c826 	.word	0x2000c826
 8018b44:	2000c81c 	.word	0x2000c81c
 8018b48:	2000c80c 	.word	0x2000c80c
 8018b4c:	200114b0 	.word	0x200114b0
 8018b50:	200114b4 	.word	0x200114b4
 8018b54:	200114a0 	.word	0x200114a0
 8018b58:	20014bb4 	.word	0x20014bb4
 8018b5c:	20014bb0 	.word	0x20014bb0

08018b60 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b086      	sub	sp, #24
 8018b64:	af04      	add	r7, sp, #16
 8018b66:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018b68:	4b2f      	ldr	r3, [pc, #188]	; (8018c28 <tcp_timewait_input+0xc8>)
 8018b6a:	781b      	ldrb	r3, [r3, #0]
 8018b6c:	f003 0304 	and.w	r3, r3, #4
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d153      	bne.n	8018c1c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d106      	bne.n	8018b88 <tcp_timewait_input+0x28>
 8018b7a:	4b2c      	ldr	r3, [pc, #176]	; (8018c2c <tcp_timewait_input+0xcc>)
 8018b7c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018b80:	492b      	ldr	r1, [pc, #172]	; (8018c30 <tcp_timewait_input+0xd0>)
 8018b82:	482c      	ldr	r0, [pc, #176]	; (8018c34 <tcp_timewait_input+0xd4>)
 8018b84:	f006 fc2a 	bl	801f3dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018b88:	4b27      	ldr	r3, [pc, #156]	; (8018c28 <tcp_timewait_input+0xc8>)
 8018b8a:	781b      	ldrb	r3, [r3, #0]
 8018b8c:	f003 0302 	and.w	r3, r3, #2
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d02a      	beq.n	8018bea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018b94:	4b28      	ldr	r3, [pc, #160]	; (8018c38 <tcp_timewait_input+0xd8>)
 8018b96:	681a      	ldr	r2, [r3, #0]
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b9c:	1ad3      	subs	r3, r2, r3
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	db2d      	blt.n	8018bfe <tcp_timewait_input+0x9e>
 8018ba2:	4b25      	ldr	r3, [pc, #148]	; (8018c38 <tcp_timewait_input+0xd8>)
 8018ba4:	681a      	ldr	r2, [r3, #0]
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018baa:	6879      	ldr	r1, [r7, #4]
 8018bac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018bae:	440b      	add	r3, r1
 8018bb0:	1ad3      	subs	r3, r2, r3
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	dc23      	bgt.n	8018bfe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018bb6:	4b21      	ldr	r3, [pc, #132]	; (8018c3c <tcp_timewait_input+0xdc>)
 8018bb8:	6819      	ldr	r1, [r3, #0]
 8018bba:	4b21      	ldr	r3, [pc, #132]	; (8018c40 <tcp_timewait_input+0xe0>)
 8018bbc:	881b      	ldrh	r3, [r3, #0]
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	4b1d      	ldr	r3, [pc, #116]	; (8018c38 <tcp_timewait_input+0xd8>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018bc6:	4b1f      	ldr	r3, [pc, #124]	; (8018c44 <tcp_timewait_input+0xe4>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018bca:	885b      	ldrh	r3, [r3, #2]
 8018bcc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018bce:	4a1d      	ldr	r2, [pc, #116]	; (8018c44 <tcp_timewait_input+0xe4>)
 8018bd0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018bd2:	8812      	ldrh	r2, [r2, #0]
 8018bd4:	b292      	uxth	r2, r2
 8018bd6:	9202      	str	r2, [sp, #8]
 8018bd8:	9301      	str	r3, [sp, #4]
 8018bda:	4b1b      	ldr	r3, [pc, #108]	; (8018c48 <tcp_timewait_input+0xe8>)
 8018bdc:	9300      	str	r3, [sp, #0]
 8018bde:	4b1b      	ldr	r3, [pc, #108]	; (8018c4c <tcp_timewait_input+0xec>)
 8018be0:	4602      	mov	r2, r0
 8018be2:	6878      	ldr	r0, [r7, #4]
 8018be4:	f003 fac8 	bl	801c178 <tcp_rst>
      return;
 8018be8:	e01b      	b.n	8018c22 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018bea:	4b0f      	ldr	r3, [pc, #60]	; (8018c28 <tcp_timewait_input+0xc8>)
 8018bec:	781b      	ldrb	r3, [r3, #0]
 8018bee:	f003 0301 	and.w	r3, r3, #1
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d003      	beq.n	8018bfe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018bf6:	4b16      	ldr	r3, [pc, #88]	; (8018c50 <tcp_timewait_input+0xf0>)
 8018bf8:	681a      	ldr	r2, [r3, #0]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018bfe:	4b10      	ldr	r3, [pc, #64]	; (8018c40 <tcp_timewait_input+0xe0>)
 8018c00:	881b      	ldrh	r3, [r3, #0]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d00c      	beq.n	8018c20 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	8b5b      	ldrh	r3, [r3, #26]
 8018c0a:	f043 0302 	orr.w	r3, r3, #2
 8018c0e:	b29a      	uxth	r2, r3
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	f002 fcfb 	bl	801b610 <tcp_output>
  }
  return;
 8018c1a:	e001      	b.n	8018c20 <tcp_timewait_input+0xc0>
    return;
 8018c1c:	bf00      	nop
 8018c1e:	e000      	b.n	8018c22 <tcp_timewait_input+0xc2>
  return;
 8018c20:	bf00      	nop
}
 8018c22:	3708      	adds	r7, #8
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}
 8018c28:	2000c828 	.word	0x2000c828
 8018c2c:	08022b7c 	.word	0x08022b7c
 8018c30:	08022d94 	.word	0x08022d94
 8018c34:	08022bc8 	.word	0x08022bc8
 8018c38:	2000c81c 	.word	0x2000c81c
 8018c3c:	2000c820 	.word	0x2000c820
 8018c40:	2000c826 	.word	0x2000c826
 8018c44:	2000c80c 	.word	0x2000c80c
 8018c48:	200114b0 	.word	0x200114b0
 8018c4c:	200114b4 	.word	0x200114b4
 8018c50:	20014bb8 	.word	0x20014bb8

08018c54 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018c54:	b590      	push	{r4, r7, lr}
 8018c56:	b08d      	sub	sp, #52	; 0x34
 8018c58:	af04      	add	r7, sp, #16
 8018c5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018c60:	2300      	movs	r3, #0
 8018c62:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d106      	bne.n	8018c78 <tcp_process+0x24>
 8018c6a:	4ba5      	ldr	r3, [pc, #660]	; (8018f00 <tcp_process+0x2ac>)
 8018c6c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018c70:	49a4      	ldr	r1, [pc, #656]	; (8018f04 <tcp_process+0x2b0>)
 8018c72:	48a5      	ldr	r0, [pc, #660]	; (8018f08 <tcp_process+0x2b4>)
 8018c74:	f006 fbb2 	bl	801f3dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018c78:	4ba4      	ldr	r3, [pc, #656]	; (8018f0c <tcp_process+0x2b8>)
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	f003 0304 	and.w	r3, r3, #4
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d04e      	beq.n	8018d22 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	7d1b      	ldrb	r3, [r3, #20]
 8018c88:	2b02      	cmp	r3, #2
 8018c8a:	d108      	bne.n	8018c9e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018c90:	4b9f      	ldr	r3, [pc, #636]	; (8018f10 <tcp_process+0x2bc>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	429a      	cmp	r2, r3
 8018c96:	d123      	bne.n	8018ce0 <tcp_process+0x8c>
        acceptable = 1;
 8018c98:	2301      	movs	r3, #1
 8018c9a:	76fb      	strb	r3, [r7, #27]
 8018c9c:	e020      	b.n	8018ce0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018ca2:	4b9c      	ldr	r3, [pc, #624]	; (8018f14 <tcp_process+0x2c0>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d102      	bne.n	8018cb0 <tcp_process+0x5c>
        acceptable = 1;
 8018caa:	2301      	movs	r3, #1
 8018cac:	76fb      	strb	r3, [r7, #27]
 8018cae:	e017      	b.n	8018ce0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018cb0:	4b98      	ldr	r3, [pc, #608]	; (8018f14 <tcp_process+0x2c0>)
 8018cb2:	681a      	ldr	r2, [r3, #0]
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb8:	1ad3      	subs	r3, r2, r3
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	db10      	blt.n	8018ce0 <tcp_process+0x8c>
 8018cbe:	4b95      	ldr	r3, [pc, #596]	; (8018f14 <tcp_process+0x2c0>)
 8018cc0:	681a      	ldr	r2, [r3, #0]
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc6:	6879      	ldr	r1, [r7, #4]
 8018cc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018cca:	440b      	add	r3, r1
 8018ccc:	1ad3      	subs	r3, r2, r3
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	dc06      	bgt.n	8018ce0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	8b5b      	ldrh	r3, [r3, #26]
 8018cd6:	f043 0302 	orr.w	r3, r3, #2
 8018cda:	b29a      	uxth	r2, r3
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018ce0:	7efb      	ldrb	r3, [r7, #27]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d01b      	beq.n	8018d1e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	7d1b      	ldrb	r3, [r3, #20]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d106      	bne.n	8018cfc <tcp_process+0xa8>
 8018cee:	4b84      	ldr	r3, [pc, #528]	; (8018f00 <tcp_process+0x2ac>)
 8018cf0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018cf4:	4988      	ldr	r1, [pc, #544]	; (8018f18 <tcp_process+0x2c4>)
 8018cf6:	4884      	ldr	r0, [pc, #528]	; (8018f08 <tcp_process+0x2b4>)
 8018cf8:	f006 fb70 	bl	801f3dc <iprintf>
      recv_flags |= TF_RESET;
 8018cfc:	4b87      	ldr	r3, [pc, #540]	; (8018f1c <tcp_process+0x2c8>)
 8018cfe:	781b      	ldrb	r3, [r3, #0]
 8018d00:	f043 0308 	orr.w	r3, r3, #8
 8018d04:	b2da      	uxtb	r2, r3
 8018d06:	4b85      	ldr	r3, [pc, #532]	; (8018f1c <tcp_process+0x2c8>)
 8018d08:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	8b5b      	ldrh	r3, [r3, #26]
 8018d0e:	f023 0301 	bic.w	r3, r3, #1
 8018d12:	b29a      	uxth	r2, r3
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018d18:	f06f 030d 	mvn.w	r3, #13
 8018d1c:	e37a      	b.n	8019414 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018d1e:	2300      	movs	r3, #0
 8018d20:	e378      	b.n	8019414 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018d22:	4b7a      	ldr	r3, [pc, #488]	; (8018f0c <tcp_process+0x2b8>)
 8018d24:	781b      	ldrb	r3, [r3, #0]
 8018d26:	f003 0302 	and.w	r3, r3, #2
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d010      	beq.n	8018d50 <tcp_process+0xfc>
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	7d1b      	ldrb	r3, [r3, #20]
 8018d32:	2b02      	cmp	r3, #2
 8018d34:	d00c      	beq.n	8018d50 <tcp_process+0xfc>
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	7d1b      	ldrb	r3, [r3, #20]
 8018d3a:	2b03      	cmp	r3, #3
 8018d3c:	d008      	beq.n	8018d50 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	8b5b      	ldrh	r3, [r3, #26]
 8018d42:	f043 0302 	orr.w	r3, r3, #2
 8018d46:	b29a      	uxth	r2, r3
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	e361      	b.n	8019414 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	8b5b      	ldrh	r3, [r3, #26]
 8018d54:	f003 0310 	and.w	r3, r3, #16
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d103      	bne.n	8018d64 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018d5c:	4b70      	ldr	r3, [pc, #448]	; (8018f20 <tcp_process+0x2cc>)
 8018d5e:	681a      	ldr	r2, [r3, #0]
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	2200      	movs	r2, #0
 8018d68:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	2200      	movs	r2, #0
 8018d70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f001 fc2d 	bl	801a5d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	7d1b      	ldrb	r3, [r3, #20]
 8018d7e:	3b02      	subs	r3, #2
 8018d80:	2b07      	cmp	r3, #7
 8018d82:	f200 8337 	bhi.w	80193f4 <tcp_process+0x7a0>
 8018d86:	a201      	add	r2, pc, #4	; (adr r2, 8018d8c <tcp_process+0x138>)
 8018d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d8c:	08018dad 	.word	0x08018dad
 8018d90:	08018fdd 	.word	0x08018fdd
 8018d94:	08019155 	.word	0x08019155
 8018d98:	0801917f 	.word	0x0801917f
 8018d9c:	080192a3 	.word	0x080192a3
 8018da0:	08019155 	.word	0x08019155
 8018da4:	0801932f 	.word	0x0801932f
 8018da8:	080193bf 	.word	0x080193bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018dac:	4b57      	ldr	r3, [pc, #348]	; (8018f0c <tcp_process+0x2b8>)
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	f003 0310 	and.w	r3, r3, #16
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	f000 80e4 	beq.w	8018f82 <tcp_process+0x32e>
 8018dba:	4b54      	ldr	r3, [pc, #336]	; (8018f0c <tcp_process+0x2b8>)
 8018dbc:	781b      	ldrb	r3, [r3, #0]
 8018dbe:	f003 0302 	and.w	r3, r3, #2
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	f000 80dd 	beq.w	8018f82 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dcc:	1c5a      	adds	r2, r3, #1
 8018dce:	4b50      	ldr	r3, [pc, #320]	; (8018f10 <tcp_process+0x2bc>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	f040 80d5 	bne.w	8018f82 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018dd8:	4b4e      	ldr	r3, [pc, #312]	; (8018f14 <tcp_process+0x2c0>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	1c5a      	adds	r2, r3, #1
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018dea:	4b49      	ldr	r3, [pc, #292]	; (8018f10 <tcp_process+0x2bc>)
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018df2:	4b4c      	ldr	r3, [pc, #304]	; (8018f24 <tcp_process+0x2d0>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	89db      	ldrh	r3, [r3, #14]
 8018df8:	b29a      	uxth	r2, r3
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018e0c:	4b41      	ldr	r3, [pc, #260]	; (8018f14 <tcp_process+0x2c0>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	1e5a      	subs	r2, r3, #1
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	2204      	movs	r2, #4
 8018e1a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	3304      	adds	r3, #4
 8018e24:	4618      	mov	r0, r3
 8018e26:	f004 ff77 	bl	801dd18 <ip4_route>
 8018e2a:	4601      	mov	r1, r0
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	3304      	adds	r3, #4
 8018e30:	461a      	mov	r2, r3
 8018e32:	4620      	mov	r0, r4
 8018e34:	f7ff f88e 	bl	8017f54 <tcp_eff_send_mss_netif>
 8018e38:	4603      	mov	r3, r0
 8018e3a:	461a      	mov	r2, r3
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e44:	009a      	lsls	r2, r3, #2
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e4a:	005b      	lsls	r3, r3, #1
 8018e4c:	f241 111c 	movw	r1, #4380	; 0x111c
 8018e50:	428b      	cmp	r3, r1
 8018e52:	bf38      	it	cc
 8018e54:	460b      	movcc	r3, r1
 8018e56:	429a      	cmp	r2, r3
 8018e58:	d204      	bcs.n	8018e64 <tcp_process+0x210>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	e00d      	b.n	8018e80 <tcp_process+0x22c>
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e68:	005b      	lsls	r3, r3, #1
 8018e6a:	f241 121c 	movw	r2, #4380	; 0x111c
 8018e6e:	4293      	cmp	r3, r2
 8018e70:	d904      	bls.n	8018e7c <tcp_process+0x228>
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e76:	005b      	lsls	r3, r3, #1
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	e001      	b.n	8018e80 <tcp_process+0x22c>
 8018e7c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018e80:	687a      	ldr	r2, [r7, #4]
 8018e82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d106      	bne.n	8018e9e <tcp_process+0x24a>
 8018e90:	4b1b      	ldr	r3, [pc, #108]	; (8018f00 <tcp_process+0x2ac>)
 8018e92:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018e96:	4924      	ldr	r1, [pc, #144]	; (8018f28 <tcp_process+0x2d4>)
 8018e98:	481b      	ldr	r0, [pc, #108]	; (8018f08 <tcp_process+0x2b4>)
 8018e9a:	f006 fa9f 	bl	801f3dc <iprintf>
        --pcb->snd_queuelen;
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018ea4:	3b01      	subs	r3, #1
 8018ea6:	b29a      	uxth	r2, r3
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018eb2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018eb4:	69fb      	ldr	r3, [r7, #28]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d111      	bne.n	8018ede <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ebe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018ec0:	69fb      	ldr	r3, [r7, #28]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d106      	bne.n	8018ed4 <tcp_process+0x280>
 8018ec6:	4b0e      	ldr	r3, [pc, #56]	; (8018f00 <tcp_process+0x2ac>)
 8018ec8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018ecc:	4917      	ldr	r1, [pc, #92]	; (8018f2c <tcp_process+0x2d8>)
 8018ece:	480e      	ldr	r0, [pc, #56]	; (8018f08 <tcp_process+0x2b4>)
 8018ed0:	f006 fa84 	bl	801f3dc <iprintf>
          pcb->unsent = rseg->next;
 8018ed4:	69fb      	ldr	r3, [r7, #28]
 8018ed6:	681a      	ldr	r2, [r3, #0]
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	66da      	str	r2, [r3, #108]	; 0x6c
 8018edc:	e003      	b.n	8018ee6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018ede:	69fb      	ldr	r3, [r7, #28]
 8018ee0:	681a      	ldr	r2, [r3, #0]
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018ee6:	69f8      	ldr	r0, [r7, #28]
 8018ee8:	f7fe fc51 	bl	801778e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d11d      	bne.n	8018f30 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018efa:	861a      	strh	r2, [r3, #48]	; 0x30
 8018efc:	e01f      	b.n	8018f3e <tcp_process+0x2ea>
 8018efe:	bf00      	nop
 8018f00:	08022b7c 	.word	0x08022b7c
 8018f04:	08022db4 	.word	0x08022db4
 8018f08:	08022bc8 	.word	0x08022bc8
 8018f0c:	2000c828 	.word	0x2000c828
 8018f10:	2000c820 	.word	0x2000c820
 8018f14:	2000c81c 	.word	0x2000c81c
 8018f18:	08022dd0 	.word	0x08022dd0
 8018f1c:	2000c829 	.word	0x2000c829
 8018f20:	20014bb8 	.word	0x20014bb8
 8018f24:	2000c80c 	.word	0x2000c80c
 8018f28:	08022df0 	.word	0x08022df0
 8018f2c:	08022e08 	.word	0x08022e08
        } else {
          pcb->rtime = 0;
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	2200      	movs	r2, #0
 8018f34:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	2200      	movs	r2, #0
 8018f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d00a      	beq.n	8018f5e <tcp_process+0x30a>
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018f4e:	687a      	ldr	r2, [r7, #4]
 8018f50:	6910      	ldr	r0, [r2, #16]
 8018f52:	2200      	movs	r2, #0
 8018f54:	6879      	ldr	r1, [r7, #4]
 8018f56:	4798      	blx	r3
 8018f58:	4603      	mov	r3, r0
 8018f5a:	76bb      	strb	r3, [r7, #26]
 8018f5c:	e001      	b.n	8018f62 <tcp_process+0x30e>
 8018f5e:	2300      	movs	r3, #0
 8018f60:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018f62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018f66:	f113 0f0d 	cmn.w	r3, #13
 8018f6a:	d102      	bne.n	8018f72 <tcp_process+0x31e>
          return ERR_ABRT;
 8018f6c:	f06f 030c 	mvn.w	r3, #12
 8018f70:	e250      	b.n	8019414 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	8b5b      	ldrh	r3, [r3, #26]
 8018f76:	f043 0302 	orr.w	r3, r3, #2
 8018f7a:	b29a      	uxth	r2, r3
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018f80:	e23a      	b.n	80193f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018f82:	4b9d      	ldr	r3, [pc, #628]	; (80191f8 <tcp_process+0x5a4>)
 8018f84:	781b      	ldrb	r3, [r3, #0]
 8018f86:	f003 0310 	and.w	r3, r3, #16
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	f000 8234 	beq.w	80193f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f90:	4b9a      	ldr	r3, [pc, #616]	; (80191fc <tcp_process+0x5a8>)
 8018f92:	6819      	ldr	r1, [r3, #0]
 8018f94:	4b9a      	ldr	r3, [pc, #616]	; (8019200 <tcp_process+0x5ac>)
 8018f96:	881b      	ldrh	r3, [r3, #0]
 8018f98:	461a      	mov	r2, r3
 8018f9a:	4b9a      	ldr	r3, [pc, #616]	; (8019204 <tcp_process+0x5b0>)
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018fa0:	4b99      	ldr	r3, [pc, #612]	; (8019208 <tcp_process+0x5b4>)
 8018fa2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018fa4:	885b      	ldrh	r3, [r3, #2]
 8018fa6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018fa8:	4a97      	ldr	r2, [pc, #604]	; (8019208 <tcp_process+0x5b4>)
 8018faa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018fac:	8812      	ldrh	r2, [r2, #0]
 8018fae:	b292      	uxth	r2, r2
 8018fb0:	9202      	str	r2, [sp, #8]
 8018fb2:	9301      	str	r3, [sp, #4]
 8018fb4:	4b95      	ldr	r3, [pc, #596]	; (801920c <tcp_process+0x5b8>)
 8018fb6:	9300      	str	r3, [sp, #0]
 8018fb8:	4b95      	ldr	r3, [pc, #596]	; (8019210 <tcp_process+0x5bc>)
 8018fba:	4602      	mov	r2, r0
 8018fbc:	6878      	ldr	r0, [r7, #4]
 8018fbe:	f003 f8db 	bl	801c178 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018fc8:	2b05      	cmp	r3, #5
 8018fca:	f200 8215 	bhi.w	80193f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018fd4:	6878      	ldr	r0, [r7, #4]
 8018fd6:	f002 fea5 	bl	801bd24 <tcp_rexmit_rto>
      break;
 8018fda:	e20d      	b.n	80193f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018fdc:	4b86      	ldr	r3, [pc, #536]	; (80191f8 <tcp_process+0x5a4>)
 8018fde:	781b      	ldrb	r3, [r3, #0]
 8018fe0:	f003 0310 	and.w	r3, r3, #16
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	f000 80a1 	beq.w	801912c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018fea:	4b84      	ldr	r3, [pc, #528]	; (80191fc <tcp_process+0x5a8>)
 8018fec:	681a      	ldr	r2, [r3, #0]
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ff2:	1ad3      	subs	r3, r2, r3
 8018ff4:	3b01      	subs	r3, #1
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	db7e      	blt.n	80190f8 <tcp_process+0x4a4>
 8018ffa:	4b80      	ldr	r3, [pc, #512]	; (80191fc <tcp_process+0x5a8>)
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019002:	1ad3      	subs	r3, r2, r3
 8019004:	2b00      	cmp	r3, #0
 8019006:	dc77      	bgt.n	80190f8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2204      	movs	r2, #4
 801900c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019012:	2b00      	cmp	r3, #0
 8019014:	d102      	bne.n	801901c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8019016:	23fa      	movs	r3, #250	; 0xfa
 8019018:	76bb      	strb	r3, [r7, #26]
 801901a:	e01d      	b.n	8019058 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019020:	699b      	ldr	r3, [r3, #24]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d106      	bne.n	8019034 <tcp_process+0x3e0>
 8019026:	4b7b      	ldr	r3, [pc, #492]	; (8019214 <tcp_process+0x5c0>)
 8019028:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801902c:	497a      	ldr	r1, [pc, #488]	; (8019218 <tcp_process+0x5c4>)
 801902e:	487b      	ldr	r0, [pc, #492]	; (801921c <tcp_process+0x5c8>)
 8019030:	f006 f9d4 	bl	801f3dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019038:	699b      	ldr	r3, [r3, #24]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d00a      	beq.n	8019054 <tcp_process+0x400>
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019042:	699b      	ldr	r3, [r3, #24]
 8019044:	687a      	ldr	r2, [r7, #4]
 8019046:	6910      	ldr	r0, [r2, #16]
 8019048:	2200      	movs	r2, #0
 801904a:	6879      	ldr	r1, [r7, #4]
 801904c:	4798      	blx	r3
 801904e:	4603      	mov	r3, r0
 8019050:	76bb      	strb	r3, [r7, #26]
 8019052:	e001      	b.n	8019058 <tcp_process+0x404>
 8019054:	23f0      	movs	r3, #240	; 0xf0
 8019056:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019058:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d00a      	beq.n	8019076 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8019060:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019064:	f113 0f0d 	cmn.w	r3, #13
 8019068:	d002      	beq.n	8019070 <tcp_process+0x41c>
              tcp_abort(pcb);
 801906a:	6878      	ldr	r0, [r7, #4]
 801906c:	f7fd fcea 	bl	8016a44 <tcp_abort>
            }
            return ERR_ABRT;
 8019070:	f06f 030c 	mvn.w	r3, #12
 8019074:	e1ce      	b.n	8019414 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8019076:	6878      	ldr	r0, [r7, #4]
 8019078:	f000 fae0 	bl	801963c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801907c:	4b68      	ldr	r3, [pc, #416]	; (8019220 <tcp_process+0x5cc>)
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d005      	beq.n	8019090 <tcp_process+0x43c>
            recv_acked--;
 8019084:	4b66      	ldr	r3, [pc, #408]	; (8019220 <tcp_process+0x5cc>)
 8019086:	881b      	ldrh	r3, [r3, #0]
 8019088:	3b01      	subs	r3, #1
 801908a:	b29a      	uxth	r2, r3
 801908c:	4b64      	ldr	r3, [pc, #400]	; (8019220 <tcp_process+0x5cc>)
 801908e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019094:	009a      	lsls	r2, r3, #2
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801909a:	005b      	lsls	r3, r3, #1
 801909c:	f241 111c 	movw	r1, #4380	; 0x111c
 80190a0:	428b      	cmp	r3, r1
 80190a2:	bf38      	it	cc
 80190a4:	460b      	movcc	r3, r1
 80190a6:	429a      	cmp	r2, r3
 80190a8:	d204      	bcs.n	80190b4 <tcp_process+0x460>
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	b29b      	uxth	r3, r3
 80190b2:	e00d      	b.n	80190d0 <tcp_process+0x47c>
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190b8:	005b      	lsls	r3, r3, #1
 80190ba:	f241 121c 	movw	r2, #4380	; 0x111c
 80190be:	4293      	cmp	r3, r2
 80190c0:	d904      	bls.n	80190cc <tcp_process+0x478>
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190c6:	005b      	lsls	r3, r3, #1
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	e001      	b.n	80190d0 <tcp_process+0x47c>
 80190cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80190d0:	687a      	ldr	r2, [r7, #4]
 80190d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80190d6:	4b53      	ldr	r3, [pc, #332]	; (8019224 <tcp_process+0x5d0>)
 80190d8:	781b      	ldrb	r3, [r3, #0]
 80190da:	f003 0320 	and.w	r3, r3, #32
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d037      	beq.n	8019152 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	8b5b      	ldrh	r3, [r3, #26]
 80190e6:	f043 0302 	orr.w	r3, r3, #2
 80190ea:	b29a      	uxth	r2, r3
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2207      	movs	r2, #7
 80190f4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80190f6:	e02c      	b.n	8019152 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190f8:	4b40      	ldr	r3, [pc, #256]	; (80191fc <tcp_process+0x5a8>)
 80190fa:	6819      	ldr	r1, [r3, #0]
 80190fc:	4b40      	ldr	r3, [pc, #256]	; (8019200 <tcp_process+0x5ac>)
 80190fe:	881b      	ldrh	r3, [r3, #0]
 8019100:	461a      	mov	r2, r3
 8019102:	4b40      	ldr	r3, [pc, #256]	; (8019204 <tcp_process+0x5b0>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019108:	4b3f      	ldr	r3, [pc, #252]	; (8019208 <tcp_process+0x5b4>)
 801910a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801910c:	885b      	ldrh	r3, [r3, #2]
 801910e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019110:	4a3d      	ldr	r2, [pc, #244]	; (8019208 <tcp_process+0x5b4>)
 8019112:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019114:	8812      	ldrh	r2, [r2, #0]
 8019116:	b292      	uxth	r2, r2
 8019118:	9202      	str	r2, [sp, #8]
 801911a:	9301      	str	r3, [sp, #4]
 801911c:	4b3b      	ldr	r3, [pc, #236]	; (801920c <tcp_process+0x5b8>)
 801911e:	9300      	str	r3, [sp, #0]
 8019120:	4b3b      	ldr	r3, [pc, #236]	; (8019210 <tcp_process+0x5bc>)
 8019122:	4602      	mov	r2, r0
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f003 f827 	bl	801c178 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801912a:	e167      	b.n	80193fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801912c:	4b32      	ldr	r3, [pc, #200]	; (80191f8 <tcp_process+0x5a4>)
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	f003 0302 	and.w	r3, r3, #2
 8019134:	2b00      	cmp	r3, #0
 8019136:	f000 8161 	beq.w	80193fc <tcp_process+0x7a8>
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801913e:	1e5a      	subs	r2, r3, #1
 8019140:	4b30      	ldr	r3, [pc, #192]	; (8019204 <tcp_process+0x5b0>)
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	429a      	cmp	r2, r3
 8019146:	f040 8159 	bne.w	80193fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f002 fe0c 	bl	801bd68 <tcp_rexmit>
      break;
 8019150:	e154      	b.n	80193fc <tcp_process+0x7a8>
 8019152:	e153      	b.n	80193fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8019154:	6878      	ldr	r0, [r7, #4]
 8019156:	f000 fa71 	bl	801963c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801915a:	4b32      	ldr	r3, [pc, #200]	; (8019224 <tcp_process+0x5d0>)
 801915c:	781b      	ldrb	r3, [r3, #0]
 801915e:	f003 0320 	and.w	r3, r3, #32
 8019162:	2b00      	cmp	r3, #0
 8019164:	f000 814c 	beq.w	8019400 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	8b5b      	ldrh	r3, [r3, #26]
 801916c:	f043 0302 	orr.w	r3, r3, #2
 8019170:	b29a      	uxth	r2, r3
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2207      	movs	r2, #7
 801917a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801917c:	e140      	b.n	8019400 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801917e:	6878      	ldr	r0, [r7, #4]
 8019180:	f000 fa5c 	bl	801963c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019184:	4b27      	ldr	r3, [pc, #156]	; (8019224 <tcp_process+0x5d0>)
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	f003 0320 	and.w	r3, r3, #32
 801918c:	2b00      	cmp	r3, #0
 801918e:	d071      	beq.n	8019274 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019190:	4b19      	ldr	r3, [pc, #100]	; (80191f8 <tcp_process+0x5a4>)
 8019192:	781b      	ldrb	r3, [r3, #0]
 8019194:	f003 0310 	and.w	r3, r3, #16
 8019198:	2b00      	cmp	r3, #0
 801919a:	d060      	beq.n	801925e <tcp_process+0x60a>
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80191a0:	4b16      	ldr	r3, [pc, #88]	; (80191fc <tcp_process+0x5a8>)
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	429a      	cmp	r2, r3
 80191a6:	d15a      	bne.n	801925e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d156      	bne.n	801925e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	8b5b      	ldrh	r3, [r3, #26]
 80191b4:	f043 0302 	orr.w	r3, r3, #2
 80191b8:	b29a      	uxth	r2, r3
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f7fe fdbe 	bl	8017d40 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80191c4:	4b18      	ldr	r3, [pc, #96]	; (8019228 <tcp_process+0x5d4>)
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	429a      	cmp	r2, r3
 80191cc:	d105      	bne.n	80191da <tcp_process+0x586>
 80191ce:	4b16      	ldr	r3, [pc, #88]	; (8019228 <tcp_process+0x5d4>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	68db      	ldr	r3, [r3, #12]
 80191d4:	4a14      	ldr	r2, [pc, #80]	; (8019228 <tcp_process+0x5d4>)
 80191d6:	6013      	str	r3, [r2, #0]
 80191d8:	e02e      	b.n	8019238 <tcp_process+0x5e4>
 80191da:	4b13      	ldr	r3, [pc, #76]	; (8019228 <tcp_process+0x5d4>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	617b      	str	r3, [r7, #20]
 80191e0:	e027      	b.n	8019232 <tcp_process+0x5de>
 80191e2:	697b      	ldr	r3, [r7, #20]
 80191e4:	68db      	ldr	r3, [r3, #12]
 80191e6:	687a      	ldr	r2, [r7, #4]
 80191e8:	429a      	cmp	r2, r3
 80191ea:	d11f      	bne.n	801922c <tcp_process+0x5d8>
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	68da      	ldr	r2, [r3, #12]
 80191f0:	697b      	ldr	r3, [r7, #20]
 80191f2:	60da      	str	r2, [r3, #12]
 80191f4:	e020      	b.n	8019238 <tcp_process+0x5e4>
 80191f6:	bf00      	nop
 80191f8:	2000c828 	.word	0x2000c828
 80191fc:	2000c820 	.word	0x2000c820
 8019200:	2000c826 	.word	0x2000c826
 8019204:	2000c81c 	.word	0x2000c81c
 8019208:	2000c80c 	.word	0x2000c80c
 801920c:	200114b0 	.word	0x200114b0
 8019210:	200114b4 	.word	0x200114b4
 8019214:	08022b7c 	.word	0x08022b7c
 8019218:	08022e1c 	.word	0x08022e1c
 801921c:	08022bc8 	.word	0x08022bc8
 8019220:	2000c824 	.word	0x2000c824
 8019224:	2000c829 	.word	0x2000c829
 8019228:	20014bb4 	.word	0x20014bb4
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	68db      	ldr	r3, [r3, #12]
 8019230:	617b      	str	r3, [r7, #20]
 8019232:	697b      	ldr	r3, [r7, #20]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d1d4      	bne.n	80191e2 <tcp_process+0x58e>
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	2200      	movs	r2, #0
 801923c:	60da      	str	r2, [r3, #12]
 801923e:	4b77      	ldr	r3, [pc, #476]	; (801941c <tcp_process+0x7c8>)
 8019240:	2201      	movs	r2, #1
 8019242:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	220a      	movs	r2, #10
 8019248:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801924a:	4b75      	ldr	r3, [pc, #468]	; (8019420 <tcp_process+0x7cc>)
 801924c:	681a      	ldr	r2, [r3, #0]
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	60da      	str	r2, [r3, #12]
 8019252:	4a73      	ldr	r2, [pc, #460]	; (8019420 <tcp_process+0x7cc>)
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	6013      	str	r3, [r2, #0]
 8019258:	f003 f950 	bl	801c4fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801925c:	e0d2      	b.n	8019404 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	8b5b      	ldrh	r3, [r3, #26]
 8019262:	f043 0302 	orr.w	r3, r3, #2
 8019266:	b29a      	uxth	r2, r3
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	2208      	movs	r2, #8
 8019270:	751a      	strb	r2, [r3, #20]
      break;
 8019272:	e0c7      	b.n	8019404 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019274:	4b6b      	ldr	r3, [pc, #428]	; (8019424 <tcp_process+0x7d0>)
 8019276:	781b      	ldrb	r3, [r3, #0]
 8019278:	f003 0310 	and.w	r3, r3, #16
 801927c:	2b00      	cmp	r3, #0
 801927e:	f000 80c1 	beq.w	8019404 <tcp_process+0x7b0>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019286:	4b68      	ldr	r3, [pc, #416]	; (8019428 <tcp_process+0x7d4>)
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	429a      	cmp	r2, r3
 801928c:	f040 80ba 	bne.w	8019404 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019294:	2b00      	cmp	r3, #0
 8019296:	f040 80b5 	bne.w	8019404 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	2206      	movs	r2, #6
 801929e:	751a      	strb	r2, [r3, #20]
      break;
 80192a0:	e0b0      	b.n	8019404 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80192a2:	6878      	ldr	r0, [r7, #4]
 80192a4:	f000 f9ca 	bl	801963c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80192a8:	4b60      	ldr	r3, [pc, #384]	; (801942c <tcp_process+0x7d8>)
 80192aa:	781b      	ldrb	r3, [r3, #0]
 80192ac:	f003 0320 	and.w	r3, r3, #32
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	f000 80a9 	beq.w	8019408 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	8b5b      	ldrh	r3, [r3, #26]
 80192ba:	f043 0302 	orr.w	r3, r3, #2
 80192be:	b29a      	uxth	r2, r3
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80192c4:	6878      	ldr	r0, [r7, #4]
 80192c6:	f7fe fd3b 	bl	8017d40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80192ca:	4b59      	ldr	r3, [pc, #356]	; (8019430 <tcp_process+0x7dc>)
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d105      	bne.n	80192e0 <tcp_process+0x68c>
 80192d4:	4b56      	ldr	r3, [pc, #344]	; (8019430 <tcp_process+0x7dc>)
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	4a55      	ldr	r2, [pc, #340]	; (8019430 <tcp_process+0x7dc>)
 80192dc:	6013      	str	r3, [r2, #0]
 80192de:	e013      	b.n	8019308 <tcp_process+0x6b4>
 80192e0:	4b53      	ldr	r3, [pc, #332]	; (8019430 <tcp_process+0x7dc>)
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	613b      	str	r3, [r7, #16]
 80192e6:	e00c      	b.n	8019302 <tcp_process+0x6ae>
 80192e8:	693b      	ldr	r3, [r7, #16]
 80192ea:	68db      	ldr	r3, [r3, #12]
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	429a      	cmp	r2, r3
 80192f0:	d104      	bne.n	80192fc <tcp_process+0x6a8>
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	68da      	ldr	r2, [r3, #12]
 80192f6:	693b      	ldr	r3, [r7, #16]
 80192f8:	60da      	str	r2, [r3, #12]
 80192fa:	e005      	b.n	8019308 <tcp_process+0x6b4>
 80192fc:	693b      	ldr	r3, [r7, #16]
 80192fe:	68db      	ldr	r3, [r3, #12]
 8019300:	613b      	str	r3, [r7, #16]
 8019302:	693b      	ldr	r3, [r7, #16]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d1ef      	bne.n	80192e8 <tcp_process+0x694>
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	2200      	movs	r2, #0
 801930c:	60da      	str	r2, [r3, #12]
 801930e:	4b43      	ldr	r3, [pc, #268]	; (801941c <tcp_process+0x7c8>)
 8019310:	2201      	movs	r2, #1
 8019312:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	220a      	movs	r2, #10
 8019318:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801931a:	4b41      	ldr	r3, [pc, #260]	; (8019420 <tcp_process+0x7cc>)
 801931c:	681a      	ldr	r2, [r3, #0]
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	60da      	str	r2, [r3, #12]
 8019322:	4a3f      	ldr	r2, [pc, #252]	; (8019420 <tcp_process+0x7cc>)
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	6013      	str	r3, [r2, #0]
 8019328:	f003 f8e8 	bl	801c4fc <tcp_timer_needed>
      }
      break;
 801932c:	e06c      	b.n	8019408 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	f000 f984 	bl	801963c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019334:	4b3b      	ldr	r3, [pc, #236]	; (8019424 <tcp_process+0x7d0>)
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	f003 0310 	and.w	r3, r3, #16
 801933c:	2b00      	cmp	r3, #0
 801933e:	d065      	beq.n	801940c <tcp_process+0x7b8>
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019344:	4b38      	ldr	r3, [pc, #224]	; (8019428 <tcp_process+0x7d4>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	429a      	cmp	r2, r3
 801934a:	d15f      	bne.n	801940c <tcp_process+0x7b8>
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019350:	2b00      	cmp	r3, #0
 8019352:	d15b      	bne.n	801940c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019354:	6878      	ldr	r0, [r7, #4]
 8019356:	f7fe fcf3 	bl	8017d40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801935a:	4b35      	ldr	r3, [pc, #212]	; (8019430 <tcp_process+0x7dc>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	687a      	ldr	r2, [r7, #4]
 8019360:	429a      	cmp	r2, r3
 8019362:	d105      	bne.n	8019370 <tcp_process+0x71c>
 8019364:	4b32      	ldr	r3, [pc, #200]	; (8019430 <tcp_process+0x7dc>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	68db      	ldr	r3, [r3, #12]
 801936a:	4a31      	ldr	r2, [pc, #196]	; (8019430 <tcp_process+0x7dc>)
 801936c:	6013      	str	r3, [r2, #0]
 801936e:	e013      	b.n	8019398 <tcp_process+0x744>
 8019370:	4b2f      	ldr	r3, [pc, #188]	; (8019430 <tcp_process+0x7dc>)
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	60fb      	str	r3, [r7, #12]
 8019376:	e00c      	b.n	8019392 <tcp_process+0x73e>
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	68db      	ldr	r3, [r3, #12]
 801937c:	687a      	ldr	r2, [r7, #4]
 801937e:	429a      	cmp	r2, r3
 8019380:	d104      	bne.n	801938c <tcp_process+0x738>
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	68da      	ldr	r2, [r3, #12]
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	60da      	str	r2, [r3, #12]
 801938a:	e005      	b.n	8019398 <tcp_process+0x744>
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	68db      	ldr	r3, [r3, #12]
 8019390:	60fb      	str	r3, [r7, #12]
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d1ef      	bne.n	8019378 <tcp_process+0x724>
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	2200      	movs	r2, #0
 801939c:	60da      	str	r2, [r3, #12]
 801939e:	4b1f      	ldr	r3, [pc, #124]	; (801941c <tcp_process+0x7c8>)
 80193a0:	2201      	movs	r2, #1
 80193a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	220a      	movs	r2, #10
 80193a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80193aa:	4b1d      	ldr	r3, [pc, #116]	; (8019420 <tcp_process+0x7cc>)
 80193ac:	681a      	ldr	r2, [r3, #0]
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	60da      	str	r2, [r3, #12]
 80193b2:	4a1b      	ldr	r2, [pc, #108]	; (8019420 <tcp_process+0x7cc>)
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	6013      	str	r3, [r2, #0]
 80193b8:	f003 f8a0 	bl	801c4fc <tcp_timer_needed>
      }
      break;
 80193bc:	e026      	b.n	801940c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80193be:	6878      	ldr	r0, [r7, #4]
 80193c0:	f000 f93c 	bl	801963c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80193c4:	4b17      	ldr	r3, [pc, #92]	; (8019424 <tcp_process+0x7d0>)
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	f003 0310 	and.w	r3, r3, #16
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d01f      	beq.n	8019410 <tcp_process+0x7bc>
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80193d4:	4b14      	ldr	r3, [pc, #80]	; (8019428 <tcp_process+0x7d4>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	429a      	cmp	r2, r3
 80193da:	d119      	bne.n	8019410 <tcp_process+0x7bc>
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d115      	bne.n	8019410 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80193e4:	4b11      	ldr	r3, [pc, #68]	; (801942c <tcp_process+0x7d8>)
 80193e6:	781b      	ldrb	r3, [r3, #0]
 80193e8:	f043 0310 	orr.w	r3, r3, #16
 80193ec:	b2da      	uxtb	r2, r3
 80193ee:	4b0f      	ldr	r3, [pc, #60]	; (801942c <tcp_process+0x7d8>)
 80193f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80193f2:	e00d      	b.n	8019410 <tcp_process+0x7bc>
    default:
      break;
 80193f4:	bf00      	nop
 80193f6:	e00c      	b.n	8019412 <tcp_process+0x7be>
      break;
 80193f8:	bf00      	nop
 80193fa:	e00a      	b.n	8019412 <tcp_process+0x7be>
      break;
 80193fc:	bf00      	nop
 80193fe:	e008      	b.n	8019412 <tcp_process+0x7be>
      break;
 8019400:	bf00      	nop
 8019402:	e006      	b.n	8019412 <tcp_process+0x7be>
      break;
 8019404:	bf00      	nop
 8019406:	e004      	b.n	8019412 <tcp_process+0x7be>
      break;
 8019408:	bf00      	nop
 801940a:	e002      	b.n	8019412 <tcp_process+0x7be>
      break;
 801940c:	bf00      	nop
 801940e:	e000      	b.n	8019412 <tcp_process+0x7be>
      break;
 8019410:	bf00      	nop
  }
  return ERR_OK;
 8019412:	2300      	movs	r3, #0
}
 8019414:	4618      	mov	r0, r3
 8019416:	3724      	adds	r7, #36	; 0x24
 8019418:	46bd      	mov	sp, r7
 801941a:	bd90      	pop	{r4, r7, pc}
 801941c:	20014bb0 	.word	0x20014bb0
 8019420:	20014bc4 	.word	0x20014bc4
 8019424:	2000c828 	.word	0x2000c828
 8019428:	2000c820 	.word	0x2000c820
 801942c:	2000c829 	.word	0x2000c829
 8019430:	20014bb4 	.word	0x20014bb4

08019434 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019434:	b590      	push	{r4, r7, lr}
 8019436:	b085      	sub	sp, #20
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d106      	bne.n	8019452 <tcp_oos_insert_segment+0x1e>
 8019444:	4b3b      	ldr	r3, [pc, #236]	; (8019534 <tcp_oos_insert_segment+0x100>)
 8019446:	f240 421f 	movw	r2, #1055	; 0x41f
 801944a:	493b      	ldr	r1, [pc, #236]	; (8019538 <tcp_oos_insert_segment+0x104>)
 801944c:	483b      	ldr	r0, [pc, #236]	; (801953c <tcp_oos_insert_segment+0x108>)
 801944e:	f005 ffc5 	bl	801f3dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	899b      	ldrh	r3, [r3, #12]
 8019458:	b29b      	uxth	r3, r3
 801945a:	4618      	mov	r0, r3
 801945c:	f7fb f96a 	bl	8014734 <lwip_htons>
 8019460:	4603      	mov	r3, r0
 8019462:	b2db      	uxtb	r3, r3
 8019464:	f003 0301 	and.w	r3, r3, #1
 8019468:	2b00      	cmp	r3, #0
 801946a:	d028      	beq.n	80194be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801946c:	6838      	ldr	r0, [r7, #0]
 801946e:	f7fe f979 	bl	8017764 <tcp_segs_free>
    next = NULL;
 8019472:	2300      	movs	r3, #0
 8019474:	603b      	str	r3, [r7, #0]
 8019476:	e056      	b.n	8019526 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	68db      	ldr	r3, [r3, #12]
 801947c:	899b      	ldrh	r3, [r3, #12]
 801947e:	b29b      	uxth	r3, r3
 8019480:	4618      	mov	r0, r3
 8019482:	f7fb f957 	bl	8014734 <lwip_htons>
 8019486:	4603      	mov	r3, r0
 8019488:	b2db      	uxtb	r3, r3
 801948a:	f003 0301 	and.w	r3, r3, #1
 801948e:	2b00      	cmp	r3, #0
 8019490:	d00d      	beq.n	80194ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	68db      	ldr	r3, [r3, #12]
 8019496:	899b      	ldrh	r3, [r3, #12]
 8019498:	b29c      	uxth	r4, r3
 801949a:	2001      	movs	r0, #1
 801949c:	f7fb f94a 	bl	8014734 <lwip_htons>
 80194a0:	4603      	mov	r3, r0
 80194a2:	461a      	mov	r2, r3
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	4322      	orrs	r2, r4
 80194aa:	b292      	uxth	r2, r2
 80194ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80194ae:	683b      	ldr	r3, [r7, #0]
 80194b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80194b2:	683b      	ldr	r3, [r7, #0]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80194b8:	68f8      	ldr	r0, [r7, #12]
 80194ba:	f7fe f968 	bl	801778e <tcp_seg_free>
    while (next &&
 80194be:	683b      	ldr	r3, [r7, #0]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d00e      	beq.n	80194e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	891b      	ldrh	r3, [r3, #8]
 80194c8:	461a      	mov	r2, r3
 80194ca:	4b1d      	ldr	r3, [pc, #116]	; (8019540 <tcp_oos_insert_segment+0x10c>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	441a      	add	r2, r3
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	68db      	ldr	r3, [r3, #12]
 80194d4:	685b      	ldr	r3, [r3, #4]
 80194d6:	6839      	ldr	r1, [r7, #0]
 80194d8:	8909      	ldrh	r1, [r1, #8]
 80194da:	440b      	add	r3, r1
 80194dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80194de:	2b00      	cmp	r3, #0
 80194e0:	daca      	bge.n	8019478 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80194e2:	683b      	ldr	r3, [r7, #0]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d01e      	beq.n	8019526 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	891b      	ldrh	r3, [r3, #8]
 80194ec:	461a      	mov	r2, r3
 80194ee:	4b14      	ldr	r3, [pc, #80]	; (8019540 <tcp_oos_insert_segment+0x10c>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	441a      	add	r2, r3
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	68db      	ldr	r3, [r3, #12]
 80194f8:	685b      	ldr	r3, [r3, #4]
 80194fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	dd12      	ble.n	8019526 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019500:	683b      	ldr	r3, [r7, #0]
 8019502:	68db      	ldr	r3, [r3, #12]
 8019504:	685b      	ldr	r3, [r3, #4]
 8019506:	b29a      	uxth	r2, r3
 8019508:	4b0d      	ldr	r3, [pc, #52]	; (8019540 <tcp_oos_insert_segment+0x10c>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	b29b      	uxth	r3, r3
 801950e:	1ad3      	subs	r3, r2, r3
 8019510:	b29a      	uxth	r2, r3
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	685a      	ldr	r2, [r3, #4]
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	891b      	ldrh	r3, [r3, #8]
 801951e:	4619      	mov	r1, r3
 8019520:	4610      	mov	r0, r2
 8019522:	f7fc fb63 	bl	8015bec <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	683a      	ldr	r2, [r7, #0]
 801952a:	601a      	str	r2, [r3, #0]
}
 801952c:	bf00      	nop
 801952e:	3714      	adds	r7, #20
 8019530:	46bd      	mov	sp, r7
 8019532:	bd90      	pop	{r4, r7, pc}
 8019534:	08022b7c 	.word	0x08022b7c
 8019538:	08022e3c 	.word	0x08022e3c
 801953c:	08022bc8 	.word	0x08022bc8
 8019540:	2000c81c 	.word	0x2000c81c

08019544 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019544:	b5b0      	push	{r4, r5, r7, lr}
 8019546:	b086      	sub	sp, #24
 8019548:	af00      	add	r7, sp, #0
 801954a:	60f8      	str	r0, [r7, #12]
 801954c:	60b9      	str	r1, [r7, #8]
 801954e:	607a      	str	r2, [r7, #4]
 8019550:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8019552:	e03e      	b.n	80195d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019554:	68bb      	ldr	r3, [r7, #8]
 8019556:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	685b      	ldr	r3, [r3, #4]
 8019562:	4618      	mov	r0, r3
 8019564:	f7fc fd68 	bl	8016038 <pbuf_clen>
 8019568:	4603      	mov	r3, r0
 801956a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019572:	8a7a      	ldrh	r2, [r7, #18]
 8019574:	429a      	cmp	r2, r3
 8019576:	d906      	bls.n	8019586 <tcp_free_acked_segments+0x42>
 8019578:	4b2a      	ldr	r3, [pc, #168]	; (8019624 <tcp_free_acked_segments+0xe0>)
 801957a:	f240 4257 	movw	r2, #1111	; 0x457
 801957e:	492a      	ldr	r1, [pc, #168]	; (8019628 <tcp_free_acked_segments+0xe4>)
 8019580:	482a      	ldr	r0, [pc, #168]	; (801962c <tcp_free_acked_segments+0xe8>)
 8019582:	f005 ff2b 	bl	801f3dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801958c:	8a7b      	ldrh	r3, [r7, #18]
 801958e:	1ad3      	subs	r3, r2, r3
 8019590:	b29a      	uxth	r2, r3
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019598:	697b      	ldr	r3, [r7, #20]
 801959a:	891a      	ldrh	r2, [r3, #8]
 801959c:	4b24      	ldr	r3, [pc, #144]	; (8019630 <tcp_free_acked_segments+0xec>)
 801959e:	881b      	ldrh	r3, [r3, #0]
 80195a0:	4413      	add	r3, r2
 80195a2:	b29a      	uxth	r2, r3
 80195a4:	4b22      	ldr	r3, [pc, #136]	; (8019630 <tcp_free_acked_segments+0xec>)
 80195a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80195a8:	6978      	ldr	r0, [r7, #20]
 80195aa:	f7fe f8f0 	bl	801778e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d00c      	beq.n	80195d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80195b8:	68bb      	ldr	r3, [r7, #8]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d109      	bne.n	80195d2 <tcp_free_acked_segments+0x8e>
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d106      	bne.n	80195d2 <tcp_free_acked_segments+0x8e>
 80195c4:	4b17      	ldr	r3, [pc, #92]	; (8019624 <tcp_free_acked_segments+0xe0>)
 80195c6:	f240 4261 	movw	r2, #1121	; 0x461
 80195ca:	491a      	ldr	r1, [pc, #104]	; (8019634 <tcp_free_acked_segments+0xf0>)
 80195cc:	4817      	ldr	r0, [pc, #92]	; (801962c <tcp_free_acked_segments+0xe8>)
 80195ce:	f005 ff05 	bl	801f3dc <iprintf>
  while (seg_list != NULL &&
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d020      	beq.n	801961a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80195d8:	68bb      	ldr	r3, [r7, #8]
 80195da:	68db      	ldr	r3, [r3, #12]
 80195dc:	685b      	ldr	r3, [r3, #4]
 80195de:	4618      	mov	r0, r3
 80195e0:	f7fb f8bd 	bl	801475e <lwip_htonl>
 80195e4:	4604      	mov	r4, r0
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	891b      	ldrh	r3, [r3, #8]
 80195ea:	461d      	mov	r5, r3
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	68db      	ldr	r3, [r3, #12]
 80195f0:	899b      	ldrh	r3, [r3, #12]
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7fb f89d 	bl	8014734 <lwip_htons>
 80195fa:	4603      	mov	r3, r0
 80195fc:	b2db      	uxtb	r3, r3
 80195fe:	f003 0303 	and.w	r3, r3, #3
 8019602:	2b00      	cmp	r3, #0
 8019604:	d001      	beq.n	801960a <tcp_free_acked_segments+0xc6>
 8019606:	2301      	movs	r3, #1
 8019608:	e000      	b.n	801960c <tcp_free_acked_segments+0xc8>
 801960a:	2300      	movs	r3, #0
 801960c:	442b      	add	r3, r5
 801960e:	18e2      	adds	r2, r4, r3
 8019610:	4b09      	ldr	r3, [pc, #36]	; (8019638 <tcp_free_acked_segments+0xf4>)
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019616:	2b00      	cmp	r3, #0
 8019618:	dd9c      	ble.n	8019554 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801961a:	68bb      	ldr	r3, [r7, #8]
}
 801961c:	4618      	mov	r0, r3
 801961e:	3718      	adds	r7, #24
 8019620:	46bd      	mov	sp, r7
 8019622:	bdb0      	pop	{r4, r5, r7, pc}
 8019624:	08022b7c 	.word	0x08022b7c
 8019628:	08022e64 	.word	0x08022e64
 801962c:	08022bc8 	.word	0x08022bc8
 8019630:	2000c824 	.word	0x2000c824
 8019634:	08022e8c 	.word	0x08022e8c
 8019638:	2000c820 	.word	0x2000c820

0801963c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801963c:	b5b0      	push	{r4, r5, r7, lr}
 801963e:	b094      	sub	sp, #80	; 0x50
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019644:	2300      	movs	r3, #0
 8019646:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d106      	bne.n	801965c <tcp_receive+0x20>
 801964e:	4ba6      	ldr	r3, [pc, #664]	; (80198e8 <tcp_receive+0x2ac>)
 8019650:	f240 427b 	movw	r2, #1147	; 0x47b
 8019654:	49a5      	ldr	r1, [pc, #660]	; (80198ec <tcp_receive+0x2b0>)
 8019656:	48a6      	ldr	r0, [pc, #664]	; (80198f0 <tcp_receive+0x2b4>)
 8019658:	f005 fec0 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	7d1b      	ldrb	r3, [r3, #20]
 8019660:	2b03      	cmp	r3, #3
 8019662:	d806      	bhi.n	8019672 <tcp_receive+0x36>
 8019664:	4ba0      	ldr	r3, [pc, #640]	; (80198e8 <tcp_receive+0x2ac>)
 8019666:	f240 427c 	movw	r2, #1148	; 0x47c
 801966a:	49a2      	ldr	r1, [pc, #648]	; (80198f4 <tcp_receive+0x2b8>)
 801966c:	48a0      	ldr	r0, [pc, #640]	; (80198f0 <tcp_receive+0x2b4>)
 801966e:	f005 feb5 	bl	801f3dc <iprintf>

  if (flags & TCP_ACK) {
 8019672:	4ba1      	ldr	r3, [pc, #644]	; (80198f8 <tcp_receive+0x2bc>)
 8019674:	781b      	ldrb	r3, [r3, #0]
 8019676:	f003 0310 	and.w	r3, r3, #16
 801967a:	2b00      	cmp	r3, #0
 801967c:	f000 8263 	beq.w	8019b46 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019686:	461a      	mov	r2, r3
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801968c:	4413      	add	r3, r2
 801968e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019694:	4b99      	ldr	r3, [pc, #612]	; (80198fc <tcp_receive+0x2c0>)
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	1ad3      	subs	r3, r2, r3
 801969a:	2b00      	cmp	r3, #0
 801969c:	db1b      	blt.n	80196d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80196a2:	4b96      	ldr	r3, [pc, #600]	; (80198fc <tcp_receive+0x2c0>)
 80196a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80196a6:	429a      	cmp	r2, r3
 80196a8:	d106      	bne.n	80196b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80196ae:	4b94      	ldr	r3, [pc, #592]	; (8019900 <tcp_receive+0x2c4>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	1ad3      	subs	r3, r2, r3
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	db0e      	blt.n	80196d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80196bc:	4b90      	ldr	r3, [pc, #576]	; (8019900 <tcp_receive+0x2c4>)
 80196be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80196c0:	429a      	cmp	r2, r3
 80196c2:	d125      	bne.n	8019710 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80196c4:	4b8f      	ldr	r3, [pc, #572]	; (8019904 <tcp_receive+0x2c8>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	89db      	ldrh	r3, [r3, #14]
 80196ca:	b29a      	uxth	r2, r3
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80196d2:	429a      	cmp	r2, r3
 80196d4:	d91c      	bls.n	8019710 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80196d6:	4b8b      	ldr	r3, [pc, #556]	; (8019904 <tcp_receive+0x2c8>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	89db      	ldrh	r3, [r3, #14]
 80196dc:	b29a      	uxth	r2, r3
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80196f0:	429a      	cmp	r2, r3
 80196f2:	d205      	bcs.n	8019700 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019700:	4b7e      	ldr	r3, [pc, #504]	; (80198fc <tcp_receive+0x2c0>)
 8019702:	681a      	ldr	r2, [r3, #0]
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019708:	4b7d      	ldr	r3, [pc, #500]	; (8019900 <tcp_receive+0x2c4>)
 801970a:	681a      	ldr	r2, [r3, #0]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019710:	4b7b      	ldr	r3, [pc, #492]	; (8019900 <tcp_receive+0x2c4>)
 8019712:	681a      	ldr	r2, [r3, #0]
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019718:	1ad3      	subs	r3, r2, r3
 801971a:	2b00      	cmp	r3, #0
 801971c:	dc58      	bgt.n	80197d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801971e:	4b7a      	ldr	r3, [pc, #488]	; (8019908 <tcp_receive+0x2cc>)
 8019720:	881b      	ldrh	r3, [r3, #0]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d14b      	bne.n	80197be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801972a:	687a      	ldr	r2, [r7, #4]
 801972c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8019730:	4413      	add	r3, r2
 8019732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019734:	429a      	cmp	r2, r3
 8019736:	d142      	bne.n	80197be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801973e:	2b00      	cmp	r3, #0
 8019740:	db3d      	blt.n	80197be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019746:	4b6e      	ldr	r3, [pc, #440]	; (8019900 <tcp_receive+0x2c4>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	429a      	cmp	r2, r3
 801974c:	d137      	bne.n	80197be <tcp_receive+0x182>
              found_dupack = 1;
 801974e:	2301      	movs	r3, #1
 8019750:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019758:	2bff      	cmp	r3, #255	; 0xff
 801975a:	d007      	beq.n	801976c <tcp_receive+0x130>
                ++pcb->dupacks;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019762:	3301      	adds	r3, #1
 8019764:	b2da      	uxtb	r2, r3
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019772:	2b03      	cmp	r3, #3
 8019774:	d91b      	bls.n	80197ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019780:	4413      	add	r3, r2
 8019782:	b29a      	uxth	r2, r3
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801978a:	429a      	cmp	r2, r3
 801978c:	d30a      	bcc.n	80197a4 <tcp_receive+0x168>
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019798:	4413      	add	r3, r2
 801979a:	b29a      	uxth	r2, r3
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80197a2:	e004      	b.n	80197ae <tcp_receive+0x172>
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80197b4:	2b02      	cmp	r3, #2
 80197b6:	d902      	bls.n	80197be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f002 fb41 	bl	801be40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80197be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	f040 8160 	bne.w	8019a86 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	2200      	movs	r2, #0
 80197ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80197ce:	e15a      	b.n	8019a86 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80197d0:	4b4b      	ldr	r3, [pc, #300]	; (8019900 <tcp_receive+0x2c4>)
 80197d2:	681a      	ldr	r2, [r3, #0]
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197d8:	1ad3      	subs	r3, r2, r3
 80197da:	3b01      	subs	r3, #1
 80197dc:	2b00      	cmp	r3, #0
 80197de:	f2c0 814d 	blt.w	8019a7c <tcp_receive+0x440>
 80197e2:	4b47      	ldr	r3, [pc, #284]	; (8019900 <tcp_receive+0x2c4>)
 80197e4:	681a      	ldr	r2, [r3, #0]
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197ea:	1ad3      	subs	r3, r2, r3
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	f300 8145 	bgt.w	8019a7c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	8b5b      	ldrh	r3, [r3, #26]
 80197f6:	f003 0304 	and.w	r3, r3, #4
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d010      	beq.n	8019820 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	8b5b      	ldrh	r3, [r3, #26]
 8019802:	f023 0304 	bic.w	r3, r3, #4
 8019806:	b29a      	uxth	r2, r3
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	2200      	movs	r2, #0
 801981c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	2200      	movs	r2, #0
 8019824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801982e:	10db      	asrs	r3, r3, #3
 8019830:	b21b      	sxth	r3, r3
 8019832:	b29a      	uxth	r2, r3
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801983a:	b29b      	uxth	r3, r3
 801983c:	4413      	add	r3, r2
 801983e:	b29b      	uxth	r3, r3
 8019840:	b21a      	sxth	r2, r3
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019848:	4b2d      	ldr	r3, [pc, #180]	; (8019900 <tcp_receive+0x2c4>)
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	b29a      	uxth	r2, r3
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019852:	b29b      	uxth	r3, r3
 8019854:	1ad3      	subs	r3, r2, r3
 8019856:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2200      	movs	r2, #0
 801985c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8019860:	4b27      	ldr	r3, [pc, #156]	; (8019900 <tcp_receive+0x2c4>)
 8019862:	681a      	ldr	r2, [r3, #0]
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	7d1b      	ldrb	r3, [r3, #20]
 801986c:	2b03      	cmp	r3, #3
 801986e:	f240 8096 	bls.w	801999e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801987e:	429a      	cmp	r2, r3
 8019880:	d244      	bcs.n	801990c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	8b5b      	ldrh	r3, [r3, #26]
 8019886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801988a:	2b00      	cmp	r3, #0
 801988c:	d001      	beq.n	8019892 <tcp_receive+0x256>
 801988e:	2301      	movs	r3, #1
 8019890:	e000      	b.n	8019894 <tcp_receive+0x258>
 8019892:	2302      	movs	r3, #2
 8019894:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019898:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801989c:	b29a      	uxth	r2, r3
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198a2:	fb12 f303 	smulbb	r3, r2, r3
 80198a6:	b29b      	uxth	r3, r3
 80198a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80198aa:	4293      	cmp	r3, r2
 80198ac:	bf28      	it	cs
 80198ae:	4613      	movcs	r3, r2
 80198b0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80198ba:	4413      	add	r3, r2
 80198bc:	b29a      	uxth	r2, r3
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198c4:	429a      	cmp	r2, r3
 80198c6:	d309      	bcc.n	80198dc <tcp_receive+0x2a0>
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80198d0:	4413      	add	r3, r2
 80198d2:	b29a      	uxth	r2, r3
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80198da:	e060      	b.n	801999e <tcp_receive+0x362>
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80198e6:	e05a      	b.n	801999e <tcp_receive+0x362>
 80198e8:	08022b7c 	.word	0x08022b7c
 80198ec:	08022eac 	.word	0x08022eac
 80198f0:	08022bc8 	.word	0x08022bc8
 80198f4:	08022ec8 	.word	0x08022ec8
 80198f8:	2000c828 	.word	0x2000c828
 80198fc:	2000c81c 	.word	0x2000c81c
 8019900:	2000c820 	.word	0x2000c820
 8019904:	2000c80c 	.word	0x2000c80c
 8019908:	2000c826 	.word	0x2000c826
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019914:	4413      	add	r3, r2
 8019916:	b29a      	uxth	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801991e:	429a      	cmp	r2, r3
 8019920:	d309      	bcc.n	8019936 <tcp_receive+0x2fa>
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019928:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801992a:	4413      	add	r3, r2
 801992c:	b29a      	uxth	r2, r3
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019934:	e004      	b.n	8019940 <tcp_receive+0x304>
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801993c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801994c:	429a      	cmp	r2, r3
 801994e:	d326      	bcc.n	801999e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801995c:	1ad3      	subs	r3, r2, r3
 801995e:	b29a      	uxth	r2, r3
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019970:	4413      	add	r3, r2
 8019972:	b29a      	uxth	r2, r3
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801997a:	429a      	cmp	r2, r3
 801997c:	d30a      	bcc.n	8019994 <tcp_receive+0x358>
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019988:	4413      	add	r3, r2
 801998a:	b29a      	uxth	r2, r3
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019992:	e004      	b.n	801999e <tcp_receive+0x362>
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801999a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199a6:	4a98      	ldr	r2, [pc, #608]	; (8019c08 <tcp_receive+0x5cc>)
 80199a8:	6878      	ldr	r0, [r7, #4]
 80199aa:	f7ff fdcb 	bl	8019544 <tcp_free_acked_segments>
 80199ae:	4602      	mov	r2, r0
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199bc:	4a93      	ldr	r2, [pc, #588]	; (8019c0c <tcp_receive+0x5d0>)
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f7ff fdc0 	bl	8019544 <tcp_free_acked_segments>
 80199c4:	4602      	mov	r2, r0
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d104      	bne.n	80199dc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80199d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80199da:	e002      	b.n	80199e2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	2200      	movs	r2, #0
 80199e0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	2200      	movs	r2, #0
 80199e6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d103      	bne.n	80199f8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	2200      	movs	r2, #0
 80199f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80199fe:	4b84      	ldr	r3, [pc, #528]	; (8019c10 <tcp_receive+0x5d4>)
 8019a00:	881b      	ldrh	r3, [r3, #0]
 8019a02:	4413      	add	r3, r2
 8019a04:	b29a      	uxth	r2, r3
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	8b5b      	ldrh	r3, [r3, #26]
 8019a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d035      	beq.n	8019a84 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d118      	bne.n	8019a52 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d00c      	beq.n	8019a42 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a30:	68db      	ldr	r3, [r3, #12]
 8019a32:	685b      	ldr	r3, [r3, #4]
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7fa fe92 	bl	801475e <lwip_htonl>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	dc20      	bgt.n	8019a84 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	8b5b      	ldrh	r3, [r3, #26]
 8019a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019a4a:	b29a      	uxth	r2, r3
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019a50:	e018      	b.n	8019a84 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a5a:	68db      	ldr	r3, [r3, #12]
 8019a5c:	685b      	ldr	r3, [r3, #4]
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7fa fe7d 	bl	801475e <lwip_htonl>
 8019a64:	4603      	mov	r3, r0
 8019a66:	1ae3      	subs	r3, r4, r3
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	dc0b      	bgt.n	8019a84 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	8b5b      	ldrh	r3, [r3, #26]
 8019a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019a74:	b29a      	uxth	r2, r3
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019a7a:	e003      	b.n	8019a84 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019a7c:	6878      	ldr	r0, [r7, #4]
 8019a7e:	f002 fbcd 	bl	801c21c <tcp_send_empty_ack>
 8019a82:	e000      	b.n	8019a86 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019a84:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d05b      	beq.n	8019b46 <tcp_receive+0x50a>
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a92:	4b60      	ldr	r3, [pc, #384]	; (8019c14 <tcp_receive+0x5d8>)
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	1ad3      	subs	r3, r2, r3
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	da54      	bge.n	8019b46 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019a9c:	4b5e      	ldr	r3, [pc, #376]	; (8019c18 <tcp_receive+0x5dc>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	b29a      	uxth	r2, r3
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019aa6:	b29b      	uxth	r3, r3
 8019aa8:	1ad3      	subs	r3, r2, r3
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019ab0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019aba:	10db      	asrs	r3, r3, #3
 8019abc:	b21b      	sxth	r3, r3
 8019abe:	b29b      	uxth	r3, r3
 8019ac0:	1ad3      	subs	r3, r2, r3
 8019ac2:	b29b      	uxth	r3, r3
 8019ac4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019ace:	b29a      	uxth	r2, r3
 8019ad0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019ad4:	4413      	add	r3, r2
 8019ad6:	b29b      	uxth	r3, r3
 8019ad8:	b21a      	sxth	r2, r3
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019ade:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	da05      	bge.n	8019af2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019ae6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019aea:	425b      	negs	r3, r3
 8019aec:	b29b      	uxth	r3, r3
 8019aee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019af2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019afc:	109b      	asrs	r3, r3, #2
 8019afe:	b21b      	sxth	r3, r3
 8019b00:	b29b      	uxth	r3, r3
 8019b02:	1ad3      	subs	r3, r2, r3
 8019b04:	b29b      	uxth	r3, r3
 8019b06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019b10:	b29a      	uxth	r2, r3
 8019b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019b16:	4413      	add	r3, r2
 8019b18:	b29b      	uxth	r3, r3
 8019b1a:	b21a      	sxth	r2, r3
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019b26:	10db      	asrs	r3, r3, #3
 8019b28:	b21b      	sxth	r3, r3
 8019b2a:	b29a      	uxth	r2, r3
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019b32:	b29b      	uxth	r3, r3
 8019b34:	4413      	add	r3, r2
 8019b36:	b29b      	uxth	r3, r3
 8019b38:	b21a      	sxth	r2, r3
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2200      	movs	r2, #0
 8019b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019b46:	4b35      	ldr	r3, [pc, #212]	; (8019c1c <tcp_receive+0x5e0>)
 8019b48:	881b      	ldrh	r3, [r3, #0]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	f000 84e1 	beq.w	801a512 <tcp_receive+0xed6>
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	7d1b      	ldrb	r3, [r3, #20]
 8019b54:	2b06      	cmp	r3, #6
 8019b56:	f200 84dc 	bhi.w	801a512 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b5e:	4b30      	ldr	r3, [pc, #192]	; (8019c20 <tcp_receive+0x5e4>)
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	1ad3      	subs	r3, r2, r3
 8019b64:	3b01      	subs	r3, #1
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	f2c0 808e 	blt.w	8019c88 <tcp_receive+0x64c>
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b70:	4b2a      	ldr	r3, [pc, #168]	; (8019c1c <tcp_receive+0x5e0>)
 8019b72:	881b      	ldrh	r3, [r3, #0]
 8019b74:	4619      	mov	r1, r3
 8019b76:	4b2a      	ldr	r3, [pc, #168]	; (8019c20 <tcp_receive+0x5e4>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	440b      	add	r3, r1
 8019b7c:	1ad3      	subs	r3, r2, r3
 8019b7e:	3301      	adds	r3, #1
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	f300 8081 	bgt.w	8019c88 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019b86:	4b27      	ldr	r3, [pc, #156]	; (8019c24 <tcp_receive+0x5e8>)
 8019b88:	685b      	ldr	r3, [r3, #4]
 8019b8a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b90:	4b23      	ldr	r3, [pc, #140]	; (8019c20 <tcp_receive+0x5e4>)
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	1ad3      	subs	r3, r2, r3
 8019b96:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019b98:	4b22      	ldr	r3, [pc, #136]	; (8019c24 <tcp_receive+0x5e8>)
 8019b9a:	685b      	ldr	r3, [r3, #4]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d106      	bne.n	8019bae <tcp_receive+0x572>
 8019ba0:	4b21      	ldr	r3, [pc, #132]	; (8019c28 <tcp_receive+0x5ec>)
 8019ba2:	f240 5294 	movw	r2, #1428	; 0x594
 8019ba6:	4921      	ldr	r1, [pc, #132]	; (8019c2c <tcp_receive+0x5f0>)
 8019ba8:	4821      	ldr	r0, [pc, #132]	; (8019c30 <tcp_receive+0x5f4>)
 8019baa:	f005 fc17 	bl	801f3dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019bb4:	4293      	cmp	r3, r2
 8019bb6:	d906      	bls.n	8019bc6 <tcp_receive+0x58a>
 8019bb8:	4b1b      	ldr	r3, [pc, #108]	; (8019c28 <tcp_receive+0x5ec>)
 8019bba:	f240 5295 	movw	r2, #1429	; 0x595
 8019bbe:	491d      	ldr	r1, [pc, #116]	; (8019c34 <tcp_receive+0x5f8>)
 8019bc0:	481b      	ldr	r0, [pc, #108]	; (8019c30 <tcp_receive+0x5f4>)
 8019bc2:	f005 fc0b 	bl	801f3dc <iprintf>
      off = (u16_t)off32;
 8019bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019bcc:	4b15      	ldr	r3, [pc, #84]	; (8019c24 <tcp_receive+0x5e8>)
 8019bce:	685b      	ldr	r3, [r3, #4]
 8019bd0:	891b      	ldrh	r3, [r3, #8]
 8019bd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d906      	bls.n	8019be8 <tcp_receive+0x5ac>
 8019bda:	4b13      	ldr	r3, [pc, #76]	; (8019c28 <tcp_receive+0x5ec>)
 8019bdc:	f240 5297 	movw	r2, #1431	; 0x597
 8019be0:	4915      	ldr	r1, [pc, #84]	; (8019c38 <tcp_receive+0x5fc>)
 8019be2:	4813      	ldr	r0, [pc, #76]	; (8019c30 <tcp_receive+0x5f4>)
 8019be4:	f005 fbfa 	bl	801f3dc <iprintf>
      inseg.len -= off;
 8019be8:	4b0e      	ldr	r3, [pc, #56]	; (8019c24 <tcp_receive+0x5e8>)
 8019bea:	891a      	ldrh	r2, [r3, #8]
 8019bec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019bf0:	1ad3      	subs	r3, r2, r3
 8019bf2:	b29a      	uxth	r2, r3
 8019bf4:	4b0b      	ldr	r3, [pc, #44]	; (8019c24 <tcp_receive+0x5e8>)
 8019bf6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019bf8:	4b0a      	ldr	r3, [pc, #40]	; (8019c24 <tcp_receive+0x5e8>)
 8019bfa:	685b      	ldr	r3, [r3, #4]
 8019bfc:	891a      	ldrh	r2, [r3, #8]
 8019bfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019c02:	1ad3      	subs	r3, r2, r3
 8019c04:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019c06:	e029      	b.n	8019c5c <tcp_receive+0x620>
 8019c08:	08022ee4 	.word	0x08022ee4
 8019c0c:	08022eec 	.word	0x08022eec
 8019c10:	2000c824 	.word	0x2000c824
 8019c14:	2000c820 	.word	0x2000c820
 8019c18:	20014bb8 	.word	0x20014bb8
 8019c1c:	2000c826 	.word	0x2000c826
 8019c20:	2000c81c 	.word	0x2000c81c
 8019c24:	2000c7fc 	.word	0x2000c7fc
 8019c28:	08022b7c 	.word	0x08022b7c
 8019c2c:	08022ef4 	.word	0x08022ef4
 8019c30:	08022bc8 	.word	0x08022bc8
 8019c34:	08022f04 	.word	0x08022f04
 8019c38:	08022f14 	.word	0x08022f14
        off -= p->len;
 8019c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c3e:	895b      	ldrh	r3, [r3, #10]
 8019c40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019c44:	1ad3      	subs	r3, r2, r3
 8019c46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019c4e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c52:	2200      	movs	r2, #0
 8019c54:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c5e:	895b      	ldrh	r3, [r3, #10]
 8019c60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019c64:	429a      	cmp	r2, r3
 8019c66:	d8e9      	bhi.n	8019c3c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019c6c:	4619      	mov	r1, r3
 8019c6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019c70:	f7fc f8bc 	bl	8015dec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c78:	4a91      	ldr	r2, [pc, #580]	; (8019ec0 <tcp_receive+0x884>)
 8019c7a:	6013      	str	r3, [r2, #0]
 8019c7c:	4b91      	ldr	r3, [pc, #580]	; (8019ec4 <tcp_receive+0x888>)
 8019c7e:	68db      	ldr	r3, [r3, #12]
 8019c80:	4a8f      	ldr	r2, [pc, #572]	; (8019ec0 <tcp_receive+0x884>)
 8019c82:	6812      	ldr	r2, [r2, #0]
 8019c84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019c86:	e00d      	b.n	8019ca4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019c88:	4b8d      	ldr	r3, [pc, #564]	; (8019ec0 <tcp_receive+0x884>)
 8019c8a:	681a      	ldr	r2, [r3, #0]
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c90:	1ad3      	subs	r3, r2, r3
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	da06      	bge.n	8019ca4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	8b5b      	ldrh	r3, [r3, #26]
 8019c9a:	f043 0302 	orr.w	r3, r3, #2
 8019c9e:	b29a      	uxth	r2, r3
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019ca4:	4b86      	ldr	r3, [pc, #536]	; (8019ec0 <tcp_receive+0x884>)
 8019ca6:	681a      	ldr	r2, [r3, #0]
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cac:	1ad3      	subs	r3, r2, r3
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	f2c0 842a 	blt.w	801a508 <tcp_receive+0xecc>
 8019cb4:	4b82      	ldr	r3, [pc, #520]	; (8019ec0 <tcp_receive+0x884>)
 8019cb6:	681a      	ldr	r2, [r3, #0]
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cbc:	6879      	ldr	r1, [r7, #4]
 8019cbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019cc0:	440b      	add	r3, r1
 8019cc2:	1ad3      	subs	r3, r2, r3
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	f300 841e 	bgt.w	801a508 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019cd0:	4b7b      	ldr	r3, [pc, #492]	; (8019ec0 <tcp_receive+0x884>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	f040 829a 	bne.w	801a20e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019cda:	4b7a      	ldr	r3, [pc, #488]	; (8019ec4 <tcp_receive+0x888>)
 8019cdc:	891c      	ldrh	r4, [r3, #8]
 8019cde:	4b79      	ldr	r3, [pc, #484]	; (8019ec4 <tcp_receive+0x888>)
 8019ce0:	68db      	ldr	r3, [r3, #12]
 8019ce2:	899b      	ldrh	r3, [r3, #12]
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7fa fd24 	bl	8014734 <lwip_htons>
 8019cec:	4603      	mov	r3, r0
 8019cee:	b2db      	uxtb	r3, r3
 8019cf0:	f003 0303 	and.w	r3, r3, #3
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d001      	beq.n	8019cfc <tcp_receive+0x6c0>
 8019cf8:	2301      	movs	r3, #1
 8019cfa:	e000      	b.n	8019cfe <tcp_receive+0x6c2>
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	4423      	add	r3, r4
 8019d00:	b29a      	uxth	r2, r3
 8019d02:	4b71      	ldr	r3, [pc, #452]	; (8019ec8 <tcp_receive+0x88c>)
 8019d04:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019d0a:	4b6f      	ldr	r3, [pc, #444]	; (8019ec8 <tcp_receive+0x88c>)
 8019d0c:	881b      	ldrh	r3, [r3, #0]
 8019d0e:	429a      	cmp	r2, r3
 8019d10:	d275      	bcs.n	8019dfe <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019d12:	4b6c      	ldr	r3, [pc, #432]	; (8019ec4 <tcp_receive+0x888>)
 8019d14:	68db      	ldr	r3, [r3, #12]
 8019d16:	899b      	ldrh	r3, [r3, #12]
 8019d18:	b29b      	uxth	r3, r3
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	f7fa fd0a 	bl	8014734 <lwip_htons>
 8019d20:	4603      	mov	r3, r0
 8019d22:	b2db      	uxtb	r3, r3
 8019d24:	f003 0301 	and.w	r3, r3, #1
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d01f      	beq.n	8019d6c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019d2c:	4b65      	ldr	r3, [pc, #404]	; (8019ec4 <tcp_receive+0x888>)
 8019d2e:	68db      	ldr	r3, [r3, #12]
 8019d30:	899b      	ldrh	r3, [r3, #12]
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	b21b      	sxth	r3, r3
 8019d36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019d3a:	b21c      	sxth	r4, r3
 8019d3c:	4b61      	ldr	r3, [pc, #388]	; (8019ec4 <tcp_receive+0x888>)
 8019d3e:	68db      	ldr	r3, [r3, #12]
 8019d40:	899b      	ldrh	r3, [r3, #12]
 8019d42:	b29b      	uxth	r3, r3
 8019d44:	4618      	mov	r0, r3
 8019d46:	f7fa fcf5 	bl	8014734 <lwip_htons>
 8019d4a:	4603      	mov	r3, r0
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	b29b      	uxth	r3, r3
 8019d50:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019d54:	b29b      	uxth	r3, r3
 8019d56:	4618      	mov	r0, r3
 8019d58:	f7fa fcec 	bl	8014734 <lwip_htons>
 8019d5c:	4603      	mov	r3, r0
 8019d5e:	b21b      	sxth	r3, r3
 8019d60:	4323      	orrs	r3, r4
 8019d62:	b21a      	sxth	r2, r3
 8019d64:	4b57      	ldr	r3, [pc, #348]	; (8019ec4 <tcp_receive+0x888>)
 8019d66:	68db      	ldr	r3, [r3, #12]
 8019d68:	b292      	uxth	r2, r2
 8019d6a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019d70:	4b54      	ldr	r3, [pc, #336]	; (8019ec4 <tcp_receive+0x888>)
 8019d72:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019d74:	4b53      	ldr	r3, [pc, #332]	; (8019ec4 <tcp_receive+0x888>)
 8019d76:	68db      	ldr	r3, [r3, #12]
 8019d78:	899b      	ldrh	r3, [r3, #12]
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f7fa fcd9 	bl	8014734 <lwip_htons>
 8019d82:	4603      	mov	r3, r0
 8019d84:	b2db      	uxtb	r3, r3
 8019d86:	f003 0302 	and.w	r3, r3, #2
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d005      	beq.n	8019d9a <tcp_receive+0x75e>
            inseg.len -= 1;
 8019d8e:	4b4d      	ldr	r3, [pc, #308]	; (8019ec4 <tcp_receive+0x888>)
 8019d90:	891b      	ldrh	r3, [r3, #8]
 8019d92:	3b01      	subs	r3, #1
 8019d94:	b29a      	uxth	r2, r3
 8019d96:	4b4b      	ldr	r3, [pc, #300]	; (8019ec4 <tcp_receive+0x888>)
 8019d98:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019d9a:	4b4a      	ldr	r3, [pc, #296]	; (8019ec4 <tcp_receive+0x888>)
 8019d9c:	685b      	ldr	r3, [r3, #4]
 8019d9e:	4a49      	ldr	r2, [pc, #292]	; (8019ec4 <tcp_receive+0x888>)
 8019da0:	8912      	ldrh	r2, [r2, #8]
 8019da2:	4611      	mov	r1, r2
 8019da4:	4618      	mov	r0, r3
 8019da6:	f7fb ff21 	bl	8015bec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019daa:	4b46      	ldr	r3, [pc, #280]	; (8019ec4 <tcp_receive+0x888>)
 8019dac:	891c      	ldrh	r4, [r3, #8]
 8019dae:	4b45      	ldr	r3, [pc, #276]	; (8019ec4 <tcp_receive+0x888>)
 8019db0:	68db      	ldr	r3, [r3, #12]
 8019db2:	899b      	ldrh	r3, [r3, #12]
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7fa fcbc 	bl	8014734 <lwip_htons>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	b2db      	uxtb	r3, r3
 8019dc0:	f003 0303 	and.w	r3, r3, #3
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d001      	beq.n	8019dcc <tcp_receive+0x790>
 8019dc8:	2301      	movs	r3, #1
 8019dca:	e000      	b.n	8019dce <tcp_receive+0x792>
 8019dcc:	2300      	movs	r3, #0
 8019dce:	4423      	add	r3, r4
 8019dd0:	b29a      	uxth	r2, r3
 8019dd2:	4b3d      	ldr	r3, [pc, #244]	; (8019ec8 <tcp_receive+0x88c>)
 8019dd4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019dd6:	4b3c      	ldr	r3, [pc, #240]	; (8019ec8 <tcp_receive+0x88c>)
 8019dd8:	881b      	ldrh	r3, [r3, #0]
 8019dda:	461a      	mov	r2, r3
 8019ddc:	4b38      	ldr	r3, [pc, #224]	; (8019ec0 <tcp_receive+0x884>)
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	441a      	add	r2, r3
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de6:	6879      	ldr	r1, [r7, #4]
 8019de8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019dea:	440b      	add	r3, r1
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d006      	beq.n	8019dfe <tcp_receive+0x7c2>
 8019df0:	4b36      	ldr	r3, [pc, #216]	; (8019ecc <tcp_receive+0x890>)
 8019df2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019df6:	4936      	ldr	r1, [pc, #216]	; (8019ed0 <tcp_receive+0x894>)
 8019df8:	4836      	ldr	r0, [pc, #216]	; (8019ed4 <tcp_receive+0x898>)
 8019dfa:	f005 faef 	bl	801f3dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	f000 80e7 	beq.w	8019fd6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e08:	4b2e      	ldr	r3, [pc, #184]	; (8019ec4 <tcp_receive+0x888>)
 8019e0a:	68db      	ldr	r3, [r3, #12]
 8019e0c:	899b      	ldrh	r3, [r3, #12]
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7fa fc8f 	bl	8014734 <lwip_htons>
 8019e16:	4603      	mov	r3, r0
 8019e18:	b2db      	uxtb	r3, r3
 8019e1a:	f003 0301 	and.w	r3, r3, #1
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d010      	beq.n	8019e44 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019e22:	e00a      	b.n	8019e3a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e28:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e2e:	681a      	ldr	r2, [r3, #0]
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019e34:	68f8      	ldr	r0, [r7, #12]
 8019e36:	f7fd fcaa 	bl	801778e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d1f0      	bne.n	8019e24 <tcp_receive+0x7e8>
 8019e42:	e0c8      	b.n	8019fd6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e48:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019e4a:	e052      	b.n	8019ef2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e4e:	68db      	ldr	r3, [r3, #12]
 8019e50:	899b      	ldrh	r3, [r3, #12]
 8019e52:	b29b      	uxth	r3, r3
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7fa fc6d 	bl	8014734 <lwip_htons>
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	b2db      	uxtb	r3, r3
 8019e5e:	f003 0301 	and.w	r3, r3, #1
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d03d      	beq.n	8019ee2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019e66:	4b17      	ldr	r3, [pc, #92]	; (8019ec4 <tcp_receive+0x888>)
 8019e68:	68db      	ldr	r3, [r3, #12]
 8019e6a:	899b      	ldrh	r3, [r3, #12]
 8019e6c:	b29b      	uxth	r3, r3
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f7fa fc60 	bl	8014734 <lwip_htons>
 8019e74:	4603      	mov	r3, r0
 8019e76:	b2db      	uxtb	r3, r3
 8019e78:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d130      	bne.n	8019ee2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019e80:	4b10      	ldr	r3, [pc, #64]	; (8019ec4 <tcp_receive+0x888>)
 8019e82:	68db      	ldr	r3, [r3, #12]
 8019e84:	899b      	ldrh	r3, [r3, #12]
 8019e86:	b29c      	uxth	r4, r3
 8019e88:	2001      	movs	r0, #1
 8019e8a:	f7fa fc53 	bl	8014734 <lwip_htons>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	461a      	mov	r2, r3
 8019e92:	4b0c      	ldr	r3, [pc, #48]	; (8019ec4 <tcp_receive+0x888>)
 8019e94:	68db      	ldr	r3, [r3, #12]
 8019e96:	4322      	orrs	r2, r4
 8019e98:	b292      	uxth	r2, r2
 8019e9a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019e9c:	4b09      	ldr	r3, [pc, #36]	; (8019ec4 <tcp_receive+0x888>)
 8019e9e:	891c      	ldrh	r4, [r3, #8]
 8019ea0:	4b08      	ldr	r3, [pc, #32]	; (8019ec4 <tcp_receive+0x888>)
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	899b      	ldrh	r3, [r3, #12]
 8019ea6:	b29b      	uxth	r3, r3
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	f7fa fc43 	bl	8014734 <lwip_htons>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	b2db      	uxtb	r3, r3
 8019eb2:	f003 0303 	and.w	r3, r3, #3
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d00e      	beq.n	8019ed8 <tcp_receive+0x89c>
 8019eba:	2301      	movs	r3, #1
 8019ebc:	e00d      	b.n	8019eda <tcp_receive+0x89e>
 8019ebe:	bf00      	nop
 8019ec0:	2000c81c 	.word	0x2000c81c
 8019ec4:	2000c7fc 	.word	0x2000c7fc
 8019ec8:	2000c826 	.word	0x2000c826
 8019ecc:	08022b7c 	.word	0x08022b7c
 8019ed0:	08022f24 	.word	0x08022f24
 8019ed4:	08022bc8 	.word	0x08022bc8
 8019ed8:	2300      	movs	r3, #0
 8019eda:	4423      	add	r3, r4
 8019edc:	b29a      	uxth	r2, r3
 8019ede:	4b98      	ldr	r3, [pc, #608]	; (801a140 <tcp_receive+0xb04>)
 8019ee0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ee4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019eec:	6938      	ldr	r0, [r7, #16]
 8019eee:	f7fd fc4e 	bl	801778e <tcp_seg_free>
            while (next &&
 8019ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d00e      	beq.n	8019f16 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019ef8:	4b91      	ldr	r3, [pc, #580]	; (801a140 <tcp_receive+0xb04>)
 8019efa:	881b      	ldrh	r3, [r3, #0]
 8019efc:	461a      	mov	r2, r3
 8019efe:	4b91      	ldr	r3, [pc, #580]	; (801a144 <tcp_receive+0xb08>)
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	441a      	add	r2, r3
 8019f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f06:	68db      	ldr	r3, [r3, #12]
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019f0c:	8909      	ldrh	r1, [r1, #8]
 8019f0e:	440b      	add	r3, r1
 8019f10:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	da9a      	bge.n	8019e4c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d059      	beq.n	8019fd0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019f1c:	4b88      	ldr	r3, [pc, #544]	; (801a140 <tcp_receive+0xb04>)
 8019f1e:	881b      	ldrh	r3, [r3, #0]
 8019f20:	461a      	mov	r2, r3
 8019f22:	4b88      	ldr	r3, [pc, #544]	; (801a144 <tcp_receive+0xb08>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	441a      	add	r2, r3
 8019f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f2a:	68db      	ldr	r3, [r3, #12]
 8019f2c:	685b      	ldr	r3, [r3, #4]
 8019f2e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	dd4d      	ble.n	8019fd0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f36:	68db      	ldr	r3, [r3, #12]
 8019f38:	685b      	ldr	r3, [r3, #4]
 8019f3a:	b29a      	uxth	r2, r3
 8019f3c:	4b81      	ldr	r3, [pc, #516]	; (801a144 <tcp_receive+0xb08>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	1ad3      	subs	r3, r2, r3
 8019f44:	b29a      	uxth	r2, r3
 8019f46:	4b80      	ldr	r3, [pc, #512]	; (801a148 <tcp_receive+0xb0c>)
 8019f48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019f4a:	4b7f      	ldr	r3, [pc, #508]	; (801a148 <tcp_receive+0xb0c>)
 8019f4c:	68db      	ldr	r3, [r3, #12]
 8019f4e:	899b      	ldrh	r3, [r3, #12]
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7fa fbee 	bl	8014734 <lwip_htons>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	b2db      	uxtb	r3, r3
 8019f5c:	f003 0302 	and.w	r3, r3, #2
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d005      	beq.n	8019f70 <tcp_receive+0x934>
                inseg.len -= 1;
 8019f64:	4b78      	ldr	r3, [pc, #480]	; (801a148 <tcp_receive+0xb0c>)
 8019f66:	891b      	ldrh	r3, [r3, #8]
 8019f68:	3b01      	subs	r3, #1
 8019f6a:	b29a      	uxth	r2, r3
 8019f6c:	4b76      	ldr	r3, [pc, #472]	; (801a148 <tcp_receive+0xb0c>)
 8019f6e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019f70:	4b75      	ldr	r3, [pc, #468]	; (801a148 <tcp_receive+0xb0c>)
 8019f72:	685b      	ldr	r3, [r3, #4]
 8019f74:	4a74      	ldr	r2, [pc, #464]	; (801a148 <tcp_receive+0xb0c>)
 8019f76:	8912      	ldrh	r2, [r2, #8]
 8019f78:	4611      	mov	r1, r2
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f7fb fe36 	bl	8015bec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019f80:	4b71      	ldr	r3, [pc, #452]	; (801a148 <tcp_receive+0xb0c>)
 8019f82:	891c      	ldrh	r4, [r3, #8]
 8019f84:	4b70      	ldr	r3, [pc, #448]	; (801a148 <tcp_receive+0xb0c>)
 8019f86:	68db      	ldr	r3, [r3, #12]
 8019f88:	899b      	ldrh	r3, [r3, #12]
 8019f8a:	b29b      	uxth	r3, r3
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f7fa fbd1 	bl	8014734 <lwip_htons>
 8019f92:	4603      	mov	r3, r0
 8019f94:	b2db      	uxtb	r3, r3
 8019f96:	f003 0303 	and.w	r3, r3, #3
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d001      	beq.n	8019fa2 <tcp_receive+0x966>
 8019f9e:	2301      	movs	r3, #1
 8019fa0:	e000      	b.n	8019fa4 <tcp_receive+0x968>
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	4423      	add	r3, r4
 8019fa6:	b29a      	uxth	r2, r3
 8019fa8:	4b65      	ldr	r3, [pc, #404]	; (801a140 <tcp_receive+0xb04>)
 8019faa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019fac:	4b64      	ldr	r3, [pc, #400]	; (801a140 <tcp_receive+0xb04>)
 8019fae:	881b      	ldrh	r3, [r3, #0]
 8019fb0:	461a      	mov	r2, r3
 8019fb2:	4b64      	ldr	r3, [pc, #400]	; (801a144 <tcp_receive+0xb08>)
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	441a      	add	r2, r3
 8019fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	429a      	cmp	r2, r3
 8019fc0:	d006      	beq.n	8019fd0 <tcp_receive+0x994>
 8019fc2:	4b62      	ldr	r3, [pc, #392]	; (801a14c <tcp_receive+0xb10>)
 8019fc4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019fc8:	4961      	ldr	r1, [pc, #388]	; (801a150 <tcp_receive+0xb14>)
 8019fca:	4862      	ldr	r0, [pc, #392]	; (801a154 <tcp_receive+0xb18>)
 8019fcc:	f005 fa06 	bl	801f3dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019fd4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019fd6:	4b5a      	ldr	r3, [pc, #360]	; (801a140 <tcp_receive+0xb04>)
 8019fd8:	881b      	ldrh	r3, [r3, #0]
 8019fda:	461a      	mov	r2, r3
 8019fdc:	4b59      	ldr	r3, [pc, #356]	; (801a144 <tcp_receive+0xb08>)
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	441a      	add	r2, r3
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019fea:	4b55      	ldr	r3, [pc, #340]	; (801a140 <tcp_receive+0xb04>)
 8019fec:	881b      	ldrh	r3, [r3, #0]
 8019fee:	429a      	cmp	r2, r3
 8019ff0:	d206      	bcs.n	801a000 <tcp_receive+0x9c4>
 8019ff2:	4b56      	ldr	r3, [pc, #344]	; (801a14c <tcp_receive+0xb10>)
 8019ff4:	f240 6207 	movw	r2, #1543	; 0x607
 8019ff8:	4957      	ldr	r1, [pc, #348]	; (801a158 <tcp_receive+0xb1c>)
 8019ffa:	4856      	ldr	r0, [pc, #344]	; (801a154 <tcp_receive+0xb18>)
 8019ffc:	f005 f9ee 	bl	801f3dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a004:	4b4e      	ldr	r3, [pc, #312]	; (801a140 <tcp_receive+0xb04>)
 801a006:	881b      	ldrh	r3, [r3, #0]
 801a008:	1ad3      	subs	r3, r2, r3
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a010:	6878      	ldr	r0, [r7, #4]
 801a012:	f7fc fe97 	bl	8016d44 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a016:	4b4c      	ldr	r3, [pc, #304]	; (801a148 <tcp_receive+0xb0c>)
 801a018:	685b      	ldr	r3, [r3, #4]
 801a01a:	891b      	ldrh	r3, [r3, #8]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d006      	beq.n	801a02e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801a020:	4b49      	ldr	r3, [pc, #292]	; (801a148 <tcp_receive+0xb0c>)
 801a022:	685b      	ldr	r3, [r3, #4]
 801a024:	4a4d      	ldr	r2, [pc, #308]	; (801a15c <tcp_receive+0xb20>)
 801a026:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a028:	4b47      	ldr	r3, [pc, #284]	; (801a148 <tcp_receive+0xb0c>)
 801a02a:	2200      	movs	r2, #0
 801a02c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a02e:	4b46      	ldr	r3, [pc, #280]	; (801a148 <tcp_receive+0xb0c>)
 801a030:	68db      	ldr	r3, [r3, #12]
 801a032:	899b      	ldrh	r3, [r3, #12]
 801a034:	b29b      	uxth	r3, r3
 801a036:	4618      	mov	r0, r3
 801a038:	f7fa fb7c 	bl	8014734 <lwip_htons>
 801a03c:	4603      	mov	r3, r0
 801a03e:	b2db      	uxtb	r3, r3
 801a040:	f003 0301 	and.w	r3, r3, #1
 801a044:	2b00      	cmp	r3, #0
 801a046:	f000 80b8 	beq.w	801a1ba <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a04a:	4b45      	ldr	r3, [pc, #276]	; (801a160 <tcp_receive+0xb24>)
 801a04c:	781b      	ldrb	r3, [r3, #0]
 801a04e:	f043 0320 	orr.w	r3, r3, #32
 801a052:	b2da      	uxtb	r2, r3
 801a054:	4b42      	ldr	r3, [pc, #264]	; (801a160 <tcp_receive+0xb24>)
 801a056:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a058:	e0af      	b.n	801a1ba <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a05e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a064:	68db      	ldr	r3, [r3, #12]
 801a066:	685b      	ldr	r3, [r3, #4]
 801a068:	4a36      	ldr	r2, [pc, #216]	; (801a144 <tcp_receive+0xb08>)
 801a06a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	891b      	ldrh	r3, [r3, #8]
 801a070:	461c      	mov	r4, r3
 801a072:	68bb      	ldr	r3, [r7, #8]
 801a074:	68db      	ldr	r3, [r3, #12]
 801a076:	899b      	ldrh	r3, [r3, #12]
 801a078:	b29b      	uxth	r3, r3
 801a07a:	4618      	mov	r0, r3
 801a07c:	f7fa fb5a 	bl	8014734 <lwip_htons>
 801a080:	4603      	mov	r3, r0
 801a082:	b2db      	uxtb	r3, r3
 801a084:	f003 0303 	and.w	r3, r3, #3
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d001      	beq.n	801a090 <tcp_receive+0xa54>
 801a08c:	2301      	movs	r3, #1
 801a08e:	e000      	b.n	801a092 <tcp_receive+0xa56>
 801a090:	2300      	movs	r3, #0
 801a092:	191a      	adds	r2, r3, r4
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a098:	441a      	add	r2, r3
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a0a2:	461c      	mov	r4, r3
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	891b      	ldrh	r3, [r3, #8]
 801a0a8:	461d      	mov	r5, r3
 801a0aa:	68bb      	ldr	r3, [r7, #8]
 801a0ac:	68db      	ldr	r3, [r3, #12]
 801a0ae:	899b      	ldrh	r3, [r3, #12]
 801a0b0:	b29b      	uxth	r3, r3
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f7fa fb3e 	bl	8014734 <lwip_htons>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	b2db      	uxtb	r3, r3
 801a0bc:	f003 0303 	and.w	r3, r3, #3
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d001      	beq.n	801a0c8 <tcp_receive+0xa8c>
 801a0c4:	2301      	movs	r3, #1
 801a0c6:	e000      	b.n	801a0ca <tcp_receive+0xa8e>
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	442b      	add	r3, r5
 801a0cc:	429c      	cmp	r4, r3
 801a0ce:	d206      	bcs.n	801a0de <tcp_receive+0xaa2>
 801a0d0:	4b1e      	ldr	r3, [pc, #120]	; (801a14c <tcp_receive+0xb10>)
 801a0d2:	f240 622b 	movw	r2, #1579	; 0x62b
 801a0d6:	4923      	ldr	r1, [pc, #140]	; (801a164 <tcp_receive+0xb28>)
 801a0d8:	481e      	ldr	r0, [pc, #120]	; (801a154 <tcp_receive+0xb18>)
 801a0da:	f005 f97f 	bl	801f3dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a0de:	68bb      	ldr	r3, [r7, #8]
 801a0e0:	891b      	ldrh	r3, [r3, #8]
 801a0e2:	461c      	mov	r4, r3
 801a0e4:	68bb      	ldr	r3, [r7, #8]
 801a0e6:	68db      	ldr	r3, [r3, #12]
 801a0e8:	899b      	ldrh	r3, [r3, #12]
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7fa fb21 	bl	8014734 <lwip_htons>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	b2db      	uxtb	r3, r3
 801a0f6:	f003 0303 	and.w	r3, r3, #3
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d001      	beq.n	801a102 <tcp_receive+0xac6>
 801a0fe:	2301      	movs	r3, #1
 801a100:	e000      	b.n	801a104 <tcp_receive+0xac8>
 801a102:	2300      	movs	r3, #0
 801a104:	1919      	adds	r1, r3, r4
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a10a:	b28b      	uxth	r3, r1
 801a10c:	1ad3      	subs	r3, r2, r3
 801a10e:	b29a      	uxth	r2, r3
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a114:	6878      	ldr	r0, [r7, #4]
 801a116:	f7fc fe15 	bl	8016d44 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	685b      	ldr	r3, [r3, #4]
 801a11e:	891b      	ldrh	r3, [r3, #8]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d028      	beq.n	801a176 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a124:	4b0d      	ldr	r3, [pc, #52]	; (801a15c <tcp_receive+0xb20>)
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d01d      	beq.n	801a168 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a12c:	4b0b      	ldr	r3, [pc, #44]	; (801a15c <tcp_receive+0xb20>)
 801a12e:	681a      	ldr	r2, [r3, #0]
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	685b      	ldr	r3, [r3, #4]
 801a134:	4619      	mov	r1, r3
 801a136:	4610      	mov	r0, r2
 801a138:	f7fb ffbe 	bl	80160b8 <pbuf_cat>
 801a13c:	e018      	b.n	801a170 <tcp_receive+0xb34>
 801a13e:	bf00      	nop
 801a140:	2000c826 	.word	0x2000c826
 801a144:	2000c81c 	.word	0x2000c81c
 801a148:	2000c7fc 	.word	0x2000c7fc
 801a14c:	08022b7c 	.word	0x08022b7c
 801a150:	08022f5c 	.word	0x08022f5c
 801a154:	08022bc8 	.word	0x08022bc8
 801a158:	08022f98 	.word	0x08022f98
 801a15c:	2000c82c 	.word	0x2000c82c
 801a160:	2000c829 	.word	0x2000c829
 801a164:	08022fb8 	.word	0x08022fb8
            } else {
              recv_data = cseg->p;
 801a168:	68bb      	ldr	r3, [r7, #8]
 801a16a:	685b      	ldr	r3, [r3, #4]
 801a16c:	4a70      	ldr	r2, [pc, #448]	; (801a330 <tcp_receive+0xcf4>)
 801a16e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	2200      	movs	r2, #0
 801a174:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a176:	68bb      	ldr	r3, [r7, #8]
 801a178:	68db      	ldr	r3, [r3, #12]
 801a17a:	899b      	ldrh	r3, [r3, #12]
 801a17c:	b29b      	uxth	r3, r3
 801a17e:	4618      	mov	r0, r3
 801a180:	f7fa fad8 	bl	8014734 <lwip_htons>
 801a184:	4603      	mov	r3, r0
 801a186:	b2db      	uxtb	r3, r3
 801a188:	f003 0301 	and.w	r3, r3, #1
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d00d      	beq.n	801a1ac <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a190:	4b68      	ldr	r3, [pc, #416]	; (801a334 <tcp_receive+0xcf8>)
 801a192:	781b      	ldrb	r3, [r3, #0]
 801a194:	f043 0320 	orr.w	r3, r3, #32
 801a198:	b2da      	uxtb	r2, r3
 801a19a:	4b66      	ldr	r3, [pc, #408]	; (801a334 <tcp_receive+0xcf8>)
 801a19c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	7d1b      	ldrb	r3, [r3, #20]
 801a1a2:	2b04      	cmp	r3, #4
 801a1a4:	d102      	bne.n	801a1ac <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	2207      	movs	r2, #7
 801a1aa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a1ac:	68bb      	ldr	r3, [r7, #8]
 801a1ae:	681a      	ldr	r2, [r3, #0]
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a1b4:	68b8      	ldr	r0, [r7, #8]
 801a1b6:	f7fd faea 	bl	801778e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d008      	beq.n	801a1d4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1c6:	68db      	ldr	r3, [r3, #12]
 801a1c8:	685a      	ldr	r2, [r3, #4]
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a1ce:	429a      	cmp	r2, r3
 801a1d0:	f43f af43 	beq.w	801a05a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	8b5b      	ldrh	r3, [r3, #26]
 801a1d8:	f003 0301 	and.w	r3, r3, #1
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d00e      	beq.n	801a1fe <tcp_receive+0xbc2>
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	8b5b      	ldrh	r3, [r3, #26]
 801a1e4:	f023 0301 	bic.w	r3, r3, #1
 801a1e8:	b29a      	uxth	r2, r3
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	835a      	strh	r2, [r3, #26]
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	8b5b      	ldrh	r3, [r3, #26]
 801a1f2:	f043 0302 	orr.w	r3, r3, #2
 801a1f6:	b29a      	uxth	r2, r3
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a1fc:	e188      	b.n	801a510 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	8b5b      	ldrh	r3, [r3, #26]
 801a202:	f043 0301 	orr.w	r3, r3, #1
 801a206:	b29a      	uxth	r2, r3
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a20c:	e180      	b.n	801a510 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a212:	2b00      	cmp	r3, #0
 801a214:	d106      	bne.n	801a224 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a216:	4848      	ldr	r0, [pc, #288]	; (801a338 <tcp_receive+0xcfc>)
 801a218:	f7fd faf0 	bl	80177fc <tcp_seg_copy>
 801a21c:	4602      	mov	r2, r0
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	675a      	str	r2, [r3, #116]	; 0x74
 801a222:	e16d      	b.n	801a500 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a224:	2300      	movs	r3, #0
 801a226:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a22c:	63bb      	str	r3, [r7, #56]	; 0x38
 801a22e:	e157      	b.n	801a4e0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a232:	68db      	ldr	r3, [r3, #12]
 801a234:	685a      	ldr	r2, [r3, #4]
 801a236:	4b41      	ldr	r3, [pc, #260]	; (801a33c <tcp_receive+0xd00>)
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	429a      	cmp	r2, r3
 801a23c:	d11d      	bne.n	801a27a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a23e:	4b3e      	ldr	r3, [pc, #248]	; (801a338 <tcp_receive+0xcfc>)
 801a240:	891a      	ldrh	r2, [r3, #8]
 801a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a244:	891b      	ldrh	r3, [r3, #8]
 801a246:	429a      	cmp	r2, r3
 801a248:	f240 814f 	bls.w	801a4ea <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a24c:	483a      	ldr	r0, [pc, #232]	; (801a338 <tcp_receive+0xcfc>)
 801a24e:	f7fd fad5 	bl	80177fc <tcp_seg_copy>
 801a252:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a254:	697b      	ldr	r3, [r7, #20]
 801a256:	2b00      	cmp	r3, #0
 801a258:	f000 8149 	beq.w	801a4ee <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d003      	beq.n	801a26a <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a264:	697a      	ldr	r2, [r7, #20]
 801a266:	601a      	str	r2, [r3, #0]
 801a268:	e002      	b.n	801a270 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	697a      	ldr	r2, [r7, #20]
 801a26e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a272:	6978      	ldr	r0, [r7, #20]
 801a274:	f7ff f8de 	bl	8019434 <tcp_oos_insert_segment>
                }
                break;
 801a278:	e139      	b.n	801a4ee <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d117      	bne.n	801a2b0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a280:	4b2e      	ldr	r3, [pc, #184]	; (801a33c <tcp_receive+0xd00>)
 801a282:	681a      	ldr	r2, [r3, #0]
 801a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a286:	68db      	ldr	r3, [r3, #12]
 801a288:	685b      	ldr	r3, [r3, #4]
 801a28a:	1ad3      	subs	r3, r2, r3
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	da57      	bge.n	801a340 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a290:	4829      	ldr	r0, [pc, #164]	; (801a338 <tcp_receive+0xcfc>)
 801a292:	f7fd fab3 	bl	80177fc <tcp_seg_copy>
 801a296:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a298:	69bb      	ldr	r3, [r7, #24]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	f000 8129 	beq.w	801a4f2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	69ba      	ldr	r2, [r7, #24]
 801a2a4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a2a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a2a8:	69b8      	ldr	r0, [r7, #24]
 801a2aa:	f7ff f8c3 	bl	8019434 <tcp_oos_insert_segment>
                  }
                  break;
 801a2ae:	e120      	b.n	801a4f2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a2b0:	4b22      	ldr	r3, [pc, #136]	; (801a33c <tcp_receive+0xd00>)
 801a2b2:	681a      	ldr	r2, [r3, #0]
 801a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2b6:	68db      	ldr	r3, [r3, #12]
 801a2b8:	685b      	ldr	r3, [r3, #4]
 801a2ba:	1ad3      	subs	r3, r2, r3
 801a2bc:	3b01      	subs	r3, #1
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	db3e      	blt.n	801a340 <tcp_receive+0xd04>
 801a2c2:	4b1e      	ldr	r3, [pc, #120]	; (801a33c <tcp_receive+0xd00>)
 801a2c4:	681a      	ldr	r2, [r3, #0]
 801a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2c8:	68db      	ldr	r3, [r3, #12]
 801a2ca:	685b      	ldr	r3, [r3, #4]
 801a2cc:	1ad3      	subs	r3, r2, r3
 801a2ce:	3301      	adds	r3, #1
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	dc35      	bgt.n	801a340 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a2d4:	4818      	ldr	r0, [pc, #96]	; (801a338 <tcp_receive+0xcfc>)
 801a2d6:	f7fd fa91 	bl	80177fc <tcp_seg_copy>
 801a2da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a2dc:	69fb      	ldr	r3, [r7, #28]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	f000 8109 	beq.w	801a4f6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2e6:	68db      	ldr	r3, [r3, #12]
 801a2e8:	685b      	ldr	r3, [r3, #4]
 801a2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a2ec:	8912      	ldrh	r2, [r2, #8]
 801a2ee:	441a      	add	r2, r3
 801a2f0:	4b12      	ldr	r3, [pc, #72]	; (801a33c <tcp_receive+0xd00>)
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	1ad3      	subs	r3, r2, r3
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	dd12      	ble.n	801a320 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a2fa:	4b10      	ldr	r3, [pc, #64]	; (801a33c <tcp_receive+0xd00>)
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	b29a      	uxth	r2, r3
 801a300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a302:	68db      	ldr	r3, [r3, #12]
 801a304:	685b      	ldr	r3, [r3, #4]
 801a306:	b29b      	uxth	r3, r3
 801a308:	1ad3      	subs	r3, r2, r3
 801a30a:	b29a      	uxth	r2, r3
 801a30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a30e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a312:	685a      	ldr	r2, [r3, #4]
 801a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a316:	891b      	ldrh	r3, [r3, #8]
 801a318:	4619      	mov	r1, r3
 801a31a:	4610      	mov	r0, r2
 801a31c:	f7fb fc66 	bl	8015bec <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a322:	69fa      	ldr	r2, [r7, #28]
 801a324:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a328:	69f8      	ldr	r0, [r7, #28]
 801a32a:	f7ff f883 	bl	8019434 <tcp_oos_insert_segment>
                  }
                  break;
 801a32e:	e0e2      	b.n	801a4f6 <tcp_receive+0xeba>
 801a330:	2000c82c 	.word	0x2000c82c
 801a334:	2000c829 	.word	0x2000c829
 801a338:	2000c7fc 	.word	0x2000c7fc
 801a33c:	2000c81c 	.word	0x2000c81c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a342:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	f040 80c6 	bne.w	801a4da <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a34e:	4b80      	ldr	r3, [pc, #512]	; (801a550 <tcp_receive+0xf14>)
 801a350:	681a      	ldr	r2, [r3, #0]
 801a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a354:	68db      	ldr	r3, [r3, #12]
 801a356:	685b      	ldr	r3, [r3, #4]
 801a358:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f340 80bd 	ble.w	801a4da <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	899b      	ldrh	r3, [r3, #12]
 801a366:	b29b      	uxth	r3, r3
 801a368:	4618      	mov	r0, r3
 801a36a:	f7fa f9e3 	bl	8014734 <lwip_htons>
 801a36e:	4603      	mov	r3, r0
 801a370:	b2db      	uxtb	r3, r3
 801a372:	f003 0301 	and.w	r3, r3, #1
 801a376:	2b00      	cmp	r3, #0
 801a378:	f040 80bf 	bne.w	801a4fa <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a37c:	4875      	ldr	r0, [pc, #468]	; (801a554 <tcp_receive+0xf18>)
 801a37e:	f7fd fa3d 	bl	80177fc <tcp_seg_copy>
 801a382:	4602      	mov	r2, r0
 801a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a386:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	f000 80b6 	beq.w	801a4fe <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a394:	68db      	ldr	r3, [r3, #12]
 801a396:	685b      	ldr	r3, [r3, #4]
 801a398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a39a:	8912      	ldrh	r2, [r2, #8]
 801a39c:	441a      	add	r2, r3
 801a39e:	4b6c      	ldr	r3, [pc, #432]	; (801a550 <tcp_receive+0xf14>)
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	1ad3      	subs	r3, r2, r3
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	dd12      	ble.n	801a3ce <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a3a8:	4b69      	ldr	r3, [pc, #420]	; (801a550 <tcp_receive+0xf14>)
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	b29a      	uxth	r2, r3
 801a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3b0:	68db      	ldr	r3, [r3, #12]
 801a3b2:	685b      	ldr	r3, [r3, #4]
 801a3b4:	b29b      	uxth	r3, r3
 801a3b6:	1ad3      	subs	r3, r2, r3
 801a3b8:	b29a      	uxth	r2, r3
 801a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3c0:	685a      	ldr	r2, [r3, #4]
 801a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3c4:	891b      	ldrh	r3, [r3, #8]
 801a3c6:	4619      	mov	r1, r3
 801a3c8:	4610      	mov	r0, r2
 801a3ca:	f7fb fc0f 	bl	8015bec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a3ce:	4b62      	ldr	r3, [pc, #392]	; (801a558 <tcp_receive+0xf1c>)
 801a3d0:	881b      	ldrh	r3, [r3, #0]
 801a3d2:	461a      	mov	r2, r3
 801a3d4:	4b5e      	ldr	r3, [pc, #376]	; (801a550 <tcp_receive+0xf14>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	441a      	add	r2, r3
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3de:	6879      	ldr	r1, [r7, #4]
 801a3e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a3e2:	440b      	add	r3, r1
 801a3e4:	1ad3      	subs	r3, r2, r3
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	f340 8089 	ble.w	801a4fe <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	68db      	ldr	r3, [r3, #12]
 801a3f2:	899b      	ldrh	r3, [r3, #12]
 801a3f4:	b29b      	uxth	r3, r3
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	f7fa f99c 	bl	8014734 <lwip_htons>
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	b2db      	uxtb	r3, r3
 801a400:	f003 0301 	and.w	r3, r3, #1
 801a404:	2b00      	cmp	r3, #0
 801a406:	d022      	beq.n	801a44e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	68db      	ldr	r3, [r3, #12]
 801a40e:	899b      	ldrh	r3, [r3, #12]
 801a410:	b29b      	uxth	r3, r3
 801a412:	b21b      	sxth	r3, r3
 801a414:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a418:	b21c      	sxth	r4, r3
 801a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	68db      	ldr	r3, [r3, #12]
 801a420:	899b      	ldrh	r3, [r3, #12]
 801a422:	b29b      	uxth	r3, r3
 801a424:	4618      	mov	r0, r3
 801a426:	f7fa f985 	bl	8014734 <lwip_htons>
 801a42a:	4603      	mov	r3, r0
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	b29b      	uxth	r3, r3
 801a430:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a434:	b29b      	uxth	r3, r3
 801a436:	4618      	mov	r0, r3
 801a438:	f7fa f97c 	bl	8014734 <lwip_htons>
 801a43c:	4603      	mov	r3, r0
 801a43e:	b21b      	sxth	r3, r3
 801a440:	4323      	orrs	r3, r4
 801a442:	b21a      	sxth	r2, r3
 801a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	68db      	ldr	r3, [r3, #12]
 801a44a:	b292      	uxth	r2, r2
 801a44c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a452:	b29a      	uxth	r2, r3
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a458:	4413      	add	r3, r2
 801a45a:	b299      	uxth	r1, r3
 801a45c:	4b3c      	ldr	r3, [pc, #240]	; (801a550 <tcp_receive+0xf14>)
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	b29a      	uxth	r2, r3
 801a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	1a8a      	subs	r2, r1, r2
 801a468:	b292      	uxth	r2, r2
 801a46a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	685a      	ldr	r2, [r3, #4]
 801a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	891b      	ldrh	r3, [r3, #8]
 801a478:	4619      	mov	r1, r3
 801a47a:	4610      	mov	r0, r2
 801a47c:	f7fb fbb6 	bl	8015bec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	891c      	ldrh	r4, [r3, #8]
 801a486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	68db      	ldr	r3, [r3, #12]
 801a48c:	899b      	ldrh	r3, [r3, #12]
 801a48e:	b29b      	uxth	r3, r3
 801a490:	4618      	mov	r0, r3
 801a492:	f7fa f94f 	bl	8014734 <lwip_htons>
 801a496:	4603      	mov	r3, r0
 801a498:	b2db      	uxtb	r3, r3
 801a49a:	f003 0303 	and.w	r3, r3, #3
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d001      	beq.n	801a4a6 <tcp_receive+0xe6a>
 801a4a2:	2301      	movs	r3, #1
 801a4a4:	e000      	b.n	801a4a8 <tcp_receive+0xe6c>
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	4423      	add	r3, r4
 801a4aa:	b29a      	uxth	r2, r3
 801a4ac:	4b2a      	ldr	r3, [pc, #168]	; (801a558 <tcp_receive+0xf1c>)
 801a4ae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a4b0:	4b29      	ldr	r3, [pc, #164]	; (801a558 <tcp_receive+0xf1c>)
 801a4b2:	881b      	ldrh	r3, [r3, #0]
 801a4b4:	461a      	mov	r2, r3
 801a4b6:	4b26      	ldr	r3, [pc, #152]	; (801a550 <tcp_receive+0xf14>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	441a      	add	r2, r3
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4c0:	6879      	ldr	r1, [r7, #4]
 801a4c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a4c4:	440b      	add	r3, r1
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d019      	beq.n	801a4fe <tcp_receive+0xec2>
 801a4ca:	4b24      	ldr	r3, [pc, #144]	; (801a55c <tcp_receive+0xf20>)
 801a4cc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a4d0:	4923      	ldr	r1, [pc, #140]	; (801a560 <tcp_receive+0xf24>)
 801a4d2:	4824      	ldr	r0, [pc, #144]	; (801a564 <tcp_receive+0xf28>)
 801a4d4:	f004 ff82 	bl	801f3dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a4d8:	e011      	b.n	801a4fe <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	63bb      	str	r3, [r7, #56]	; 0x38
 801a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	f47f aea4 	bne.w	801a230 <tcp_receive+0xbf4>
 801a4e8:	e00a      	b.n	801a500 <tcp_receive+0xec4>
                break;
 801a4ea:	bf00      	nop
 801a4ec:	e008      	b.n	801a500 <tcp_receive+0xec4>
                break;
 801a4ee:	bf00      	nop
 801a4f0:	e006      	b.n	801a500 <tcp_receive+0xec4>
                  break;
 801a4f2:	bf00      	nop
 801a4f4:	e004      	b.n	801a500 <tcp_receive+0xec4>
                  break;
 801a4f6:	bf00      	nop
 801a4f8:	e002      	b.n	801a500 <tcp_receive+0xec4>
                  break;
 801a4fa:	bf00      	nop
 801a4fc:	e000      	b.n	801a500 <tcp_receive+0xec4>
                break;
 801a4fe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a500:	6878      	ldr	r0, [r7, #4]
 801a502:	f001 fe8b 	bl	801c21c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a506:	e003      	b.n	801a510 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a508:	6878      	ldr	r0, [r7, #4]
 801a50a:	f001 fe87 	bl	801c21c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a50e:	e01a      	b.n	801a546 <tcp_receive+0xf0a>
 801a510:	e019      	b.n	801a546 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a512:	4b0f      	ldr	r3, [pc, #60]	; (801a550 <tcp_receive+0xf14>)
 801a514:	681a      	ldr	r2, [r3, #0]
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a51a:	1ad3      	subs	r3, r2, r3
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	db0a      	blt.n	801a536 <tcp_receive+0xefa>
 801a520:	4b0b      	ldr	r3, [pc, #44]	; (801a550 <tcp_receive+0xf14>)
 801a522:	681a      	ldr	r2, [r3, #0]
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a528:	6879      	ldr	r1, [r7, #4]
 801a52a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a52c:	440b      	add	r3, r1
 801a52e:	1ad3      	subs	r3, r2, r3
 801a530:	3301      	adds	r3, #1
 801a532:	2b00      	cmp	r3, #0
 801a534:	dd07      	ble.n	801a546 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	8b5b      	ldrh	r3, [r3, #26]
 801a53a:	f043 0302 	orr.w	r3, r3, #2
 801a53e:	b29a      	uxth	r2, r3
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a544:	e7ff      	b.n	801a546 <tcp_receive+0xf0a>
 801a546:	bf00      	nop
 801a548:	3750      	adds	r7, #80	; 0x50
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bdb0      	pop	{r4, r5, r7, pc}
 801a54e:	bf00      	nop
 801a550:	2000c81c 	.word	0x2000c81c
 801a554:	2000c7fc 	.word	0x2000c7fc
 801a558:	2000c826 	.word	0x2000c826
 801a55c:	08022b7c 	.word	0x08022b7c
 801a560:	08022f24 	.word	0x08022f24
 801a564:	08022bc8 	.word	0x08022bc8

0801a568 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a568:	b480      	push	{r7}
 801a56a:	b083      	sub	sp, #12
 801a56c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a56e:	4b15      	ldr	r3, [pc, #84]	; (801a5c4 <tcp_get_next_optbyte+0x5c>)
 801a570:	881b      	ldrh	r3, [r3, #0]
 801a572:	1c5a      	adds	r2, r3, #1
 801a574:	b291      	uxth	r1, r2
 801a576:	4a13      	ldr	r2, [pc, #76]	; (801a5c4 <tcp_get_next_optbyte+0x5c>)
 801a578:	8011      	strh	r1, [r2, #0]
 801a57a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a57c:	4b12      	ldr	r3, [pc, #72]	; (801a5c8 <tcp_get_next_optbyte+0x60>)
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d004      	beq.n	801a58e <tcp_get_next_optbyte+0x26>
 801a584:	4b11      	ldr	r3, [pc, #68]	; (801a5cc <tcp_get_next_optbyte+0x64>)
 801a586:	881b      	ldrh	r3, [r3, #0]
 801a588:	88fa      	ldrh	r2, [r7, #6]
 801a58a:	429a      	cmp	r2, r3
 801a58c:	d208      	bcs.n	801a5a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a58e:	4b10      	ldr	r3, [pc, #64]	; (801a5d0 <tcp_get_next_optbyte+0x68>)
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	3314      	adds	r3, #20
 801a594:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a596:	88fb      	ldrh	r3, [r7, #6]
 801a598:	683a      	ldr	r2, [r7, #0]
 801a59a:	4413      	add	r3, r2
 801a59c:	781b      	ldrb	r3, [r3, #0]
 801a59e:	e00b      	b.n	801a5b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a5a0:	88fb      	ldrh	r3, [r7, #6]
 801a5a2:	b2da      	uxtb	r2, r3
 801a5a4:	4b09      	ldr	r3, [pc, #36]	; (801a5cc <tcp_get_next_optbyte+0x64>)
 801a5a6:	881b      	ldrh	r3, [r3, #0]
 801a5a8:	b2db      	uxtb	r3, r3
 801a5aa:	1ad3      	subs	r3, r2, r3
 801a5ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a5ae:	4b06      	ldr	r3, [pc, #24]	; (801a5c8 <tcp_get_next_optbyte+0x60>)
 801a5b0:	681a      	ldr	r2, [r3, #0]
 801a5b2:	797b      	ldrb	r3, [r7, #5]
 801a5b4:	4413      	add	r3, r2
 801a5b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	370c      	adds	r7, #12
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c2:	4770      	bx	lr
 801a5c4:	2000c818 	.word	0x2000c818
 801a5c8:	2000c814 	.word	0x2000c814
 801a5cc:	2000c812 	.word	0x2000c812
 801a5d0:	2000c80c 	.word	0x2000c80c

0801a5d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b084      	sub	sp, #16
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d106      	bne.n	801a5f0 <tcp_parseopt+0x1c>
 801a5e2:	4b32      	ldr	r3, [pc, #200]	; (801a6ac <tcp_parseopt+0xd8>)
 801a5e4:	f240 727d 	movw	r2, #1917	; 0x77d
 801a5e8:	4931      	ldr	r1, [pc, #196]	; (801a6b0 <tcp_parseopt+0xdc>)
 801a5ea:	4832      	ldr	r0, [pc, #200]	; (801a6b4 <tcp_parseopt+0xe0>)
 801a5ec:	f004 fef6 	bl	801f3dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a5f0:	4b31      	ldr	r3, [pc, #196]	; (801a6b8 <tcp_parseopt+0xe4>)
 801a5f2:	881b      	ldrh	r3, [r3, #0]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d055      	beq.n	801a6a4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a5f8:	4b30      	ldr	r3, [pc, #192]	; (801a6bc <tcp_parseopt+0xe8>)
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	801a      	strh	r2, [r3, #0]
 801a5fe:	e045      	b.n	801a68c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a600:	f7ff ffb2 	bl	801a568 <tcp_get_next_optbyte>
 801a604:	4603      	mov	r3, r0
 801a606:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a608:	7bfb      	ldrb	r3, [r7, #15]
 801a60a:	2b02      	cmp	r3, #2
 801a60c:	d006      	beq.n	801a61c <tcp_parseopt+0x48>
 801a60e:	2b02      	cmp	r3, #2
 801a610:	dc2b      	bgt.n	801a66a <tcp_parseopt+0x96>
 801a612:	2b00      	cmp	r3, #0
 801a614:	d041      	beq.n	801a69a <tcp_parseopt+0xc6>
 801a616:	2b01      	cmp	r3, #1
 801a618:	d127      	bne.n	801a66a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a61a:	e037      	b.n	801a68c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a61c:	f7ff ffa4 	bl	801a568 <tcp_get_next_optbyte>
 801a620:	4603      	mov	r3, r0
 801a622:	2b04      	cmp	r3, #4
 801a624:	d13b      	bne.n	801a69e <tcp_parseopt+0xca>
 801a626:	4b25      	ldr	r3, [pc, #148]	; (801a6bc <tcp_parseopt+0xe8>)
 801a628:	881b      	ldrh	r3, [r3, #0]
 801a62a:	3301      	adds	r3, #1
 801a62c:	4a22      	ldr	r2, [pc, #136]	; (801a6b8 <tcp_parseopt+0xe4>)
 801a62e:	8812      	ldrh	r2, [r2, #0]
 801a630:	4293      	cmp	r3, r2
 801a632:	da34      	bge.n	801a69e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a634:	f7ff ff98 	bl	801a568 <tcp_get_next_optbyte>
 801a638:	4603      	mov	r3, r0
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	021b      	lsls	r3, r3, #8
 801a63e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a640:	f7ff ff92 	bl	801a568 <tcp_get_next_optbyte>
 801a644:	4603      	mov	r3, r0
 801a646:	b29a      	uxth	r2, r3
 801a648:	89bb      	ldrh	r3, [r7, #12]
 801a64a:	4313      	orrs	r3, r2
 801a64c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a64e:	89bb      	ldrh	r3, [r7, #12]
 801a650:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a654:	d804      	bhi.n	801a660 <tcp_parseopt+0x8c>
 801a656:	89bb      	ldrh	r3, [r7, #12]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d001      	beq.n	801a660 <tcp_parseopt+0x8c>
 801a65c:	89ba      	ldrh	r2, [r7, #12]
 801a65e:	e001      	b.n	801a664 <tcp_parseopt+0x90>
 801a660:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a668:	e010      	b.n	801a68c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a66a:	f7ff ff7d 	bl	801a568 <tcp_get_next_optbyte>
 801a66e:	4603      	mov	r3, r0
 801a670:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a672:	7afb      	ldrb	r3, [r7, #11]
 801a674:	2b01      	cmp	r3, #1
 801a676:	d914      	bls.n	801a6a2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a678:	7afb      	ldrb	r3, [r7, #11]
 801a67a:	b29a      	uxth	r2, r3
 801a67c:	4b0f      	ldr	r3, [pc, #60]	; (801a6bc <tcp_parseopt+0xe8>)
 801a67e:	881b      	ldrh	r3, [r3, #0]
 801a680:	4413      	add	r3, r2
 801a682:	b29b      	uxth	r3, r3
 801a684:	3b02      	subs	r3, #2
 801a686:	b29a      	uxth	r2, r3
 801a688:	4b0c      	ldr	r3, [pc, #48]	; (801a6bc <tcp_parseopt+0xe8>)
 801a68a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a68c:	4b0b      	ldr	r3, [pc, #44]	; (801a6bc <tcp_parseopt+0xe8>)
 801a68e:	881a      	ldrh	r2, [r3, #0]
 801a690:	4b09      	ldr	r3, [pc, #36]	; (801a6b8 <tcp_parseopt+0xe4>)
 801a692:	881b      	ldrh	r3, [r3, #0]
 801a694:	429a      	cmp	r2, r3
 801a696:	d3b3      	bcc.n	801a600 <tcp_parseopt+0x2c>
 801a698:	e004      	b.n	801a6a4 <tcp_parseopt+0xd0>
          return;
 801a69a:	bf00      	nop
 801a69c:	e002      	b.n	801a6a4 <tcp_parseopt+0xd0>
            return;
 801a69e:	bf00      	nop
 801a6a0:	e000      	b.n	801a6a4 <tcp_parseopt+0xd0>
            return;
 801a6a2:	bf00      	nop
      }
    }
  }
}
 801a6a4:	3710      	adds	r7, #16
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	bd80      	pop	{r7, pc}
 801a6aa:	bf00      	nop
 801a6ac:	08022b7c 	.word	0x08022b7c
 801a6b0:	08022fe0 	.word	0x08022fe0
 801a6b4:	08022bc8 	.word	0x08022bc8
 801a6b8:	2000c810 	.word	0x2000c810
 801a6bc:	2000c818 	.word	0x2000c818

0801a6c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a6c0:	b480      	push	{r7}
 801a6c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a6c4:	4b05      	ldr	r3, [pc, #20]	; (801a6dc <tcp_trigger_input_pcb_close+0x1c>)
 801a6c6:	781b      	ldrb	r3, [r3, #0]
 801a6c8:	f043 0310 	orr.w	r3, r3, #16
 801a6cc:	b2da      	uxtb	r2, r3
 801a6ce:	4b03      	ldr	r3, [pc, #12]	; (801a6dc <tcp_trigger_input_pcb_close+0x1c>)
 801a6d0:	701a      	strb	r2, [r3, #0]
}
 801a6d2:	bf00      	nop
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6da:	4770      	bx	lr
 801a6dc:	2000c829 	.word	0x2000c829

0801a6e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b084      	sub	sp, #16
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	60f8      	str	r0, [r7, #12]
 801a6e8:	60b9      	str	r1, [r7, #8]
 801a6ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d00a      	beq.n	801a708 <tcp_route+0x28>
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	7a1b      	ldrb	r3, [r3, #8]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d006      	beq.n	801a708 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	7a1b      	ldrb	r3, [r3, #8]
 801a6fe:	4618      	mov	r0, r3
 801a700:	f7fb f86c 	bl	80157dc <netif_get_by_index>
 801a704:	4603      	mov	r3, r0
 801a706:	e003      	b.n	801a710 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a708:	6878      	ldr	r0, [r7, #4]
 801a70a:	f003 fb05 	bl	801dd18 <ip4_route>
 801a70e:	4603      	mov	r3, r0
  }
}
 801a710:	4618      	mov	r0, r3
 801a712:	3710      	adds	r7, #16
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a718:	b590      	push	{r4, r7, lr}
 801a71a:	b087      	sub	sp, #28
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	60f8      	str	r0, [r7, #12]
 801a720:	60b9      	str	r1, [r7, #8]
 801a722:	603b      	str	r3, [r7, #0]
 801a724:	4613      	mov	r3, r2
 801a726:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d105      	bne.n	801a73a <tcp_create_segment+0x22>
 801a72e:	4b44      	ldr	r3, [pc, #272]	; (801a840 <tcp_create_segment+0x128>)
 801a730:	22a3      	movs	r2, #163	; 0xa3
 801a732:	4944      	ldr	r1, [pc, #272]	; (801a844 <tcp_create_segment+0x12c>)
 801a734:	4844      	ldr	r0, [pc, #272]	; (801a848 <tcp_create_segment+0x130>)
 801a736:	f004 fe51 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d105      	bne.n	801a74c <tcp_create_segment+0x34>
 801a740:	4b3f      	ldr	r3, [pc, #252]	; (801a840 <tcp_create_segment+0x128>)
 801a742:	22a4      	movs	r2, #164	; 0xa4
 801a744:	4941      	ldr	r1, [pc, #260]	; (801a84c <tcp_create_segment+0x134>)
 801a746:	4840      	ldr	r0, [pc, #256]	; (801a848 <tcp_create_segment+0x130>)
 801a748:	f004 fe48 	bl	801f3dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a74c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a750:	009b      	lsls	r3, r3, #2
 801a752:	b2db      	uxtb	r3, r3
 801a754:	f003 0304 	and.w	r3, r3, #4
 801a758:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a75a:	2003      	movs	r0, #3
 801a75c:	f7fa fcd6 	bl	801510c <memp_malloc>
 801a760:	6138      	str	r0, [r7, #16]
 801a762:	693b      	ldr	r3, [r7, #16]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d104      	bne.n	801a772 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a768:	68b8      	ldr	r0, [r7, #8]
 801a76a:	f7fb fbd7 	bl	8015f1c <pbuf_free>
    return NULL;
 801a76e:	2300      	movs	r3, #0
 801a770:	e061      	b.n	801a836 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a772:	693b      	ldr	r3, [r7, #16]
 801a774:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a778:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	2200      	movs	r2, #0
 801a77e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a780:	693b      	ldr	r3, [r7, #16]
 801a782:	68ba      	ldr	r2, [r7, #8]
 801a784:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	891a      	ldrh	r2, [r3, #8]
 801a78a:	7dfb      	ldrb	r3, [r7, #23]
 801a78c:	b29b      	uxth	r3, r3
 801a78e:	429a      	cmp	r2, r3
 801a790:	d205      	bcs.n	801a79e <tcp_create_segment+0x86>
 801a792:	4b2b      	ldr	r3, [pc, #172]	; (801a840 <tcp_create_segment+0x128>)
 801a794:	22b0      	movs	r2, #176	; 0xb0
 801a796:	492e      	ldr	r1, [pc, #184]	; (801a850 <tcp_create_segment+0x138>)
 801a798:	482b      	ldr	r0, [pc, #172]	; (801a848 <tcp_create_segment+0x130>)
 801a79a:	f004 fe1f 	bl	801f3dc <iprintf>
  seg->len = p->tot_len - optlen;
 801a79e:	68bb      	ldr	r3, [r7, #8]
 801a7a0:	891a      	ldrh	r2, [r3, #8]
 801a7a2:	7dfb      	ldrb	r3, [r7, #23]
 801a7a4:	b29b      	uxth	r3, r3
 801a7a6:	1ad3      	subs	r3, r2, r3
 801a7a8:	b29a      	uxth	r2, r3
 801a7aa:	693b      	ldr	r3, [r7, #16]
 801a7ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a7ae:	2114      	movs	r1, #20
 801a7b0:	68b8      	ldr	r0, [r7, #8]
 801a7b2:	f7fb fb0b 	bl	8015dcc <pbuf_add_header>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d004      	beq.n	801a7c6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a7bc:	6938      	ldr	r0, [r7, #16]
 801a7be:	f7fc ffe6 	bl	801778e <tcp_seg_free>
    return NULL;
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	e037      	b.n	801a836 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a7c6:	693b      	ldr	r3, [r7, #16]
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	685a      	ldr	r2, [r3, #4]
 801a7cc:	693b      	ldr	r3, [r7, #16]
 801a7ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	8ada      	ldrh	r2, [r3, #22]
 801a7d4:	693b      	ldr	r3, [r7, #16]
 801a7d6:	68dc      	ldr	r4, [r3, #12]
 801a7d8:	4610      	mov	r0, r2
 801a7da:	f7f9 ffab 	bl	8014734 <lwip_htons>
 801a7de:	4603      	mov	r3, r0
 801a7e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	8b1a      	ldrh	r2, [r3, #24]
 801a7e6:	693b      	ldr	r3, [r7, #16]
 801a7e8:	68dc      	ldr	r4, [r3, #12]
 801a7ea:	4610      	mov	r0, r2
 801a7ec:	f7f9 ffa2 	bl	8014734 <lwip_htons>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a7f4:	693b      	ldr	r3, [r7, #16]
 801a7f6:	68dc      	ldr	r4, [r3, #12]
 801a7f8:	6838      	ldr	r0, [r7, #0]
 801a7fa:	f7f9 ffb0 	bl	801475e <lwip_htonl>
 801a7fe:	4603      	mov	r3, r0
 801a800:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a802:	7dfb      	ldrb	r3, [r7, #23]
 801a804:	089b      	lsrs	r3, r3, #2
 801a806:	b2db      	uxtb	r3, r3
 801a808:	b29b      	uxth	r3, r3
 801a80a:	3305      	adds	r3, #5
 801a80c:	b29b      	uxth	r3, r3
 801a80e:	031b      	lsls	r3, r3, #12
 801a810:	b29a      	uxth	r2, r3
 801a812:	79fb      	ldrb	r3, [r7, #7]
 801a814:	b29b      	uxth	r3, r3
 801a816:	4313      	orrs	r3, r2
 801a818:	b29a      	uxth	r2, r3
 801a81a:	693b      	ldr	r3, [r7, #16]
 801a81c:	68dc      	ldr	r4, [r3, #12]
 801a81e:	4610      	mov	r0, r2
 801a820:	f7f9 ff88 	bl	8014734 <lwip_htons>
 801a824:	4603      	mov	r3, r0
 801a826:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a828:	693b      	ldr	r3, [r7, #16]
 801a82a:	68db      	ldr	r3, [r3, #12]
 801a82c:	2200      	movs	r2, #0
 801a82e:	749a      	strb	r2, [r3, #18]
 801a830:	2200      	movs	r2, #0
 801a832:	74da      	strb	r2, [r3, #19]
  return seg;
 801a834:	693b      	ldr	r3, [r7, #16]
}
 801a836:	4618      	mov	r0, r3
 801a838:	371c      	adds	r7, #28
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bd90      	pop	{r4, r7, pc}
 801a83e:	bf00      	nop
 801a840:	08022ffc 	.word	0x08022ffc
 801a844:	08023030 	.word	0x08023030
 801a848:	08023050 	.word	0x08023050
 801a84c:	08023078 	.word	0x08023078
 801a850:	0802309c 	.word	0x0802309c

0801a854 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b086      	sub	sp, #24
 801a858:	af00      	add	r7, sp, #0
 801a85a:	607b      	str	r3, [r7, #4]
 801a85c:	4603      	mov	r3, r0
 801a85e:	73fb      	strb	r3, [r7, #15]
 801a860:	460b      	mov	r3, r1
 801a862:	81bb      	strh	r3, [r7, #12]
 801a864:	4613      	mov	r3, r2
 801a866:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a868:	89bb      	ldrh	r3, [r7, #12]
 801a86a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d105      	bne.n	801a87e <tcp_pbuf_prealloc+0x2a>
 801a872:	4b30      	ldr	r3, [pc, #192]	; (801a934 <tcp_pbuf_prealloc+0xe0>)
 801a874:	22e8      	movs	r2, #232	; 0xe8
 801a876:	4930      	ldr	r1, [pc, #192]	; (801a938 <tcp_pbuf_prealloc+0xe4>)
 801a878:	4830      	ldr	r0, [pc, #192]	; (801a93c <tcp_pbuf_prealloc+0xe8>)
 801a87a:	f004 fdaf 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a87e:	6a3b      	ldr	r3, [r7, #32]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d105      	bne.n	801a890 <tcp_pbuf_prealloc+0x3c>
 801a884:	4b2b      	ldr	r3, [pc, #172]	; (801a934 <tcp_pbuf_prealloc+0xe0>)
 801a886:	22e9      	movs	r2, #233	; 0xe9
 801a888:	492d      	ldr	r1, [pc, #180]	; (801a940 <tcp_pbuf_prealloc+0xec>)
 801a88a:	482c      	ldr	r0, [pc, #176]	; (801a93c <tcp_pbuf_prealloc+0xe8>)
 801a88c:	f004 fda6 	bl	801f3dc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a890:	89ba      	ldrh	r2, [r7, #12]
 801a892:	897b      	ldrh	r3, [r7, #10]
 801a894:	429a      	cmp	r2, r3
 801a896:	d221      	bcs.n	801a8dc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a89c:	f003 0302 	and.w	r3, r3, #2
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d111      	bne.n	801a8c8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a8a4:	6a3b      	ldr	r3, [r7, #32]
 801a8a6:	8b5b      	ldrh	r3, [r3, #26]
 801a8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d115      	bne.n	801a8dc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a8b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d007      	beq.n	801a8c8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a8b8:	6a3b      	ldr	r3, [r7, #32]
 801a8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d103      	bne.n	801a8c8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a8c0:	6a3b      	ldr	r3, [r7, #32]
 801a8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d009      	beq.n	801a8dc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a8c8:	89bb      	ldrh	r3, [r7, #12]
 801a8ca:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a8ce:	f023 0203 	bic.w	r2, r3, #3
 801a8d2:	897b      	ldrh	r3, [r7, #10]
 801a8d4:	4293      	cmp	r3, r2
 801a8d6:	bf28      	it	cs
 801a8d8:	4613      	movcs	r3, r2
 801a8da:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a8dc:	8af9      	ldrh	r1, [r7, #22]
 801a8de:	7bfb      	ldrb	r3, [r7, #15]
 801a8e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f7fb f823 	bl	8015930 <pbuf_alloc>
 801a8ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a8ec:	693b      	ldr	r3, [r7, #16]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d101      	bne.n	801a8f6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	e019      	b.n	801a92a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a8f6:	693b      	ldr	r3, [r7, #16]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d006      	beq.n	801a90c <tcp_pbuf_prealloc+0xb8>
 801a8fe:	4b0d      	ldr	r3, [pc, #52]	; (801a934 <tcp_pbuf_prealloc+0xe0>)
 801a900:	f240 120b 	movw	r2, #267	; 0x10b
 801a904:	490f      	ldr	r1, [pc, #60]	; (801a944 <tcp_pbuf_prealloc+0xf0>)
 801a906:	480d      	ldr	r0, [pc, #52]	; (801a93c <tcp_pbuf_prealloc+0xe8>)
 801a908:	f004 fd68 	bl	801f3dc <iprintf>
  *oversize = p->len - length;
 801a90c:	693b      	ldr	r3, [r7, #16]
 801a90e:	895a      	ldrh	r2, [r3, #10]
 801a910:	89bb      	ldrh	r3, [r7, #12]
 801a912:	1ad3      	subs	r3, r2, r3
 801a914:	b29a      	uxth	r2, r3
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a91a:	693b      	ldr	r3, [r7, #16]
 801a91c:	89ba      	ldrh	r2, [r7, #12]
 801a91e:	811a      	strh	r2, [r3, #8]
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	891a      	ldrh	r2, [r3, #8]
 801a924:	693b      	ldr	r3, [r7, #16]
 801a926:	815a      	strh	r2, [r3, #10]
  return p;
 801a928:	693b      	ldr	r3, [r7, #16]
}
 801a92a:	4618      	mov	r0, r3
 801a92c:	3718      	adds	r7, #24
 801a92e:	46bd      	mov	sp, r7
 801a930:	bd80      	pop	{r7, pc}
 801a932:	bf00      	nop
 801a934:	08022ffc 	.word	0x08022ffc
 801a938:	080230b4 	.word	0x080230b4
 801a93c:	08023050 	.word	0x08023050
 801a940:	080230d8 	.word	0x080230d8
 801a944:	080230f8 	.word	0x080230f8

0801a948 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
 801a950:	460b      	mov	r3, r1
 801a952:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d106      	bne.n	801a968 <tcp_write_checks+0x20>
 801a95a:	4b33      	ldr	r3, [pc, #204]	; (801aa28 <tcp_write_checks+0xe0>)
 801a95c:	f240 1233 	movw	r2, #307	; 0x133
 801a960:	4932      	ldr	r1, [pc, #200]	; (801aa2c <tcp_write_checks+0xe4>)
 801a962:	4833      	ldr	r0, [pc, #204]	; (801aa30 <tcp_write_checks+0xe8>)
 801a964:	f004 fd3a 	bl	801f3dc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	7d1b      	ldrb	r3, [r3, #20]
 801a96c:	2b04      	cmp	r3, #4
 801a96e:	d00e      	beq.n	801a98e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a974:	2b07      	cmp	r3, #7
 801a976:	d00a      	beq.n	801a98e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a97c:	2b02      	cmp	r3, #2
 801a97e:	d006      	beq.n	801a98e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a984:	2b03      	cmp	r3, #3
 801a986:	d002      	beq.n	801a98e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a988:	f06f 030a 	mvn.w	r3, #10
 801a98c:	e048      	b.n	801aa20 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a98e:	887b      	ldrh	r3, [r7, #2]
 801a990:	2b00      	cmp	r3, #0
 801a992:	d101      	bne.n	801a998 <tcp_write_checks+0x50>
    return ERR_OK;
 801a994:	2300      	movs	r3, #0
 801a996:	e043      	b.n	801aa20 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a99e:	887a      	ldrh	r2, [r7, #2]
 801a9a0:	429a      	cmp	r2, r3
 801a9a2:	d909      	bls.n	801a9b8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	8b5b      	ldrh	r3, [r3, #26]
 801a9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9ac:	b29a      	uxth	r2, r3
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b6:	e033      	b.n	801aa20 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a9be:	2b08      	cmp	r3, #8
 801a9c0:	d909      	bls.n	801a9d6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	8b5b      	ldrh	r3, [r3, #26]
 801a9c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9ca:	b29a      	uxth	r2, r3
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a9d4:	e024      	b.n	801aa20 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d00f      	beq.n	801aa00 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d11a      	bne.n	801aa1e <tcp_write_checks+0xd6>
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d116      	bne.n	801aa1e <tcp_write_checks+0xd6>
 801a9f0:	4b0d      	ldr	r3, [pc, #52]	; (801aa28 <tcp_write_checks+0xe0>)
 801a9f2:	f240 1255 	movw	r2, #341	; 0x155
 801a9f6:	490f      	ldr	r1, [pc, #60]	; (801aa34 <tcp_write_checks+0xec>)
 801a9f8:	480d      	ldr	r0, [pc, #52]	; (801aa30 <tcp_write_checks+0xe8>)
 801a9fa:	f004 fcef 	bl	801f3dc <iprintf>
 801a9fe:	e00e      	b.n	801aa1e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d103      	bne.n	801aa10 <tcp_write_checks+0xc8>
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d006      	beq.n	801aa1e <tcp_write_checks+0xd6>
 801aa10:	4b05      	ldr	r3, [pc, #20]	; (801aa28 <tcp_write_checks+0xe0>)
 801aa12:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801aa16:	4908      	ldr	r1, [pc, #32]	; (801aa38 <tcp_write_checks+0xf0>)
 801aa18:	4805      	ldr	r0, [pc, #20]	; (801aa30 <tcp_write_checks+0xe8>)
 801aa1a:	f004 fcdf 	bl	801f3dc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801aa1e:	2300      	movs	r3, #0
}
 801aa20:	4618      	mov	r0, r3
 801aa22:	3708      	adds	r7, #8
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bd80      	pop	{r7, pc}
 801aa28:	08022ffc 	.word	0x08022ffc
 801aa2c:	0802310c 	.word	0x0802310c
 801aa30:	08023050 	.word	0x08023050
 801aa34:	0802312c 	.word	0x0802312c
 801aa38:	08023168 	.word	0x08023168

0801aa3c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801aa3c:	b590      	push	{r4, r7, lr}
 801aa3e:	b09b      	sub	sp, #108	; 0x6c
 801aa40:	af04      	add	r7, sp, #16
 801aa42:	60f8      	str	r0, [r7, #12]
 801aa44:	60b9      	str	r1, [r7, #8]
 801aa46:	4611      	mov	r1, r2
 801aa48:	461a      	mov	r2, r3
 801aa4a:	460b      	mov	r3, r1
 801aa4c:	80fb      	strh	r3, [r7, #6]
 801aa4e:	4613      	mov	r3, r2
 801aa50:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801aa52:	2300      	movs	r3, #0
 801aa54:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801aa56:	2300      	movs	r3, #0
 801aa58:	653b      	str	r3, [r7, #80]	; 0x50
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801aa5e:	2300      	movs	r3, #0
 801aa60:	64bb      	str	r3, [r7, #72]	; 0x48
 801aa62:	2300      	movs	r3, #0
 801aa64:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801aa66:	2300      	movs	r3, #0
 801aa68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801aa72:	2300      	movs	r3, #0
 801aa74:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801aa76:	2300      	movs	r3, #0
 801aa78:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d109      	bne.n	801aa98 <tcp_write+0x5c>
 801aa84:	4ba4      	ldr	r3, [pc, #656]	; (801ad18 <tcp_write+0x2dc>)
 801aa86:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801aa8a:	49a4      	ldr	r1, [pc, #656]	; (801ad1c <tcp_write+0x2e0>)
 801aa8c:	48a4      	ldr	r0, [pc, #656]	; (801ad20 <tcp_write+0x2e4>)
 801aa8e:	f004 fca5 	bl	801f3dc <iprintf>
 801aa92:	f06f 030f 	mvn.w	r3, #15
 801aa96:	e32a      	b.n	801b0ee <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801aa9e:	085b      	lsrs	r3, r3, #1
 801aaa0:	b29a      	uxth	r2, r3
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aaa6:	4293      	cmp	r3, r2
 801aaa8:	bf28      	it	cs
 801aaaa:	4613      	movcs	r3, r2
 801aaac:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801aaae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d102      	bne.n	801aaba <tcp_write+0x7e>
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aab8:	e000      	b.n	801aabc <tcp_write+0x80>
 801aaba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aabc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801aabe:	68bb      	ldr	r3, [r7, #8]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d109      	bne.n	801aad8 <tcp_write+0x9c>
 801aac4:	4b94      	ldr	r3, [pc, #592]	; (801ad18 <tcp_write+0x2dc>)
 801aac6:	f240 12ad 	movw	r2, #429	; 0x1ad
 801aaca:	4996      	ldr	r1, [pc, #600]	; (801ad24 <tcp_write+0x2e8>)
 801aacc:	4894      	ldr	r0, [pc, #592]	; (801ad20 <tcp_write+0x2e4>)
 801aace:	f004 fc85 	bl	801f3dc <iprintf>
 801aad2:	f06f 030f 	mvn.w	r3, #15
 801aad6:	e30a      	b.n	801b0ee <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801aad8:	88fb      	ldrh	r3, [r7, #6]
 801aada:	4619      	mov	r1, r3
 801aadc:	68f8      	ldr	r0, [r7, #12]
 801aade:	f7ff ff33 	bl	801a948 <tcp_write_checks>
 801aae2:	4603      	mov	r3, r0
 801aae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801aae8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d002      	beq.n	801aaf6 <tcp_write+0xba>
    return err;
 801aaf0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801aaf4:	e2fb      	b.n	801b0ee <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aafc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ab00:	2300      	movs	r3, #0
 801ab02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	f000 80f6 	beq.w	801acfc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab14:	653b      	str	r3, [r7, #80]	; 0x50
 801ab16:	e002      	b.n	801ab1e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801ab18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ab1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d1f8      	bne.n	801ab18 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ab26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab28:	7a9b      	ldrb	r3, [r3, #10]
 801ab2a:	009b      	lsls	r3, r3, #2
 801ab2c:	b29b      	uxth	r3, r3
 801ab2e:	f003 0304 	and.w	r3, r3, #4
 801ab32:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ab34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ab36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab38:	891b      	ldrh	r3, [r3, #8]
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	8c3b      	ldrh	r3, [r7, #32]
 801ab3e:	440b      	add	r3, r1
 801ab40:	429a      	cmp	r2, r3
 801ab42:	da06      	bge.n	801ab52 <tcp_write+0x116>
 801ab44:	4b74      	ldr	r3, [pc, #464]	; (801ad18 <tcp_write+0x2dc>)
 801ab46:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ab4a:	4977      	ldr	r1, [pc, #476]	; (801ad28 <tcp_write+0x2ec>)
 801ab4c:	4874      	ldr	r0, [pc, #464]	; (801ad20 <tcp_write+0x2e4>)
 801ab4e:	f004 fc45 	bl	801f3dc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ab52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab54:	891a      	ldrh	r2, [r3, #8]
 801ab56:	8c3b      	ldrh	r3, [r7, #32]
 801ab58:	4413      	add	r3, r2
 801ab5a:	b29b      	uxth	r3, r3
 801ab5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ab5e:	1ad3      	subs	r3, r2, r3
 801ab60:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ab68:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ab6a:	8a7b      	ldrh	r3, [r7, #18]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d026      	beq.n	801abbe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ab70:	8a7b      	ldrh	r3, [r7, #18]
 801ab72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d206      	bcs.n	801ab86 <tcp_write+0x14a>
 801ab78:	4b67      	ldr	r3, [pc, #412]	; (801ad18 <tcp_write+0x2dc>)
 801ab7a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ab7e:	496b      	ldr	r1, [pc, #428]	; (801ad2c <tcp_write+0x2f0>)
 801ab80:	4867      	ldr	r0, [pc, #412]	; (801ad20 <tcp_write+0x2e4>)
 801ab82:	f004 fc2b 	bl	801f3dc <iprintf>
      seg = last_unsent;
 801ab86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab88:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ab8a:	8a7b      	ldrh	r3, [r7, #18]
 801ab8c:	88fa      	ldrh	r2, [r7, #6]
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	bf28      	it	cs
 801ab92:	4613      	movcs	r3, r2
 801ab94:	b29b      	uxth	r3, r3
 801ab96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab98:	4293      	cmp	r3, r2
 801ab9a:	bf28      	it	cs
 801ab9c:	4613      	movcs	r3, r2
 801ab9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801aba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aba6:	4413      	add	r3, r2
 801aba8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801abac:	8a7a      	ldrh	r2, [r7, #18]
 801abae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801abb0:	1ad3      	subs	r3, r2, r3
 801abb2:	b29b      	uxth	r3, r3
 801abb4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801abb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801abb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801abba:	1ad3      	subs	r3, r2, r3
 801abbc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801abbe:	8a7b      	ldrh	r3, [r7, #18]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d00b      	beq.n	801abdc <tcp_write+0x1a0>
 801abc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801abc8:	88fb      	ldrh	r3, [r7, #6]
 801abca:	429a      	cmp	r2, r3
 801abcc:	d006      	beq.n	801abdc <tcp_write+0x1a0>
 801abce:	4b52      	ldr	r3, [pc, #328]	; (801ad18 <tcp_write+0x2dc>)
 801abd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801abd4:	4956      	ldr	r1, [pc, #344]	; (801ad30 <tcp_write+0x2f4>)
 801abd6:	4852      	ldr	r0, [pc, #328]	; (801ad20 <tcp_write+0x2e4>)
 801abd8:	f004 fc00 	bl	801f3dc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801abdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801abe0:	88fb      	ldrh	r3, [r7, #6]
 801abe2:	429a      	cmp	r2, r3
 801abe4:	f080 8167 	bcs.w	801aeb6 <tcp_write+0x47a>
 801abe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801abea:	2b00      	cmp	r3, #0
 801abec:	f000 8163 	beq.w	801aeb6 <tcp_write+0x47a>
 801abf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801abf2:	891b      	ldrh	r3, [r3, #8]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	f000 815e 	beq.w	801aeb6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801abfa:	88fa      	ldrh	r2, [r7, #6]
 801abfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac00:	1ad2      	subs	r2, r2, r3
 801ac02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ac04:	4293      	cmp	r3, r2
 801ac06:	bfa8      	it	ge
 801ac08:	4613      	movge	r3, r2
 801ac0a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ac0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac0e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ac10:	797b      	ldrb	r3, [r7, #5]
 801ac12:	f003 0301 	and.w	r3, r3, #1
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d027      	beq.n	801ac6a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ac1a:	f107 0012 	add.w	r0, r7, #18
 801ac1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ac20:	8bf9      	ldrh	r1, [r7, #30]
 801ac22:	2301      	movs	r3, #1
 801ac24:	9302      	str	r3, [sp, #8]
 801ac26:	797b      	ldrb	r3, [r7, #5]
 801ac28:	9301      	str	r3, [sp, #4]
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	9300      	str	r3, [sp, #0]
 801ac2e:	4603      	mov	r3, r0
 801ac30:	2000      	movs	r0, #0
 801ac32:	f7ff fe0f 	bl	801a854 <tcp_pbuf_prealloc>
 801ac36:	6578      	str	r0, [r7, #84]	; 0x54
 801ac38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	f000 8225 	beq.w	801b08a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ac40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac42:	6858      	ldr	r0, [r3, #4]
 801ac44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac48:	68ba      	ldr	r2, [r7, #8]
 801ac4a:	4413      	add	r3, r2
 801ac4c:	8bfa      	ldrh	r2, [r7, #30]
 801ac4e:	4619      	mov	r1, r3
 801ac50:	f004 fb94 	bl	801f37c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ac54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ac56:	f7fb f9ef 	bl	8016038 <pbuf_clen>
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	461a      	mov	r2, r3
 801ac5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ac62:	4413      	add	r3, r2
 801ac64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801ac68:	e041      	b.n	801acee <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ac6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac6c:	685b      	ldr	r3, [r3, #4]
 801ac6e:	637b      	str	r3, [r7, #52]	; 0x34
 801ac70:	e002      	b.n	801ac78 <tcp_write+0x23c>
 801ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	637b      	str	r3, [r7, #52]	; 0x34
 801ac78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d1f8      	bne.n	801ac72 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ac80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac82:	7b1b      	ldrb	r3, [r3, #12]
 801ac84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d115      	bne.n	801acb8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac8e:	685b      	ldr	r3, [r3, #4]
 801ac90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac92:	8952      	ldrh	r2, [r2, #10]
 801ac94:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ac96:	68ba      	ldr	r2, [r7, #8]
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	d10d      	bne.n	801acb8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ac9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d006      	beq.n	801acb2 <tcp_write+0x276>
 801aca4:	4b1c      	ldr	r3, [pc, #112]	; (801ad18 <tcp_write+0x2dc>)
 801aca6:	f240 2231 	movw	r2, #561	; 0x231
 801acaa:	4922      	ldr	r1, [pc, #136]	; (801ad34 <tcp_write+0x2f8>)
 801acac:	481c      	ldr	r0, [pc, #112]	; (801ad20 <tcp_write+0x2e4>)
 801acae:	f004 fb95 	bl	801f3dc <iprintf>
          extendlen = seglen;
 801acb2:	8bfb      	ldrh	r3, [r7, #30]
 801acb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801acb6:	e01a      	b.n	801acee <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801acb8:	8bfb      	ldrh	r3, [r7, #30]
 801acba:	2201      	movs	r2, #1
 801acbc:	4619      	mov	r1, r3
 801acbe:	2000      	movs	r0, #0
 801acc0:	f7fa fe36 	bl	8015930 <pbuf_alloc>
 801acc4:	6578      	str	r0, [r7, #84]	; 0x54
 801acc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801acc8:	2b00      	cmp	r3, #0
 801acca:	f000 81e0 	beq.w	801b08e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801acce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801acd2:	68ba      	ldr	r2, [r7, #8]
 801acd4:	441a      	add	r2, r3
 801acd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801acd8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801acda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801acdc:	f7fb f9ac 	bl	8016038 <pbuf_clen>
 801ace0:	4603      	mov	r3, r0
 801ace2:	461a      	mov	r2, r3
 801ace4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ace8:	4413      	add	r3, r2
 801acea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801acee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801acf2:	8bfb      	ldrh	r3, [r7, #30]
 801acf4:	4413      	add	r3, r2
 801acf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801acfa:	e0dc      	b.n	801aeb6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	f000 80d7 	beq.w	801aeb6 <tcp_write+0x47a>
 801ad08:	4b03      	ldr	r3, [pc, #12]	; (801ad18 <tcp_write+0x2dc>)
 801ad0a:	f240 224a 	movw	r2, #586	; 0x24a
 801ad0e:	490a      	ldr	r1, [pc, #40]	; (801ad38 <tcp_write+0x2fc>)
 801ad10:	4803      	ldr	r0, [pc, #12]	; (801ad20 <tcp_write+0x2e4>)
 801ad12:	f004 fb63 	bl	801f3dc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ad16:	e0ce      	b.n	801aeb6 <tcp_write+0x47a>
 801ad18:	08022ffc 	.word	0x08022ffc
 801ad1c:	0802319c 	.word	0x0802319c
 801ad20:	08023050 	.word	0x08023050
 801ad24:	080231b4 	.word	0x080231b4
 801ad28:	080231e8 	.word	0x080231e8
 801ad2c:	08023200 	.word	0x08023200
 801ad30:	08023220 	.word	0x08023220
 801ad34:	08023240 	.word	0x08023240
 801ad38:	0802326c 	.word	0x0802326c
    struct pbuf *p;
    u16_t left = len - pos;
 801ad3c:	88fa      	ldrh	r2, [r7, #6]
 801ad3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad42:	1ad3      	subs	r3, r2, r3
 801ad44:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801ad46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad4e:	1ad3      	subs	r3, r2, r3
 801ad50:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801ad52:	8b7a      	ldrh	r2, [r7, #26]
 801ad54:	8bbb      	ldrh	r3, [r7, #28]
 801ad56:	4293      	cmp	r3, r2
 801ad58:	bf28      	it	cs
 801ad5a:	4613      	movcs	r3, r2
 801ad5c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ad5e:	797b      	ldrb	r3, [r7, #5]
 801ad60:	f003 0301 	and.w	r3, r3, #1
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d036      	beq.n	801add6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801ad68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad6c:	b29a      	uxth	r2, r3
 801ad6e:	8b3b      	ldrh	r3, [r7, #24]
 801ad70:	4413      	add	r3, r2
 801ad72:	b299      	uxth	r1, r3
 801ad74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	bf0c      	ite	eq
 801ad7a:	2301      	moveq	r3, #1
 801ad7c:	2300      	movne	r3, #0
 801ad7e:	b2db      	uxtb	r3, r3
 801ad80:	f107 0012 	add.w	r0, r7, #18
 801ad84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad86:	9302      	str	r3, [sp, #8]
 801ad88:	797b      	ldrb	r3, [r7, #5]
 801ad8a:	9301      	str	r3, [sp, #4]
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	9300      	str	r3, [sp, #0]
 801ad90:	4603      	mov	r3, r0
 801ad92:	2036      	movs	r0, #54	; 0x36
 801ad94:	f7ff fd5e 	bl	801a854 <tcp_pbuf_prealloc>
 801ad98:	6338      	str	r0, [r7, #48]	; 0x30
 801ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	f000 8178 	beq.w	801b092 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada4:	895b      	ldrh	r3, [r3, #10]
 801ada6:	8b3a      	ldrh	r2, [r7, #24]
 801ada8:	429a      	cmp	r2, r3
 801adaa:	d906      	bls.n	801adba <tcp_write+0x37e>
 801adac:	4b8c      	ldr	r3, [pc, #560]	; (801afe0 <tcp_write+0x5a4>)
 801adae:	f240 2266 	movw	r2, #614	; 0x266
 801adb2:	498c      	ldr	r1, [pc, #560]	; (801afe4 <tcp_write+0x5a8>)
 801adb4:	488c      	ldr	r0, [pc, #560]	; (801afe8 <tcp_write+0x5ac>)
 801adb6:	f004 fb11 	bl	801f3dc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adbc:	685a      	ldr	r2, [r3, #4]
 801adbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801adc2:	18d0      	adds	r0, r2, r3
 801adc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adc8:	68ba      	ldr	r2, [r7, #8]
 801adca:	4413      	add	r3, r2
 801adcc:	8b3a      	ldrh	r2, [r7, #24]
 801adce:	4619      	mov	r1, r3
 801add0:	f004 fad4 	bl	801f37c <memcpy>
 801add4:	e02f      	b.n	801ae36 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801add6:	8a7b      	ldrh	r3, [r7, #18]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d006      	beq.n	801adea <tcp_write+0x3ae>
 801addc:	4b80      	ldr	r3, [pc, #512]	; (801afe0 <tcp_write+0x5a4>)
 801adde:	f240 2271 	movw	r2, #625	; 0x271
 801ade2:	4982      	ldr	r1, [pc, #520]	; (801afec <tcp_write+0x5b0>)
 801ade4:	4880      	ldr	r0, [pc, #512]	; (801afe8 <tcp_write+0x5ac>)
 801ade6:	f004 faf9 	bl	801f3dc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801adea:	8b3b      	ldrh	r3, [r7, #24]
 801adec:	2201      	movs	r2, #1
 801adee:	4619      	mov	r1, r3
 801adf0:	2036      	movs	r0, #54	; 0x36
 801adf2:	f7fa fd9d 	bl	8015930 <pbuf_alloc>
 801adf6:	6178      	str	r0, [r7, #20]
 801adf8:	697b      	ldr	r3, [r7, #20]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	f000 814b 	beq.w	801b096 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ae00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae04:	68ba      	ldr	r2, [r7, #8]
 801ae06:	441a      	add	r2, r3
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ae0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ae10:	b29b      	uxth	r3, r3
 801ae12:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ae16:	4619      	mov	r1, r3
 801ae18:	2036      	movs	r0, #54	; 0x36
 801ae1a:	f7fa fd89 	bl	8015930 <pbuf_alloc>
 801ae1e:	6338      	str	r0, [r7, #48]	; 0x30
 801ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d103      	bne.n	801ae2e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801ae26:	6978      	ldr	r0, [r7, #20]
 801ae28:	f7fb f878 	bl	8015f1c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801ae2c:	e136      	b.n	801b09c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801ae2e:	6979      	ldr	r1, [r7, #20]
 801ae30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae32:	f7fb f941 	bl	80160b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801ae36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae38:	f7fb f8fe 	bl	8016038 <pbuf_clen>
 801ae3c:	4603      	mov	r3, r0
 801ae3e:	461a      	mov	r2, r3
 801ae40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ae44:	4413      	add	r3, r2
 801ae46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801ae4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ae4e:	2b09      	cmp	r3, #9
 801ae50:	d903      	bls.n	801ae5a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801ae52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae54:	f7fb f862 	bl	8015f1c <pbuf_free>
      goto memerr;
 801ae58:	e120      	b.n	801b09c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ae5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae62:	441a      	add	r2, r3
 801ae64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ae68:	9300      	str	r3, [sp, #0]
 801ae6a:	4613      	mov	r3, r2
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ae70:	68f8      	ldr	r0, [r7, #12]
 801ae72:	f7ff fc51 	bl	801a718 <tcp_create_segment>
 801ae76:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ae78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	f000 810d 	beq.w	801b09a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801ae80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d102      	bne.n	801ae8c <tcp_write+0x450>
      queue = seg;
 801ae86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae88:	647b      	str	r3, [r7, #68]	; 0x44
 801ae8a:	e00c      	b.n	801aea6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ae8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d106      	bne.n	801aea0 <tcp_write+0x464>
 801ae92:	4b53      	ldr	r3, [pc, #332]	; (801afe0 <tcp_write+0x5a4>)
 801ae94:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ae98:	4955      	ldr	r1, [pc, #340]	; (801aff0 <tcp_write+0x5b4>)
 801ae9a:	4853      	ldr	r0, [pc, #332]	; (801afe8 <tcp_write+0x5ac>)
 801ae9c:	f004 fa9e 	bl	801f3dc <iprintf>
      prev_seg->next = seg;
 801aea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aea4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801aea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aea8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801aeaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aeae:	8b3b      	ldrh	r3, [r7, #24]
 801aeb0:	4413      	add	r3, r2
 801aeb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801aeb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aeba:	88fb      	ldrh	r3, [r7, #6]
 801aebc:	429a      	cmp	r2, r3
 801aebe:	f4ff af3d 	bcc.w	801ad3c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801aec2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d02c      	beq.n	801af22 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aeca:	685b      	ldr	r3, [r3, #4]
 801aecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aece:	e01e      	b.n	801af0e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aed2:	891a      	ldrh	r2, [r3, #8]
 801aed4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aed6:	4413      	add	r3, r2
 801aed8:	b29a      	uxth	r2, r3
 801aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aedc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801aede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d110      	bne.n	801af08 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aee8:	685b      	ldr	r3, [r3, #4]
 801aeea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aeec:	8952      	ldrh	r2, [r2, #10]
 801aeee:	4413      	add	r3, r2
 801aef0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801aef2:	68b9      	ldr	r1, [r7, #8]
 801aef4:	4618      	mov	r0, r3
 801aef6:	f004 fa41 	bl	801f37c <memcpy>
        p->len += oversize_used;
 801aefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aefc:	895a      	ldrh	r2, [r3, #10]
 801aefe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801af00:	4413      	add	r3, r2
 801af02:	b29a      	uxth	r2, r3
 801af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af06:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af10:	2b00      	cmp	r3, #0
 801af12:	d1dd      	bne.n	801aed0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801af14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af16:	891a      	ldrh	r2, [r3, #8]
 801af18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801af1a:	4413      	add	r3, r2
 801af1c:	b29a      	uxth	r2, r3
 801af1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af20:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801af22:	8a7a      	ldrh	r2, [r7, #18]
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801af2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d018      	beq.n	801af62 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801af30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af32:	2b00      	cmp	r3, #0
 801af34:	d106      	bne.n	801af44 <tcp_write+0x508>
 801af36:	4b2a      	ldr	r3, [pc, #168]	; (801afe0 <tcp_write+0x5a4>)
 801af38:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801af3c:	492d      	ldr	r1, [pc, #180]	; (801aff4 <tcp_write+0x5b8>)
 801af3e:	482a      	ldr	r0, [pc, #168]	; (801afe8 <tcp_write+0x5ac>)
 801af40:	f004 fa4c 	bl	801f3dc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801af44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af46:	685b      	ldr	r3, [r3, #4]
 801af48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7fb f8b4 	bl	80160b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801af50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af52:	891a      	ldrh	r2, [r3, #8]
 801af54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af56:	891b      	ldrh	r3, [r3, #8]
 801af58:	4413      	add	r3, r2
 801af5a:	b29a      	uxth	r2, r3
 801af5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af5e:	811a      	strh	r2, [r3, #8]
 801af60:	e037      	b.n	801afd2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801af62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af64:	2b00      	cmp	r3, #0
 801af66:	d034      	beq.n	801afd2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801af68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d003      	beq.n	801af76 <tcp_write+0x53a>
 801af6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af70:	685b      	ldr	r3, [r3, #4]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d106      	bne.n	801af84 <tcp_write+0x548>
 801af76:	4b1a      	ldr	r3, [pc, #104]	; (801afe0 <tcp_write+0x5a4>)
 801af78:	f240 22e6 	movw	r2, #742	; 0x2e6
 801af7c:	491e      	ldr	r1, [pc, #120]	; (801aff8 <tcp_write+0x5bc>)
 801af7e:	481a      	ldr	r0, [pc, #104]	; (801afe8 <tcp_write+0x5ac>)
 801af80:	f004 fa2c 	bl	801f3dc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801af84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af86:	685b      	ldr	r3, [r3, #4]
 801af88:	62bb      	str	r3, [r7, #40]	; 0x28
 801af8a:	e009      	b.n	801afa0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af8e:	891a      	ldrh	r2, [r3, #8]
 801af90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af92:	4413      	add	r3, r2
 801af94:	b29a      	uxth	r2, r3
 801af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af98:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	62bb      	str	r3, [r7, #40]	; 0x28
 801afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d1f1      	bne.n	801af8c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afaa:	891a      	ldrh	r2, [r3, #8]
 801afac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801afae:	4413      	add	r3, r2
 801afb0:	b29a      	uxth	r2, r3
 801afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afb4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afb8:	895a      	ldrh	r2, [r3, #10]
 801afba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801afbc:	4413      	add	r3, r2
 801afbe:	b29a      	uxth	r2, r3
 801afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afc2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801afc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801afc6:	891a      	ldrh	r2, [r3, #8]
 801afc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801afca:	4413      	add	r3, r2
 801afcc:	b29a      	uxth	r2, r3
 801afce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801afd0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801afd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d111      	bne.n	801affc <tcp_write+0x5c0>
    pcb->unsent = queue;
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801afdc:	66da      	str	r2, [r3, #108]	; 0x6c
 801afde:	e010      	b.n	801b002 <tcp_write+0x5c6>
 801afe0:	08022ffc 	.word	0x08022ffc
 801afe4:	0802329c 	.word	0x0802329c
 801afe8:	08023050 	.word	0x08023050
 801afec:	080232dc 	.word	0x080232dc
 801aff0:	080232ec 	.word	0x080232ec
 801aff4:	08023300 	.word	0x08023300
 801aff8:	08023338 	.word	0x08023338
  } else {
    last_unsent->next = queue;
 801affc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801affe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b000:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b006:	88fb      	ldrh	r3, [r7, #6]
 801b008:	441a      	add	r2, r3
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b014:	88fb      	ldrh	r3, [r7, #6]
 801b016:	1ad3      	subs	r3, r2, r3
 801b018:	b29a      	uxth	r2, r3
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b026:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b030:	2b00      	cmp	r3, #0
 801b032:	d00e      	beq.n	801b052 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d10a      	bne.n	801b052 <tcp_write+0x616>
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b040:	2b00      	cmp	r3, #0
 801b042:	d106      	bne.n	801b052 <tcp_write+0x616>
 801b044:	4b2c      	ldr	r3, [pc, #176]	; (801b0f8 <tcp_write+0x6bc>)
 801b046:	f240 3212 	movw	r2, #786	; 0x312
 801b04a:	492c      	ldr	r1, [pc, #176]	; (801b0fc <tcp_write+0x6c0>)
 801b04c:	482c      	ldr	r0, [pc, #176]	; (801b100 <tcp_write+0x6c4>)
 801b04e:	f004 f9c5 	bl	801f3dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801b052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b054:	2b00      	cmp	r3, #0
 801b056:	d016      	beq.n	801b086 <tcp_write+0x64a>
 801b058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b05a:	68db      	ldr	r3, [r3, #12]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d012      	beq.n	801b086 <tcp_write+0x64a>
 801b060:	797b      	ldrb	r3, [r7, #5]
 801b062:	f003 0302 	and.w	r3, r3, #2
 801b066:	2b00      	cmp	r3, #0
 801b068:	d10d      	bne.n	801b086 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b06c:	68db      	ldr	r3, [r3, #12]
 801b06e:	899b      	ldrh	r3, [r3, #12]
 801b070:	b29c      	uxth	r4, r3
 801b072:	2008      	movs	r0, #8
 801b074:	f7f9 fb5e 	bl	8014734 <lwip_htons>
 801b078:	4603      	mov	r3, r0
 801b07a:	461a      	mov	r2, r3
 801b07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b07e:	68db      	ldr	r3, [r3, #12]
 801b080:	4322      	orrs	r2, r4
 801b082:	b292      	uxth	r2, r2
 801b084:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b086:	2300      	movs	r3, #0
 801b088:	e031      	b.n	801b0ee <tcp_write+0x6b2>
          goto memerr;
 801b08a:	bf00      	nop
 801b08c:	e006      	b.n	801b09c <tcp_write+0x660>
            goto memerr;
 801b08e:	bf00      	nop
 801b090:	e004      	b.n	801b09c <tcp_write+0x660>
        goto memerr;
 801b092:	bf00      	nop
 801b094:	e002      	b.n	801b09c <tcp_write+0x660>
        goto memerr;
 801b096:	bf00      	nop
 801b098:	e000      	b.n	801b09c <tcp_write+0x660>
      goto memerr;
 801b09a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	8b5b      	ldrh	r3, [r3, #26]
 801b0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0a4:	b29a      	uxth	r2, r3
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d002      	beq.n	801b0b6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b0b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b0b2:	f7fa ff33 	bl	8015f1c <pbuf_free>
  }
  if (queue != NULL) {
 801b0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d002      	beq.n	801b0c2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801b0bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b0be:	f7fc fb51 	bl	8017764 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d00e      	beq.n	801b0ea <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d10a      	bne.n	801b0ea <tcp_write+0x6ae>
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d106      	bne.n	801b0ea <tcp_write+0x6ae>
 801b0dc:	4b06      	ldr	r3, [pc, #24]	; (801b0f8 <tcp_write+0x6bc>)
 801b0de:	f240 3227 	movw	r2, #807	; 0x327
 801b0e2:	4906      	ldr	r1, [pc, #24]	; (801b0fc <tcp_write+0x6c0>)
 801b0e4:	4806      	ldr	r0, [pc, #24]	; (801b100 <tcp_write+0x6c4>)
 801b0e6:	f004 f979 	bl	801f3dc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b0ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	375c      	adds	r7, #92	; 0x5c
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd90      	pop	{r4, r7, pc}
 801b0f6:	bf00      	nop
 801b0f8:	08022ffc 	.word	0x08022ffc
 801b0fc:	08023370 	.word	0x08023370
 801b100:	08023050 	.word	0x08023050

0801b104 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b104:	b590      	push	{r4, r7, lr}
 801b106:	b08b      	sub	sp, #44	; 0x2c
 801b108:	af02      	add	r7, sp, #8
 801b10a:	6078      	str	r0, [r7, #4]
 801b10c:	460b      	mov	r3, r1
 801b10e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b110:	2300      	movs	r3, #0
 801b112:	61fb      	str	r3, [r7, #28]
 801b114:	2300      	movs	r3, #0
 801b116:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b118:	2300      	movs	r3, #0
 801b11a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d106      	bne.n	801b130 <tcp_split_unsent_seg+0x2c>
 801b122:	4b95      	ldr	r3, [pc, #596]	; (801b378 <tcp_split_unsent_seg+0x274>)
 801b124:	f240 324b 	movw	r2, #843	; 0x34b
 801b128:	4994      	ldr	r1, [pc, #592]	; (801b37c <tcp_split_unsent_seg+0x278>)
 801b12a:	4895      	ldr	r0, [pc, #596]	; (801b380 <tcp_split_unsent_seg+0x27c>)
 801b12c:	f004 f956 	bl	801f3dc <iprintf>

  useg = pcb->unsent;
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b134:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b136:	697b      	ldr	r3, [r7, #20]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d102      	bne.n	801b142 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b13c:	f04f 33ff 	mov.w	r3, #4294967295
 801b140:	e116      	b.n	801b370 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b142:	887b      	ldrh	r3, [r7, #2]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d109      	bne.n	801b15c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b148:	4b8b      	ldr	r3, [pc, #556]	; (801b378 <tcp_split_unsent_seg+0x274>)
 801b14a:	f240 3253 	movw	r2, #851	; 0x353
 801b14e:	498d      	ldr	r1, [pc, #564]	; (801b384 <tcp_split_unsent_seg+0x280>)
 801b150:	488b      	ldr	r0, [pc, #556]	; (801b380 <tcp_split_unsent_seg+0x27c>)
 801b152:	f004 f943 	bl	801f3dc <iprintf>
    return ERR_VAL;
 801b156:	f06f 0305 	mvn.w	r3, #5
 801b15a:	e109      	b.n	801b370 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b15c:	697b      	ldr	r3, [r7, #20]
 801b15e:	891b      	ldrh	r3, [r3, #8]
 801b160:	887a      	ldrh	r2, [r7, #2]
 801b162:	429a      	cmp	r2, r3
 801b164:	d301      	bcc.n	801b16a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b166:	2300      	movs	r3, #0
 801b168:	e102      	b.n	801b370 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b16e:	887a      	ldrh	r2, [r7, #2]
 801b170:	429a      	cmp	r2, r3
 801b172:	d906      	bls.n	801b182 <tcp_split_unsent_seg+0x7e>
 801b174:	4b80      	ldr	r3, [pc, #512]	; (801b378 <tcp_split_unsent_seg+0x274>)
 801b176:	f240 325b 	movw	r2, #859	; 0x35b
 801b17a:	4983      	ldr	r1, [pc, #524]	; (801b388 <tcp_split_unsent_seg+0x284>)
 801b17c:	4880      	ldr	r0, [pc, #512]	; (801b380 <tcp_split_unsent_seg+0x27c>)
 801b17e:	f004 f92d 	bl	801f3dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b182:	697b      	ldr	r3, [r7, #20]
 801b184:	891b      	ldrh	r3, [r3, #8]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d106      	bne.n	801b198 <tcp_split_unsent_seg+0x94>
 801b18a:	4b7b      	ldr	r3, [pc, #492]	; (801b378 <tcp_split_unsent_seg+0x274>)
 801b18c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b190:	497e      	ldr	r1, [pc, #504]	; (801b38c <tcp_split_unsent_seg+0x288>)
 801b192:	487b      	ldr	r0, [pc, #492]	; (801b380 <tcp_split_unsent_seg+0x27c>)
 801b194:	f004 f922 	bl	801f3dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	7a9b      	ldrb	r3, [r3, #10]
 801b19c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b19e:	7bfb      	ldrb	r3, [r7, #15]
 801b1a0:	009b      	lsls	r3, r3, #2
 801b1a2:	b2db      	uxtb	r3, r3
 801b1a4:	f003 0304 	and.w	r3, r3, #4
 801b1a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b1aa:	697b      	ldr	r3, [r7, #20]
 801b1ac:	891a      	ldrh	r2, [r3, #8]
 801b1ae:	887b      	ldrh	r3, [r7, #2]
 801b1b0:	1ad3      	subs	r3, r2, r3
 801b1b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b1b4:	7bbb      	ldrb	r3, [r7, #14]
 801b1b6:	b29a      	uxth	r2, r3
 801b1b8:	89bb      	ldrh	r3, [r7, #12]
 801b1ba:	4413      	add	r3, r2
 801b1bc:	b29b      	uxth	r3, r3
 801b1be:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b1c2:	4619      	mov	r1, r3
 801b1c4:	2036      	movs	r0, #54	; 0x36
 801b1c6:	f7fa fbb3 	bl	8015930 <pbuf_alloc>
 801b1ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b1cc:	693b      	ldr	r3, [r7, #16]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	f000 80b7 	beq.w	801b342 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	685b      	ldr	r3, [r3, #4]
 801b1d8:	891a      	ldrh	r2, [r3, #8]
 801b1da:	697b      	ldr	r3, [r7, #20]
 801b1dc:	891b      	ldrh	r3, [r3, #8]
 801b1de:	1ad3      	subs	r3, r2, r3
 801b1e0:	b29a      	uxth	r2, r3
 801b1e2:	887b      	ldrh	r3, [r7, #2]
 801b1e4:	4413      	add	r3, r2
 801b1e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	6858      	ldr	r0, [r3, #4]
 801b1ec:	693b      	ldr	r3, [r7, #16]
 801b1ee:	685a      	ldr	r2, [r3, #4]
 801b1f0:	7bbb      	ldrb	r3, [r7, #14]
 801b1f2:	18d1      	adds	r1, r2, r3
 801b1f4:	897b      	ldrh	r3, [r7, #10]
 801b1f6:	89ba      	ldrh	r2, [r7, #12]
 801b1f8:	f7fb f886 	bl	8016308 <pbuf_copy_partial>
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	461a      	mov	r2, r3
 801b200:	89bb      	ldrh	r3, [r7, #12]
 801b202:	4293      	cmp	r3, r2
 801b204:	f040 809f 	bne.w	801b346 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b208:	697b      	ldr	r3, [r7, #20]
 801b20a:	68db      	ldr	r3, [r3, #12]
 801b20c:	899b      	ldrh	r3, [r3, #12]
 801b20e:	b29b      	uxth	r3, r3
 801b210:	4618      	mov	r0, r3
 801b212:	f7f9 fa8f 	bl	8014734 <lwip_htons>
 801b216:	4603      	mov	r3, r0
 801b218:	b2db      	uxtb	r3, r3
 801b21a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b21e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b220:	2300      	movs	r3, #0
 801b222:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b224:	7efb      	ldrb	r3, [r7, #27]
 801b226:	f003 0308 	and.w	r3, r3, #8
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d007      	beq.n	801b23e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b22e:	7efb      	ldrb	r3, [r7, #27]
 801b230:	f023 0308 	bic.w	r3, r3, #8
 801b234:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b236:	7ebb      	ldrb	r3, [r7, #26]
 801b238:	f043 0308 	orr.w	r3, r3, #8
 801b23c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b23e:	7efb      	ldrb	r3, [r7, #27]
 801b240:	f003 0301 	and.w	r3, r3, #1
 801b244:	2b00      	cmp	r3, #0
 801b246:	d007      	beq.n	801b258 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b248:	7efb      	ldrb	r3, [r7, #27]
 801b24a:	f023 0301 	bic.w	r3, r3, #1
 801b24e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b250:	7ebb      	ldrb	r3, [r7, #26]
 801b252:	f043 0301 	orr.w	r3, r3, #1
 801b256:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b258:	697b      	ldr	r3, [r7, #20]
 801b25a:	68db      	ldr	r3, [r3, #12]
 801b25c:	685b      	ldr	r3, [r3, #4]
 801b25e:	4618      	mov	r0, r3
 801b260:	f7f9 fa7d 	bl	801475e <lwip_htonl>
 801b264:	4602      	mov	r2, r0
 801b266:	887b      	ldrh	r3, [r7, #2]
 801b268:	18d1      	adds	r1, r2, r3
 801b26a:	7eba      	ldrb	r2, [r7, #26]
 801b26c:	7bfb      	ldrb	r3, [r7, #15]
 801b26e:	9300      	str	r3, [sp, #0]
 801b270:	460b      	mov	r3, r1
 801b272:	6939      	ldr	r1, [r7, #16]
 801b274:	6878      	ldr	r0, [r7, #4]
 801b276:	f7ff fa4f 	bl	801a718 <tcp_create_segment>
 801b27a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b27c:	69fb      	ldr	r3, [r7, #28]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d063      	beq.n	801b34a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b282:	697b      	ldr	r3, [r7, #20]
 801b284:	685b      	ldr	r3, [r3, #4]
 801b286:	4618      	mov	r0, r3
 801b288:	f7fa fed6 	bl	8016038 <pbuf_clen>
 801b28c:	4603      	mov	r3, r0
 801b28e:	461a      	mov	r2, r3
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b296:	1a9b      	subs	r3, r3, r2
 801b298:	b29a      	uxth	r2, r3
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b2a0:	697b      	ldr	r3, [r7, #20]
 801b2a2:	6858      	ldr	r0, [r3, #4]
 801b2a4:	697b      	ldr	r3, [r7, #20]
 801b2a6:	685b      	ldr	r3, [r3, #4]
 801b2a8:	891a      	ldrh	r2, [r3, #8]
 801b2aa:	89bb      	ldrh	r3, [r7, #12]
 801b2ac:	1ad3      	subs	r3, r2, r3
 801b2ae:	b29b      	uxth	r3, r3
 801b2b0:	4619      	mov	r1, r3
 801b2b2:	f7fa fc9b 	bl	8015bec <pbuf_realloc>
  useg->len -= remainder;
 801b2b6:	697b      	ldr	r3, [r7, #20]
 801b2b8:	891a      	ldrh	r2, [r3, #8]
 801b2ba:	89bb      	ldrh	r3, [r7, #12]
 801b2bc:	1ad3      	subs	r3, r2, r3
 801b2be:	b29a      	uxth	r2, r3
 801b2c0:	697b      	ldr	r3, [r7, #20]
 801b2c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	68db      	ldr	r3, [r3, #12]
 801b2c8:	899b      	ldrh	r3, [r3, #12]
 801b2ca:	b29c      	uxth	r4, r3
 801b2cc:	7efb      	ldrb	r3, [r7, #27]
 801b2ce:	b29b      	uxth	r3, r3
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	f7f9 fa2f 	bl	8014734 <lwip_htons>
 801b2d6:	4603      	mov	r3, r0
 801b2d8:	461a      	mov	r2, r3
 801b2da:	697b      	ldr	r3, [r7, #20]
 801b2dc:	68db      	ldr	r3, [r3, #12]
 801b2de:	4322      	orrs	r2, r4
 801b2e0:	b292      	uxth	r2, r2
 801b2e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	685b      	ldr	r3, [r3, #4]
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	f7fa fea5 	bl	8016038 <pbuf_clen>
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	461a      	mov	r2, r3
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b2f8:	4413      	add	r3, r2
 801b2fa:	b29a      	uxth	r2, r3
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b302:	69fb      	ldr	r3, [r7, #28]
 801b304:	685b      	ldr	r3, [r3, #4]
 801b306:	4618      	mov	r0, r3
 801b308:	f7fa fe96 	bl	8016038 <pbuf_clen>
 801b30c:	4603      	mov	r3, r0
 801b30e:	461a      	mov	r2, r3
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b316:	4413      	add	r3, r2
 801b318:	b29a      	uxth	r2, r3
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b320:	697b      	ldr	r3, [r7, #20]
 801b322:	681a      	ldr	r2, [r3, #0]
 801b324:	69fb      	ldr	r3, [r7, #28]
 801b326:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b328:	697b      	ldr	r3, [r7, #20]
 801b32a:	69fa      	ldr	r2, [r7, #28]
 801b32c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b32e:	69fb      	ldr	r3, [r7, #28]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d103      	bne.n	801b33e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	2200      	movs	r2, #0
 801b33a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b33e:	2300      	movs	r3, #0
 801b340:	e016      	b.n	801b370 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b342:	bf00      	nop
 801b344:	e002      	b.n	801b34c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b346:	bf00      	nop
 801b348:	e000      	b.n	801b34c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b34a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b34c:	69fb      	ldr	r3, [r7, #28]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d006      	beq.n	801b360 <tcp_split_unsent_seg+0x25c>
 801b352:	4b09      	ldr	r3, [pc, #36]	; (801b378 <tcp_split_unsent_seg+0x274>)
 801b354:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b358:	490d      	ldr	r1, [pc, #52]	; (801b390 <tcp_split_unsent_seg+0x28c>)
 801b35a:	4809      	ldr	r0, [pc, #36]	; (801b380 <tcp_split_unsent_seg+0x27c>)
 801b35c:	f004 f83e 	bl	801f3dc <iprintf>
  if (p != NULL) {
 801b360:	693b      	ldr	r3, [r7, #16]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d002      	beq.n	801b36c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b366:	6938      	ldr	r0, [r7, #16]
 801b368:	f7fa fdd8 	bl	8015f1c <pbuf_free>
  }

  return ERR_MEM;
 801b36c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b370:	4618      	mov	r0, r3
 801b372:	3724      	adds	r7, #36	; 0x24
 801b374:	46bd      	mov	sp, r7
 801b376:	bd90      	pop	{r4, r7, pc}
 801b378:	08022ffc 	.word	0x08022ffc
 801b37c:	08023390 	.word	0x08023390
 801b380:	08023050 	.word	0x08023050
 801b384:	080233b4 	.word	0x080233b4
 801b388:	080233d8 	.word	0x080233d8
 801b38c:	080233e8 	.word	0x080233e8
 801b390:	080233f8 	.word	0x080233f8

0801b394 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b394:	b590      	push	{r4, r7, lr}
 801b396:	b085      	sub	sp, #20
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d106      	bne.n	801b3b0 <tcp_send_fin+0x1c>
 801b3a2:	4b21      	ldr	r3, [pc, #132]	; (801b428 <tcp_send_fin+0x94>)
 801b3a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801b3a8:	4920      	ldr	r1, [pc, #128]	; (801b42c <tcp_send_fin+0x98>)
 801b3aa:	4821      	ldr	r0, [pc, #132]	; (801b430 <tcp_send_fin+0x9c>)
 801b3ac:	f004 f816 	bl	801f3dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d02e      	beq.n	801b416 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b3bc:	60fb      	str	r3, [r7, #12]
 801b3be:	e002      	b.n	801b3c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d1f8      	bne.n	801b3c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	68db      	ldr	r3, [r3, #12]
 801b3d2:	899b      	ldrh	r3, [r3, #12]
 801b3d4:	b29b      	uxth	r3, r3
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	f7f9 f9ac 	bl	8014734 <lwip_htons>
 801b3dc:	4603      	mov	r3, r0
 801b3de:	b2db      	uxtb	r3, r3
 801b3e0:	f003 0307 	and.w	r3, r3, #7
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d116      	bne.n	801b416 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	899b      	ldrh	r3, [r3, #12]
 801b3ee:	b29c      	uxth	r4, r3
 801b3f0:	2001      	movs	r0, #1
 801b3f2:	f7f9 f99f 	bl	8014734 <lwip_htons>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	461a      	mov	r2, r3
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	68db      	ldr	r3, [r3, #12]
 801b3fe:	4322      	orrs	r2, r4
 801b400:	b292      	uxth	r2, r2
 801b402:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	8b5b      	ldrh	r3, [r3, #26]
 801b408:	f043 0320 	orr.w	r3, r3, #32
 801b40c:	b29a      	uxth	r2, r3
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b412:	2300      	movs	r3, #0
 801b414:	e004      	b.n	801b420 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b416:	2101      	movs	r1, #1
 801b418:	6878      	ldr	r0, [r7, #4]
 801b41a:	f000 f80b 	bl	801b434 <tcp_enqueue_flags>
 801b41e:	4603      	mov	r3, r0
}
 801b420:	4618      	mov	r0, r3
 801b422:	3714      	adds	r7, #20
 801b424:	46bd      	mov	sp, r7
 801b426:	bd90      	pop	{r4, r7, pc}
 801b428:	08022ffc 	.word	0x08022ffc
 801b42c:	08023404 	.word	0x08023404
 801b430:	08023050 	.word	0x08023050

0801b434 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b08a      	sub	sp, #40	; 0x28
 801b438:	af02      	add	r7, sp, #8
 801b43a:	6078      	str	r0, [r7, #4]
 801b43c:	460b      	mov	r3, r1
 801b43e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b440:	2300      	movs	r3, #0
 801b442:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b444:	2300      	movs	r3, #0
 801b446:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b448:	78fb      	ldrb	r3, [r7, #3]
 801b44a:	f003 0303 	and.w	r3, r3, #3
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d106      	bne.n	801b460 <tcp_enqueue_flags+0x2c>
 801b452:	4b67      	ldr	r3, [pc, #412]	; (801b5f0 <tcp_enqueue_flags+0x1bc>)
 801b454:	f240 4211 	movw	r2, #1041	; 0x411
 801b458:	4966      	ldr	r1, [pc, #408]	; (801b5f4 <tcp_enqueue_flags+0x1c0>)
 801b45a:	4867      	ldr	r0, [pc, #412]	; (801b5f8 <tcp_enqueue_flags+0x1c4>)
 801b45c:	f003 ffbe 	bl	801f3dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d106      	bne.n	801b474 <tcp_enqueue_flags+0x40>
 801b466:	4b62      	ldr	r3, [pc, #392]	; (801b5f0 <tcp_enqueue_flags+0x1bc>)
 801b468:	f240 4213 	movw	r2, #1043	; 0x413
 801b46c:	4963      	ldr	r1, [pc, #396]	; (801b5fc <tcp_enqueue_flags+0x1c8>)
 801b46e:	4862      	ldr	r0, [pc, #392]	; (801b5f8 <tcp_enqueue_flags+0x1c4>)
 801b470:	f003 ffb4 	bl	801f3dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b474:	78fb      	ldrb	r3, [r7, #3]
 801b476:	f003 0302 	and.w	r3, r3, #2
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d001      	beq.n	801b482 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b47e:	2301      	movs	r3, #1
 801b480:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b482:	7ffb      	ldrb	r3, [r7, #31]
 801b484:	009b      	lsls	r3, r3, #2
 801b486:	b2db      	uxtb	r3, r3
 801b488:	f003 0304 	and.w	r3, r3, #4
 801b48c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b48e:	7dfb      	ldrb	r3, [r7, #23]
 801b490:	b29b      	uxth	r3, r3
 801b492:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b496:	4619      	mov	r1, r3
 801b498:	2036      	movs	r0, #54	; 0x36
 801b49a:	f7fa fa49 	bl	8015930 <pbuf_alloc>
 801b49e:	6138      	str	r0, [r7, #16]
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d109      	bne.n	801b4ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	8b5b      	ldrh	r3, [r3, #26]
 801b4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4ae:	b29a      	uxth	r2, r3
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b4b4:	f04f 33ff 	mov.w	r3, #4294967295
 801b4b8:	e095      	b.n	801b5e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b4ba:	693b      	ldr	r3, [r7, #16]
 801b4bc:	895a      	ldrh	r2, [r3, #10]
 801b4be:	7dfb      	ldrb	r3, [r7, #23]
 801b4c0:	b29b      	uxth	r3, r3
 801b4c2:	429a      	cmp	r2, r3
 801b4c4:	d206      	bcs.n	801b4d4 <tcp_enqueue_flags+0xa0>
 801b4c6:	4b4a      	ldr	r3, [pc, #296]	; (801b5f0 <tcp_enqueue_flags+0x1bc>)
 801b4c8:	f240 4239 	movw	r2, #1081	; 0x439
 801b4cc:	494c      	ldr	r1, [pc, #304]	; (801b600 <tcp_enqueue_flags+0x1cc>)
 801b4ce:	484a      	ldr	r0, [pc, #296]	; (801b5f8 <tcp_enqueue_flags+0x1c4>)
 801b4d0:	f003 ff84 	bl	801f3dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b4d8:	78fa      	ldrb	r2, [r7, #3]
 801b4da:	7ffb      	ldrb	r3, [r7, #31]
 801b4dc:	9300      	str	r3, [sp, #0]
 801b4de:	460b      	mov	r3, r1
 801b4e0:	6939      	ldr	r1, [r7, #16]
 801b4e2:	6878      	ldr	r0, [r7, #4]
 801b4e4:	f7ff f918 	bl	801a718 <tcp_create_segment>
 801b4e8:	60f8      	str	r0, [r7, #12]
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d109      	bne.n	801b504 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	8b5b      	ldrh	r3, [r3, #26]
 801b4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4f8:	b29a      	uxth	r2, r3
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b4fe:	f04f 33ff 	mov.w	r3, #4294967295
 801b502:	e070      	b.n	801b5e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	68db      	ldr	r3, [r3, #12]
 801b508:	f003 0303 	and.w	r3, r3, #3
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d006      	beq.n	801b51e <tcp_enqueue_flags+0xea>
 801b510:	4b37      	ldr	r3, [pc, #220]	; (801b5f0 <tcp_enqueue_flags+0x1bc>)
 801b512:	f240 4242 	movw	r2, #1090	; 0x442
 801b516:	493b      	ldr	r1, [pc, #236]	; (801b604 <tcp_enqueue_flags+0x1d0>)
 801b518:	4837      	ldr	r0, [pc, #220]	; (801b5f8 <tcp_enqueue_flags+0x1c4>)
 801b51a:	f003 ff5f 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	891b      	ldrh	r3, [r3, #8]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d006      	beq.n	801b534 <tcp_enqueue_flags+0x100>
 801b526:	4b32      	ldr	r3, [pc, #200]	; (801b5f0 <tcp_enqueue_flags+0x1bc>)
 801b528:	f240 4243 	movw	r2, #1091	; 0x443
 801b52c:	4936      	ldr	r1, [pc, #216]	; (801b608 <tcp_enqueue_flags+0x1d4>)
 801b52e:	4832      	ldr	r0, [pc, #200]	; (801b5f8 <tcp_enqueue_flags+0x1c4>)
 801b530:	f003 ff54 	bl	801f3dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d103      	bne.n	801b544 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	68fa      	ldr	r2, [r7, #12]
 801b540:	66da      	str	r2, [r3, #108]	; 0x6c
 801b542:	e00d      	b.n	801b560 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b548:	61bb      	str	r3, [r7, #24]
 801b54a:	e002      	b.n	801b552 <tcp_enqueue_flags+0x11e>
 801b54c:	69bb      	ldr	r3, [r7, #24]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	61bb      	str	r3, [r7, #24]
 801b552:	69bb      	ldr	r3, [r7, #24]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d1f8      	bne.n	801b54c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b55a:	69bb      	ldr	r3, [r7, #24]
 801b55c:	68fa      	ldr	r2, [r7, #12]
 801b55e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	2200      	movs	r2, #0
 801b564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b568:	78fb      	ldrb	r3, [r7, #3]
 801b56a:	f003 0302 	and.w	r3, r3, #2
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d104      	bne.n	801b57c <tcp_enqueue_flags+0x148>
 801b572:	78fb      	ldrb	r3, [r7, #3]
 801b574:	f003 0301 	and.w	r3, r3, #1
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d004      	beq.n	801b586 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b580:	1c5a      	adds	r2, r3, #1
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b586:	78fb      	ldrb	r3, [r7, #3]
 801b588:	f003 0301 	and.w	r3, r3, #1
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d006      	beq.n	801b59e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	8b5b      	ldrh	r3, [r3, #26]
 801b594:	f043 0320 	orr.w	r3, r3, #32
 801b598:	b29a      	uxth	r2, r3
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	685b      	ldr	r3, [r3, #4]
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f7fa fd48 	bl	8016038 <pbuf_clen>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	461a      	mov	r2, r3
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b5b2:	4413      	add	r3, r2
 801b5b4:	b29a      	uxth	r2, r3
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d00e      	beq.n	801b5e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d10a      	bne.n	801b5e4 <tcp_enqueue_flags+0x1b0>
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d106      	bne.n	801b5e4 <tcp_enqueue_flags+0x1b0>
 801b5d6:	4b06      	ldr	r3, [pc, #24]	; (801b5f0 <tcp_enqueue_flags+0x1bc>)
 801b5d8:	f240 4265 	movw	r2, #1125	; 0x465
 801b5dc:	490b      	ldr	r1, [pc, #44]	; (801b60c <tcp_enqueue_flags+0x1d8>)
 801b5de:	4806      	ldr	r0, [pc, #24]	; (801b5f8 <tcp_enqueue_flags+0x1c4>)
 801b5e0:	f003 fefc 	bl	801f3dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b5e4:	2300      	movs	r3, #0
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	3720      	adds	r7, #32
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	bd80      	pop	{r7, pc}
 801b5ee:	bf00      	nop
 801b5f0:	08022ffc 	.word	0x08022ffc
 801b5f4:	08023420 	.word	0x08023420
 801b5f8:	08023050 	.word	0x08023050
 801b5fc:	08023478 	.word	0x08023478
 801b600:	08023498 	.word	0x08023498
 801b604:	080234d4 	.word	0x080234d4
 801b608:	080234ec 	.word	0x080234ec
 801b60c:	08023518 	.word	0x08023518

0801b610 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b610:	b5b0      	push	{r4, r5, r7, lr}
 801b612:	b08a      	sub	sp, #40	; 0x28
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d106      	bne.n	801b62c <tcp_output+0x1c>
 801b61e:	4b9e      	ldr	r3, [pc, #632]	; (801b898 <tcp_output+0x288>)
 801b620:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b624:	499d      	ldr	r1, [pc, #628]	; (801b89c <tcp_output+0x28c>)
 801b626:	489e      	ldr	r0, [pc, #632]	; (801b8a0 <tcp_output+0x290>)
 801b628:	f003 fed8 	bl	801f3dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	7d1b      	ldrb	r3, [r3, #20]
 801b630:	2b01      	cmp	r3, #1
 801b632:	d106      	bne.n	801b642 <tcp_output+0x32>
 801b634:	4b98      	ldr	r3, [pc, #608]	; (801b898 <tcp_output+0x288>)
 801b636:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b63a:	499a      	ldr	r1, [pc, #616]	; (801b8a4 <tcp_output+0x294>)
 801b63c:	4898      	ldr	r0, [pc, #608]	; (801b8a0 <tcp_output+0x290>)
 801b63e:	f003 fecd 	bl	801f3dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b642:	4b99      	ldr	r3, [pc, #612]	; (801b8a8 <tcp_output+0x298>)
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	687a      	ldr	r2, [r7, #4]
 801b648:	429a      	cmp	r2, r3
 801b64a:	d101      	bne.n	801b650 <tcp_output+0x40>
    return ERR_OK;
 801b64c:	2300      	movs	r3, #0
 801b64e:	e1ce      	b.n	801b9ee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b65c:	4293      	cmp	r3, r2
 801b65e:	bf28      	it	cs
 801b660:	4613      	movcs	r3, r2
 801b662:	b29b      	uxth	r3, r3
 801b664:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b66a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d10b      	bne.n	801b68a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	8b5b      	ldrh	r3, [r3, #26]
 801b676:	f003 0302 	and.w	r3, r3, #2
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	f000 81aa 	beq.w	801b9d4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b680:	6878      	ldr	r0, [r7, #4]
 801b682:	f000 fdcb 	bl	801c21c <tcp_send_empty_ack>
 801b686:	4603      	mov	r3, r0
 801b688:	e1b1      	b.n	801b9ee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b68a:	6879      	ldr	r1, [r7, #4]
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	3304      	adds	r3, #4
 801b690:	461a      	mov	r2, r3
 801b692:	6878      	ldr	r0, [r7, #4]
 801b694:	f7ff f824 	bl	801a6e0 <tcp_route>
 801b698:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b69a:	697b      	ldr	r3, [r7, #20]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d102      	bne.n	801b6a6 <tcp_output+0x96>
    return ERR_RTE;
 801b6a0:	f06f 0303 	mvn.w	r3, #3
 801b6a4:	e1a3      	b.n	801b9ee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d003      	beq.n	801b6b4 <tcp_output+0xa4>
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d111      	bne.n	801b6d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b6b4:	697b      	ldr	r3, [r7, #20]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d002      	beq.n	801b6c0 <tcp_output+0xb0>
 801b6ba:	697b      	ldr	r3, [r7, #20]
 801b6bc:	3304      	adds	r3, #4
 801b6be:	e000      	b.n	801b6c2 <tcp_output+0xb2>
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b6c4:	693b      	ldr	r3, [r7, #16]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d102      	bne.n	801b6d0 <tcp_output+0xc0>
      return ERR_RTE;
 801b6ca:	f06f 0303 	mvn.w	r3, #3
 801b6ce:	e18e      	b.n	801b9ee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b6d0:	693b      	ldr	r3, [r7, #16]
 801b6d2:	681a      	ldr	r2, [r3, #0]
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6da:	68db      	ldr	r3, [r3, #12]
 801b6dc:	685b      	ldr	r3, [r3, #4]
 801b6de:	4618      	mov	r0, r3
 801b6e0:	f7f9 f83d 	bl	801475e <lwip_htonl>
 801b6e4:	4602      	mov	r2, r0
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6ea:	1ad3      	subs	r3, r2, r3
 801b6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b6ee:	8912      	ldrh	r2, [r2, #8]
 801b6f0:	4413      	add	r3, r2
 801b6f2:	69ba      	ldr	r2, [r7, #24]
 801b6f4:	429a      	cmp	r2, r3
 801b6f6:	d227      	bcs.n	801b748 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b6fe:	461a      	mov	r2, r3
 801b700:	69bb      	ldr	r3, [r7, #24]
 801b702:	4293      	cmp	r3, r2
 801b704:	d114      	bne.n	801b730 <tcp_output+0x120>
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d110      	bne.n	801b730 <tcp_output+0x120>
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b714:	2b00      	cmp	r3, #0
 801b716:	d10b      	bne.n	801b730 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	2200      	movs	r2, #0
 801b71c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	2201      	movs	r2, #1
 801b724:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2200      	movs	r2, #0
 801b72c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	8b5b      	ldrh	r3, [r3, #26]
 801b734:	f003 0302 	and.w	r3, r3, #2
 801b738:	2b00      	cmp	r3, #0
 801b73a:	f000 814d 	beq.w	801b9d8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b73e:	6878      	ldr	r0, [r7, #4]
 801b740:	f000 fd6c 	bl	801c21c <tcp_send_empty_ack>
 801b744:	4603      	mov	r3, r0
 801b746:	e152      	b.n	801b9ee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	2200      	movs	r2, #0
 801b74c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b754:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b756:	6a3b      	ldr	r3, [r7, #32]
 801b758:	2b00      	cmp	r3, #0
 801b75a:	f000 811c 	beq.w	801b996 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b75e:	e002      	b.n	801b766 <tcp_output+0x156>
 801b760:	6a3b      	ldr	r3, [r7, #32]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	623b      	str	r3, [r7, #32]
 801b766:	6a3b      	ldr	r3, [r7, #32]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d1f8      	bne.n	801b760 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b76e:	e112      	b.n	801b996 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b772:	68db      	ldr	r3, [r3, #12]
 801b774:	899b      	ldrh	r3, [r3, #12]
 801b776:	b29b      	uxth	r3, r3
 801b778:	4618      	mov	r0, r3
 801b77a:	f7f8 ffdb 	bl	8014734 <lwip_htons>
 801b77e:	4603      	mov	r3, r0
 801b780:	b2db      	uxtb	r3, r3
 801b782:	f003 0304 	and.w	r3, r3, #4
 801b786:	2b00      	cmp	r3, #0
 801b788:	d006      	beq.n	801b798 <tcp_output+0x188>
 801b78a:	4b43      	ldr	r3, [pc, #268]	; (801b898 <tcp_output+0x288>)
 801b78c:	f240 5236 	movw	r2, #1334	; 0x536
 801b790:	4946      	ldr	r1, [pc, #280]	; (801b8ac <tcp_output+0x29c>)
 801b792:	4843      	ldr	r0, [pc, #268]	; (801b8a0 <tcp_output+0x290>)
 801b794:	f003 fe22 	bl	801f3dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d01f      	beq.n	801b7e0 <tcp_output+0x1d0>
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	8b5b      	ldrh	r3, [r3, #26]
 801b7a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d119      	bne.n	801b7e0 <tcp_output+0x1d0>
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d00b      	beq.n	801b7cc <tcp_output+0x1bc>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d110      	bne.n	801b7e0 <tcp_output+0x1d0>
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7c2:	891a      	ldrh	r2, [r3, #8]
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b7c8:	429a      	cmp	r2, r3
 801b7ca:	d209      	bcs.n	801b7e0 <tcp_output+0x1d0>
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d004      	beq.n	801b7e0 <tcp_output+0x1d0>
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b7dc:	2b08      	cmp	r3, #8
 801b7de:	d901      	bls.n	801b7e4 <tcp_output+0x1d4>
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	e000      	b.n	801b7e6 <tcp_output+0x1d6>
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d106      	bne.n	801b7f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	8b5b      	ldrh	r3, [r3, #26]
 801b7ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	f000 80e4 	beq.w	801b9c0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	7d1b      	ldrb	r3, [r3, #20]
 801b7fc:	2b02      	cmp	r3, #2
 801b7fe:	d00d      	beq.n	801b81c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b802:	68db      	ldr	r3, [r3, #12]
 801b804:	899b      	ldrh	r3, [r3, #12]
 801b806:	b29c      	uxth	r4, r3
 801b808:	2010      	movs	r0, #16
 801b80a:	f7f8 ff93 	bl	8014734 <lwip_htons>
 801b80e:	4603      	mov	r3, r0
 801b810:	461a      	mov	r2, r3
 801b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b814:	68db      	ldr	r3, [r3, #12]
 801b816:	4322      	orrs	r2, r4
 801b818:	b292      	uxth	r2, r2
 801b81a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b81c:	697a      	ldr	r2, [r7, #20]
 801b81e:	6879      	ldr	r1, [r7, #4]
 801b820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b822:	f000 f909 	bl	801ba38 <tcp_output_segment>
 801b826:	4603      	mov	r3, r0
 801b828:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d009      	beq.n	801b846 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	8b5b      	ldrh	r3, [r3, #26]
 801b836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b83a:	b29a      	uxth	r2, r3
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	835a      	strh	r2, [r3, #26]
      return err;
 801b840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b844:	e0d3      	b.n	801b9ee <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b848:	681a      	ldr	r2, [r3, #0]
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	7d1b      	ldrb	r3, [r3, #20]
 801b852:	2b02      	cmp	r3, #2
 801b854:	d006      	beq.n	801b864 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	8b5b      	ldrh	r3, [r3, #26]
 801b85a:	f023 0303 	bic.w	r3, r3, #3
 801b85e:	b29a      	uxth	r2, r3
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b866:	68db      	ldr	r3, [r3, #12]
 801b868:	685b      	ldr	r3, [r3, #4]
 801b86a:	4618      	mov	r0, r3
 801b86c:	f7f8 ff77 	bl	801475e <lwip_htonl>
 801b870:	4604      	mov	r4, r0
 801b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b874:	891b      	ldrh	r3, [r3, #8]
 801b876:	461d      	mov	r5, r3
 801b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b87a:	68db      	ldr	r3, [r3, #12]
 801b87c:	899b      	ldrh	r3, [r3, #12]
 801b87e:	b29b      	uxth	r3, r3
 801b880:	4618      	mov	r0, r3
 801b882:	f7f8 ff57 	bl	8014734 <lwip_htons>
 801b886:	4603      	mov	r3, r0
 801b888:	b2db      	uxtb	r3, r3
 801b88a:	f003 0303 	and.w	r3, r3, #3
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d00e      	beq.n	801b8b0 <tcp_output+0x2a0>
 801b892:	2301      	movs	r3, #1
 801b894:	e00d      	b.n	801b8b2 <tcp_output+0x2a2>
 801b896:	bf00      	nop
 801b898:	08022ffc 	.word	0x08022ffc
 801b89c:	08023540 	.word	0x08023540
 801b8a0:	08023050 	.word	0x08023050
 801b8a4:	08023558 	.word	0x08023558
 801b8a8:	20014bc8 	.word	0x20014bc8
 801b8ac:	08023580 	.word	0x08023580
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	442b      	add	r3, r5
 801b8b4:	4423      	add	r3, r4
 801b8b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	1ad3      	subs	r3, r2, r3
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	da02      	bge.n	801b8ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	68ba      	ldr	r2, [r7, #8]
 801b8c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8cc:	891b      	ldrh	r3, [r3, #8]
 801b8ce:	461c      	mov	r4, r3
 801b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8d2:	68db      	ldr	r3, [r3, #12]
 801b8d4:	899b      	ldrh	r3, [r3, #12]
 801b8d6:	b29b      	uxth	r3, r3
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f7f8 ff2b 	bl	8014734 <lwip_htons>
 801b8de:	4603      	mov	r3, r0
 801b8e0:	b2db      	uxtb	r3, r3
 801b8e2:	f003 0303 	and.w	r3, r3, #3
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d001      	beq.n	801b8ee <tcp_output+0x2de>
 801b8ea:	2301      	movs	r3, #1
 801b8ec:	e000      	b.n	801b8f0 <tcp_output+0x2e0>
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	4423      	add	r3, r4
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d049      	beq.n	801b98a <tcp_output+0x37a>
      seg->next = NULL;
 801b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f8:	2200      	movs	r2, #0
 801b8fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b900:	2b00      	cmp	r3, #0
 801b902:	d105      	bne.n	801b910 <tcp_output+0x300>
        pcb->unacked = seg;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b908:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b90c:	623b      	str	r3, [r7, #32]
 801b90e:	e03f      	b.n	801b990 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b912:	68db      	ldr	r3, [r3, #12]
 801b914:	685b      	ldr	r3, [r3, #4]
 801b916:	4618      	mov	r0, r3
 801b918:	f7f8 ff21 	bl	801475e <lwip_htonl>
 801b91c:	4604      	mov	r4, r0
 801b91e:	6a3b      	ldr	r3, [r7, #32]
 801b920:	68db      	ldr	r3, [r3, #12]
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	4618      	mov	r0, r3
 801b926:	f7f8 ff1a 	bl	801475e <lwip_htonl>
 801b92a:	4603      	mov	r3, r0
 801b92c:	1ae3      	subs	r3, r4, r3
 801b92e:	2b00      	cmp	r3, #0
 801b930:	da24      	bge.n	801b97c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	3370      	adds	r3, #112	; 0x70
 801b936:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b938:	e002      	b.n	801b940 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b93a:	69fb      	ldr	r3, [r7, #28]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b940:	69fb      	ldr	r3, [r7, #28]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d011      	beq.n	801b96c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b948:	69fb      	ldr	r3, [r7, #28]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	68db      	ldr	r3, [r3, #12]
 801b94e:	685b      	ldr	r3, [r3, #4]
 801b950:	4618      	mov	r0, r3
 801b952:	f7f8 ff04 	bl	801475e <lwip_htonl>
 801b956:	4604      	mov	r4, r0
 801b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b95a:	68db      	ldr	r3, [r3, #12]
 801b95c:	685b      	ldr	r3, [r3, #4]
 801b95e:	4618      	mov	r0, r3
 801b960:	f7f8 fefd 	bl	801475e <lwip_htonl>
 801b964:	4603      	mov	r3, r0
 801b966:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b968:	2b00      	cmp	r3, #0
 801b96a:	dbe6      	blt.n	801b93a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b96c:	69fb      	ldr	r3, [r7, #28]
 801b96e:	681a      	ldr	r2, [r3, #0]
 801b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b972:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b974:	69fb      	ldr	r3, [r7, #28]
 801b976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b978:	601a      	str	r2, [r3, #0]
 801b97a:	e009      	b.n	801b990 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b97c:	6a3b      	ldr	r3, [r7, #32]
 801b97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b980:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b982:	6a3b      	ldr	r3, [r7, #32]
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	623b      	str	r3, [r7, #32]
 801b988:	e002      	b.n	801b990 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b98a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b98c:	f7fb feff 	bl	801778e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b994:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d012      	beq.n	801b9c2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b99e:	68db      	ldr	r3, [r3, #12]
 801b9a0:	685b      	ldr	r3, [r3, #4]
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	f7f8 fedb 	bl	801475e <lwip_htonl>
 801b9a8:	4602      	mov	r2, r0
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9ae:	1ad3      	subs	r3, r2, r3
 801b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b9b2:	8912      	ldrh	r2, [r2, #8]
 801b9b4:	4413      	add	r3, r2
  while (seg != NULL &&
 801b9b6:	69ba      	ldr	r2, [r7, #24]
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	f4bf aed9 	bcs.w	801b770 <tcp_output+0x160>
 801b9be:	e000      	b.n	801b9c2 <tcp_output+0x3b2>
      break;
 801b9c0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d108      	bne.n	801b9dc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b9d2:	e004      	b.n	801b9de <tcp_output+0x3ce>
    goto output_done;
 801b9d4:	bf00      	nop
 801b9d6:	e002      	b.n	801b9de <tcp_output+0x3ce>
    goto output_done;
 801b9d8:	bf00      	nop
 801b9da:	e000      	b.n	801b9de <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b9dc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	8b5b      	ldrh	r3, [r3, #26]
 801b9e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b9e6:	b29a      	uxth	r2, r3
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b9ec:	2300      	movs	r3, #0
}
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	3728      	adds	r7, #40	; 0x28
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	bdb0      	pop	{r4, r5, r7, pc}
 801b9f6:	bf00      	nop

0801b9f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	b082      	sub	sp, #8
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d106      	bne.n	801ba14 <tcp_output_segment_busy+0x1c>
 801ba06:	4b09      	ldr	r3, [pc, #36]	; (801ba2c <tcp_output_segment_busy+0x34>)
 801ba08:	f240 529a 	movw	r2, #1434	; 0x59a
 801ba0c:	4908      	ldr	r1, [pc, #32]	; (801ba30 <tcp_output_segment_busy+0x38>)
 801ba0e:	4809      	ldr	r0, [pc, #36]	; (801ba34 <tcp_output_segment_busy+0x3c>)
 801ba10:	f003 fce4 	bl	801f3dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	685b      	ldr	r3, [r3, #4]
 801ba18:	7b9b      	ldrb	r3, [r3, #14]
 801ba1a:	2b01      	cmp	r3, #1
 801ba1c:	d001      	beq.n	801ba22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ba1e:	2301      	movs	r3, #1
 801ba20:	e000      	b.n	801ba24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ba22:	2300      	movs	r3, #0
}
 801ba24:	4618      	mov	r0, r3
 801ba26:	3708      	adds	r7, #8
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	bd80      	pop	{r7, pc}
 801ba2c:	08022ffc 	.word	0x08022ffc
 801ba30:	08023598 	.word	0x08023598
 801ba34:	08023050 	.word	0x08023050

0801ba38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ba38:	b5b0      	push	{r4, r5, r7, lr}
 801ba3a:	b08c      	sub	sp, #48	; 0x30
 801ba3c:	af04      	add	r7, sp, #16
 801ba3e:	60f8      	str	r0, [r7, #12]
 801ba40:	60b9      	str	r1, [r7, #8]
 801ba42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d106      	bne.n	801ba58 <tcp_output_segment+0x20>
 801ba4a:	4b63      	ldr	r3, [pc, #396]	; (801bbd8 <tcp_output_segment+0x1a0>)
 801ba4c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801ba50:	4962      	ldr	r1, [pc, #392]	; (801bbdc <tcp_output_segment+0x1a4>)
 801ba52:	4863      	ldr	r0, [pc, #396]	; (801bbe0 <tcp_output_segment+0x1a8>)
 801ba54:	f003 fcc2 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ba58:	68bb      	ldr	r3, [r7, #8]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d106      	bne.n	801ba6c <tcp_output_segment+0x34>
 801ba5e:	4b5e      	ldr	r3, [pc, #376]	; (801bbd8 <tcp_output_segment+0x1a0>)
 801ba60:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ba64:	495f      	ldr	r1, [pc, #380]	; (801bbe4 <tcp_output_segment+0x1ac>)
 801ba66:	485e      	ldr	r0, [pc, #376]	; (801bbe0 <tcp_output_segment+0x1a8>)
 801ba68:	f003 fcb8 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d106      	bne.n	801ba80 <tcp_output_segment+0x48>
 801ba72:	4b59      	ldr	r3, [pc, #356]	; (801bbd8 <tcp_output_segment+0x1a0>)
 801ba74:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ba78:	495b      	ldr	r1, [pc, #364]	; (801bbe8 <tcp_output_segment+0x1b0>)
 801ba7a:	4859      	ldr	r0, [pc, #356]	; (801bbe0 <tcp_output_segment+0x1a8>)
 801ba7c:	f003 fcae 	bl	801f3dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ba80:	68f8      	ldr	r0, [r7, #12]
 801ba82:	f7ff ffb9 	bl	801b9f8 <tcp_output_segment_busy>
 801ba86:	4603      	mov	r3, r0
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d001      	beq.n	801ba90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	e09f      	b.n	801bbd0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ba90:	68bb      	ldr	r3, [r7, #8]
 801ba92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	68dc      	ldr	r4, [r3, #12]
 801ba98:	4610      	mov	r0, r2
 801ba9a:	f7f8 fe60 	bl	801475e <lwip_htonl>
 801ba9e:	4603      	mov	r3, r0
 801baa0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	68dc      	ldr	r4, [r3, #12]
 801baaa:	4610      	mov	r0, r2
 801baac:	f7f8 fe42 	bl	8014734 <lwip_htons>
 801bab0:	4603      	mov	r3, r0
 801bab2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bab4:	68bb      	ldr	r3, [r7, #8]
 801bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bab8:	68ba      	ldr	r2, [r7, #8]
 801baba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801babc:	441a      	add	r2, r3
 801babe:	68bb      	ldr	r3, [r7, #8]
 801bac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	68db      	ldr	r3, [r3, #12]
 801bac6:	3314      	adds	r3, #20
 801bac8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	7a9b      	ldrb	r3, [r3, #10]
 801bace:	f003 0301 	and.w	r3, r3, #1
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d015      	beq.n	801bb02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801bad6:	68bb      	ldr	r3, [r7, #8]
 801bad8:	3304      	adds	r3, #4
 801bada:	461a      	mov	r2, r3
 801badc:	6879      	ldr	r1, [r7, #4]
 801bade:	f44f 7006 	mov.w	r0, #536	; 0x218
 801bae2:	f7fc fa37 	bl	8017f54 <tcp_eff_send_mss_netif>
 801bae6:	4603      	mov	r3, r0
 801bae8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801baea:	8b7b      	ldrh	r3, [r7, #26]
 801baec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801baf0:	4618      	mov	r0, r3
 801baf2:	f7f8 fe34 	bl	801475e <lwip_htonl>
 801baf6:	4602      	mov	r2, r0
 801baf8:	69fb      	ldr	r3, [r7, #28]
 801bafa:	601a      	str	r2, [r3, #0]
    opts += 1;
 801bafc:	69fb      	ldr	r3, [r7, #28]
 801bafe:	3304      	adds	r3, #4
 801bb00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	da02      	bge.n	801bb12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	2200      	movs	r2, #0
 801bb10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801bb12:	68bb      	ldr	r3, [r7, #8]
 801bb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d10c      	bne.n	801bb34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801bb1a:	4b34      	ldr	r3, [pc, #208]	; (801bbec <tcp_output_segment+0x1b4>)
 801bb1c:	681a      	ldr	r2, [r3, #0]
 801bb1e:	68bb      	ldr	r3, [r7, #8]
 801bb20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	68db      	ldr	r3, [r3, #12]
 801bb26:	685b      	ldr	r3, [r3, #4]
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f7f8 fe18 	bl	801475e <lwip_htonl>
 801bb2e:	4602      	mov	r2, r0
 801bb30:	68bb      	ldr	r3, [r7, #8]
 801bb32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	68da      	ldr	r2, [r3, #12]
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	685b      	ldr	r3, [r3, #4]
 801bb3c:	685b      	ldr	r3, [r3, #4]
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801bb42:	68fb      	ldr	r3, [r7, #12]
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	8959      	ldrh	r1, [r3, #10]
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	685b      	ldr	r3, [r3, #4]
 801bb4c:	8b3a      	ldrh	r2, [r7, #24]
 801bb4e:	1a8a      	subs	r2, r1, r2
 801bb50:	b292      	uxth	r2, r2
 801bb52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	685b      	ldr	r3, [r3, #4]
 801bb58:	8919      	ldrh	r1, [r3, #8]
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	685b      	ldr	r3, [r3, #4]
 801bb5e:	8b3a      	ldrh	r2, [r7, #24]
 801bb60:	1a8a      	subs	r2, r1, r2
 801bb62:	b292      	uxth	r2, r2
 801bb64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	685b      	ldr	r3, [r3, #4]
 801bb6a:	68fa      	ldr	r2, [r7, #12]
 801bb6c:	68d2      	ldr	r2, [r2, #12]
 801bb6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	68db      	ldr	r3, [r3, #12]
 801bb74:	2200      	movs	r2, #0
 801bb76:	741a      	strb	r2, [r3, #16]
 801bb78:	2200      	movs	r2, #0
 801bb7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	68db      	ldr	r3, [r3, #12]
 801bb80:	f103 0214 	add.w	r2, r3, #20
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	7a9b      	ldrb	r3, [r3, #10]
 801bb88:	009b      	lsls	r3, r3, #2
 801bb8a:	f003 0304 	and.w	r3, r3, #4
 801bb8e:	4413      	add	r3, r2
 801bb90:	69fa      	ldr	r2, [r7, #28]
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d006      	beq.n	801bba4 <tcp_output_segment+0x16c>
 801bb96:	4b10      	ldr	r3, [pc, #64]	; (801bbd8 <tcp_output_segment+0x1a0>)
 801bb98:	f240 621c 	movw	r2, #1564	; 0x61c
 801bb9c:	4914      	ldr	r1, [pc, #80]	; (801bbf0 <tcp_output_segment+0x1b8>)
 801bb9e:	4810      	ldr	r0, [pc, #64]	; (801bbe0 <tcp_output_segment+0x1a8>)
 801bba0:	f003 fc1c 	bl	801f3dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	6858      	ldr	r0, [r3, #4]
 801bba8:	68b9      	ldr	r1, [r7, #8]
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	1d1c      	adds	r4, r3, #4
 801bbae:	68bb      	ldr	r3, [r7, #8]
 801bbb0:	7add      	ldrb	r5, [r3, #11]
 801bbb2:	68bb      	ldr	r3, [r7, #8]
 801bbb4:	7a9b      	ldrb	r3, [r3, #10]
 801bbb6:	687a      	ldr	r2, [r7, #4]
 801bbb8:	9202      	str	r2, [sp, #8]
 801bbba:	2206      	movs	r2, #6
 801bbbc:	9201      	str	r2, [sp, #4]
 801bbbe:	9300      	str	r3, [sp, #0]
 801bbc0:	462b      	mov	r3, r5
 801bbc2:	4622      	mov	r2, r4
 801bbc4:	f002 fa66 	bl	801e094 <ip4_output_if>
 801bbc8:	4603      	mov	r3, r0
 801bbca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801bbcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	3720      	adds	r7, #32
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bdb0      	pop	{r4, r5, r7, pc}
 801bbd8:	08022ffc 	.word	0x08022ffc
 801bbdc:	080235c0 	.word	0x080235c0
 801bbe0:	08023050 	.word	0x08023050
 801bbe4:	080235e0 	.word	0x080235e0
 801bbe8:	08023600 	.word	0x08023600
 801bbec:	20014bb8 	.word	0x20014bb8
 801bbf0:	08023624 	.word	0x08023624

0801bbf4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801bbf4:	b5b0      	push	{r4, r5, r7, lr}
 801bbf6:	b084      	sub	sp, #16
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d106      	bne.n	801bc10 <tcp_rexmit_rto_prepare+0x1c>
 801bc02:	4b31      	ldr	r3, [pc, #196]	; (801bcc8 <tcp_rexmit_rto_prepare+0xd4>)
 801bc04:	f240 6263 	movw	r2, #1635	; 0x663
 801bc08:	4930      	ldr	r1, [pc, #192]	; (801bccc <tcp_rexmit_rto_prepare+0xd8>)
 801bc0a:	4831      	ldr	r0, [pc, #196]	; (801bcd0 <tcp_rexmit_rto_prepare+0xdc>)
 801bc0c:	f003 fbe6 	bl	801f3dc <iprintf>

  if (pcb->unacked == NULL) {
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d102      	bne.n	801bc1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801bc18:	f06f 0305 	mvn.w	r3, #5
 801bc1c:	e050      	b.n	801bcc0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc22:	60fb      	str	r3, [r7, #12]
 801bc24:	e00b      	b.n	801bc3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801bc26:	68f8      	ldr	r0, [r7, #12]
 801bc28:	f7ff fee6 	bl	801b9f8 <tcp_output_segment_busy>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d002      	beq.n	801bc38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801bc32:	f06f 0305 	mvn.w	r3, #5
 801bc36:	e043      	b.n	801bcc0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	60fb      	str	r3, [r7, #12]
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d1ef      	bne.n	801bc26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801bc46:	68f8      	ldr	r0, [r7, #12]
 801bc48:	f7ff fed6 	bl	801b9f8 <tcp_output_segment_busy>
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d002      	beq.n	801bc58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801bc52:	f06f 0305 	mvn.w	r3, #5
 801bc56:	e033      	b.n	801bcc0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	8b5b      	ldrh	r3, [r3, #26]
 801bc72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bc76:	b29a      	uxth	r2, r3
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	68db      	ldr	r3, [r3, #12]
 801bc80:	685b      	ldr	r3, [r3, #4]
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7f8 fd6b 	bl	801475e <lwip_htonl>
 801bc88:	4604      	mov	r4, r0
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	891b      	ldrh	r3, [r3, #8]
 801bc8e:	461d      	mov	r5, r3
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	68db      	ldr	r3, [r3, #12]
 801bc94:	899b      	ldrh	r3, [r3, #12]
 801bc96:	b29b      	uxth	r3, r3
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f7f8 fd4b 	bl	8014734 <lwip_htons>
 801bc9e:	4603      	mov	r3, r0
 801bca0:	b2db      	uxtb	r3, r3
 801bca2:	f003 0303 	and.w	r3, r3, #3
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d001      	beq.n	801bcae <tcp_rexmit_rto_prepare+0xba>
 801bcaa:	2301      	movs	r3, #1
 801bcac:	e000      	b.n	801bcb0 <tcp_rexmit_rto_prepare+0xbc>
 801bcae:	2300      	movs	r3, #0
 801bcb0:	442b      	add	r3, r5
 801bcb2:	18e2      	adds	r2, r4, r3
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	2200      	movs	r2, #0
 801bcbc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801bcbe:	2300      	movs	r3, #0
}
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	3710      	adds	r7, #16
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	bdb0      	pop	{r4, r5, r7, pc}
 801bcc8:	08022ffc 	.word	0x08022ffc
 801bccc:	08023638 	.word	0x08023638
 801bcd0:	08023050 	.word	0x08023050

0801bcd4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b082      	sub	sp, #8
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d106      	bne.n	801bcf0 <tcp_rexmit_rto_commit+0x1c>
 801bce2:	4b0d      	ldr	r3, [pc, #52]	; (801bd18 <tcp_rexmit_rto_commit+0x44>)
 801bce4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bce8:	490c      	ldr	r1, [pc, #48]	; (801bd1c <tcp_rexmit_rto_commit+0x48>)
 801bcea:	480d      	ldr	r0, [pc, #52]	; (801bd20 <tcp_rexmit_rto_commit+0x4c>)
 801bcec:	f003 fb76 	bl	801f3dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bcf6:	2bff      	cmp	r3, #255	; 0xff
 801bcf8:	d007      	beq.n	801bd0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bd00:	3301      	adds	r3, #1
 801bd02:	b2da      	uxtb	r2, r3
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801bd0a:	6878      	ldr	r0, [r7, #4]
 801bd0c:	f7ff fc80 	bl	801b610 <tcp_output>
}
 801bd10:	bf00      	nop
 801bd12:	3708      	adds	r7, #8
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	08022ffc 	.word	0x08022ffc
 801bd1c:	0802365c 	.word	0x0802365c
 801bd20:	08023050 	.word	0x08023050

0801bd24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b082      	sub	sp, #8
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d106      	bne.n	801bd40 <tcp_rexmit_rto+0x1c>
 801bd32:	4b0a      	ldr	r3, [pc, #40]	; (801bd5c <tcp_rexmit_rto+0x38>)
 801bd34:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801bd38:	4909      	ldr	r1, [pc, #36]	; (801bd60 <tcp_rexmit_rto+0x3c>)
 801bd3a:	480a      	ldr	r0, [pc, #40]	; (801bd64 <tcp_rexmit_rto+0x40>)
 801bd3c:	f003 fb4e 	bl	801f3dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801bd40:	6878      	ldr	r0, [r7, #4]
 801bd42:	f7ff ff57 	bl	801bbf4 <tcp_rexmit_rto_prepare>
 801bd46:	4603      	mov	r3, r0
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d102      	bne.n	801bd52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801bd4c:	6878      	ldr	r0, [r7, #4]
 801bd4e:	f7ff ffc1 	bl	801bcd4 <tcp_rexmit_rto_commit>
  }
}
 801bd52:	bf00      	nop
 801bd54:	3708      	adds	r7, #8
 801bd56:	46bd      	mov	sp, r7
 801bd58:	bd80      	pop	{r7, pc}
 801bd5a:	bf00      	nop
 801bd5c:	08022ffc 	.word	0x08022ffc
 801bd60:	08023680 	.word	0x08023680
 801bd64:	08023050 	.word	0x08023050

0801bd68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801bd68:	b590      	push	{r4, r7, lr}
 801bd6a:	b085      	sub	sp, #20
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d106      	bne.n	801bd84 <tcp_rexmit+0x1c>
 801bd76:	4b2f      	ldr	r3, [pc, #188]	; (801be34 <tcp_rexmit+0xcc>)
 801bd78:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801bd7c:	492e      	ldr	r1, [pc, #184]	; (801be38 <tcp_rexmit+0xd0>)
 801bd7e:	482f      	ldr	r0, [pc, #188]	; (801be3c <tcp_rexmit+0xd4>)
 801bd80:	f003 fb2c 	bl	801f3dc <iprintf>

  if (pcb->unacked == NULL) {
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d102      	bne.n	801bd92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801bd8c:	f06f 0305 	mvn.w	r3, #5
 801bd90:	e04c      	b.n	801be2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801bd98:	68b8      	ldr	r0, [r7, #8]
 801bd9a:	f7ff fe2d 	bl	801b9f8 <tcp_output_segment_busy>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d002      	beq.n	801bdaa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801bda4:	f06f 0305 	mvn.w	r3, #5
 801bda8:	e040      	b.n	801be2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801bdaa:	68bb      	ldr	r3, [r7, #8]
 801bdac:	681a      	ldr	r2, [r3, #0]
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	336c      	adds	r3, #108	; 0x6c
 801bdb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bdb8:	e002      	b.n	801bdc0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d011      	beq.n	801bdec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	68db      	ldr	r3, [r3, #12]
 801bdce:	685b      	ldr	r3, [r3, #4]
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7f8 fcc4 	bl	801475e <lwip_htonl>
 801bdd6:	4604      	mov	r4, r0
 801bdd8:	68bb      	ldr	r3, [r7, #8]
 801bdda:	68db      	ldr	r3, [r3, #12]
 801bddc:	685b      	ldr	r3, [r3, #4]
 801bdde:	4618      	mov	r0, r3
 801bde0:	f7f8 fcbd 	bl	801475e <lwip_htonl>
 801bde4:	4603      	mov	r3, r0
 801bde6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	dbe6      	blt.n	801bdba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	681a      	ldr	r2, [r3, #0]
 801bdf0:	68bb      	ldr	r3, [r7, #8]
 801bdf2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	68ba      	ldr	r2, [r7, #8]
 801bdf8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d103      	bne.n	801be0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	2200      	movs	r2, #0
 801be06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801be10:	2bff      	cmp	r3, #255	; 0xff
 801be12:	d007      	beq.n	801be24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801be1a:	3301      	adds	r3, #1
 801be1c:	b2da      	uxtb	r2, r3
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	2200      	movs	r2, #0
 801be28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801be2a:	2300      	movs	r3, #0
}
 801be2c:	4618      	mov	r0, r3
 801be2e:	3714      	adds	r7, #20
 801be30:	46bd      	mov	sp, r7
 801be32:	bd90      	pop	{r4, r7, pc}
 801be34:	08022ffc 	.word	0x08022ffc
 801be38:	0802369c 	.word	0x0802369c
 801be3c:	08023050 	.word	0x08023050

0801be40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b082      	sub	sp, #8
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d106      	bne.n	801be5c <tcp_rexmit_fast+0x1c>
 801be4e:	4b2a      	ldr	r3, [pc, #168]	; (801bef8 <tcp_rexmit_fast+0xb8>)
 801be50:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801be54:	4929      	ldr	r1, [pc, #164]	; (801befc <tcp_rexmit_fast+0xbc>)
 801be56:	482a      	ldr	r0, [pc, #168]	; (801bf00 <tcp_rexmit_fast+0xc0>)
 801be58:	f003 fac0 	bl	801f3dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be60:	2b00      	cmp	r3, #0
 801be62:	d044      	beq.n	801beee <tcp_rexmit_fast+0xae>
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	8b5b      	ldrh	r3, [r3, #26]
 801be68:	f003 0304 	and.w	r3, r3, #4
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d13e      	bne.n	801beee <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801be70:	6878      	ldr	r0, [r7, #4]
 801be72:	f7ff ff79 	bl	801bd68 <tcp_rexmit>
 801be76:	4603      	mov	r3, r0
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d138      	bne.n	801beee <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801be88:	4293      	cmp	r3, r2
 801be8a:	bf28      	it	cs
 801be8c:	4613      	movcs	r3, r2
 801be8e:	b29b      	uxth	r3, r3
 801be90:	0fda      	lsrs	r2, r3, #31
 801be92:	4413      	add	r3, r2
 801be94:	105b      	asrs	r3, r3, #1
 801be96:	b29a      	uxth	r2, r3
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801bea4:	461a      	mov	r2, r3
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801beaa:	005b      	lsls	r3, r3, #1
 801beac:	429a      	cmp	r2, r3
 801beae:	d206      	bcs.n	801bebe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801beb4:	005b      	lsls	r3, r3, #1
 801beb6:	b29a      	uxth	r2, r3
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bec8:	4619      	mov	r1, r3
 801beca:	0049      	lsls	r1, r1, #1
 801becc:	440b      	add	r3, r1
 801bece:	b29b      	uxth	r3, r3
 801bed0:	4413      	add	r3, r2
 801bed2:	b29a      	uxth	r2, r3
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	8b5b      	ldrh	r3, [r3, #26]
 801bede:	f043 0304 	orr.w	r3, r3, #4
 801bee2:	b29a      	uxth	r2, r3
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	2200      	movs	r2, #0
 801beec:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801beee:	bf00      	nop
 801bef0:	3708      	adds	r7, #8
 801bef2:	46bd      	mov	sp, r7
 801bef4:	bd80      	pop	{r7, pc}
 801bef6:	bf00      	nop
 801bef8:	08022ffc 	.word	0x08022ffc
 801befc:	080236b4 	.word	0x080236b4
 801bf00:	08023050 	.word	0x08023050

0801bf04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b086      	sub	sp, #24
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	60f8      	str	r0, [r7, #12]
 801bf0c:	607b      	str	r3, [r7, #4]
 801bf0e:	460b      	mov	r3, r1
 801bf10:	817b      	strh	r3, [r7, #10]
 801bf12:	4613      	mov	r3, r2
 801bf14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bf16:	897a      	ldrh	r2, [r7, #10]
 801bf18:	893b      	ldrh	r3, [r7, #8]
 801bf1a:	4413      	add	r3, r2
 801bf1c:	b29b      	uxth	r3, r3
 801bf1e:	3314      	adds	r3, #20
 801bf20:	b29b      	uxth	r3, r3
 801bf22:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bf26:	4619      	mov	r1, r3
 801bf28:	2022      	movs	r0, #34	; 0x22
 801bf2a:	f7f9 fd01 	bl	8015930 <pbuf_alloc>
 801bf2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801bf30:	697b      	ldr	r3, [r7, #20]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d04d      	beq.n	801bfd2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bf36:	897b      	ldrh	r3, [r7, #10]
 801bf38:	3313      	adds	r3, #19
 801bf3a:	697a      	ldr	r2, [r7, #20]
 801bf3c:	8952      	ldrh	r2, [r2, #10]
 801bf3e:	4293      	cmp	r3, r2
 801bf40:	db06      	blt.n	801bf50 <tcp_output_alloc_header_common+0x4c>
 801bf42:	4b26      	ldr	r3, [pc, #152]	; (801bfdc <tcp_output_alloc_header_common+0xd8>)
 801bf44:	f240 7223 	movw	r2, #1827	; 0x723
 801bf48:	4925      	ldr	r1, [pc, #148]	; (801bfe0 <tcp_output_alloc_header_common+0xdc>)
 801bf4a:	4826      	ldr	r0, [pc, #152]	; (801bfe4 <tcp_output_alloc_header_common+0xe0>)
 801bf4c:	f003 fa46 	bl	801f3dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801bf50:	697b      	ldr	r3, [r7, #20]
 801bf52:	685b      	ldr	r3, [r3, #4]
 801bf54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bf56:	8c3b      	ldrh	r3, [r7, #32]
 801bf58:	4618      	mov	r0, r3
 801bf5a:	f7f8 fbeb 	bl	8014734 <lwip_htons>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	461a      	mov	r2, r3
 801bf62:	693b      	ldr	r3, [r7, #16]
 801bf64:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bf66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bf68:	4618      	mov	r0, r3
 801bf6a:	f7f8 fbe3 	bl	8014734 <lwip_htons>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	461a      	mov	r2, r3
 801bf72:	693b      	ldr	r3, [r7, #16]
 801bf74:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801bf76:	693b      	ldr	r3, [r7, #16]
 801bf78:	687a      	ldr	r2, [r7, #4]
 801bf7a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bf7c:	68f8      	ldr	r0, [r7, #12]
 801bf7e:	f7f8 fbee 	bl	801475e <lwip_htonl>
 801bf82:	4602      	mov	r2, r0
 801bf84:	693b      	ldr	r3, [r7, #16]
 801bf86:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bf88:	897b      	ldrh	r3, [r7, #10]
 801bf8a:	089b      	lsrs	r3, r3, #2
 801bf8c:	b29b      	uxth	r3, r3
 801bf8e:	3305      	adds	r3, #5
 801bf90:	b29b      	uxth	r3, r3
 801bf92:	031b      	lsls	r3, r3, #12
 801bf94:	b29a      	uxth	r2, r3
 801bf96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bf9a:	b29b      	uxth	r3, r3
 801bf9c:	4313      	orrs	r3, r2
 801bf9e:	b29b      	uxth	r3, r3
 801bfa0:	4618      	mov	r0, r3
 801bfa2:	f7f8 fbc7 	bl	8014734 <lwip_htons>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	461a      	mov	r2, r3
 801bfaa:	693b      	ldr	r3, [r7, #16]
 801bfac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bfae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7f8 fbbf 	bl	8014734 <lwip_htons>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	461a      	mov	r2, r3
 801bfba:	693b      	ldr	r3, [r7, #16]
 801bfbc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bfbe:	693b      	ldr	r3, [r7, #16]
 801bfc0:	2200      	movs	r2, #0
 801bfc2:	741a      	strb	r2, [r3, #16]
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bfc8:	693b      	ldr	r3, [r7, #16]
 801bfca:	2200      	movs	r2, #0
 801bfcc:	749a      	strb	r2, [r3, #18]
 801bfce:	2200      	movs	r2, #0
 801bfd0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bfd2:	697b      	ldr	r3, [r7, #20]
}
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	3718      	adds	r7, #24
 801bfd8:	46bd      	mov	sp, r7
 801bfda:	bd80      	pop	{r7, pc}
 801bfdc:	08022ffc 	.word	0x08022ffc
 801bfe0:	080236d4 	.word	0x080236d4
 801bfe4:	08023050 	.word	0x08023050

0801bfe8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bfe8:	b5b0      	push	{r4, r5, r7, lr}
 801bfea:	b08a      	sub	sp, #40	; 0x28
 801bfec:	af04      	add	r7, sp, #16
 801bfee:	60f8      	str	r0, [r7, #12]
 801bff0:	607b      	str	r3, [r7, #4]
 801bff2:	460b      	mov	r3, r1
 801bff4:	817b      	strh	r3, [r7, #10]
 801bff6:	4613      	mov	r3, r2
 801bff8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d106      	bne.n	801c00e <tcp_output_alloc_header+0x26>
 801c000:	4b15      	ldr	r3, [pc, #84]	; (801c058 <tcp_output_alloc_header+0x70>)
 801c002:	f240 7242 	movw	r2, #1858	; 0x742
 801c006:	4915      	ldr	r1, [pc, #84]	; (801c05c <tcp_output_alloc_header+0x74>)
 801c008:	4815      	ldr	r0, [pc, #84]	; (801c060 <tcp_output_alloc_header+0x78>)
 801c00a:	f003 f9e7 	bl	801f3dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	8adb      	ldrh	r3, [r3, #22]
 801c016:	68fa      	ldr	r2, [r7, #12]
 801c018:	8b12      	ldrh	r2, [r2, #24]
 801c01a:	68f9      	ldr	r1, [r7, #12]
 801c01c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801c01e:	893d      	ldrh	r5, [r7, #8]
 801c020:	897c      	ldrh	r4, [r7, #10]
 801c022:	9103      	str	r1, [sp, #12]
 801c024:	2110      	movs	r1, #16
 801c026:	9102      	str	r1, [sp, #8]
 801c028:	9201      	str	r2, [sp, #4]
 801c02a:	9300      	str	r3, [sp, #0]
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	462a      	mov	r2, r5
 801c030:	4621      	mov	r1, r4
 801c032:	f7ff ff67 	bl	801bf04 <tcp_output_alloc_header_common>
 801c036:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d006      	beq.n	801c04c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c042:	68fa      	ldr	r2, [r7, #12]
 801c044:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c046:	441a      	add	r2, r3
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801c04c:	697b      	ldr	r3, [r7, #20]
}
 801c04e:	4618      	mov	r0, r3
 801c050:	3718      	adds	r7, #24
 801c052:	46bd      	mov	sp, r7
 801c054:	bdb0      	pop	{r4, r5, r7, pc}
 801c056:	bf00      	nop
 801c058:	08022ffc 	.word	0x08022ffc
 801c05c:	08023704 	.word	0x08023704
 801c060:	08023050 	.word	0x08023050

0801c064 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b088      	sub	sp, #32
 801c068:	af00      	add	r7, sp, #0
 801c06a:	60f8      	str	r0, [r7, #12]
 801c06c:	60b9      	str	r1, [r7, #8]
 801c06e:	4611      	mov	r1, r2
 801c070:	461a      	mov	r2, r3
 801c072:	460b      	mov	r3, r1
 801c074:	71fb      	strb	r3, [r7, #7]
 801c076:	4613      	mov	r3, r2
 801c078:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801c07a:	2300      	movs	r3, #0
 801c07c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c07e:	68bb      	ldr	r3, [r7, #8]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d106      	bne.n	801c092 <tcp_output_fill_options+0x2e>
 801c084:	4b13      	ldr	r3, [pc, #76]	; (801c0d4 <tcp_output_fill_options+0x70>)
 801c086:	f240 7256 	movw	r2, #1878	; 0x756
 801c08a:	4913      	ldr	r1, [pc, #76]	; (801c0d8 <tcp_output_fill_options+0x74>)
 801c08c:	4813      	ldr	r0, [pc, #76]	; (801c0dc <tcp_output_fill_options+0x78>)
 801c08e:	f003 f9a5 	bl	801f3dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c092:	68bb      	ldr	r3, [r7, #8]
 801c094:	685b      	ldr	r3, [r3, #4]
 801c096:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c098:	69bb      	ldr	r3, [r7, #24]
 801c09a:	3314      	adds	r3, #20
 801c09c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c09e:	69bb      	ldr	r3, [r7, #24]
 801c0a0:	f103 0214 	add.w	r2, r3, #20
 801c0a4:	8bfb      	ldrh	r3, [r7, #30]
 801c0a6:	009b      	lsls	r3, r3, #2
 801c0a8:	4619      	mov	r1, r3
 801c0aa:	79fb      	ldrb	r3, [r7, #7]
 801c0ac:	009b      	lsls	r3, r3, #2
 801c0ae:	f003 0304 	and.w	r3, r3, #4
 801c0b2:	440b      	add	r3, r1
 801c0b4:	4413      	add	r3, r2
 801c0b6:	697a      	ldr	r2, [r7, #20]
 801c0b8:	429a      	cmp	r2, r3
 801c0ba:	d006      	beq.n	801c0ca <tcp_output_fill_options+0x66>
 801c0bc:	4b05      	ldr	r3, [pc, #20]	; (801c0d4 <tcp_output_fill_options+0x70>)
 801c0be:	f240 7275 	movw	r2, #1909	; 0x775
 801c0c2:	4907      	ldr	r1, [pc, #28]	; (801c0e0 <tcp_output_fill_options+0x7c>)
 801c0c4:	4805      	ldr	r0, [pc, #20]	; (801c0dc <tcp_output_fill_options+0x78>)
 801c0c6:	f003 f989 	bl	801f3dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c0ca:	bf00      	nop
 801c0cc:	3720      	adds	r7, #32
 801c0ce:	46bd      	mov	sp, r7
 801c0d0:	bd80      	pop	{r7, pc}
 801c0d2:	bf00      	nop
 801c0d4:	08022ffc 	.word	0x08022ffc
 801c0d8:	0802372c 	.word	0x0802372c
 801c0dc:	08023050 	.word	0x08023050
 801c0e0:	08023624 	.word	0x08023624

0801c0e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b08a      	sub	sp, #40	; 0x28
 801c0e8:	af04      	add	r7, sp, #16
 801c0ea:	60f8      	str	r0, [r7, #12]
 801c0ec:	60b9      	str	r1, [r7, #8]
 801c0ee:	607a      	str	r2, [r7, #4]
 801c0f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d106      	bne.n	801c106 <tcp_output_control_segment+0x22>
 801c0f8:	4b1c      	ldr	r3, [pc, #112]	; (801c16c <tcp_output_control_segment+0x88>)
 801c0fa:	f240 7287 	movw	r2, #1927	; 0x787
 801c0fe:	491c      	ldr	r1, [pc, #112]	; (801c170 <tcp_output_control_segment+0x8c>)
 801c100:	481c      	ldr	r0, [pc, #112]	; (801c174 <tcp_output_control_segment+0x90>)
 801c102:	f003 f96b 	bl	801f3dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c106:	683a      	ldr	r2, [r7, #0]
 801c108:	6879      	ldr	r1, [r7, #4]
 801c10a:	68f8      	ldr	r0, [r7, #12]
 801c10c:	f7fe fae8 	bl	801a6e0 <tcp_route>
 801c110:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c112:	693b      	ldr	r3, [r7, #16]
 801c114:	2b00      	cmp	r3, #0
 801c116:	d102      	bne.n	801c11e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c118:	23fc      	movs	r3, #252	; 0xfc
 801c11a:	75fb      	strb	r3, [r7, #23]
 801c11c:	e01c      	b.n	801c158 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d006      	beq.n	801c132 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	7adb      	ldrb	r3, [r3, #11]
 801c128:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	7a9b      	ldrb	r3, [r3, #10]
 801c12e:	757b      	strb	r3, [r7, #21]
 801c130:	e003      	b.n	801c13a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c132:	23ff      	movs	r3, #255	; 0xff
 801c134:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c136:	2300      	movs	r3, #0
 801c138:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c13a:	7dba      	ldrb	r2, [r7, #22]
 801c13c:	693b      	ldr	r3, [r7, #16]
 801c13e:	9302      	str	r3, [sp, #8]
 801c140:	2306      	movs	r3, #6
 801c142:	9301      	str	r3, [sp, #4]
 801c144:	7d7b      	ldrb	r3, [r7, #21]
 801c146:	9300      	str	r3, [sp, #0]
 801c148:	4613      	mov	r3, r2
 801c14a:	683a      	ldr	r2, [r7, #0]
 801c14c:	6879      	ldr	r1, [r7, #4]
 801c14e:	68b8      	ldr	r0, [r7, #8]
 801c150:	f001 ffa0 	bl	801e094 <ip4_output_if>
 801c154:	4603      	mov	r3, r0
 801c156:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c158:	68b8      	ldr	r0, [r7, #8]
 801c15a:	f7f9 fedf 	bl	8015f1c <pbuf_free>
  return err;
 801c15e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c162:	4618      	mov	r0, r3
 801c164:	3718      	adds	r7, #24
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}
 801c16a:	bf00      	nop
 801c16c:	08022ffc 	.word	0x08022ffc
 801c170:	08023754 	.word	0x08023754
 801c174:	08023050 	.word	0x08023050

0801c178 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c178:	b590      	push	{r4, r7, lr}
 801c17a:	b08b      	sub	sp, #44	; 0x2c
 801c17c:	af04      	add	r7, sp, #16
 801c17e:	60f8      	str	r0, [r7, #12]
 801c180:	60b9      	str	r1, [r7, #8]
 801c182:	607a      	str	r2, [r7, #4]
 801c184:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d106      	bne.n	801c19a <tcp_rst+0x22>
 801c18c:	4b1f      	ldr	r3, [pc, #124]	; (801c20c <tcp_rst+0x94>)
 801c18e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c192:	491f      	ldr	r1, [pc, #124]	; (801c210 <tcp_rst+0x98>)
 801c194:	481f      	ldr	r0, [pc, #124]	; (801c214 <tcp_rst+0x9c>)
 801c196:	f003 f921 	bl	801f3dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d106      	bne.n	801c1ae <tcp_rst+0x36>
 801c1a0:	4b1a      	ldr	r3, [pc, #104]	; (801c20c <tcp_rst+0x94>)
 801c1a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c1a6:	491c      	ldr	r1, [pc, #112]	; (801c218 <tcp_rst+0xa0>)
 801c1a8:	481a      	ldr	r0, [pc, #104]	; (801c214 <tcp_rst+0x9c>)
 801c1aa:	f003 f917 	bl	801f3dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c1b2:	f246 0308 	movw	r3, #24584	; 0x6008
 801c1b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c1b8:	7dfb      	ldrb	r3, [r7, #23]
 801c1ba:	b29c      	uxth	r4, r3
 801c1bc:	68b8      	ldr	r0, [r7, #8]
 801c1be:	f7f8 face 	bl	801475e <lwip_htonl>
 801c1c2:	4602      	mov	r2, r0
 801c1c4:	8abb      	ldrh	r3, [r7, #20]
 801c1c6:	9303      	str	r3, [sp, #12]
 801c1c8:	2314      	movs	r3, #20
 801c1ca:	9302      	str	r3, [sp, #8]
 801c1cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c1ce:	9301      	str	r3, [sp, #4]
 801c1d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c1d2:	9300      	str	r3, [sp, #0]
 801c1d4:	4613      	mov	r3, r2
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	4621      	mov	r1, r4
 801c1da:	6878      	ldr	r0, [r7, #4]
 801c1dc:	f7ff fe92 	bl	801bf04 <tcp_output_alloc_header_common>
 801c1e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c1e2:	693b      	ldr	r3, [r7, #16]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d00c      	beq.n	801c202 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c1e8:	7dfb      	ldrb	r3, [r7, #23]
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	6939      	ldr	r1, [r7, #16]
 801c1ee:	68f8      	ldr	r0, [r7, #12]
 801c1f0:	f7ff ff38 	bl	801c064 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1f6:	683a      	ldr	r2, [r7, #0]
 801c1f8:	6939      	ldr	r1, [r7, #16]
 801c1fa:	68f8      	ldr	r0, [r7, #12]
 801c1fc:	f7ff ff72 	bl	801c0e4 <tcp_output_control_segment>
 801c200:	e000      	b.n	801c204 <tcp_rst+0x8c>
    return;
 801c202:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c204:	371c      	adds	r7, #28
 801c206:	46bd      	mov	sp, r7
 801c208:	bd90      	pop	{r4, r7, pc}
 801c20a:	bf00      	nop
 801c20c:	08022ffc 	.word	0x08022ffc
 801c210:	08023780 	.word	0x08023780
 801c214:	08023050 	.word	0x08023050
 801c218:	0802379c 	.word	0x0802379c

0801c21c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c21c:	b590      	push	{r4, r7, lr}
 801c21e:	b087      	sub	sp, #28
 801c220:	af00      	add	r7, sp, #0
 801c222:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c224:	2300      	movs	r3, #0
 801c226:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c228:	2300      	movs	r3, #0
 801c22a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d106      	bne.n	801c240 <tcp_send_empty_ack+0x24>
 801c232:	4b28      	ldr	r3, [pc, #160]	; (801c2d4 <tcp_send_empty_ack+0xb8>)
 801c234:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c238:	4927      	ldr	r1, [pc, #156]	; (801c2d8 <tcp_send_empty_ack+0xbc>)
 801c23a:	4828      	ldr	r0, [pc, #160]	; (801c2dc <tcp_send_empty_ack+0xc0>)
 801c23c:	f003 f8ce 	bl	801f3dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c240:	7dfb      	ldrb	r3, [r7, #23]
 801c242:	009b      	lsls	r3, r3, #2
 801c244:	b2db      	uxtb	r3, r3
 801c246:	f003 0304 	and.w	r3, r3, #4
 801c24a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c24c:	7d7b      	ldrb	r3, [r7, #21]
 801c24e:	b29c      	uxth	r4, r3
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c254:	4618      	mov	r0, r3
 801c256:	f7f8 fa82 	bl	801475e <lwip_htonl>
 801c25a:	4603      	mov	r3, r0
 801c25c:	2200      	movs	r2, #0
 801c25e:	4621      	mov	r1, r4
 801c260:	6878      	ldr	r0, [r7, #4]
 801c262:	f7ff fec1 	bl	801bfe8 <tcp_output_alloc_header>
 801c266:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c268:	693b      	ldr	r3, [r7, #16]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d109      	bne.n	801c282 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	8b5b      	ldrh	r3, [r3, #26]
 801c272:	f043 0303 	orr.w	r3, r3, #3
 801c276:	b29a      	uxth	r2, r3
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c27c:	f06f 0301 	mvn.w	r3, #1
 801c280:	e023      	b.n	801c2ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c282:	7dbb      	ldrb	r3, [r7, #22]
 801c284:	7dfa      	ldrb	r2, [r7, #23]
 801c286:	6939      	ldr	r1, [r7, #16]
 801c288:	6878      	ldr	r0, [r7, #4]
 801c28a:	f7ff feeb 	bl	801c064 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c28e:	687a      	ldr	r2, [r7, #4]
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	3304      	adds	r3, #4
 801c294:	6939      	ldr	r1, [r7, #16]
 801c296:	6878      	ldr	r0, [r7, #4]
 801c298:	f7ff ff24 	bl	801c0e4 <tcp_output_control_segment>
 801c29c:	4603      	mov	r3, r0
 801c29e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d007      	beq.n	801c2b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	8b5b      	ldrh	r3, [r3, #26]
 801c2ac:	f043 0303 	orr.w	r3, r3, #3
 801c2b0:	b29a      	uxth	r2, r3
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	835a      	strh	r2, [r3, #26]
 801c2b6:	e006      	b.n	801c2c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	8b5b      	ldrh	r3, [r3, #26]
 801c2bc:	f023 0303 	bic.w	r3, r3, #3
 801c2c0:	b29a      	uxth	r2, r3
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	371c      	adds	r7, #28
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bd90      	pop	{r4, r7, pc}
 801c2d2:	bf00      	nop
 801c2d4:	08022ffc 	.word	0x08022ffc
 801c2d8:	080237b8 	.word	0x080237b8
 801c2dc:	08023050 	.word	0x08023050

0801c2e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c2e0:	b590      	push	{r4, r7, lr}
 801c2e2:	b087      	sub	sp, #28
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c2e8:	2300      	movs	r3, #0
 801c2ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d106      	bne.n	801c300 <tcp_keepalive+0x20>
 801c2f2:	4b18      	ldr	r3, [pc, #96]	; (801c354 <tcp_keepalive+0x74>)
 801c2f4:	f640 0224 	movw	r2, #2084	; 0x824
 801c2f8:	4917      	ldr	r1, [pc, #92]	; (801c358 <tcp_keepalive+0x78>)
 801c2fa:	4818      	ldr	r0, [pc, #96]	; (801c35c <tcp_keepalive+0x7c>)
 801c2fc:	f003 f86e 	bl	801f3dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c300:	7dfb      	ldrb	r3, [r7, #23]
 801c302:	b29c      	uxth	r4, r3
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c308:	3b01      	subs	r3, #1
 801c30a:	4618      	mov	r0, r3
 801c30c:	f7f8 fa27 	bl	801475e <lwip_htonl>
 801c310:	4603      	mov	r3, r0
 801c312:	2200      	movs	r2, #0
 801c314:	4621      	mov	r1, r4
 801c316:	6878      	ldr	r0, [r7, #4]
 801c318:	f7ff fe66 	bl	801bfe8 <tcp_output_alloc_header>
 801c31c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c31e:	693b      	ldr	r3, [r7, #16]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d102      	bne.n	801c32a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c324:	f04f 33ff 	mov.w	r3, #4294967295
 801c328:	e010      	b.n	801c34c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c32a:	7dfb      	ldrb	r3, [r7, #23]
 801c32c:	2200      	movs	r2, #0
 801c32e:	6939      	ldr	r1, [r7, #16]
 801c330:	6878      	ldr	r0, [r7, #4]
 801c332:	f7ff fe97 	bl	801c064 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c336:	687a      	ldr	r2, [r7, #4]
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	3304      	adds	r3, #4
 801c33c:	6939      	ldr	r1, [r7, #16]
 801c33e:	6878      	ldr	r0, [r7, #4]
 801c340:	f7ff fed0 	bl	801c0e4 <tcp_output_control_segment>
 801c344:	4603      	mov	r3, r0
 801c346:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c34c:	4618      	mov	r0, r3
 801c34e:	371c      	adds	r7, #28
 801c350:	46bd      	mov	sp, r7
 801c352:	bd90      	pop	{r4, r7, pc}
 801c354:	08022ffc 	.word	0x08022ffc
 801c358:	080237d8 	.word	0x080237d8
 801c35c:	08023050 	.word	0x08023050

0801c360 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c360:	b590      	push	{r4, r7, lr}
 801c362:	b08b      	sub	sp, #44	; 0x2c
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c368:	2300      	movs	r3, #0
 801c36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d106      	bne.n	801c382 <tcp_zero_window_probe+0x22>
 801c374:	4b4c      	ldr	r3, [pc, #304]	; (801c4a8 <tcp_zero_window_probe+0x148>)
 801c376:	f640 024f 	movw	r2, #2127	; 0x84f
 801c37a:	494c      	ldr	r1, [pc, #304]	; (801c4ac <tcp_zero_window_probe+0x14c>)
 801c37c:	484c      	ldr	r0, [pc, #304]	; (801c4b0 <tcp_zero_window_probe+0x150>)
 801c37e:	f003 f82d 	bl	801f3dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c386:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c388:	6a3b      	ldr	r3, [r7, #32]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d101      	bne.n	801c392 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c38e:	2300      	movs	r3, #0
 801c390:	e086      	b.n	801c4a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c398:	2bff      	cmp	r3, #255	; 0xff
 801c39a:	d007      	beq.n	801c3ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c3a2:	3301      	adds	r3, #1
 801c3a4:	b2da      	uxtb	r2, r3
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c3ac:	6a3b      	ldr	r3, [r7, #32]
 801c3ae:	68db      	ldr	r3, [r3, #12]
 801c3b0:	899b      	ldrh	r3, [r3, #12]
 801c3b2:	b29b      	uxth	r3, r3
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	f7f8 f9bd 	bl	8014734 <lwip_htons>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	b2db      	uxtb	r3, r3
 801c3be:	f003 0301 	and.w	r3, r3, #1
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d005      	beq.n	801c3d2 <tcp_zero_window_probe+0x72>
 801c3c6:	6a3b      	ldr	r3, [r7, #32]
 801c3c8:	891b      	ldrh	r3, [r3, #8]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d101      	bne.n	801c3d2 <tcp_zero_window_probe+0x72>
 801c3ce:	2301      	movs	r3, #1
 801c3d0:	e000      	b.n	801c3d4 <tcp_zero_window_probe+0x74>
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c3d6:	7ffb      	ldrb	r3, [r7, #31]
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	bf0c      	ite	eq
 801c3dc:	2301      	moveq	r3, #1
 801c3de:	2300      	movne	r3, #0
 801c3e0:	b2db      	uxtb	r3, r3
 801c3e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3e8:	b299      	uxth	r1, r3
 801c3ea:	6a3b      	ldr	r3, [r7, #32]
 801c3ec:	68db      	ldr	r3, [r3, #12]
 801c3ee:	685b      	ldr	r3, [r3, #4]
 801c3f0:	8bba      	ldrh	r2, [r7, #28]
 801c3f2:	6878      	ldr	r0, [r7, #4]
 801c3f4:	f7ff fdf8 	bl	801bfe8 <tcp_output_alloc_header>
 801c3f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c3fa:	69bb      	ldr	r3, [r7, #24]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d102      	bne.n	801c406 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c400:	f04f 33ff 	mov.w	r3, #4294967295
 801c404:	e04c      	b.n	801c4a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c406:	69bb      	ldr	r3, [r7, #24]
 801c408:	685b      	ldr	r3, [r3, #4]
 801c40a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c40c:	7ffb      	ldrb	r3, [r7, #31]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d011      	beq.n	801c436 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c412:	697b      	ldr	r3, [r7, #20]
 801c414:	899b      	ldrh	r3, [r3, #12]
 801c416:	b29b      	uxth	r3, r3
 801c418:	b21b      	sxth	r3, r3
 801c41a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c41e:	b21c      	sxth	r4, r3
 801c420:	2011      	movs	r0, #17
 801c422:	f7f8 f987 	bl	8014734 <lwip_htons>
 801c426:	4603      	mov	r3, r0
 801c428:	b21b      	sxth	r3, r3
 801c42a:	4323      	orrs	r3, r4
 801c42c:	b21b      	sxth	r3, r3
 801c42e:	b29a      	uxth	r2, r3
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	819a      	strh	r2, [r3, #12]
 801c434:	e010      	b.n	801c458 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c436:	69bb      	ldr	r3, [r7, #24]
 801c438:	685b      	ldr	r3, [r3, #4]
 801c43a:	3314      	adds	r3, #20
 801c43c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c43e:	6a3b      	ldr	r3, [r7, #32]
 801c440:	6858      	ldr	r0, [r3, #4]
 801c442:	6a3b      	ldr	r3, [r7, #32]
 801c444:	685b      	ldr	r3, [r3, #4]
 801c446:	891a      	ldrh	r2, [r3, #8]
 801c448:	6a3b      	ldr	r3, [r7, #32]
 801c44a:	891b      	ldrh	r3, [r3, #8]
 801c44c:	1ad3      	subs	r3, r2, r3
 801c44e:	b29b      	uxth	r3, r3
 801c450:	2201      	movs	r2, #1
 801c452:	6939      	ldr	r1, [r7, #16]
 801c454:	f7f9 ff58 	bl	8016308 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c458:	6a3b      	ldr	r3, [r7, #32]
 801c45a:	68db      	ldr	r3, [r3, #12]
 801c45c:	685b      	ldr	r3, [r3, #4]
 801c45e:	4618      	mov	r0, r3
 801c460:	f7f8 f97d 	bl	801475e <lwip_htonl>
 801c464:	4603      	mov	r3, r0
 801c466:	3301      	adds	r3, #1
 801c468:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	1ad3      	subs	r3, r2, r3
 801c472:	2b00      	cmp	r3, #0
 801c474:	da02      	bge.n	801c47c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	68fa      	ldr	r2, [r7, #12]
 801c47a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c47c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c480:	2200      	movs	r2, #0
 801c482:	69b9      	ldr	r1, [r7, #24]
 801c484:	6878      	ldr	r0, [r7, #4]
 801c486:	f7ff fded 	bl	801c064 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c48a:	687a      	ldr	r2, [r7, #4]
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	3304      	adds	r3, #4
 801c490:	69b9      	ldr	r1, [r7, #24]
 801c492:	6878      	ldr	r0, [r7, #4]
 801c494:	f7ff fe26 	bl	801c0e4 <tcp_output_control_segment>
 801c498:	4603      	mov	r3, r0
 801c49a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c49c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c4a0:	4618      	mov	r0, r3
 801c4a2:	372c      	adds	r7, #44	; 0x2c
 801c4a4:	46bd      	mov	sp, r7
 801c4a6:	bd90      	pop	{r4, r7, pc}
 801c4a8:	08022ffc 	.word	0x08022ffc
 801c4ac:	080237f4 	.word	0x080237f4
 801c4b0:	08023050 	.word	0x08023050

0801c4b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b082      	sub	sp, #8
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c4bc:	f7fa f812 	bl	80164e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c4c0:	4b0a      	ldr	r3, [pc, #40]	; (801c4ec <tcpip_tcp_timer+0x38>)
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d103      	bne.n	801c4d0 <tcpip_tcp_timer+0x1c>
 801c4c8:	4b09      	ldr	r3, [pc, #36]	; (801c4f0 <tcpip_tcp_timer+0x3c>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d005      	beq.n	801c4dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c4d0:	2200      	movs	r2, #0
 801c4d2:	4908      	ldr	r1, [pc, #32]	; (801c4f4 <tcpip_tcp_timer+0x40>)
 801c4d4:	20fa      	movs	r0, #250	; 0xfa
 801c4d6:	f000 f8f3 	bl	801c6c0 <sys_timeout>
 801c4da:	e003      	b.n	801c4e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c4dc:	4b06      	ldr	r3, [pc, #24]	; (801c4f8 <tcpip_tcp_timer+0x44>)
 801c4de:	2200      	movs	r2, #0
 801c4e0:	601a      	str	r2, [r3, #0]
  }
}
 801c4e2:	bf00      	nop
 801c4e4:	bf00      	nop
 801c4e6:	3708      	adds	r7, #8
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bd80      	pop	{r7, pc}
 801c4ec:	20014bb4 	.word	0x20014bb4
 801c4f0:	20014bc4 	.word	0x20014bc4
 801c4f4:	0801c4b5 	.word	0x0801c4b5
 801c4f8:	2000c838 	.word	0x2000c838

0801c4fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c500:	4b0a      	ldr	r3, [pc, #40]	; (801c52c <tcp_timer_needed+0x30>)
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d10f      	bne.n	801c528 <tcp_timer_needed+0x2c>
 801c508:	4b09      	ldr	r3, [pc, #36]	; (801c530 <tcp_timer_needed+0x34>)
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d103      	bne.n	801c518 <tcp_timer_needed+0x1c>
 801c510:	4b08      	ldr	r3, [pc, #32]	; (801c534 <tcp_timer_needed+0x38>)
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d007      	beq.n	801c528 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c518:	4b04      	ldr	r3, [pc, #16]	; (801c52c <tcp_timer_needed+0x30>)
 801c51a:	2201      	movs	r2, #1
 801c51c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c51e:	2200      	movs	r2, #0
 801c520:	4905      	ldr	r1, [pc, #20]	; (801c538 <tcp_timer_needed+0x3c>)
 801c522:	20fa      	movs	r0, #250	; 0xfa
 801c524:	f000 f8cc 	bl	801c6c0 <sys_timeout>
  }
}
 801c528:	bf00      	nop
 801c52a:	bd80      	pop	{r7, pc}
 801c52c:	2000c838 	.word	0x2000c838
 801c530:	20014bb4 	.word	0x20014bb4
 801c534:	20014bc4 	.word	0x20014bc4
 801c538:	0801c4b5 	.word	0x0801c4b5

0801c53c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b086      	sub	sp, #24
 801c540:	af00      	add	r7, sp, #0
 801c542:	60f8      	str	r0, [r7, #12]
 801c544:	60b9      	str	r1, [r7, #8]
 801c546:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c548:	200a      	movs	r0, #10
 801c54a:	f7f8 fddf 	bl	801510c <memp_malloc>
 801c54e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c550:	693b      	ldr	r3, [r7, #16]
 801c552:	2b00      	cmp	r3, #0
 801c554:	d109      	bne.n	801c56a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c556:	693b      	ldr	r3, [r7, #16]
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d151      	bne.n	801c600 <sys_timeout_abs+0xc4>
 801c55c:	4b2a      	ldr	r3, [pc, #168]	; (801c608 <sys_timeout_abs+0xcc>)
 801c55e:	22be      	movs	r2, #190	; 0xbe
 801c560:	492a      	ldr	r1, [pc, #168]	; (801c60c <sys_timeout_abs+0xd0>)
 801c562:	482b      	ldr	r0, [pc, #172]	; (801c610 <sys_timeout_abs+0xd4>)
 801c564:	f002 ff3a 	bl	801f3dc <iprintf>
    return;
 801c568:	e04a      	b.n	801c600 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c56a:	693b      	ldr	r3, [r7, #16]
 801c56c:	2200      	movs	r2, #0
 801c56e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c570:	693b      	ldr	r3, [r7, #16]
 801c572:	68ba      	ldr	r2, [r7, #8]
 801c574:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c576:	693b      	ldr	r3, [r7, #16]
 801c578:	687a      	ldr	r2, [r7, #4]
 801c57a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c57c:	693b      	ldr	r3, [r7, #16]
 801c57e:	68fa      	ldr	r2, [r7, #12]
 801c580:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c582:	4b24      	ldr	r3, [pc, #144]	; (801c614 <sys_timeout_abs+0xd8>)
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	2b00      	cmp	r3, #0
 801c588:	d103      	bne.n	801c592 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c58a:	4a22      	ldr	r2, [pc, #136]	; (801c614 <sys_timeout_abs+0xd8>)
 801c58c:	693b      	ldr	r3, [r7, #16]
 801c58e:	6013      	str	r3, [r2, #0]
    return;
 801c590:	e037      	b.n	801c602 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c592:	693b      	ldr	r3, [r7, #16]
 801c594:	685a      	ldr	r2, [r3, #4]
 801c596:	4b1f      	ldr	r3, [pc, #124]	; (801c614 <sys_timeout_abs+0xd8>)
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	685b      	ldr	r3, [r3, #4]
 801c59c:	1ad3      	subs	r3, r2, r3
 801c59e:	0fdb      	lsrs	r3, r3, #31
 801c5a0:	f003 0301 	and.w	r3, r3, #1
 801c5a4:	b2db      	uxtb	r3, r3
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d007      	beq.n	801c5ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c5aa:	4b1a      	ldr	r3, [pc, #104]	; (801c614 <sys_timeout_abs+0xd8>)
 801c5ac:	681a      	ldr	r2, [r3, #0]
 801c5ae:	693b      	ldr	r3, [r7, #16]
 801c5b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c5b2:	4a18      	ldr	r2, [pc, #96]	; (801c614 <sys_timeout_abs+0xd8>)
 801c5b4:	693b      	ldr	r3, [r7, #16]
 801c5b6:	6013      	str	r3, [r2, #0]
 801c5b8:	e023      	b.n	801c602 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c5ba:	4b16      	ldr	r3, [pc, #88]	; (801c614 <sys_timeout_abs+0xd8>)
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	617b      	str	r3, [r7, #20]
 801c5c0:	e01a      	b.n	801c5f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c5c2:	697b      	ldr	r3, [r7, #20]
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d00b      	beq.n	801c5e2 <sys_timeout_abs+0xa6>
 801c5ca:	693b      	ldr	r3, [r7, #16]
 801c5cc:	685a      	ldr	r2, [r3, #4]
 801c5ce:	697b      	ldr	r3, [r7, #20]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	685b      	ldr	r3, [r3, #4]
 801c5d4:	1ad3      	subs	r3, r2, r3
 801c5d6:	0fdb      	lsrs	r3, r3, #31
 801c5d8:	f003 0301 	and.w	r3, r3, #1
 801c5dc:	b2db      	uxtb	r3, r3
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d007      	beq.n	801c5f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c5e2:	697b      	ldr	r3, [r7, #20]
 801c5e4:	681a      	ldr	r2, [r3, #0]
 801c5e6:	693b      	ldr	r3, [r7, #16]
 801c5e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c5ea:	697b      	ldr	r3, [r7, #20]
 801c5ec:	693a      	ldr	r2, [r7, #16]
 801c5ee:	601a      	str	r2, [r3, #0]
        break;
 801c5f0:	e007      	b.n	801c602 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c5f2:	697b      	ldr	r3, [r7, #20]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	617b      	str	r3, [r7, #20]
 801c5f8:	697b      	ldr	r3, [r7, #20]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d1e1      	bne.n	801c5c2 <sys_timeout_abs+0x86>
 801c5fe:	e000      	b.n	801c602 <sys_timeout_abs+0xc6>
    return;
 801c600:	bf00      	nop
      }
    }
  }
}
 801c602:	3718      	adds	r7, #24
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}
 801c608:	08023818 	.word	0x08023818
 801c60c:	0802384c 	.word	0x0802384c
 801c610:	0802388c 	.word	0x0802388c
 801c614:	2000c830 	.word	0x2000c830

0801c618 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b086      	sub	sp, #24
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c624:	697b      	ldr	r3, [r7, #20]
 801c626:	685b      	ldr	r3, [r3, #4]
 801c628:	4798      	blx	r3

  now = sys_now();
 801c62a:	f7ef fa71 	bl	800bb10 <sys_now>
 801c62e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c630:	697b      	ldr	r3, [r7, #20]
 801c632:	681a      	ldr	r2, [r3, #0]
 801c634:	4b0f      	ldr	r3, [pc, #60]	; (801c674 <lwip_cyclic_timer+0x5c>)
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	4413      	add	r3, r2
 801c63a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c63c:	68fa      	ldr	r2, [r7, #12]
 801c63e:	693b      	ldr	r3, [r7, #16]
 801c640:	1ad3      	subs	r3, r2, r3
 801c642:	0fdb      	lsrs	r3, r3, #31
 801c644:	f003 0301 	and.w	r3, r3, #1
 801c648:	b2db      	uxtb	r3, r3
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d009      	beq.n	801c662 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c64e:	697b      	ldr	r3, [r7, #20]
 801c650:	681a      	ldr	r2, [r3, #0]
 801c652:	693b      	ldr	r3, [r7, #16]
 801c654:	4413      	add	r3, r2
 801c656:	687a      	ldr	r2, [r7, #4]
 801c658:	4907      	ldr	r1, [pc, #28]	; (801c678 <lwip_cyclic_timer+0x60>)
 801c65a:	4618      	mov	r0, r3
 801c65c:	f7ff ff6e 	bl	801c53c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c660:	e004      	b.n	801c66c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c662:	687a      	ldr	r2, [r7, #4]
 801c664:	4904      	ldr	r1, [pc, #16]	; (801c678 <lwip_cyclic_timer+0x60>)
 801c666:	68f8      	ldr	r0, [r7, #12]
 801c668:	f7ff ff68 	bl	801c53c <sys_timeout_abs>
}
 801c66c:	bf00      	nop
 801c66e:	3718      	adds	r7, #24
 801c670:	46bd      	mov	sp, r7
 801c672:	bd80      	pop	{r7, pc}
 801c674:	2000c834 	.word	0x2000c834
 801c678:	0801c619 	.word	0x0801c619

0801c67c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b082      	sub	sp, #8
 801c680:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c682:	2301      	movs	r3, #1
 801c684:	607b      	str	r3, [r7, #4]
 801c686:	e00e      	b.n	801c6a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c688:	4a0b      	ldr	r2, [pc, #44]	; (801c6b8 <sys_timeouts_init+0x3c>)
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	00db      	lsls	r3, r3, #3
 801c694:	4a08      	ldr	r2, [pc, #32]	; (801c6b8 <sys_timeouts_init+0x3c>)
 801c696:	4413      	add	r3, r2
 801c698:	461a      	mov	r2, r3
 801c69a:	4908      	ldr	r1, [pc, #32]	; (801c6bc <sys_timeouts_init+0x40>)
 801c69c:	f000 f810 	bl	801c6c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	3301      	adds	r3, #1
 801c6a4:	607b      	str	r3, [r7, #4]
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	2b02      	cmp	r3, #2
 801c6aa:	d9ed      	bls.n	801c688 <sys_timeouts_init+0xc>
  }
}
 801c6ac:	bf00      	nop
 801c6ae:	bf00      	nop
 801c6b0:	3708      	adds	r7, #8
 801c6b2:	46bd      	mov	sp, r7
 801c6b4:	bd80      	pop	{r7, pc}
 801c6b6:	bf00      	nop
 801c6b8:	0807b150 	.word	0x0807b150
 801c6bc:	0801c619 	.word	0x0801c619

0801c6c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b086      	sub	sp, #24
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	60f8      	str	r0, [r7, #12]
 801c6c8:	60b9      	str	r1, [r7, #8]
 801c6ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c6d2:	d306      	bcc.n	801c6e2 <sys_timeout+0x22>
 801c6d4:	4b0a      	ldr	r3, [pc, #40]	; (801c700 <sys_timeout+0x40>)
 801c6d6:	f240 1229 	movw	r2, #297	; 0x129
 801c6da:	490a      	ldr	r1, [pc, #40]	; (801c704 <sys_timeout+0x44>)
 801c6dc:	480a      	ldr	r0, [pc, #40]	; (801c708 <sys_timeout+0x48>)
 801c6de:	f002 fe7d 	bl	801f3dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c6e2:	f7ef fa15 	bl	800bb10 <sys_now>
 801c6e6:	4602      	mov	r2, r0
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	4413      	add	r3, r2
 801c6ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c6ee:	687a      	ldr	r2, [r7, #4]
 801c6f0:	68b9      	ldr	r1, [r7, #8]
 801c6f2:	6978      	ldr	r0, [r7, #20]
 801c6f4:	f7ff ff22 	bl	801c53c <sys_timeout_abs>
#endif
}
 801c6f8:	bf00      	nop
 801c6fa:	3718      	adds	r7, #24
 801c6fc:	46bd      	mov	sp, r7
 801c6fe:	bd80      	pop	{r7, pc}
 801c700:	08023818 	.word	0x08023818
 801c704:	080238b4 	.word	0x080238b4
 801c708:	0802388c 	.word	0x0802388c

0801c70c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b084      	sub	sp, #16
 801c710:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c712:	f7ef f9fd 	bl	800bb10 <sys_now>
 801c716:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c718:	4b17      	ldr	r3, [pc, #92]	; (801c778 <sys_check_timeouts+0x6c>)
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c71e:	68bb      	ldr	r3, [r7, #8]
 801c720:	2b00      	cmp	r3, #0
 801c722:	d022      	beq.n	801c76a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c724:	68bb      	ldr	r3, [r7, #8]
 801c726:	685b      	ldr	r3, [r3, #4]
 801c728:	68fa      	ldr	r2, [r7, #12]
 801c72a:	1ad3      	subs	r3, r2, r3
 801c72c:	0fdb      	lsrs	r3, r3, #31
 801c72e:	f003 0301 	and.w	r3, r3, #1
 801c732:	b2db      	uxtb	r3, r3
 801c734:	2b00      	cmp	r3, #0
 801c736:	d11a      	bne.n	801c76e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c738:	68bb      	ldr	r3, [r7, #8]
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	4a0e      	ldr	r2, [pc, #56]	; (801c778 <sys_check_timeouts+0x6c>)
 801c73e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c740:	68bb      	ldr	r3, [r7, #8]
 801c742:	689b      	ldr	r3, [r3, #8]
 801c744:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c746:	68bb      	ldr	r3, [r7, #8]
 801c748:	68db      	ldr	r3, [r3, #12]
 801c74a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c74c:	68bb      	ldr	r3, [r7, #8]
 801c74e:	685b      	ldr	r3, [r3, #4]
 801c750:	4a0a      	ldr	r2, [pc, #40]	; (801c77c <sys_check_timeouts+0x70>)
 801c752:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c754:	68b9      	ldr	r1, [r7, #8]
 801c756:	200a      	movs	r0, #10
 801c758:	f7f8 fd2a 	bl	80151b0 <memp_free>
    if (handler != NULL) {
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d0da      	beq.n	801c718 <sys_check_timeouts+0xc>
      handler(arg);
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	6838      	ldr	r0, [r7, #0]
 801c766:	4798      	blx	r3
  do {
 801c768:	e7d6      	b.n	801c718 <sys_check_timeouts+0xc>
      return;
 801c76a:	bf00      	nop
 801c76c:	e000      	b.n	801c770 <sys_check_timeouts+0x64>
      return;
 801c76e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c770:	3710      	adds	r7, #16
 801c772:	46bd      	mov	sp, r7
 801c774:	bd80      	pop	{r7, pc}
 801c776:	bf00      	nop
 801c778:	2000c830 	.word	0x2000c830
 801c77c:	2000c834 	.word	0x2000c834

0801c780 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b082      	sub	sp, #8
 801c784:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c786:	4b16      	ldr	r3, [pc, #88]	; (801c7e0 <sys_timeouts_sleeptime+0x60>)
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d102      	bne.n	801c794 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c78e:	f04f 33ff 	mov.w	r3, #4294967295
 801c792:	e020      	b.n	801c7d6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c794:	f7ef f9bc 	bl	800bb10 <sys_now>
 801c798:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c79a:	4b11      	ldr	r3, [pc, #68]	; (801c7e0 <sys_timeouts_sleeptime+0x60>)
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	685a      	ldr	r2, [r3, #4]
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	1ad3      	subs	r3, r2, r3
 801c7a4:	0fdb      	lsrs	r3, r3, #31
 801c7a6:	f003 0301 	and.w	r3, r3, #1
 801c7aa:	b2db      	uxtb	r3, r3
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d001      	beq.n	801c7b4 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	e010      	b.n	801c7d6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c7b4:	4b0a      	ldr	r3, [pc, #40]	; (801c7e0 <sys_timeouts_sleeptime+0x60>)
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	685a      	ldr	r2, [r3, #4]
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	1ad3      	subs	r3, r2, r3
 801c7be:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c7c0:	683b      	ldr	r3, [r7, #0]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	da06      	bge.n	801c7d4 <sys_timeouts_sleeptime+0x54>
 801c7c6:	4b07      	ldr	r3, [pc, #28]	; (801c7e4 <sys_timeouts_sleeptime+0x64>)
 801c7c8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c7cc:	4906      	ldr	r1, [pc, #24]	; (801c7e8 <sys_timeouts_sleeptime+0x68>)
 801c7ce:	4807      	ldr	r0, [pc, #28]	; (801c7ec <sys_timeouts_sleeptime+0x6c>)
 801c7d0:	f002 fe04 	bl	801f3dc <iprintf>
    return ret;
 801c7d4:	683b      	ldr	r3, [r7, #0]
  }
}
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	3708      	adds	r7, #8
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bd80      	pop	{r7, pc}
 801c7de:	bf00      	nop
 801c7e0:	2000c830 	.word	0x2000c830
 801c7e4:	08023818 	.word	0x08023818
 801c7e8:	080238ec 	.word	0x080238ec
 801c7ec:	0802388c 	.word	0x0802388c

0801c7f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c7f0:	b580      	push	{r7, lr}
 801c7f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c7f4:	f002 fe80 	bl	801f4f8 <rand>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	b29b      	uxth	r3, r3
 801c7fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c800:	b29b      	uxth	r3, r3
 801c802:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c806:	b29a      	uxth	r2, r3
 801c808:	4b01      	ldr	r3, [pc, #4]	; (801c810 <udp_init+0x20>)
 801c80a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c80c:	bf00      	nop
 801c80e:	bd80      	pop	{r7, pc}
 801c810:	2000003c 	.word	0x2000003c

0801c814 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b084      	sub	sp, #16
 801c818:	af00      	add	r7, sp, #0
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	60b9      	str	r1, [r7, #8]
 801c81e:	4613      	mov	r3, r2
 801c820:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	2b00      	cmp	r3, #0
 801c826:	d105      	bne.n	801c834 <udp_input_local_match+0x20>
 801c828:	4b27      	ldr	r3, [pc, #156]	; (801c8c8 <udp_input_local_match+0xb4>)
 801c82a:	2287      	movs	r2, #135	; 0x87
 801c82c:	4927      	ldr	r1, [pc, #156]	; (801c8cc <udp_input_local_match+0xb8>)
 801c82e:	4828      	ldr	r0, [pc, #160]	; (801c8d0 <udp_input_local_match+0xbc>)
 801c830:	f002 fdd4 	bl	801f3dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c834:	68bb      	ldr	r3, [r7, #8]
 801c836:	2b00      	cmp	r3, #0
 801c838:	d105      	bne.n	801c846 <udp_input_local_match+0x32>
 801c83a:	4b23      	ldr	r3, [pc, #140]	; (801c8c8 <udp_input_local_match+0xb4>)
 801c83c:	2288      	movs	r2, #136	; 0x88
 801c83e:	4925      	ldr	r1, [pc, #148]	; (801c8d4 <udp_input_local_match+0xc0>)
 801c840:	4823      	ldr	r0, [pc, #140]	; (801c8d0 <udp_input_local_match+0xbc>)
 801c842:	f002 fdcb 	bl	801f3dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	7a1b      	ldrb	r3, [r3, #8]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d00b      	beq.n	801c866 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	7a1a      	ldrb	r2, [r3, #8]
 801c852:	4b21      	ldr	r3, [pc, #132]	; (801c8d8 <udp_input_local_match+0xc4>)
 801c854:	685b      	ldr	r3, [r3, #4]
 801c856:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c85a:	3301      	adds	r3, #1
 801c85c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c85e:	429a      	cmp	r2, r3
 801c860:	d001      	beq.n	801c866 <udp_input_local_match+0x52>
    return 0;
 801c862:	2300      	movs	r3, #0
 801c864:	e02b      	b.n	801c8be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c866:	79fb      	ldrb	r3, [r7, #7]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d018      	beq.n	801c89e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d013      	beq.n	801c89a <udp_input_local_match+0x86>
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	2b00      	cmp	r3, #0
 801c878:	d00f      	beq.n	801c89a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c87a:	4b17      	ldr	r3, [pc, #92]	; (801c8d8 <udp_input_local_match+0xc4>)
 801c87c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c882:	d00a      	beq.n	801c89a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	681a      	ldr	r2, [r3, #0]
 801c888:	4b13      	ldr	r3, [pc, #76]	; (801c8d8 <udp_input_local_match+0xc4>)
 801c88a:	695b      	ldr	r3, [r3, #20]
 801c88c:	405a      	eors	r2, r3
 801c88e:	68bb      	ldr	r3, [r7, #8]
 801c890:	3308      	adds	r3, #8
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c896:	2b00      	cmp	r3, #0
 801c898:	d110      	bne.n	801c8bc <udp_input_local_match+0xa8>
          return 1;
 801c89a:	2301      	movs	r3, #1
 801c89c:	e00f      	b.n	801c8be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d009      	beq.n	801c8b8 <udp_input_local_match+0xa4>
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d005      	beq.n	801c8b8 <udp_input_local_match+0xa4>
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	681a      	ldr	r2, [r3, #0]
 801c8b0:	4b09      	ldr	r3, [pc, #36]	; (801c8d8 <udp_input_local_match+0xc4>)
 801c8b2:	695b      	ldr	r3, [r3, #20]
 801c8b4:	429a      	cmp	r2, r3
 801c8b6:	d101      	bne.n	801c8bc <udp_input_local_match+0xa8>
        return 1;
 801c8b8:	2301      	movs	r3, #1
 801c8ba:	e000      	b.n	801c8be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c8bc:	2300      	movs	r3, #0
}
 801c8be:	4618      	mov	r0, r3
 801c8c0:	3710      	adds	r7, #16
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	bd80      	pop	{r7, pc}
 801c8c6:	bf00      	nop
 801c8c8:	08023900 	.word	0x08023900
 801c8cc:	08023930 	.word	0x08023930
 801c8d0:	08023954 	.word	0x08023954
 801c8d4:	0802397c 	.word	0x0802397c
 801c8d8:	200114a0 	.word	0x200114a0

0801c8dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c8dc:	b590      	push	{r4, r7, lr}
 801c8de:	b08d      	sub	sp, #52	; 0x34
 801c8e0:	af02      	add	r7, sp, #8
 801c8e2:	6078      	str	r0, [r7, #4]
 801c8e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d105      	bne.n	801c8fc <udp_input+0x20>
 801c8f0:	4b7c      	ldr	r3, [pc, #496]	; (801cae4 <udp_input+0x208>)
 801c8f2:	22cf      	movs	r2, #207	; 0xcf
 801c8f4:	497c      	ldr	r1, [pc, #496]	; (801cae8 <udp_input+0x20c>)
 801c8f6:	487d      	ldr	r0, [pc, #500]	; (801caec <udp_input+0x210>)
 801c8f8:	f002 fd70 	bl	801f3dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d105      	bne.n	801c90e <udp_input+0x32>
 801c902:	4b78      	ldr	r3, [pc, #480]	; (801cae4 <udp_input+0x208>)
 801c904:	22d0      	movs	r2, #208	; 0xd0
 801c906:	497a      	ldr	r1, [pc, #488]	; (801caf0 <udp_input+0x214>)
 801c908:	4878      	ldr	r0, [pc, #480]	; (801caec <udp_input+0x210>)
 801c90a:	f002 fd67 	bl	801f3dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	895b      	ldrh	r3, [r3, #10]
 801c912:	2b07      	cmp	r3, #7
 801c914:	d803      	bhi.n	801c91e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c916:	6878      	ldr	r0, [r7, #4]
 801c918:	f7f9 fb00 	bl	8015f1c <pbuf_free>
    goto end;
 801c91c:	e0de      	b.n	801cadc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	685b      	ldr	r3, [r3, #4]
 801c922:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c924:	4b73      	ldr	r3, [pc, #460]	; (801caf4 <udp_input+0x218>)
 801c926:	695b      	ldr	r3, [r3, #20]
 801c928:	4a72      	ldr	r2, [pc, #456]	; (801caf4 <udp_input+0x218>)
 801c92a:	6812      	ldr	r2, [r2, #0]
 801c92c:	4611      	mov	r1, r2
 801c92e:	4618      	mov	r0, r3
 801c930:	f001 fc88 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801c934:	4603      	mov	r3, r0
 801c936:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c938:	697b      	ldr	r3, [r7, #20]
 801c93a:	881b      	ldrh	r3, [r3, #0]
 801c93c:	b29b      	uxth	r3, r3
 801c93e:	4618      	mov	r0, r3
 801c940:	f7f7 fef8 	bl	8014734 <lwip_htons>
 801c944:	4603      	mov	r3, r0
 801c946:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c948:	697b      	ldr	r3, [r7, #20]
 801c94a:	885b      	ldrh	r3, [r3, #2]
 801c94c:	b29b      	uxth	r3, r3
 801c94e:	4618      	mov	r0, r3
 801c950:	f7f7 fef0 	bl	8014734 <lwip_htons>
 801c954:	4603      	mov	r3, r0
 801c956:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c958:	2300      	movs	r3, #0
 801c95a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c95c:	2300      	movs	r3, #0
 801c95e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c960:	2300      	movs	r3, #0
 801c962:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c964:	4b64      	ldr	r3, [pc, #400]	; (801caf8 <udp_input+0x21c>)
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	627b      	str	r3, [r7, #36]	; 0x24
 801c96a:	e054      	b.n	801ca16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96e:	8a5b      	ldrh	r3, [r3, #18]
 801c970:	89fa      	ldrh	r2, [r7, #14]
 801c972:	429a      	cmp	r2, r3
 801c974:	d14a      	bne.n	801ca0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c976:	7cfb      	ldrb	r3, [r7, #19]
 801c978:	461a      	mov	r2, r3
 801c97a:	6839      	ldr	r1, [r7, #0]
 801c97c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c97e:	f7ff ff49 	bl	801c814 <udp_input_local_match>
 801c982:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c984:	2b00      	cmp	r3, #0
 801c986:	d041      	beq.n	801ca0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c98a:	7c1b      	ldrb	r3, [r3, #16]
 801c98c:	f003 0304 	and.w	r3, r3, #4
 801c990:	2b00      	cmp	r3, #0
 801c992:	d11d      	bne.n	801c9d0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c994:	69fb      	ldr	r3, [r7, #28]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d102      	bne.n	801c9a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c99c:	61fb      	str	r3, [r7, #28]
 801c99e:	e017      	b.n	801c9d0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c9a0:	7cfb      	ldrb	r3, [r7, #19]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d014      	beq.n	801c9d0 <udp_input+0xf4>
 801c9a6:	4b53      	ldr	r3, [pc, #332]	; (801caf4 <udp_input+0x218>)
 801c9a8:	695b      	ldr	r3, [r3, #20]
 801c9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9ae:	d10f      	bne.n	801c9d0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c9b0:	69fb      	ldr	r3, [r7, #28]
 801c9b2:	681a      	ldr	r2, [r3, #0]
 801c9b4:	683b      	ldr	r3, [r7, #0]
 801c9b6:	3304      	adds	r3, #4
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d008      	beq.n	801c9d0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9c0:	681a      	ldr	r2, [r3, #0]
 801c9c2:	683b      	ldr	r3, [r7, #0]
 801c9c4:	3304      	adds	r3, #4
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	429a      	cmp	r2, r3
 801c9ca:	d101      	bne.n	801c9d0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9ce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d2:	8a9b      	ldrh	r3, [r3, #20]
 801c9d4:	8a3a      	ldrh	r2, [r7, #16]
 801c9d6:	429a      	cmp	r2, r3
 801c9d8:	d118      	bne.n	801ca0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9dc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d005      	beq.n	801c9ee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e4:	685a      	ldr	r2, [r3, #4]
 801c9e6:	4b43      	ldr	r3, [pc, #268]	; (801caf4 <udp_input+0x218>)
 801c9e8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d10e      	bne.n	801ca0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c9ee:	6a3b      	ldr	r3, [r7, #32]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d014      	beq.n	801ca1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9f6:	68da      	ldr	r2, [r3, #12]
 801c9f8:	6a3b      	ldr	r3, [r7, #32]
 801c9fa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c9fc:	4b3e      	ldr	r3, [pc, #248]	; (801caf8 <udp_input+0x21c>)
 801c9fe:	681a      	ldr	r2, [r3, #0]
 801ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801ca04:	4a3c      	ldr	r2, [pc, #240]	; (801caf8 <udp_input+0x21c>)
 801ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801ca0a:	e008      	b.n	801ca1e <udp_input+0x142>
      }
    }

    prev = pcb;
 801ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca12:	68db      	ldr	r3, [r3, #12]
 801ca14:	627b      	str	r3, [r7, #36]	; 0x24
 801ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d1a7      	bne.n	801c96c <udp_input+0x90>
 801ca1c:	e000      	b.n	801ca20 <udp_input+0x144>
        break;
 801ca1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d101      	bne.n	801ca2a <udp_input+0x14e>
    pcb = uncon_pcb;
 801ca26:	69fb      	ldr	r3, [r7, #28]
 801ca28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d002      	beq.n	801ca36 <udp_input+0x15a>
    for_us = 1;
 801ca30:	2301      	movs	r3, #1
 801ca32:	76fb      	strb	r3, [r7, #27]
 801ca34:	e00a      	b.n	801ca4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ca36:	683b      	ldr	r3, [r7, #0]
 801ca38:	3304      	adds	r3, #4
 801ca3a:	681a      	ldr	r2, [r3, #0]
 801ca3c:	4b2d      	ldr	r3, [pc, #180]	; (801caf4 <udp_input+0x218>)
 801ca3e:	695b      	ldr	r3, [r3, #20]
 801ca40:	429a      	cmp	r2, r3
 801ca42:	bf0c      	ite	eq
 801ca44:	2301      	moveq	r3, #1
 801ca46:	2300      	movne	r3, #0
 801ca48:	b2db      	uxtb	r3, r3
 801ca4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ca4c:	7efb      	ldrb	r3, [r7, #27]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d041      	beq.n	801cad6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801ca52:	2108      	movs	r1, #8
 801ca54:	6878      	ldr	r0, [r7, #4]
 801ca56:	f7f9 f9c9 	bl	8015dec <pbuf_remove_header>
 801ca5a:	4603      	mov	r3, r0
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d00a      	beq.n	801ca76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ca60:	4b20      	ldr	r3, [pc, #128]	; (801cae4 <udp_input+0x208>)
 801ca62:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ca66:	4925      	ldr	r1, [pc, #148]	; (801cafc <udp_input+0x220>)
 801ca68:	4820      	ldr	r0, [pc, #128]	; (801caec <udp_input+0x210>)
 801ca6a:	f002 fcb7 	bl	801f3dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ca6e:	6878      	ldr	r0, [r7, #4]
 801ca70:	f7f9 fa54 	bl	8015f1c <pbuf_free>
      goto end;
 801ca74:	e032      	b.n	801cadc <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d012      	beq.n	801caa2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca7e:	699b      	ldr	r3, [r3, #24]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d00a      	beq.n	801ca9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca86:	699c      	ldr	r4, [r3, #24]
 801ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca8a:	69d8      	ldr	r0, [r3, #28]
 801ca8c:	8a3b      	ldrh	r3, [r7, #16]
 801ca8e:	9300      	str	r3, [sp, #0]
 801ca90:	4b1b      	ldr	r3, [pc, #108]	; (801cb00 <udp_input+0x224>)
 801ca92:	687a      	ldr	r2, [r7, #4]
 801ca94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ca96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ca98:	e021      	b.n	801cade <udp_input+0x202>
        pbuf_free(p);
 801ca9a:	6878      	ldr	r0, [r7, #4]
 801ca9c:	f7f9 fa3e 	bl	8015f1c <pbuf_free>
        goto end;
 801caa0:	e01c      	b.n	801cadc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801caa2:	7cfb      	ldrb	r3, [r7, #19]
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d112      	bne.n	801cace <udp_input+0x1f2>
 801caa8:	4b12      	ldr	r3, [pc, #72]	; (801caf4 <udp_input+0x218>)
 801caaa:	695b      	ldr	r3, [r3, #20]
 801caac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cab0:	2be0      	cmp	r3, #224	; 0xe0
 801cab2:	d00c      	beq.n	801cace <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801cab4:	4b0f      	ldr	r3, [pc, #60]	; (801caf4 <udp_input+0x218>)
 801cab6:	899b      	ldrh	r3, [r3, #12]
 801cab8:	3308      	adds	r3, #8
 801caba:	b29b      	uxth	r3, r3
 801cabc:	b21b      	sxth	r3, r3
 801cabe:	4619      	mov	r1, r3
 801cac0:	6878      	ldr	r0, [r7, #4]
 801cac2:	f7f9 fa18 	bl	8015ef6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801cac6:	2103      	movs	r1, #3
 801cac8:	6878      	ldr	r0, [r7, #4]
 801caca:	f001 f89b 	bl	801dc04 <icmp_dest_unreach>
      pbuf_free(p);
 801cace:	6878      	ldr	r0, [r7, #4]
 801cad0:	f7f9 fa24 	bl	8015f1c <pbuf_free>
  return;
 801cad4:	e003      	b.n	801cade <udp_input+0x202>
    pbuf_free(p);
 801cad6:	6878      	ldr	r0, [r7, #4]
 801cad8:	f7f9 fa20 	bl	8015f1c <pbuf_free>
  return;
 801cadc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801cade:	372c      	adds	r7, #44	; 0x2c
 801cae0:	46bd      	mov	sp, r7
 801cae2:	bd90      	pop	{r4, r7, pc}
 801cae4:	08023900 	.word	0x08023900
 801cae8:	080239a4 	.word	0x080239a4
 801caec:	08023954 	.word	0x08023954
 801caf0:	080239bc 	.word	0x080239bc
 801caf4:	200114a0 	.word	0x200114a0
 801caf8:	20014bcc 	.word	0x20014bcc
 801cafc:	080239d8 	.word	0x080239d8
 801cb00:	200114b0 	.word	0x200114b0

0801cb04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801cb04:	b480      	push	{r7}
 801cb06:	b085      	sub	sp, #20
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
 801cb0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d01e      	beq.n	801cb52 <udp_netif_ip_addr_changed+0x4e>
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d01a      	beq.n	801cb52 <udp_netif_ip_addr_changed+0x4e>
 801cb1c:	683b      	ldr	r3, [r7, #0]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d017      	beq.n	801cb52 <udp_netif_ip_addr_changed+0x4e>
 801cb22:	683b      	ldr	r3, [r7, #0]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d013      	beq.n	801cb52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cb2a:	4b0d      	ldr	r3, [pc, #52]	; (801cb60 <udp_netif_ip_addr_changed+0x5c>)
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	60fb      	str	r3, [r7, #12]
 801cb30:	e00c      	b.n	801cb4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	681a      	ldr	r2, [r3, #0]
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	429a      	cmp	r2, r3
 801cb3c:	d103      	bne.n	801cb46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801cb3e:	683b      	ldr	r3, [r7, #0]
 801cb40:	681a      	ldr	r2, [r3, #0]
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	68db      	ldr	r3, [r3, #12]
 801cb4a:	60fb      	str	r3, [r7, #12]
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d1ef      	bne.n	801cb32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801cb52:	bf00      	nop
 801cb54:	3714      	adds	r7, #20
 801cb56:	46bd      	mov	sp, r7
 801cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb5c:	4770      	bx	lr
 801cb5e:	bf00      	nop
 801cb60:	20014bcc 	.word	0x20014bcc

0801cb64 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b082      	sub	sp, #8
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801cb6c:	4915      	ldr	r1, [pc, #84]	; (801cbc4 <etharp_free_entry+0x60>)
 801cb6e:	687a      	ldr	r2, [r7, #4]
 801cb70:	4613      	mov	r3, r2
 801cb72:	005b      	lsls	r3, r3, #1
 801cb74:	4413      	add	r3, r2
 801cb76:	00db      	lsls	r3, r3, #3
 801cb78:	440b      	add	r3, r1
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d013      	beq.n	801cba8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801cb80:	4910      	ldr	r1, [pc, #64]	; (801cbc4 <etharp_free_entry+0x60>)
 801cb82:	687a      	ldr	r2, [r7, #4]
 801cb84:	4613      	mov	r3, r2
 801cb86:	005b      	lsls	r3, r3, #1
 801cb88:	4413      	add	r3, r2
 801cb8a:	00db      	lsls	r3, r3, #3
 801cb8c:	440b      	add	r3, r1
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	4618      	mov	r0, r3
 801cb92:	f7f9 f9c3 	bl	8015f1c <pbuf_free>
    arp_table[i].q = NULL;
 801cb96:	490b      	ldr	r1, [pc, #44]	; (801cbc4 <etharp_free_entry+0x60>)
 801cb98:	687a      	ldr	r2, [r7, #4]
 801cb9a:	4613      	mov	r3, r2
 801cb9c:	005b      	lsls	r3, r3, #1
 801cb9e:	4413      	add	r3, r2
 801cba0:	00db      	lsls	r3, r3, #3
 801cba2:	440b      	add	r3, r1
 801cba4:	2200      	movs	r2, #0
 801cba6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801cba8:	4906      	ldr	r1, [pc, #24]	; (801cbc4 <etharp_free_entry+0x60>)
 801cbaa:	687a      	ldr	r2, [r7, #4]
 801cbac:	4613      	mov	r3, r2
 801cbae:	005b      	lsls	r3, r3, #1
 801cbb0:	4413      	add	r3, r2
 801cbb2:	00db      	lsls	r3, r3, #3
 801cbb4:	440b      	add	r3, r1
 801cbb6:	3314      	adds	r3, #20
 801cbb8:	2200      	movs	r2, #0
 801cbba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801cbbc:	bf00      	nop
 801cbbe:	3708      	adds	r7, #8
 801cbc0:	46bd      	mov	sp, r7
 801cbc2:	bd80      	pop	{r7, pc}
 801cbc4:	2000c83c 	.word	0x2000c83c

0801cbc8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801cbc8:	b580      	push	{r7, lr}
 801cbca:	b082      	sub	sp, #8
 801cbcc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cbce:	2300      	movs	r3, #0
 801cbd0:	607b      	str	r3, [r7, #4]
 801cbd2:	e096      	b.n	801cd02 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801cbd4:	494f      	ldr	r1, [pc, #316]	; (801cd14 <etharp_tmr+0x14c>)
 801cbd6:	687a      	ldr	r2, [r7, #4]
 801cbd8:	4613      	mov	r3, r2
 801cbda:	005b      	lsls	r3, r3, #1
 801cbdc:	4413      	add	r3, r2
 801cbde:	00db      	lsls	r3, r3, #3
 801cbe0:	440b      	add	r3, r1
 801cbe2:	3314      	adds	r3, #20
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801cbe8:	78fb      	ldrb	r3, [r7, #3]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	f000 8086 	beq.w	801ccfc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801cbf0:	4948      	ldr	r1, [pc, #288]	; (801cd14 <etharp_tmr+0x14c>)
 801cbf2:	687a      	ldr	r2, [r7, #4]
 801cbf4:	4613      	mov	r3, r2
 801cbf6:	005b      	lsls	r3, r3, #1
 801cbf8:	4413      	add	r3, r2
 801cbfa:	00db      	lsls	r3, r3, #3
 801cbfc:	440b      	add	r3, r1
 801cbfe:	3312      	adds	r3, #18
 801cc00:	881b      	ldrh	r3, [r3, #0]
 801cc02:	3301      	adds	r3, #1
 801cc04:	b298      	uxth	r0, r3
 801cc06:	4943      	ldr	r1, [pc, #268]	; (801cd14 <etharp_tmr+0x14c>)
 801cc08:	687a      	ldr	r2, [r7, #4]
 801cc0a:	4613      	mov	r3, r2
 801cc0c:	005b      	lsls	r3, r3, #1
 801cc0e:	4413      	add	r3, r2
 801cc10:	00db      	lsls	r3, r3, #3
 801cc12:	440b      	add	r3, r1
 801cc14:	3312      	adds	r3, #18
 801cc16:	4602      	mov	r2, r0
 801cc18:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cc1a:	493e      	ldr	r1, [pc, #248]	; (801cd14 <etharp_tmr+0x14c>)
 801cc1c:	687a      	ldr	r2, [r7, #4]
 801cc1e:	4613      	mov	r3, r2
 801cc20:	005b      	lsls	r3, r3, #1
 801cc22:	4413      	add	r3, r2
 801cc24:	00db      	lsls	r3, r3, #3
 801cc26:	440b      	add	r3, r1
 801cc28:	3312      	adds	r3, #18
 801cc2a:	881b      	ldrh	r3, [r3, #0]
 801cc2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801cc30:	d215      	bcs.n	801cc5e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cc32:	4938      	ldr	r1, [pc, #224]	; (801cd14 <etharp_tmr+0x14c>)
 801cc34:	687a      	ldr	r2, [r7, #4]
 801cc36:	4613      	mov	r3, r2
 801cc38:	005b      	lsls	r3, r3, #1
 801cc3a:	4413      	add	r3, r2
 801cc3c:	00db      	lsls	r3, r3, #3
 801cc3e:	440b      	add	r3, r1
 801cc40:	3314      	adds	r3, #20
 801cc42:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cc44:	2b01      	cmp	r3, #1
 801cc46:	d10e      	bne.n	801cc66 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801cc48:	4932      	ldr	r1, [pc, #200]	; (801cd14 <etharp_tmr+0x14c>)
 801cc4a:	687a      	ldr	r2, [r7, #4]
 801cc4c:	4613      	mov	r3, r2
 801cc4e:	005b      	lsls	r3, r3, #1
 801cc50:	4413      	add	r3, r2
 801cc52:	00db      	lsls	r3, r3, #3
 801cc54:	440b      	add	r3, r1
 801cc56:	3312      	adds	r3, #18
 801cc58:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cc5a:	2b04      	cmp	r3, #4
 801cc5c:	d903      	bls.n	801cc66 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801cc5e:	6878      	ldr	r0, [r7, #4]
 801cc60:	f7ff ff80 	bl	801cb64 <etharp_free_entry>
 801cc64:	e04a      	b.n	801ccfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801cc66:	492b      	ldr	r1, [pc, #172]	; (801cd14 <etharp_tmr+0x14c>)
 801cc68:	687a      	ldr	r2, [r7, #4]
 801cc6a:	4613      	mov	r3, r2
 801cc6c:	005b      	lsls	r3, r3, #1
 801cc6e:	4413      	add	r3, r2
 801cc70:	00db      	lsls	r3, r3, #3
 801cc72:	440b      	add	r3, r1
 801cc74:	3314      	adds	r3, #20
 801cc76:	781b      	ldrb	r3, [r3, #0]
 801cc78:	2b03      	cmp	r3, #3
 801cc7a:	d10a      	bne.n	801cc92 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801cc7c:	4925      	ldr	r1, [pc, #148]	; (801cd14 <etharp_tmr+0x14c>)
 801cc7e:	687a      	ldr	r2, [r7, #4]
 801cc80:	4613      	mov	r3, r2
 801cc82:	005b      	lsls	r3, r3, #1
 801cc84:	4413      	add	r3, r2
 801cc86:	00db      	lsls	r3, r3, #3
 801cc88:	440b      	add	r3, r1
 801cc8a:	3314      	adds	r3, #20
 801cc8c:	2204      	movs	r2, #4
 801cc8e:	701a      	strb	r2, [r3, #0]
 801cc90:	e034      	b.n	801ccfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801cc92:	4920      	ldr	r1, [pc, #128]	; (801cd14 <etharp_tmr+0x14c>)
 801cc94:	687a      	ldr	r2, [r7, #4]
 801cc96:	4613      	mov	r3, r2
 801cc98:	005b      	lsls	r3, r3, #1
 801cc9a:	4413      	add	r3, r2
 801cc9c:	00db      	lsls	r3, r3, #3
 801cc9e:	440b      	add	r3, r1
 801cca0:	3314      	adds	r3, #20
 801cca2:	781b      	ldrb	r3, [r3, #0]
 801cca4:	2b04      	cmp	r3, #4
 801cca6:	d10a      	bne.n	801ccbe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801cca8:	491a      	ldr	r1, [pc, #104]	; (801cd14 <etharp_tmr+0x14c>)
 801ccaa:	687a      	ldr	r2, [r7, #4]
 801ccac:	4613      	mov	r3, r2
 801ccae:	005b      	lsls	r3, r3, #1
 801ccb0:	4413      	add	r3, r2
 801ccb2:	00db      	lsls	r3, r3, #3
 801ccb4:	440b      	add	r3, r1
 801ccb6:	3314      	adds	r3, #20
 801ccb8:	2202      	movs	r2, #2
 801ccba:	701a      	strb	r2, [r3, #0]
 801ccbc:	e01e      	b.n	801ccfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ccbe:	4915      	ldr	r1, [pc, #84]	; (801cd14 <etharp_tmr+0x14c>)
 801ccc0:	687a      	ldr	r2, [r7, #4]
 801ccc2:	4613      	mov	r3, r2
 801ccc4:	005b      	lsls	r3, r3, #1
 801ccc6:	4413      	add	r3, r2
 801ccc8:	00db      	lsls	r3, r3, #3
 801ccca:	440b      	add	r3, r1
 801cccc:	3314      	adds	r3, #20
 801ccce:	781b      	ldrb	r3, [r3, #0]
 801ccd0:	2b01      	cmp	r3, #1
 801ccd2:	d113      	bne.n	801ccfc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ccd4:	490f      	ldr	r1, [pc, #60]	; (801cd14 <etharp_tmr+0x14c>)
 801ccd6:	687a      	ldr	r2, [r7, #4]
 801ccd8:	4613      	mov	r3, r2
 801ccda:	005b      	lsls	r3, r3, #1
 801ccdc:	4413      	add	r3, r2
 801ccde:	00db      	lsls	r3, r3, #3
 801cce0:	440b      	add	r3, r1
 801cce2:	3308      	adds	r3, #8
 801cce4:	6818      	ldr	r0, [r3, #0]
 801cce6:	687a      	ldr	r2, [r7, #4]
 801cce8:	4613      	mov	r3, r2
 801ccea:	005b      	lsls	r3, r3, #1
 801ccec:	4413      	add	r3, r2
 801ccee:	00db      	lsls	r3, r3, #3
 801ccf0:	4a08      	ldr	r2, [pc, #32]	; (801cd14 <etharp_tmr+0x14c>)
 801ccf2:	4413      	add	r3, r2
 801ccf4:	3304      	adds	r3, #4
 801ccf6:	4619      	mov	r1, r3
 801ccf8:	f000 fe6e 	bl	801d9d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	607b      	str	r3, [r7, #4]
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	2b09      	cmp	r3, #9
 801cd06:	f77f af65 	ble.w	801cbd4 <etharp_tmr+0xc>
      }
    }
  }
}
 801cd0a:	bf00      	nop
 801cd0c:	bf00      	nop
 801cd0e:	3708      	adds	r7, #8
 801cd10:	46bd      	mov	sp, r7
 801cd12:	bd80      	pop	{r7, pc}
 801cd14:	2000c83c 	.word	0x2000c83c

0801cd18 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801cd18:	b580      	push	{r7, lr}
 801cd1a:	b08a      	sub	sp, #40	; 0x28
 801cd1c:	af00      	add	r7, sp, #0
 801cd1e:	60f8      	str	r0, [r7, #12]
 801cd20:	460b      	mov	r3, r1
 801cd22:	607a      	str	r2, [r7, #4]
 801cd24:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801cd26:	230a      	movs	r3, #10
 801cd28:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cd2a:	230a      	movs	r3, #10
 801cd2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801cd2e:	230a      	movs	r3, #10
 801cd30:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801cd32:	2300      	movs	r3, #0
 801cd34:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801cd36:	230a      	movs	r3, #10
 801cd38:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	83bb      	strh	r3, [r7, #28]
 801cd3e:	2300      	movs	r3, #0
 801cd40:	837b      	strh	r3, [r7, #26]
 801cd42:	2300      	movs	r3, #0
 801cd44:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cd46:	2300      	movs	r3, #0
 801cd48:	843b      	strh	r3, [r7, #32]
 801cd4a:	e0ae      	b.n	801ceaa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801cd4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd50:	49a6      	ldr	r1, [pc, #664]	; (801cfec <etharp_find_entry+0x2d4>)
 801cd52:	4613      	mov	r3, r2
 801cd54:	005b      	lsls	r3, r3, #1
 801cd56:	4413      	add	r3, r2
 801cd58:	00db      	lsls	r3, r3, #3
 801cd5a:	440b      	add	r3, r1
 801cd5c:	3314      	adds	r3, #20
 801cd5e:	781b      	ldrb	r3, [r3, #0]
 801cd60:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801cd62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cd66:	2b0a      	cmp	r3, #10
 801cd68:	d105      	bne.n	801cd76 <etharp_find_entry+0x5e>
 801cd6a:	7dfb      	ldrb	r3, [r7, #23]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d102      	bne.n	801cd76 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801cd70:	8c3b      	ldrh	r3, [r7, #32]
 801cd72:	847b      	strh	r3, [r7, #34]	; 0x22
 801cd74:	e095      	b.n	801cea2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801cd76:	7dfb      	ldrb	r3, [r7, #23]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	f000 8092 	beq.w	801cea2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801cd7e:	7dfb      	ldrb	r3, [r7, #23]
 801cd80:	2b01      	cmp	r3, #1
 801cd82:	d009      	beq.n	801cd98 <etharp_find_entry+0x80>
 801cd84:	7dfb      	ldrb	r3, [r7, #23]
 801cd86:	2b01      	cmp	r3, #1
 801cd88:	d806      	bhi.n	801cd98 <etharp_find_entry+0x80>
 801cd8a:	4b99      	ldr	r3, [pc, #612]	; (801cff0 <etharp_find_entry+0x2d8>)
 801cd8c:	f240 1223 	movw	r2, #291	; 0x123
 801cd90:	4998      	ldr	r1, [pc, #608]	; (801cff4 <etharp_find_entry+0x2dc>)
 801cd92:	4899      	ldr	r0, [pc, #612]	; (801cff8 <etharp_find_entry+0x2e0>)
 801cd94:	f002 fb22 	bl	801f3dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d020      	beq.n	801cde0 <etharp_find_entry+0xc8>
 801cd9e:	68fb      	ldr	r3, [r7, #12]
 801cda0:	6819      	ldr	r1, [r3, #0]
 801cda2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cda6:	4891      	ldr	r0, [pc, #580]	; (801cfec <etharp_find_entry+0x2d4>)
 801cda8:	4613      	mov	r3, r2
 801cdaa:	005b      	lsls	r3, r3, #1
 801cdac:	4413      	add	r3, r2
 801cdae:	00db      	lsls	r3, r3, #3
 801cdb0:	4403      	add	r3, r0
 801cdb2:	3304      	adds	r3, #4
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	4299      	cmp	r1, r3
 801cdb8:	d112      	bne.n	801cde0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d00c      	beq.n	801cdda <etharp_find_entry+0xc2>
 801cdc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cdc4:	4989      	ldr	r1, [pc, #548]	; (801cfec <etharp_find_entry+0x2d4>)
 801cdc6:	4613      	mov	r3, r2
 801cdc8:	005b      	lsls	r3, r3, #1
 801cdca:	4413      	add	r3, r2
 801cdcc:	00db      	lsls	r3, r3, #3
 801cdce:	440b      	add	r3, r1
 801cdd0:	3308      	adds	r3, #8
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	687a      	ldr	r2, [r7, #4]
 801cdd6:	429a      	cmp	r2, r3
 801cdd8:	d102      	bne.n	801cde0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801cdda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cdde:	e100      	b.n	801cfe2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801cde0:	7dfb      	ldrb	r3, [r7, #23]
 801cde2:	2b01      	cmp	r3, #1
 801cde4:	d140      	bne.n	801ce68 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801cde6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cdea:	4980      	ldr	r1, [pc, #512]	; (801cfec <etharp_find_entry+0x2d4>)
 801cdec:	4613      	mov	r3, r2
 801cdee:	005b      	lsls	r3, r3, #1
 801cdf0:	4413      	add	r3, r2
 801cdf2:	00db      	lsls	r3, r3, #3
 801cdf4:	440b      	add	r3, r1
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d01a      	beq.n	801ce32 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801cdfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce00:	497a      	ldr	r1, [pc, #488]	; (801cfec <etharp_find_entry+0x2d4>)
 801ce02:	4613      	mov	r3, r2
 801ce04:	005b      	lsls	r3, r3, #1
 801ce06:	4413      	add	r3, r2
 801ce08:	00db      	lsls	r3, r3, #3
 801ce0a:	440b      	add	r3, r1
 801ce0c:	3312      	adds	r3, #18
 801ce0e:	881b      	ldrh	r3, [r3, #0]
 801ce10:	8bba      	ldrh	r2, [r7, #28]
 801ce12:	429a      	cmp	r2, r3
 801ce14:	d845      	bhi.n	801cea2 <etharp_find_entry+0x18a>
            old_queue = i;
 801ce16:	8c3b      	ldrh	r3, [r7, #32]
 801ce18:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ce1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce1e:	4973      	ldr	r1, [pc, #460]	; (801cfec <etharp_find_entry+0x2d4>)
 801ce20:	4613      	mov	r3, r2
 801ce22:	005b      	lsls	r3, r3, #1
 801ce24:	4413      	add	r3, r2
 801ce26:	00db      	lsls	r3, r3, #3
 801ce28:	440b      	add	r3, r1
 801ce2a:	3312      	adds	r3, #18
 801ce2c:	881b      	ldrh	r3, [r3, #0]
 801ce2e:	83bb      	strh	r3, [r7, #28]
 801ce30:	e037      	b.n	801cea2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ce32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce36:	496d      	ldr	r1, [pc, #436]	; (801cfec <etharp_find_entry+0x2d4>)
 801ce38:	4613      	mov	r3, r2
 801ce3a:	005b      	lsls	r3, r3, #1
 801ce3c:	4413      	add	r3, r2
 801ce3e:	00db      	lsls	r3, r3, #3
 801ce40:	440b      	add	r3, r1
 801ce42:	3312      	adds	r3, #18
 801ce44:	881b      	ldrh	r3, [r3, #0]
 801ce46:	8b7a      	ldrh	r2, [r7, #26]
 801ce48:	429a      	cmp	r2, r3
 801ce4a:	d82a      	bhi.n	801cea2 <etharp_find_entry+0x18a>
            old_pending = i;
 801ce4c:	8c3b      	ldrh	r3, [r7, #32]
 801ce4e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ce50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce54:	4965      	ldr	r1, [pc, #404]	; (801cfec <etharp_find_entry+0x2d4>)
 801ce56:	4613      	mov	r3, r2
 801ce58:	005b      	lsls	r3, r3, #1
 801ce5a:	4413      	add	r3, r2
 801ce5c:	00db      	lsls	r3, r3, #3
 801ce5e:	440b      	add	r3, r1
 801ce60:	3312      	adds	r3, #18
 801ce62:	881b      	ldrh	r3, [r3, #0]
 801ce64:	837b      	strh	r3, [r7, #26]
 801ce66:	e01c      	b.n	801cea2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ce68:	7dfb      	ldrb	r3, [r7, #23]
 801ce6a:	2b01      	cmp	r3, #1
 801ce6c:	d919      	bls.n	801cea2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ce6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce72:	495e      	ldr	r1, [pc, #376]	; (801cfec <etharp_find_entry+0x2d4>)
 801ce74:	4613      	mov	r3, r2
 801ce76:	005b      	lsls	r3, r3, #1
 801ce78:	4413      	add	r3, r2
 801ce7a:	00db      	lsls	r3, r3, #3
 801ce7c:	440b      	add	r3, r1
 801ce7e:	3312      	adds	r3, #18
 801ce80:	881b      	ldrh	r3, [r3, #0]
 801ce82:	8b3a      	ldrh	r2, [r7, #24]
 801ce84:	429a      	cmp	r2, r3
 801ce86:	d80c      	bhi.n	801cea2 <etharp_find_entry+0x18a>
            old_stable = i;
 801ce88:	8c3b      	ldrh	r3, [r7, #32]
 801ce8a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ce8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce90:	4956      	ldr	r1, [pc, #344]	; (801cfec <etharp_find_entry+0x2d4>)
 801ce92:	4613      	mov	r3, r2
 801ce94:	005b      	lsls	r3, r3, #1
 801ce96:	4413      	add	r3, r2
 801ce98:	00db      	lsls	r3, r3, #3
 801ce9a:	440b      	add	r3, r1
 801ce9c:	3312      	adds	r3, #18
 801ce9e:	881b      	ldrh	r3, [r3, #0]
 801cea0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cea2:	8c3b      	ldrh	r3, [r7, #32]
 801cea4:	3301      	adds	r3, #1
 801cea6:	b29b      	uxth	r3, r3
 801cea8:	843b      	strh	r3, [r7, #32]
 801ceaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ceae:	2b09      	cmp	r3, #9
 801ceb0:	f77f af4c 	ble.w	801cd4c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ceb4:	7afb      	ldrb	r3, [r7, #11]
 801ceb6:	f003 0302 	and.w	r3, r3, #2
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d108      	bne.n	801ced0 <etharp_find_entry+0x1b8>
 801cebe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cec2:	2b0a      	cmp	r3, #10
 801cec4:	d107      	bne.n	801ced6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801cec6:	7afb      	ldrb	r3, [r7, #11]
 801cec8:	f003 0301 	and.w	r3, r3, #1
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d102      	bne.n	801ced6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ced0:	f04f 33ff 	mov.w	r3, #4294967295
 801ced4:	e085      	b.n	801cfe2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ced6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ceda:	2b09      	cmp	r3, #9
 801cedc:	dc02      	bgt.n	801cee4 <etharp_find_entry+0x1cc>
    i = empty;
 801cede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cee0:	843b      	strh	r3, [r7, #32]
 801cee2:	e039      	b.n	801cf58 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801cee4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cee8:	2b09      	cmp	r3, #9
 801ceea:	dc14      	bgt.n	801cf16 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ceec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ceee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801cef0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cef4:	493d      	ldr	r1, [pc, #244]	; (801cfec <etharp_find_entry+0x2d4>)
 801cef6:	4613      	mov	r3, r2
 801cef8:	005b      	lsls	r3, r3, #1
 801cefa:	4413      	add	r3, r2
 801cefc:	00db      	lsls	r3, r3, #3
 801cefe:	440b      	add	r3, r1
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d018      	beq.n	801cf38 <etharp_find_entry+0x220>
 801cf06:	4b3a      	ldr	r3, [pc, #232]	; (801cff0 <etharp_find_entry+0x2d8>)
 801cf08:	f240 126d 	movw	r2, #365	; 0x16d
 801cf0c:	493b      	ldr	r1, [pc, #236]	; (801cffc <etharp_find_entry+0x2e4>)
 801cf0e:	483a      	ldr	r0, [pc, #232]	; (801cff8 <etharp_find_entry+0x2e0>)
 801cf10:	f002 fa64 	bl	801f3dc <iprintf>
 801cf14:	e010      	b.n	801cf38 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801cf16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf1a:	2b09      	cmp	r3, #9
 801cf1c:	dc02      	bgt.n	801cf24 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801cf1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801cf20:	843b      	strh	r3, [r7, #32]
 801cf22:	e009      	b.n	801cf38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801cf24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801cf28:	2b09      	cmp	r3, #9
 801cf2a:	dc02      	bgt.n	801cf32 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801cf2c:	8bfb      	ldrh	r3, [r7, #30]
 801cf2e:	843b      	strh	r3, [r7, #32]
 801cf30:	e002      	b.n	801cf38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801cf32:	f04f 33ff 	mov.w	r3, #4294967295
 801cf36:	e054      	b.n	801cfe2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cf38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cf3c:	2b09      	cmp	r3, #9
 801cf3e:	dd06      	ble.n	801cf4e <etharp_find_entry+0x236>
 801cf40:	4b2b      	ldr	r3, [pc, #172]	; (801cff0 <etharp_find_entry+0x2d8>)
 801cf42:	f240 127f 	movw	r2, #383	; 0x17f
 801cf46:	492e      	ldr	r1, [pc, #184]	; (801d000 <etharp_find_entry+0x2e8>)
 801cf48:	482b      	ldr	r0, [pc, #172]	; (801cff8 <etharp_find_entry+0x2e0>)
 801cf4a:	f002 fa47 	bl	801f3dc <iprintf>
    etharp_free_entry(i);
 801cf4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cf52:	4618      	mov	r0, r3
 801cf54:	f7ff fe06 	bl	801cb64 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cf58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cf5c:	2b09      	cmp	r3, #9
 801cf5e:	dd06      	ble.n	801cf6e <etharp_find_entry+0x256>
 801cf60:	4b23      	ldr	r3, [pc, #140]	; (801cff0 <etharp_find_entry+0x2d8>)
 801cf62:	f240 1283 	movw	r2, #387	; 0x183
 801cf66:	4926      	ldr	r1, [pc, #152]	; (801d000 <etharp_find_entry+0x2e8>)
 801cf68:	4823      	ldr	r0, [pc, #140]	; (801cff8 <etharp_find_entry+0x2e0>)
 801cf6a:	f002 fa37 	bl	801f3dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801cf6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cf72:	491e      	ldr	r1, [pc, #120]	; (801cfec <etharp_find_entry+0x2d4>)
 801cf74:	4613      	mov	r3, r2
 801cf76:	005b      	lsls	r3, r3, #1
 801cf78:	4413      	add	r3, r2
 801cf7a:	00db      	lsls	r3, r3, #3
 801cf7c:	440b      	add	r3, r1
 801cf7e:	3314      	adds	r3, #20
 801cf80:	781b      	ldrb	r3, [r3, #0]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d006      	beq.n	801cf94 <etharp_find_entry+0x27c>
 801cf86:	4b1a      	ldr	r3, [pc, #104]	; (801cff0 <etharp_find_entry+0x2d8>)
 801cf88:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801cf8c:	491d      	ldr	r1, [pc, #116]	; (801d004 <etharp_find_entry+0x2ec>)
 801cf8e:	481a      	ldr	r0, [pc, #104]	; (801cff8 <etharp_find_entry+0x2e0>)
 801cf90:	f002 fa24 	bl	801f3dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d00b      	beq.n	801cfb2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cf9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	6819      	ldr	r1, [r3, #0]
 801cfa2:	4812      	ldr	r0, [pc, #72]	; (801cfec <etharp_find_entry+0x2d4>)
 801cfa4:	4613      	mov	r3, r2
 801cfa6:	005b      	lsls	r3, r3, #1
 801cfa8:	4413      	add	r3, r2
 801cfaa:	00db      	lsls	r3, r3, #3
 801cfac:	4403      	add	r3, r0
 801cfae:	3304      	adds	r3, #4
 801cfb0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cfb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cfb6:	490d      	ldr	r1, [pc, #52]	; (801cfec <etharp_find_entry+0x2d4>)
 801cfb8:	4613      	mov	r3, r2
 801cfba:	005b      	lsls	r3, r3, #1
 801cfbc:	4413      	add	r3, r2
 801cfbe:	00db      	lsls	r3, r3, #3
 801cfc0:	440b      	add	r3, r1
 801cfc2:	3312      	adds	r3, #18
 801cfc4:	2200      	movs	r2, #0
 801cfc6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801cfc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cfcc:	4907      	ldr	r1, [pc, #28]	; (801cfec <etharp_find_entry+0x2d4>)
 801cfce:	4613      	mov	r3, r2
 801cfd0:	005b      	lsls	r3, r3, #1
 801cfd2:	4413      	add	r3, r2
 801cfd4:	00db      	lsls	r3, r3, #3
 801cfd6:	440b      	add	r3, r1
 801cfd8:	3308      	adds	r3, #8
 801cfda:	687a      	ldr	r2, [r7, #4]
 801cfdc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801cfde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	3728      	adds	r7, #40	; 0x28
 801cfe6:	46bd      	mov	sp, r7
 801cfe8:	bd80      	pop	{r7, pc}
 801cfea:	bf00      	nop
 801cfec:	2000c83c 	.word	0x2000c83c
 801cff0:	08023c64 	.word	0x08023c64
 801cff4:	08023c9c 	.word	0x08023c9c
 801cff8:	08023cdc 	.word	0x08023cdc
 801cffc:	08023d04 	.word	0x08023d04
 801d000:	08023d1c 	.word	0x08023d1c
 801d004:	08023d30 	.word	0x08023d30

0801d008 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d008:	b580      	push	{r7, lr}
 801d00a:	b088      	sub	sp, #32
 801d00c:	af02      	add	r7, sp, #8
 801d00e:	60f8      	str	r0, [r7, #12]
 801d010:	60b9      	str	r1, [r7, #8]
 801d012:	607a      	str	r2, [r7, #4]
 801d014:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d01c:	2b06      	cmp	r3, #6
 801d01e:	d006      	beq.n	801d02e <etharp_update_arp_entry+0x26>
 801d020:	4b48      	ldr	r3, [pc, #288]	; (801d144 <etharp_update_arp_entry+0x13c>)
 801d022:	f240 12a9 	movw	r2, #425	; 0x1a9
 801d026:	4948      	ldr	r1, [pc, #288]	; (801d148 <etharp_update_arp_entry+0x140>)
 801d028:	4848      	ldr	r0, [pc, #288]	; (801d14c <etharp_update_arp_entry+0x144>)
 801d02a:	f002 f9d7 	bl	801f3dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d02e:	68bb      	ldr	r3, [r7, #8]
 801d030:	2b00      	cmp	r3, #0
 801d032:	d012      	beq.n	801d05a <etharp_update_arp_entry+0x52>
 801d034:	68bb      	ldr	r3, [r7, #8]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d00e      	beq.n	801d05a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d03c:	68bb      	ldr	r3, [r7, #8]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	68f9      	ldr	r1, [r7, #12]
 801d042:	4618      	mov	r0, r3
 801d044:	f001 f8fe 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801d048:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d105      	bne.n	801d05a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d04e:	68bb      	ldr	r3, [r7, #8]
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d056:	2be0      	cmp	r3, #224	; 0xe0
 801d058:	d102      	bne.n	801d060 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d05a:	f06f 030f 	mvn.w	r3, #15
 801d05e:	e06c      	b.n	801d13a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d060:	78fb      	ldrb	r3, [r7, #3]
 801d062:	68fa      	ldr	r2, [r7, #12]
 801d064:	4619      	mov	r1, r3
 801d066:	68b8      	ldr	r0, [r7, #8]
 801d068:	f7ff fe56 	bl	801cd18 <etharp_find_entry>
 801d06c:	4603      	mov	r3, r0
 801d06e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d070:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d074:	2b00      	cmp	r3, #0
 801d076:	da02      	bge.n	801d07e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d078:	8afb      	ldrh	r3, [r7, #22]
 801d07a:	b25b      	sxtb	r3, r3
 801d07c:	e05d      	b.n	801d13a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d07e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d082:	4933      	ldr	r1, [pc, #204]	; (801d150 <etharp_update_arp_entry+0x148>)
 801d084:	4613      	mov	r3, r2
 801d086:	005b      	lsls	r3, r3, #1
 801d088:	4413      	add	r3, r2
 801d08a:	00db      	lsls	r3, r3, #3
 801d08c:	440b      	add	r3, r1
 801d08e:	3314      	adds	r3, #20
 801d090:	2202      	movs	r2, #2
 801d092:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d094:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d098:	492d      	ldr	r1, [pc, #180]	; (801d150 <etharp_update_arp_entry+0x148>)
 801d09a:	4613      	mov	r3, r2
 801d09c:	005b      	lsls	r3, r3, #1
 801d09e:	4413      	add	r3, r2
 801d0a0:	00db      	lsls	r3, r3, #3
 801d0a2:	440b      	add	r3, r1
 801d0a4:	3308      	adds	r3, #8
 801d0a6:	68fa      	ldr	r2, [r7, #12]
 801d0a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d0aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d0ae:	4613      	mov	r3, r2
 801d0b0:	005b      	lsls	r3, r3, #1
 801d0b2:	4413      	add	r3, r2
 801d0b4:	00db      	lsls	r3, r3, #3
 801d0b6:	3308      	adds	r3, #8
 801d0b8:	4a25      	ldr	r2, [pc, #148]	; (801d150 <etharp_update_arp_entry+0x148>)
 801d0ba:	4413      	add	r3, r2
 801d0bc:	3304      	adds	r3, #4
 801d0be:	2206      	movs	r2, #6
 801d0c0:	6879      	ldr	r1, [r7, #4]
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	f002 f95a 	bl	801f37c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d0c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d0cc:	4920      	ldr	r1, [pc, #128]	; (801d150 <etharp_update_arp_entry+0x148>)
 801d0ce:	4613      	mov	r3, r2
 801d0d0:	005b      	lsls	r3, r3, #1
 801d0d2:	4413      	add	r3, r2
 801d0d4:	00db      	lsls	r3, r3, #3
 801d0d6:	440b      	add	r3, r1
 801d0d8:	3312      	adds	r3, #18
 801d0da:	2200      	movs	r2, #0
 801d0dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d0de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d0e2:	491b      	ldr	r1, [pc, #108]	; (801d150 <etharp_update_arp_entry+0x148>)
 801d0e4:	4613      	mov	r3, r2
 801d0e6:	005b      	lsls	r3, r3, #1
 801d0e8:	4413      	add	r3, r2
 801d0ea:	00db      	lsls	r3, r3, #3
 801d0ec:	440b      	add	r3, r1
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d021      	beq.n	801d138 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d0f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d0f8:	4915      	ldr	r1, [pc, #84]	; (801d150 <etharp_update_arp_entry+0x148>)
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	005b      	lsls	r3, r3, #1
 801d0fe:	4413      	add	r3, r2
 801d100:	00db      	lsls	r3, r3, #3
 801d102:	440b      	add	r3, r1
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d108:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d10c:	4910      	ldr	r1, [pc, #64]	; (801d150 <etharp_update_arp_entry+0x148>)
 801d10e:	4613      	mov	r3, r2
 801d110:	005b      	lsls	r3, r3, #1
 801d112:	4413      	add	r3, r2
 801d114:	00db      	lsls	r3, r3, #3
 801d116:	440b      	add	r3, r1
 801d118:	2200      	movs	r2, #0
 801d11a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d126:	9300      	str	r3, [sp, #0]
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	6939      	ldr	r1, [r7, #16]
 801d12c:	68f8      	ldr	r0, [r7, #12]
 801d12e:	f001 ff91 	bl	801f054 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d132:	6938      	ldr	r0, [r7, #16]
 801d134:	f7f8 fef2 	bl	8015f1c <pbuf_free>
  }
  return ERR_OK;
 801d138:	2300      	movs	r3, #0
}
 801d13a:	4618      	mov	r0, r3
 801d13c:	3718      	adds	r7, #24
 801d13e:	46bd      	mov	sp, r7
 801d140:	bd80      	pop	{r7, pc}
 801d142:	bf00      	nop
 801d144:	08023c64 	.word	0x08023c64
 801d148:	08023d5c 	.word	0x08023d5c
 801d14c:	08023cdc 	.word	0x08023cdc
 801d150:	2000c83c 	.word	0x2000c83c

0801d154 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d154:	b580      	push	{r7, lr}
 801d156:	b084      	sub	sp, #16
 801d158:	af00      	add	r7, sp, #0
 801d15a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d15c:	2300      	movs	r3, #0
 801d15e:	60fb      	str	r3, [r7, #12]
 801d160:	e01e      	b.n	801d1a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d162:	4913      	ldr	r1, [pc, #76]	; (801d1b0 <etharp_cleanup_netif+0x5c>)
 801d164:	68fa      	ldr	r2, [r7, #12]
 801d166:	4613      	mov	r3, r2
 801d168:	005b      	lsls	r3, r3, #1
 801d16a:	4413      	add	r3, r2
 801d16c:	00db      	lsls	r3, r3, #3
 801d16e:	440b      	add	r3, r1
 801d170:	3314      	adds	r3, #20
 801d172:	781b      	ldrb	r3, [r3, #0]
 801d174:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d176:	7afb      	ldrb	r3, [r7, #11]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d00e      	beq.n	801d19a <etharp_cleanup_netif+0x46>
 801d17c:	490c      	ldr	r1, [pc, #48]	; (801d1b0 <etharp_cleanup_netif+0x5c>)
 801d17e:	68fa      	ldr	r2, [r7, #12]
 801d180:	4613      	mov	r3, r2
 801d182:	005b      	lsls	r3, r3, #1
 801d184:	4413      	add	r3, r2
 801d186:	00db      	lsls	r3, r3, #3
 801d188:	440b      	add	r3, r1
 801d18a:	3308      	adds	r3, #8
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	687a      	ldr	r2, [r7, #4]
 801d190:	429a      	cmp	r2, r3
 801d192:	d102      	bne.n	801d19a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d194:	68f8      	ldr	r0, [r7, #12]
 801d196:	f7ff fce5 	bl	801cb64 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	3301      	adds	r3, #1
 801d19e:	60fb      	str	r3, [r7, #12]
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2b09      	cmp	r3, #9
 801d1a4:	dddd      	ble.n	801d162 <etharp_cleanup_netif+0xe>
    }
  }
}
 801d1a6:	bf00      	nop
 801d1a8:	bf00      	nop
 801d1aa:	3710      	adds	r7, #16
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}
 801d1b0:	2000c83c 	.word	0x2000c83c

0801d1b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d1b4:	b5b0      	push	{r4, r5, r7, lr}
 801d1b6:	b08a      	sub	sp, #40	; 0x28
 801d1b8:	af04      	add	r7, sp, #16
 801d1ba:	6078      	str	r0, [r7, #4]
 801d1bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d1be:	683b      	ldr	r3, [r7, #0]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d107      	bne.n	801d1d4 <etharp_input+0x20>
 801d1c4:	4b3d      	ldr	r3, [pc, #244]	; (801d2bc <etharp_input+0x108>)
 801d1c6:	f240 228a 	movw	r2, #650	; 0x28a
 801d1ca:	493d      	ldr	r1, [pc, #244]	; (801d2c0 <etharp_input+0x10c>)
 801d1cc:	483d      	ldr	r0, [pc, #244]	; (801d2c4 <etharp_input+0x110>)
 801d1ce:	f002 f905 	bl	801f3dc <iprintf>
 801d1d2:	e06f      	b.n	801d2b4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	685b      	ldr	r3, [r3, #4]
 801d1d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d1da:	693b      	ldr	r3, [r7, #16]
 801d1dc:	881b      	ldrh	r3, [r3, #0]
 801d1de:	b29b      	uxth	r3, r3
 801d1e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d1e4:	d10c      	bne.n	801d200 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d1e6:	693b      	ldr	r3, [r7, #16]
 801d1e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d1ea:	2b06      	cmp	r3, #6
 801d1ec:	d108      	bne.n	801d200 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d1ee:	693b      	ldr	r3, [r7, #16]
 801d1f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d1f2:	2b04      	cmp	r3, #4
 801d1f4:	d104      	bne.n	801d200 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d1f6:	693b      	ldr	r3, [r7, #16]
 801d1f8:	885b      	ldrh	r3, [r3, #2]
 801d1fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d1fc:	2b08      	cmp	r3, #8
 801d1fe:	d003      	beq.n	801d208 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801d200:	6878      	ldr	r0, [r7, #4]
 801d202:	f7f8 fe8b 	bl	8015f1c <pbuf_free>
    return;
 801d206:	e055      	b.n	801d2b4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d208:	693b      	ldr	r3, [r7, #16]
 801d20a:	330e      	adds	r3, #14
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d210:	693b      	ldr	r3, [r7, #16]
 801d212:	3318      	adds	r3, #24
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d218:	683b      	ldr	r3, [r7, #0]
 801d21a:	3304      	adds	r3, #4
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d102      	bne.n	801d228 <etharp_input+0x74>
    for_us = 0;
 801d222:	2300      	movs	r3, #0
 801d224:	75fb      	strb	r3, [r7, #23]
 801d226:	e009      	b.n	801d23c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d228:	68ba      	ldr	r2, [r7, #8]
 801d22a:	683b      	ldr	r3, [r7, #0]
 801d22c:	3304      	adds	r3, #4
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	429a      	cmp	r2, r3
 801d232:	bf0c      	ite	eq
 801d234:	2301      	moveq	r3, #1
 801d236:	2300      	movne	r3, #0
 801d238:	b2db      	uxtb	r3, r3
 801d23a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d23c:	693b      	ldr	r3, [r7, #16]
 801d23e:	f103 0208 	add.w	r2, r3, #8
 801d242:	7dfb      	ldrb	r3, [r7, #23]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d001      	beq.n	801d24c <etharp_input+0x98>
 801d248:	2301      	movs	r3, #1
 801d24a:	e000      	b.n	801d24e <etharp_input+0x9a>
 801d24c:	2302      	movs	r3, #2
 801d24e:	f107 010c 	add.w	r1, r7, #12
 801d252:	6838      	ldr	r0, [r7, #0]
 801d254:	f7ff fed8 	bl	801d008 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d258:	693b      	ldr	r3, [r7, #16]
 801d25a:	88db      	ldrh	r3, [r3, #6]
 801d25c:	b29b      	uxth	r3, r3
 801d25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d262:	d003      	beq.n	801d26c <etharp_input+0xb8>
 801d264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d268:	d01e      	beq.n	801d2a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801d26a:	e020      	b.n	801d2ae <etharp_input+0xfa>
      if (for_us) {
 801d26c:	7dfb      	ldrb	r3, [r7, #23]
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d01c      	beq.n	801d2ac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d272:	683b      	ldr	r3, [r7, #0]
 801d274:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d278:	693b      	ldr	r3, [r7, #16]
 801d27a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801d284:	683b      	ldr	r3, [r7, #0]
 801d286:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d288:	693a      	ldr	r2, [r7, #16]
 801d28a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d28c:	2102      	movs	r1, #2
 801d28e:	9103      	str	r1, [sp, #12]
 801d290:	f107 010c 	add.w	r1, r7, #12
 801d294:	9102      	str	r1, [sp, #8]
 801d296:	9201      	str	r2, [sp, #4]
 801d298:	9300      	str	r3, [sp, #0]
 801d29a:	462b      	mov	r3, r5
 801d29c:	4622      	mov	r2, r4
 801d29e:	4601      	mov	r1, r0
 801d2a0:	6838      	ldr	r0, [r7, #0]
 801d2a2:	f000 faeb 	bl	801d87c <etharp_raw>
      break;
 801d2a6:	e001      	b.n	801d2ac <etharp_input+0xf8>
      break;
 801d2a8:	bf00      	nop
 801d2aa:	e000      	b.n	801d2ae <etharp_input+0xfa>
      break;
 801d2ac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d2ae:	6878      	ldr	r0, [r7, #4]
 801d2b0:	f7f8 fe34 	bl	8015f1c <pbuf_free>
}
 801d2b4:	3718      	adds	r7, #24
 801d2b6:	46bd      	mov	sp, r7
 801d2b8:	bdb0      	pop	{r4, r5, r7, pc}
 801d2ba:	bf00      	nop
 801d2bc:	08023c64 	.word	0x08023c64
 801d2c0:	08023db4 	.word	0x08023db4
 801d2c4:	08023cdc 	.word	0x08023cdc

0801d2c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d2c8:	b580      	push	{r7, lr}
 801d2ca:	b086      	sub	sp, #24
 801d2cc:	af02      	add	r7, sp, #8
 801d2ce:	60f8      	str	r0, [r7, #12]
 801d2d0:	60b9      	str	r1, [r7, #8]
 801d2d2:	4613      	mov	r3, r2
 801d2d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d2d6:	79fa      	ldrb	r2, [r7, #7]
 801d2d8:	4944      	ldr	r1, [pc, #272]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d2da:	4613      	mov	r3, r2
 801d2dc:	005b      	lsls	r3, r3, #1
 801d2de:	4413      	add	r3, r2
 801d2e0:	00db      	lsls	r3, r3, #3
 801d2e2:	440b      	add	r3, r1
 801d2e4:	3314      	adds	r3, #20
 801d2e6:	781b      	ldrb	r3, [r3, #0]
 801d2e8:	2b01      	cmp	r3, #1
 801d2ea:	d806      	bhi.n	801d2fa <etharp_output_to_arp_index+0x32>
 801d2ec:	4b40      	ldr	r3, [pc, #256]	; (801d3f0 <etharp_output_to_arp_index+0x128>)
 801d2ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 801d2f2:	4940      	ldr	r1, [pc, #256]	; (801d3f4 <etharp_output_to_arp_index+0x12c>)
 801d2f4:	4840      	ldr	r0, [pc, #256]	; (801d3f8 <etharp_output_to_arp_index+0x130>)
 801d2f6:	f002 f871 	bl	801f3dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d2fa:	79fa      	ldrb	r2, [r7, #7]
 801d2fc:	493b      	ldr	r1, [pc, #236]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d2fe:	4613      	mov	r3, r2
 801d300:	005b      	lsls	r3, r3, #1
 801d302:	4413      	add	r3, r2
 801d304:	00db      	lsls	r3, r3, #3
 801d306:	440b      	add	r3, r1
 801d308:	3314      	adds	r3, #20
 801d30a:	781b      	ldrb	r3, [r3, #0]
 801d30c:	2b02      	cmp	r3, #2
 801d30e:	d153      	bne.n	801d3b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d310:	79fa      	ldrb	r2, [r7, #7]
 801d312:	4936      	ldr	r1, [pc, #216]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d314:	4613      	mov	r3, r2
 801d316:	005b      	lsls	r3, r3, #1
 801d318:	4413      	add	r3, r2
 801d31a:	00db      	lsls	r3, r3, #3
 801d31c:	440b      	add	r3, r1
 801d31e:	3312      	adds	r3, #18
 801d320:	881b      	ldrh	r3, [r3, #0]
 801d322:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d326:	d919      	bls.n	801d35c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d328:	79fa      	ldrb	r2, [r7, #7]
 801d32a:	4613      	mov	r3, r2
 801d32c:	005b      	lsls	r3, r3, #1
 801d32e:	4413      	add	r3, r2
 801d330:	00db      	lsls	r3, r3, #3
 801d332:	4a2e      	ldr	r2, [pc, #184]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d334:	4413      	add	r3, r2
 801d336:	3304      	adds	r3, #4
 801d338:	4619      	mov	r1, r3
 801d33a:	68f8      	ldr	r0, [r7, #12]
 801d33c:	f000 fb4c 	bl	801d9d8 <etharp_request>
 801d340:	4603      	mov	r3, r0
 801d342:	2b00      	cmp	r3, #0
 801d344:	d138      	bne.n	801d3b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d346:	79fa      	ldrb	r2, [r7, #7]
 801d348:	4928      	ldr	r1, [pc, #160]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d34a:	4613      	mov	r3, r2
 801d34c:	005b      	lsls	r3, r3, #1
 801d34e:	4413      	add	r3, r2
 801d350:	00db      	lsls	r3, r3, #3
 801d352:	440b      	add	r3, r1
 801d354:	3314      	adds	r3, #20
 801d356:	2203      	movs	r2, #3
 801d358:	701a      	strb	r2, [r3, #0]
 801d35a:	e02d      	b.n	801d3b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d35c:	79fa      	ldrb	r2, [r7, #7]
 801d35e:	4923      	ldr	r1, [pc, #140]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d360:	4613      	mov	r3, r2
 801d362:	005b      	lsls	r3, r3, #1
 801d364:	4413      	add	r3, r2
 801d366:	00db      	lsls	r3, r3, #3
 801d368:	440b      	add	r3, r1
 801d36a:	3312      	adds	r3, #18
 801d36c:	881b      	ldrh	r3, [r3, #0]
 801d36e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d372:	d321      	bcc.n	801d3b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d374:	79fa      	ldrb	r2, [r7, #7]
 801d376:	4613      	mov	r3, r2
 801d378:	005b      	lsls	r3, r3, #1
 801d37a:	4413      	add	r3, r2
 801d37c:	00db      	lsls	r3, r3, #3
 801d37e:	4a1b      	ldr	r2, [pc, #108]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d380:	4413      	add	r3, r2
 801d382:	1d19      	adds	r1, r3, #4
 801d384:	79fa      	ldrb	r2, [r7, #7]
 801d386:	4613      	mov	r3, r2
 801d388:	005b      	lsls	r3, r3, #1
 801d38a:	4413      	add	r3, r2
 801d38c:	00db      	lsls	r3, r3, #3
 801d38e:	3308      	adds	r3, #8
 801d390:	4a16      	ldr	r2, [pc, #88]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d392:	4413      	add	r3, r2
 801d394:	3304      	adds	r3, #4
 801d396:	461a      	mov	r2, r3
 801d398:	68f8      	ldr	r0, [r7, #12]
 801d39a:	f000 fafb 	bl	801d994 <etharp_request_dst>
 801d39e:	4603      	mov	r3, r0
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d109      	bne.n	801d3b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d3a4:	79fa      	ldrb	r2, [r7, #7]
 801d3a6:	4911      	ldr	r1, [pc, #68]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d3a8:	4613      	mov	r3, r2
 801d3aa:	005b      	lsls	r3, r3, #1
 801d3ac:	4413      	add	r3, r2
 801d3ae:	00db      	lsls	r3, r3, #3
 801d3b0:	440b      	add	r3, r1
 801d3b2:	3314      	adds	r3, #20
 801d3b4:	2203      	movs	r2, #3
 801d3b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801d3be:	79fa      	ldrb	r2, [r7, #7]
 801d3c0:	4613      	mov	r3, r2
 801d3c2:	005b      	lsls	r3, r3, #1
 801d3c4:	4413      	add	r3, r2
 801d3c6:	00db      	lsls	r3, r3, #3
 801d3c8:	3308      	adds	r3, #8
 801d3ca:	4a08      	ldr	r2, [pc, #32]	; (801d3ec <etharp_output_to_arp_index+0x124>)
 801d3cc:	4413      	add	r3, r2
 801d3ce:	3304      	adds	r3, #4
 801d3d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d3d4:	9200      	str	r2, [sp, #0]
 801d3d6:	460a      	mov	r2, r1
 801d3d8:	68b9      	ldr	r1, [r7, #8]
 801d3da:	68f8      	ldr	r0, [r7, #12]
 801d3dc:	f001 fe3a 	bl	801f054 <ethernet_output>
 801d3e0:	4603      	mov	r3, r0
}
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	3710      	adds	r7, #16
 801d3e6:	46bd      	mov	sp, r7
 801d3e8:	bd80      	pop	{r7, pc}
 801d3ea:	bf00      	nop
 801d3ec:	2000c83c 	.word	0x2000c83c
 801d3f0:	08023c64 	.word	0x08023c64
 801d3f4:	08023dd4 	.word	0x08023dd4
 801d3f8:	08023cdc 	.word	0x08023cdc

0801d3fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d3fc:	b580      	push	{r7, lr}
 801d3fe:	b08a      	sub	sp, #40	; 0x28
 801d400:	af02      	add	r7, sp, #8
 801d402:	60f8      	str	r0, [r7, #12]
 801d404:	60b9      	str	r1, [r7, #8]
 801d406:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d106      	bne.n	801d420 <etharp_output+0x24>
 801d412:	4b73      	ldr	r3, [pc, #460]	; (801d5e0 <etharp_output+0x1e4>)
 801d414:	f240 321e 	movw	r2, #798	; 0x31e
 801d418:	4972      	ldr	r1, [pc, #456]	; (801d5e4 <etharp_output+0x1e8>)
 801d41a:	4873      	ldr	r0, [pc, #460]	; (801d5e8 <etharp_output+0x1ec>)
 801d41c:	f001 ffde 	bl	801f3dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d420:	68bb      	ldr	r3, [r7, #8]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d106      	bne.n	801d434 <etharp_output+0x38>
 801d426:	4b6e      	ldr	r3, [pc, #440]	; (801d5e0 <etharp_output+0x1e4>)
 801d428:	f240 321f 	movw	r2, #799	; 0x31f
 801d42c:	496f      	ldr	r1, [pc, #444]	; (801d5ec <etharp_output+0x1f0>)
 801d42e:	486e      	ldr	r0, [pc, #440]	; (801d5e8 <etharp_output+0x1ec>)
 801d430:	f001 ffd4 	bl	801f3dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	2b00      	cmp	r3, #0
 801d438:	d106      	bne.n	801d448 <etharp_output+0x4c>
 801d43a:	4b69      	ldr	r3, [pc, #420]	; (801d5e0 <etharp_output+0x1e4>)
 801d43c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d440:	496b      	ldr	r1, [pc, #428]	; (801d5f0 <etharp_output+0x1f4>)
 801d442:	4869      	ldr	r0, [pc, #420]	; (801d5e8 <etharp_output+0x1ec>)
 801d444:	f001 ffca 	bl	801f3dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	68f9      	ldr	r1, [r7, #12]
 801d44e:	4618      	mov	r0, r3
 801d450:	f000 fef8 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801d454:	4603      	mov	r3, r0
 801d456:	2b00      	cmp	r3, #0
 801d458:	d002      	beq.n	801d460 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d45a:	4b66      	ldr	r3, [pc, #408]	; (801d5f4 <etharp_output+0x1f8>)
 801d45c:	61fb      	str	r3, [r7, #28]
 801d45e:	e0af      	b.n	801d5c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d468:	2be0      	cmp	r3, #224	; 0xe0
 801d46a:	d118      	bne.n	801d49e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d46c:	2301      	movs	r3, #1
 801d46e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d470:	2300      	movs	r3, #0
 801d472:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d474:	235e      	movs	r3, #94	; 0x5e
 801d476:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	3301      	adds	r3, #1
 801d47c:	781b      	ldrb	r3, [r3, #0]
 801d47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d482:	b2db      	uxtb	r3, r3
 801d484:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	3302      	adds	r3, #2
 801d48a:	781b      	ldrb	r3, [r3, #0]
 801d48c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	3303      	adds	r3, #3
 801d492:	781b      	ldrb	r3, [r3, #0]
 801d494:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d496:	f107 0310 	add.w	r3, r7, #16
 801d49a:	61fb      	str	r3, [r7, #28]
 801d49c:	e090      	b.n	801d5c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	681a      	ldr	r2, [r3, #0]
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	3304      	adds	r3, #4
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	405a      	eors	r2, r3
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	3308      	adds	r3, #8
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	4013      	ands	r3, r2
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d012      	beq.n	801d4dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d4bc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d4c0:	4293      	cmp	r3, r2
 801d4c2:	d00b      	beq.n	801d4dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	330c      	adds	r3, #12
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d003      	beq.n	801d4d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	330c      	adds	r3, #12
 801d4d2:	61bb      	str	r3, [r7, #24]
 801d4d4:	e002      	b.n	801d4dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d4d6:	f06f 0303 	mvn.w	r3, #3
 801d4da:	e07d      	b.n	801d5d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d4dc:	4b46      	ldr	r3, [pc, #280]	; (801d5f8 <etharp_output+0x1fc>)
 801d4de:	781b      	ldrb	r3, [r3, #0]
 801d4e0:	4619      	mov	r1, r3
 801d4e2:	4a46      	ldr	r2, [pc, #280]	; (801d5fc <etharp_output+0x200>)
 801d4e4:	460b      	mov	r3, r1
 801d4e6:	005b      	lsls	r3, r3, #1
 801d4e8:	440b      	add	r3, r1
 801d4ea:	00db      	lsls	r3, r3, #3
 801d4ec:	4413      	add	r3, r2
 801d4ee:	3314      	adds	r3, #20
 801d4f0:	781b      	ldrb	r3, [r3, #0]
 801d4f2:	2b01      	cmp	r3, #1
 801d4f4:	d925      	bls.n	801d542 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d4f6:	4b40      	ldr	r3, [pc, #256]	; (801d5f8 <etharp_output+0x1fc>)
 801d4f8:	781b      	ldrb	r3, [r3, #0]
 801d4fa:	4619      	mov	r1, r3
 801d4fc:	4a3f      	ldr	r2, [pc, #252]	; (801d5fc <etharp_output+0x200>)
 801d4fe:	460b      	mov	r3, r1
 801d500:	005b      	lsls	r3, r3, #1
 801d502:	440b      	add	r3, r1
 801d504:	00db      	lsls	r3, r3, #3
 801d506:	4413      	add	r3, r2
 801d508:	3308      	adds	r3, #8
 801d50a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d50c:	68fa      	ldr	r2, [r7, #12]
 801d50e:	429a      	cmp	r2, r3
 801d510:	d117      	bne.n	801d542 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d512:	69bb      	ldr	r3, [r7, #24]
 801d514:	681a      	ldr	r2, [r3, #0]
 801d516:	4b38      	ldr	r3, [pc, #224]	; (801d5f8 <etharp_output+0x1fc>)
 801d518:	781b      	ldrb	r3, [r3, #0]
 801d51a:	4618      	mov	r0, r3
 801d51c:	4937      	ldr	r1, [pc, #220]	; (801d5fc <etharp_output+0x200>)
 801d51e:	4603      	mov	r3, r0
 801d520:	005b      	lsls	r3, r3, #1
 801d522:	4403      	add	r3, r0
 801d524:	00db      	lsls	r3, r3, #3
 801d526:	440b      	add	r3, r1
 801d528:	3304      	adds	r3, #4
 801d52a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d52c:	429a      	cmp	r2, r3
 801d52e:	d108      	bne.n	801d542 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d530:	4b31      	ldr	r3, [pc, #196]	; (801d5f8 <etharp_output+0x1fc>)
 801d532:	781b      	ldrb	r3, [r3, #0]
 801d534:	461a      	mov	r2, r3
 801d536:	68b9      	ldr	r1, [r7, #8]
 801d538:	68f8      	ldr	r0, [r7, #12]
 801d53a:	f7ff fec5 	bl	801d2c8 <etharp_output_to_arp_index>
 801d53e:	4603      	mov	r3, r0
 801d540:	e04a      	b.n	801d5d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d542:	2300      	movs	r3, #0
 801d544:	75fb      	strb	r3, [r7, #23]
 801d546:	e031      	b.n	801d5ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d548:	7dfa      	ldrb	r2, [r7, #23]
 801d54a:	492c      	ldr	r1, [pc, #176]	; (801d5fc <etharp_output+0x200>)
 801d54c:	4613      	mov	r3, r2
 801d54e:	005b      	lsls	r3, r3, #1
 801d550:	4413      	add	r3, r2
 801d552:	00db      	lsls	r3, r3, #3
 801d554:	440b      	add	r3, r1
 801d556:	3314      	adds	r3, #20
 801d558:	781b      	ldrb	r3, [r3, #0]
 801d55a:	2b01      	cmp	r3, #1
 801d55c:	d923      	bls.n	801d5a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d55e:	7dfa      	ldrb	r2, [r7, #23]
 801d560:	4926      	ldr	r1, [pc, #152]	; (801d5fc <etharp_output+0x200>)
 801d562:	4613      	mov	r3, r2
 801d564:	005b      	lsls	r3, r3, #1
 801d566:	4413      	add	r3, r2
 801d568:	00db      	lsls	r3, r3, #3
 801d56a:	440b      	add	r3, r1
 801d56c:	3308      	adds	r3, #8
 801d56e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d570:	68fa      	ldr	r2, [r7, #12]
 801d572:	429a      	cmp	r2, r3
 801d574:	d117      	bne.n	801d5a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d576:	69bb      	ldr	r3, [r7, #24]
 801d578:	6819      	ldr	r1, [r3, #0]
 801d57a:	7dfa      	ldrb	r2, [r7, #23]
 801d57c:	481f      	ldr	r0, [pc, #124]	; (801d5fc <etharp_output+0x200>)
 801d57e:	4613      	mov	r3, r2
 801d580:	005b      	lsls	r3, r3, #1
 801d582:	4413      	add	r3, r2
 801d584:	00db      	lsls	r3, r3, #3
 801d586:	4403      	add	r3, r0
 801d588:	3304      	adds	r3, #4
 801d58a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d58c:	4299      	cmp	r1, r3
 801d58e:	d10a      	bne.n	801d5a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d590:	4a19      	ldr	r2, [pc, #100]	; (801d5f8 <etharp_output+0x1fc>)
 801d592:	7dfb      	ldrb	r3, [r7, #23]
 801d594:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d596:	7dfb      	ldrb	r3, [r7, #23]
 801d598:	461a      	mov	r2, r3
 801d59a:	68b9      	ldr	r1, [r7, #8]
 801d59c:	68f8      	ldr	r0, [r7, #12]
 801d59e:	f7ff fe93 	bl	801d2c8 <etharp_output_to_arp_index>
 801d5a2:	4603      	mov	r3, r0
 801d5a4:	e018      	b.n	801d5d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d5a6:	7dfb      	ldrb	r3, [r7, #23]
 801d5a8:	3301      	adds	r3, #1
 801d5aa:	75fb      	strb	r3, [r7, #23]
 801d5ac:	7dfb      	ldrb	r3, [r7, #23]
 801d5ae:	2b09      	cmp	r3, #9
 801d5b0:	d9ca      	bls.n	801d548 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d5b2:	68ba      	ldr	r2, [r7, #8]
 801d5b4:	69b9      	ldr	r1, [r7, #24]
 801d5b6:	68f8      	ldr	r0, [r7, #12]
 801d5b8:	f000 f822 	bl	801d600 <etharp_query>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	e00b      	b.n	801d5d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d5c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d5ca:	9300      	str	r3, [sp, #0]
 801d5cc:	69fb      	ldr	r3, [r7, #28]
 801d5ce:	68b9      	ldr	r1, [r7, #8]
 801d5d0:	68f8      	ldr	r0, [r7, #12]
 801d5d2:	f001 fd3f 	bl	801f054 <ethernet_output>
 801d5d6:	4603      	mov	r3, r0
}
 801d5d8:	4618      	mov	r0, r3
 801d5da:	3720      	adds	r7, #32
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}
 801d5e0:	08023c64 	.word	0x08023c64
 801d5e4:	08023db4 	.word	0x08023db4
 801d5e8:	08023cdc 	.word	0x08023cdc
 801d5ec:	08023e04 	.word	0x08023e04
 801d5f0:	08023da4 	.word	0x08023da4
 801d5f4:	0807b16c 	.word	0x0807b16c
 801d5f8:	2000c92c 	.word	0x2000c92c
 801d5fc:	2000c83c 	.word	0x2000c83c

0801d600 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d600:	b580      	push	{r7, lr}
 801d602:	b08c      	sub	sp, #48	; 0x30
 801d604:	af02      	add	r7, sp, #8
 801d606:	60f8      	str	r0, [r7, #12]
 801d608:	60b9      	str	r1, [r7, #8]
 801d60a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	3326      	adds	r3, #38	; 0x26
 801d610:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d612:	23ff      	movs	r3, #255	; 0xff
 801d614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801d618:	2300      	movs	r3, #0
 801d61a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d61c:	68bb      	ldr	r3, [r7, #8]
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	68f9      	ldr	r1, [r7, #12]
 801d622:	4618      	mov	r0, r3
 801d624:	f000 fe0e 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801d628:	4603      	mov	r3, r0
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d10c      	bne.n	801d648 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d62e:	68bb      	ldr	r3, [r7, #8]
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d636:	2be0      	cmp	r3, #224	; 0xe0
 801d638:	d006      	beq.n	801d648 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d63a:	68bb      	ldr	r3, [r7, #8]
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	d003      	beq.n	801d648 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d640:	68bb      	ldr	r3, [r7, #8]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	2b00      	cmp	r3, #0
 801d646:	d102      	bne.n	801d64e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d648:	f06f 030f 	mvn.w	r3, #15
 801d64c:	e101      	b.n	801d852 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d64e:	68fa      	ldr	r2, [r7, #12]
 801d650:	2101      	movs	r1, #1
 801d652:	68b8      	ldr	r0, [r7, #8]
 801d654:	f7ff fb60 	bl	801cd18 <etharp_find_entry>
 801d658:	4603      	mov	r3, r0
 801d65a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d65c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d660:	2b00      	cmp	r3, #0
 801d662:	da02      	bge.n	801d66a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d664:	8a7b      	ldrh	r3, [r7, #18]
 801d666:	b25b      	sxtb	r3, r3
 801d668:	e0f3      	b.n	801d852 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d66a:	8a7b      	ldrh	r3, [r7, #18]
 801d66c:	2b7e      	cmp	r3, #126	; 0x7e
 801d66e:	d906      	bls.n	801d67e <etharp_query+0x7e>
 801d670:	4b7a      	ldr	r3, [pc, #488]	; (801d85c <etharp_query+0x25c>)
 801d672:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d676:	497a      	ldr	r1, [pc, #488]	; (801d860 <etharp_query+0x260>)
 801d678:	487a      	ldr	r0, [pc, #488]	; (801d864 <etharp_query+0x264>)
 801d67a:	f001 feaf 	bl	801f3dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d67e:	8a7b      	ldrh	r3, [r7, #18]
 801d680:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d682:	7c7a      	ldrb	r2, [r7, #17]
 801d684:	4978      	ldr	r1, [pc, #480]	; (801d868 <etharp_query+0x268>)
 801d686:	4613      	mov	r3, r2
 801d688:	005b      	lsls	r3, r3, #1
 801d68a:	4413      	add	r3, r2
 801d68c:	00db      	lsls	r3, r3, #3
 801d68e:	440b      	add	r3, r1
 801d690:	3314      	adds	r3, #20
 801d692:	781b      	ldrb	r3, [r3, #0]
 801d694:	2b00      	cmp	r3, #0
 801d696:	d115      	bne.n	801d6c4 <etharp_query+0xc4>
    is_new_entry = 1;
 801d698:	2301      	movs	r3, #1
 801d69a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d69c:	7c7a      	ldrb	r2, [r7, #17]
 801d69e:	4972      	ldr	r1, [pc, #456]	; (801d868 <etharp_query+0x268>)
 801d6a0:	4613      	mov	r3, r2
 801d6a2:	005b      	lsls	r3, r3, #1
 801d6a4:	4413      	add	r3, r2
 801d6a6:	00db      	lsls	r3, r3, #3
 801d6a8:	440b      	add	r3, r1
 801d6aa:	3314      	adds	r3, #20
 801d6ac:	2201      	movs	r2, #1
 801d6ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d6b0:	7c7a      	ldrb	r2, [r7, #17]
 801d6b2:	496d      	ldr	r1, [pc, #436]	; (801d868 <etharp_query+0x268>)
 801d6b4:	4613      	mov	r3, r2
 801d6b6:	005b      	lsls	r3, r3, #1
 801d6b8:	4413      	add	r3, r2
 801d6ba:	00db      	lsls	r3, r3, #3
 801d6bc:	440b      	add	r3, r1
 801d6be:	3308      	adds	r3, #8
 801d6c0:	68fa      	ldr	r2, [r7, #12]
 801d6c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d6c4:	7c7a      	ldrb	r2, [r7, #17]
 801d6c6:	4968      	ldr	r1, [pc, #416]	; (801d868 <etharp_query+0x268>)
 801d6c8:	4613      	mov	r3, r2
 801d6ca:	005b      	lsls	r3, r3, #1
 801d6cc:	4413      	add	r3, r2
 801d6ce:	00db      	lsls	r3, r3, #3
 801d6d0:	440b      	add	r3, r1
 801d6d2:	3314      	adds	r3, #20
 801d6d4:	781b      	ldrb	r3, [r3, #0]
 801d6d6:	2b01      	cmp	r3, #1
 801d6d8:	d011      	beq.n	801d6fe <etharp_query+0xfe>
 801d6da:	7c7a      	ldrb	r2, [r7, #17]
 801d6dc:	4962      	ldr	r1, [pc, #392]	; (801d868 <etharp_query+0x268>)
 801d6de:	4613      	mov	r3, r2
 801d6e0:	005b      	lsls	r3, r3, #1
 801d6e2:	4413      	add	r3, r2
 801d6e4:	00db      	lsls	r3, r3, #3
 801d6e6:	440b      	add	r3, r1
 801d6e8:	3314      	adds	r3, #20
 801d6ea:	781b      	ldrb	r3, [r3, #0]
 801d6ec:	2b01      	cmp	r3, #1
 801d6ee:	d806      	bhi.n	801d6fe <etharp_query+0xfe>
 801d6f0:	4b5a      	ldr	r3, [pc, #360]	; (801d85c <etharp_query+0x25c>)
 801d6f2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d6f6:	495d      	ldr	r1, [pc, #372]	; (801d86c <etharp_query+0x26c>)
 801d6f8:	485a      	ldr	r0, [pc, #360]	; (801d864 <etharp_query+0x264>)
 801d6fa:	f001 fe6f 	bl	801f3dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d6fe:	6a3b      	ldr	r3, [r7, #32]
 801d700:	2b00      	cmp	r3, #0
 801d702:	d102      	bne.n	801d70a <etharp_query+0x10a>
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	2b00      	cmp	r3, #0
 801d708:	d10c      	bne.n	801d724 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d70a:	68b9      	ldr	r1, [r7, #8]
 801d70c:	68f8      	ldr	r0, [r7, #12]
 801d70e:	f000 f963 	bl	801d9d8 <etharp_request>
 801d712:	4603      	mov	r3, r0
 801d714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d102      	bne.n	801d724 <etharp_query+0x124>
      return result;
 801d71e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d722:	e096      	b.n	801d852 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d106      	bne.n	801d738 <etharp_query+0x138>
 801d72a:	4b4c      	ldr	r3, [pc, #304]	; (801d85c <etharp_query+0x25c>)
 801d72c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d730:	494f      	ldr	r1, [pc, #316]	; (801d870 <etharp_query+0x270>)
 801d732:	484c      	ldr	r0, [pc, #304]	; (801d864 <etharp_query+0x264>)
 801d734:	f001 fe52 	bl	801f3dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d738:	7c7a      	ldrb	r2, [r7, #17]
 801d73a:	494b      	ldr	r1, [pc, #300]	; (801d868 <etharp_query+0x268>)
 801d73c:	4613      	mov	r3, r2
 801d73e:	005b      	lsls	r3, r3, #1
 801d740:	4413      	add	r3, r2
 801d742:	00db      	lsls	r3, r3, #3
 801d744:	440b      	add	r3, r1
 801d746:	3314      	adds	r3, #20
 801d748:	781b      	ldrb	r3, [r3, #0]
 801d74a:	2b01      	cmp	r3, #1
 801d74c:	d917      	bls.n	801d77e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d74e:	4a49      	ldr	r2, [pc, #292]	; (801d874 <etharp_query+0x274>)
 801d750:	7c7b      	ldrb	r3, [r7, #17]
 801d752:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d754:	7c7a      	ldrb	r2, [r7, #17]
 801d756:	4613      	mov	r3, r2
 801d758:	005b      	lsls	r3, r3, #1
 801d75a:	4413      	add	r3, r2
 801d75c:	00db      	lsls	r3, r3, #3
 801d75e:	3308      	adds	r3, #8
 801d760:	4a41      	ldr	r2, [pc, #260]	; (801d868 <etharp_query+0x268>)
 801d762:	4413      	add	r3, r2
 801d764:	3304      	adds	r3, #4
 801d766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d76a:	9200      	str	r2, [sp, #0]
 801d76c:	697a      	ldr	r2, [r7, #20]
 801d76e:	6879      	ldr	r1, [r7, #4]
 801d770:	68f8      	ldr	r0, [r7, #12]
 801d772:	f001 fc6f 	bl	801f054 <ethernet_output>
 801d776:	4603      	mov	r3, r0
 801d778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d77c:	e067      	b.n	801d84e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d77e:	7c7a      	ldrb	r2, [r7, #17]
 801d780:	4939      	ldr	r1, [pc, #228]	; (801d868 <etharp_query+0x268>)
 801d782:	4613      	mov	r3, r2
 801d784:	005b      	lsls	r3, r3, #1
 801d786:	4413      	add	r3, r2
 801d788:	00db      	lsls	r3, r3, #3
 801d78a:	440b      	add	r3, r1
 801d78c:	3314      	adds	r3, #20
 801d78e:	781b      	ldrb	r3, [r3, #0]
 801d790:	2b01      	cmp	r3, #1
 801d792:	d15c      	bne.n	801d84e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d794:	2300      	movs	r3, #0
 801d796:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d79c:	e01c      	b.n	801d7d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d79e:	69fb      	ldr	r3, [r7, #28]
 801d7a0:	895a      	ldrh	r2, [r3, #10]
 801d7a2:	69fb      	ldr	r3, [r7, #28]
 801d7a4:	891b      	ldrh	r3, [r3, #8]
 801d7a6:	429a      	cmp	r2, r3
 801d7a8:	d10a      	bne.n	801d7c0 <etharp_query+0x1c0>
 801d7aa:	69fb      	ldr	r3, [r7, #28]
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d006      	beq.n	801d7c0 <etharp_query+0x1c0>
 801d7b2:	4b2a      	ldr	r3, [pc, #168]	; (801d85c <etharp_query+0x25c>)
 801d7b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d7b8:	492f      	ldr	r1, [pc, #188]	; (801d878 <etharp_query+0x278>)
 801d7ba:	482a      	ldr	r0, [pc, #168]	; (801d864 <etharp_query+0x264>)
 801d7bc:	f001 fe0e 	bl	801f3dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d7c0:	69fb      	ldr	r3, [r7, #28]
 801d7c2:	7b1b      	ldrb	r3, [r3, #12]
 801d7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d002      	beq.n	801d7d2 <etharp_query+0x1d2>
        copy_needed = 1;
 801d7cc:	2301      	movs	r3, #1
 801d7ce:	61bb      	str	r3, [r7, #24]
        break;
 801d7d0:	e005      	b.n	801d7de <etharp_query+0x1de>
      }
      p = p->next;
 801d7d2:	69fb      	ldr	r3, [r7, #28]
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d7d8:	69fb      	ldr	r3, [r7, #28]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d1df      	bne.n	801d79e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d7de:	69bb      	ldr	r3, [r7, #24]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d007      	beq.n	801d7f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d7e4:	687a      	ldr	r2, [r7, #4]
 801d7e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d7ea:	200e      	movs	r0, #14
 801d7ec:	f7f8 fdfe 	bl	80163ec <pbuf_clone>
 801d7f0:	61f8      	str	r0, [r7, #28]
 801d7f2:	e004      	b.n	801d7fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d7f8:	69f8      	ldr	r0, [r7, #28]
 801d7fa:	f7f8 fc35 	bl	8016068 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d7fe:	69fb      	ldr	r3, [r7, #28]
 801d800:	2b00      	cmp	r3, #0
 801d802:	d021      	beq.n	801d848 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d804:	7c7a      	ldrb	r2, [r7, #17]
 801d806:	4918      	ldr	r1, [pc, #96]	; (801d868 <etharp_query+0x268>)
 801d808:	4613      	mov	r3, r2
 801d80a:	005b      	lsls	r3, r3, #1
 801d80c:	4413      	add	r3, r2
 801d80e:	00db      	lsls	r3, r3, #3
 801d810:	440b      	add	r3, r1
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	2b00      	cmp	r3, #0
 801d816:	d00a      	beq.n	801d82e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d818:	7c7a      	ldrb	r2, [r7, #17]
 801d81a:	4913      	ldr	r1, [pc, #76]	; (801d868 <etharp_query+0x268>)
 801d81c:	4613      	mov	r3, r2
 801d81e:	005b      	lsls	r3, r3, #1
 801d820:	4413      	add	r3, r2
 801d822:	00db      	lsls	r3, r3, #3
 801d824:	440b      	add	r3, r1
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	4618      	mov	r0, r3
 801d82a:	f7f8 fb77 	bl	8015f1c <pbuf_free>
      }
      arp_table[i].q = p;
 801d82e:	7c7a      	ldrb	r2, [r7, #17]
 801d830:	490d      	ldr	r1, [pc, #52]	; (801d868 <etharp_query+0x268>)
 801d832:	4613      	mov	r3, r2
 801d834:	005b      	lsls	r3, r3, #1
 801d836:	4413      	add	r3, r2
 801d838:	00db      	lsls	r3, r3, #3
 801d83a:	440b      	add	r3, r1
 801d83c:	69fa      	ldr	r2, [r7, #28]
 801d83e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d840:	2300      	movs	r3, #0
 801d842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d846:	e002      	b.n	801d84e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d848:	23ff      	movs	r3, #255	; 0xff
 801d84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d84e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d852:	4618      	mov	r0, r3
 801d854:	3728      	adds	r7, #40	; 0x28
 801d856:	46bd      	mov	sp, r7
 801d858:	bd80      	pop	{r7, pc}
 801d85a:	bf00      	nop
 801d85c:	08023c64 	.word	0x08023c64
 801d860:	08023e10 	.word	0x08023e10
 801d864:	08023cdc 	.word	0x08023cdc
 801d868:	2000c83c 	.word	0x2000c83c
 801d86c:	08023e20 	.word	0x08023e20
 801d870:	08023e04 	.word	0x08023e04
 801d874:	2000c92c 	.word	0x2000c92c
 801d878:	08023e48 	.word	0x08023e48

0801d87c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b08a      	sub	sp, #40	; 0x28
 801d880:	af02      	add	r7, sp, #8
 801d882:	60f8      	str	r0, [r7, #12]
 801d884:	60b9      	str	r1, [r7, #8]
 801d886:	607a      	str	r2, [r7, #4]
 801d888:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d88a:	2300      	movs	r3, #0
 801d88c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	2b00      	cmp	r3, #0
 801d892:	d106      	bne.n	801d8a2 <etharp_raw+0x26>
 801d894:	4b3a      	ldr	r3, [pc, #232]	; (801d980 <etharp_raw+0x104>)
 801d896:	f240 4257 	movw	r2, #1111	; 0x457
 801d89a:	493a      	ldr	r1, [pc, #232]	; (801d984 <etharp_raw+0x108>)
 801d89c:	483a      	ldr	r0, [pc, #232]	; (801d988 <etharp_raw+0x10c>)
 801d89e:	f001 fd9d 	bl	801f3dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d8a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d8a6:	211c      	movs	r1, #28
 801d8a8:	200e      	movs	r0, #14
 801d8aa:	f7f8 f841 	bl	8015930 <pbuf_alloc>
 801d8ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d8b0:	69bb      	ldr	r3, [r7, #24]
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d102      	bne.n	801d8bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d8b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d8ba:	e05d      	b.n	801d978 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d8bc:	69bb      	ldr	r3, [r7, #24]
 801d8be:	895b      	ldrh	r3, [r3, #10]
 801d8c0:	2b1b      	cmp	r3, #27
 801d8c2:	d806      	bhi.n	801d8d2 <etharp_raw+0x56>
 801d8c4:	4b2e      	ldr	r3, [pc, #184]	; (801d980 <etharp_raw+0x104>)
 801d8c6:	f240 4262 	movw	r2, #1122	; 0x462
 801d8ca:	4930      	ldr	r1, [pc, #192]	; (801d98c <etharp_raw+0x110>)
 801d8cc:	482e      	ldr	r0, [pc, #184]	; (801d988 <etharp_raw+0x10c>)
 801d8ce:	f001 fd85 	bl	801f3dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d8d2:	69bb      	ldr	r3, [r7, #24]
 801d8d4:	685b      	ldr	r3, [r3, #4]
 801d8d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d8d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d8da:	4618      	mov	r0, r3
 801d8dc:	f7f6 ff2a 	bl	8014734 <lwip_htons>
 801d8e0:	4603      	mov	r3, r0
 801d8e2:	461a      	mov	r2, r3
 801d8e4:	697b      	ldr	r3, [r7, #20]
 801d8e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d8ee:	2b06      	cmp	r3, #6
 801d8f0:	d006      	beq.n	801d900 <etharp_raw+0x84>
 801d8f2:	4b23      	ldr	r3, [pc, #140]	; (801d980 <etharp_raw+0x104>)
 801d8f4:	f240 4269 	movw	r2, #1129	; 0x469
 801d8f8:	4925      	ldr	r1, [pc, #148]	; (801d990 <etharp_raw+0x114>)
 801d8fa:	4823      	ldr	r0, [pc, #140]	; (801d988 <etharp_raw+0x10c>)
 801d8fc:	f001 fd6e 	bl	801f3dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d900:	697b      	ldr	r3, [r7, #20]
 801d902:	3308      	adds	r3, #8
 801d904:	2206      	movs	r2, #6
 801d906:	6839      	ldr	r1, [r7, #0]
 801d908:	4618      	mov	r0, r3
 801d90a:	f001 fd37 	bl	801f37c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d90e:	697b      	ldr	r3, [r7, #20]
 801d910:	3312      	adds	r3, #18
 801d912:	2206      	movs	r2, #6
 801d914:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d916:	4618      	mov	r0, r3
 801d918:	f001 fd30 	bl	801f37c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d91c:	697b      	ldr	r3, [r7, #20]
 801d91e:	330e      	adds	r3, #14
 801d920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d922:	6812      	ldr	r2, [r2, #0]
 801d924:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d926:	697b      	ldr	r3, [r7, #20]
 801d928:	3318      	adds	r3, #24
 801d92a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d92c:	6812      	ldr	r2, [r2, #0]
 801d92e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d930:	697b      	ldr	r3, [r7, #20]
 801d932:	2200      	movs	r2, #0
 801d934:	701a      	strb	r2, [r3, #0]
 801d936:	2200      	movs	r2, #0
 801d938:	f042 0201 	orr.w	r2, r2, #1
 801d93c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d93e:	697b      	ldr	r3, [r7, #20]
 801d940:	2200      	movs	r2, #0
 801d942:	f042 0208 	orr.w	r2, r2, #8
 801d946:	709a      	strb	r2, [r3, #2]
 801d948:	2200      	movs	r2, #0
 801d94a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d94c:	697b      	ldr	r3, [r7, #20]
 801d94e:	2206      	movs	r2, #6
 801d950:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d952:	697b      	ldr	r3, [r7, #20]
 801d954:	2204      	movs	r2, #4
 801d956:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d958:	f640 0306 	movw	r3, #2054	; 0x806
 801d95c:	9300      	str	r3, [sp, #0]
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	68ba      	ldr	r2, [r7, #8]
 801d962:	69b9      	ldr	r1, [r7, #24]
 801d964:	68f8      	ldr	r0, [r7, #12]
 801d966:	f001 fb75 	bl	801f054 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d96a:	69b8      	ldr	r0, [r7, #24]
 801d96c:	f7f8 fad6 	bl	8015f1c <pbuf_free>
  p = NULL;
 801d970:	2300      	movs	r3, #0
 801d972:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d974:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d978:	4618      	mov	r0, r3
 801d97a:	3720      	adds	r7, #32
 801d97c:	46bd      	mov	sp, r7
 801d97e:	bd80      	pop	{r7, pc}
 801d980:	08023c64 	.word	0x08023c64
 801d984:	08023db4 	.word	0x08023db4
 801d988:	08023cdc 	.word	0x08023cdc
 801d98c:	08023e64 	.word	0x08023e64
 801d990:	08023e98 	.word	0x08023e98

0801d994 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d994:	b580      	push	{r7, lr}
 801d996:	b088      	sub	sp, #32
 801d998:	af04      	add	r7, sp, #16
 801d99a:	60f8      	str	r0, [r7, #12]
 801d99c:	60b9      	str	r1, [r7, #8]
 801d99e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d9ac:	68fb      	ldr	r3, [r7, #12]
 801d9ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d9b0:	2201      	movs	r2, #1
 801d9b2:	9203      	str	r2, [sp, #12]
 801d9b4:	68ba      	ldr	r2, [r7, #8]
 801d9b6:	9202      	str	r2, [sp, #8]
 801d9b8:	4a06      	ldr	r2, [pc, #24]	; (801d9d4 <etharp_request_dst+0x40>)
 801d9ba:	9201      	str	r2, [sp, #4]
 801d9bc:	9300      	str	r3, [sp, #0]
 801d9be:	4603      	mov	r3, r0
 801d9c0:	687a      	ldr	r2, [r7, #4]
 801d9c2:	68f8      	ldr	r0, [r7, #12]
 801d9c4:	f7ff ff5a 	bl	801d87c <etharp_raw>
 801d9c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d9ca:	4618      	mov	r0, r3
 801d9cc:	3710      	adds	r7, #16
 801d9ce:	46bd      	mov	sp, r7
 801d9d0:	bd80      	pop	{r7, pc}
 801d9d2:	bf00      	nop
 801d9d4:	0807b174 	.word	0x0807b174

0801d9d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b082      	sub	sp, #8
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]
 801d9e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d9e2:	4a05      	ldr	r2, [pc, #20]	; (801d9f8 <etharp_request+0x20>)
 801d9e4:	6839      	ldr	r1, [r7, #0]
 801d9e6:	6878      	ldr	r0, [r7, #4]
 801d9e8:	f7ff ffd4 	bl	801d994 <etharp_request_dst>
 801d9ec:	4603      	mov	r3, r0
}
 801d9ee:	4618      	mov	r0, r3
 801d9f0:	3708      	adds	r7, #8
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	bd80      	pop	{r7, pc}
 801d9f6:	bf00      	nop
 801d9f8:	0807b16c 	.word	0x0807b16c

0801d9fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d9fc:	b580      	push	{r7, lr}
 801d9fe:	b08e      	sub	sp, #56	; 0x38
 801da00:	af04      	add	r7, sp, #16
 801da02:	6078      	str	r0, [r7, #4]
 801da04:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801da06:	4b79      	ldr	r3, [pc, #484]	; (801dbec <icmp_input+0x1f0>)
 801da08:	689b      	ldr	r3, [r3, #8]
 801da0a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da0e:	781b      	ldrb	r3, [r3, #0]
 801da10:	f003 030f 	and.w	r3, r3, #15
 801da14:	b2db      	uxtb	r3, r3
 801da16:	009b      	lsls	r3, r3, #2
 801da18:	b2db      	uxtb	r3, r3
 801da1a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801da1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801da1e:	2b13      	cmp	r3, #19
 801da20:	f240 80cd 	bls.w	801dbbe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	895b      	ldrh	r3, [r3, #10]
 801da28:	2b03      	cmp	r3, #3
 801da2a:	f240 80ca 	bls.w	801dbc2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	685b      	ldr	r3, [r3, #4]
 801da32:	781b      	ldrb	r3, [r3, #0]
 801da34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801da38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	f000 80b7 	beq.w	801dbb0 <icmp_input+0x1b4>
 801da42:	2b08      	cmp	r3, #8
 801da44:	f040 80b7 	bne.w	801dbb6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801da48:	4b69      	ldr	r3, [pc, #420]	; (801dbf0 <icmp_input+0x1f4>)
 801da4a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801da4c:	4b67      	ldr	r3, [pc, #412]	; (801dbec <icmp_input+0x1f0>)
 801da4e:	695b      	ldr	r3, [r3, #20]
 801da50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801da54:	2be0      	cmp	r3, #224	; 0xe0
 801da56:	f000 80bb 	beq.w	801dbd0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801da5a:	4b64      	ldr	r3, [pc, #400]	; (801dbec <icmp_input+0x1f0>)
 801da5c:	695b      	ldr	r3, [r3, #20]
 801da5e:	4a63      	ldr	r2, [pc, #396]	; (801dbec <icmp_input+0x1f0>)
 801da60:	6812      	ldr	r2, [r2, #0]
 801da62:	4611      	mov	r1, r2
 801da64:	4618      	mov	r0, r3
 801da66:	f000 fbed 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801da6a:	4603      	mov	r3, r0
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	f040 80b1 	bne.w	801dbd4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	891b      	ldrh	r3, [r3, #8]
 801da76:	2b07      	cmp	r3, #7
 801da78:	f240 80a5 	bls.w	801dbc6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801da7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801da7e:	330e      	adds	r3, #14
 801da80:	4619      	mov	r1, r3
 801da82:	6878      	ldr	r0, [r7, #4]
 801da84:	f7f8 f9a2 	bl	8015dcc <pbuf_add_header>
 801da88:	4603      	mov	r3, r0
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d04b      	beq.n	801db26 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	891a      	ldrh	r2, [r3, #8]
 801da92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801da94:	4413      	add	r3, r2
 801da96:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	891b      	ldrh	r3, [r3, #8]
 801da9c:	8b7a      	ldrh	r2, [r7, #26]
 801da9e:	429a      	cmp	r2, r3
 801daa0:	f0c0 809a 	bcc.w	801dbd8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801daa4:	8b7b      	ldrh	r3, [r7, #26]
 801daa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801daaa:	4619      	mov	r1, r3
 801daac:	200e      	movs	r0, #14
 801daae:	f7f7 ff3f 	bl	8015930 <pbuf_alloc>
 801dab2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801dab4:	697b      	ldr	r3, [r7, #20]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	f000 8090 	beq.w	801dbdc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801dabc:	697b      	ldr	r3, [r7, #20]
 801dabe:	895b      	ldrh	r3, [r3, #10]
 801dac0:	461a      	mov	r2, r3
 801dac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dac4:	3308      	adds	r3, #8
 801dac6:	429a      	cmp	r2, r3
 801dac8:	d203      	bcs.n	801dad2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801daca:	6978      	ldr	r0, [r7, #20]
 801dacc:	f7f8 fa26 	bl	8015f1c <pbuf_free>
          goto icmperr;
 801dad0:	e085      	b.n	801dbde <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801dad2:	697b      	ldr	r3, [r7, #20]
 801dad4:	685b      	ldr	r3, [r3, #4]
 801dad6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801dad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dada:	4618      	mov	r0, r3
 801dadc:	f001 fc4e 	bl	801f37c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801dae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dae2:	4619      	mov	r1, r3
 801dae4:	6978      	ldr	r0, [r7, #20]
 801dae6:	f7f8 f981 	bl	8015dec <pbuf_remove_header>
 801daea:	4603      	mov	r3, r0
 801daec:	2b00      	cmp	r3, #0
 801daee:	d009      	beq.n	801db04 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801daf0:	4b40      	ldr	r3, [pc, #256]	; (801dbf4 <icmp_input+0x1f8>)
 801daf2:	22b6      	movs	r2, #182	; 0xb6
 801daf4:	4940      	ldr	r1, [pc, #256]	; (801dbf8 <icmp_input+0x1fc>)
 801daf6:	4841      	ldr	r0, [pc, #260]	; (801dbfc <icmp_input+0x200>)
 801daf8:	f001 fc70 	bl	801f3dc <iprintf>
          pbuf_free(r);
 801dafc:	6978      	ldr	r0, [r7, #20]
 801dafe:	f7f8 fa0d 	bl	8015f1c <pbuf_free>
          goto icmperr;
 801db02:	e06c      	b.n	801dbde <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801db04:	6879      	ldr	r1, [r7, #4]
 801db06:	6978      	ldr	r0, [r7, #20]
 801db08:	f7f8 fb2c 	bl	8016164 <pbuf_copy>
 801db0c:	4603      	mov	r3, r0
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d003      	beq.n	801db1a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801db12:	6978      	ldr	r0, [r7, #20]
 801db14:	f7f8 fa02 	bl	8015f1c <pbuf_free>
          goto icmperr;
 801db18:	e061      	b.n	801dbde <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801db1a:	6878      	ldr	r0, [r7, #4]
 801db1c:	f7f8 f9fe 	bl	8015f1c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801db20:	697b      	ldr	r3, [r7, #20]
 801db22:	607b      	str	r3, [r7, #4]
 801db24:	e00f      	b.n	801db46 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801db26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801db28:	330e      	adds	r3, #14
 801db2a:	4619      	mov	r1, r3
 801db2c:	6878      	ldr	r0, [r7, #4]
 801db2e:	f7f8 f95d 	bl	8015dec <pbuf_remove_header>
 801db32:	4603      	mov	r3, r0
 801db34:	2b00      	cmp	r3, #0
 801db36:	d006      	beq.n	801db46 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801db38:	4b2e      	ldr	r3, [pc, #184]	; (801dbf4 <icmp_input+0x1f8>)
 801db3a:	22c7      	movs	r2, #199	; 0xc7
 801db3c:	4930      	ldr	r1, [pc, #192]	; (801dc00 <icmp_input+0x204>)
 801db3e:	482f      	ldr	r0, [pc, #188]	; (801dbfc <icmp_input+0x200>)
 801db40:	f001 fc4c 	bl	801f3dc <iprintf>
          goto icmperr;
 801db44:	e04b      	b.n	801dbde <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	685b      	ldr	r3, [r3, #4]
 801db4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801db4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801db4e:	4619      	mov	r1, r3
 801db50:	6878      	ldr	r0, [r7, #4]
 801db52:	f7f8 f93b 	bl	8015dcc <pbuf_add_header>
 801db56:	4603      	mov	r3, r0
 801db58:	2b00      	cmp	r3, #0
 801db5a:	d12b      	bne.n	801dbb4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	685b      	ldr	r3, [r3, #4]
 801db60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801db62:	69fb      	ldr	r3, [r7, #28]
 801db64:	681a      	ldr	r2, [r3, #0]
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801db6a:	4b20      	ldr	r3, [pc, #128]	; (801dbec <icmp_input+0x1f0>)
 801db6c:	691a      	ldr	r2, [r3, #16]
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801db72:	693b      	ldr	r3, [r7, #16]
 801db74:	2200      	movs	r2, #0
 801db76:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801db78:	693b      	ldr	r3, [r7, #16]
 801db7a:	2200      	movs	r2, #0
 801db7c:	709a      	strb	r2, [r3, #2]
 801db7e:	2200      	movs	r2, #0
 801db80:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	22ff      	movs	r2, #255	; 0xff
 801db86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	2200      	movs	r2, #0
 801db8c:	729a      	strb	r2, [r3, #10]
 801db8e:	2200      	movs	r2, #0
 801db90:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801db92:	683b      	ldr	r3, [r7, #0]
 801db94:	9302      	str	r3, [sp, #8]
 801db96:	2301      	movs	r3, #1
 801db98:	9301      	str	r3, [sp, #4]
 801db9a:	2300      	movs	r3, #0
 801db9c:	9300      	str	r3, [sp, #0]
 801db9e:	23ff      	movs	r3, #255	; 0xff
 801dba0:	2200      	movs	r2, #0
 801dba2:	69f9      	ldr	r1, [r7, #28]
 801dba4:	6878      	ldr	r0, [r7, #4]
 801dba6:	f000 fa75 	bl	801e094 <ip4_output_if>
 801dbaa:	4603      	mov	r3, r0
 801dbac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801dbae:	e001      	b.n	801dbb4 <icmp_input+0x1b8>
      break;
 801dbb0:	bf00      	nop
 801dbb2:	e000      	b.n	801dbb6 <icmp_input+0x1ba>
      break;
 801dbb4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801dbb6:	6878      	ldr	r0, [r7, #4]
 801dbb8:	f7f8 f9b0 	bl	8015f1c <pbuf_free>
  return;
 801dbbc:	e013      	b.n	801dbe6 <icmp_input+0x1ea>
    goto lenerr;
 801dbbe:	bf00      	nop
 801dbc0:	e002      	b.n	801dbc8 <icmp_input+0x1cc>
    goto lenerr;
 801dbc2:	bf00      	nop
 801dbc4:	e000      	b.n	801dbc8 <icmp_input+0x1cc>
        goto lenerr;
 801dbc6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801dbc8:	6878      	ldr	r0, [r7, #4]
 801dbca:	f7f8 f9a7 	bl	8015f1c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801dbce:	e00a      	b.n	801dbe6 <icmp_input+0x1ea>
        goto icmperr;
 801dbd0:	bf00      	nop
 801dbd2:	e004      	b.n	801dbde <icmp_input+0x1e2>
        goto icmperr;
 801dbd4:	bf00      	nop
 801dbd6:	e002      	b.n	801dbde <icmp_input+0x1e2>
          goto icmperr;
 801dbd8:	bf00      	nop
 801dbda:	e000      	b.n	801dbde <icmp_input+0x1e2>
          goto icmperr;
 801dbdc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801dbde:	6878      	ldr	r0, [r7, #4]
 801dbe0:	f7f8 f99c 	bl	8015f1c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801dbe4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801dbe6:	3728      	adds	r7, #40	; 0x28
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	bd80      	pop	{r7, pc}
 801dbec:	200114a0 	.word	0x200114a0
 801dbf0:	200114b4 	.word	0x200114b4
 801dbf4:	08023edc 	.word	0x08023edc
 801dbf8:	08023f14 	.word	0x08023f14
 801dbfc:	08023f4c 	.word	0x08023f4c
 801dc00:	08023f74 	.word	0x08023f74

0801dc04 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b082      	sub	sp, #8
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	6078      	str	r0, [r7, #4]
 801dc0c:	460b      	mov	r3, r1
 801dc0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801dc10:	78fb      	ldrb	r3, [r7, #3]
 801dc12:	461a      	mov	r2, r3
 801dc14:	2103      	movs	r1, #3
 801dc16:	6878      	ldr	r0, [r7, #4]
 801dc18:	f000 f814 	bl	801dc44 <icmp_send_response>
}
 801dc1c:	bf00      	nop
 801dc1e:	3708      	adds	r7, #8
 801dc20:	46bd      	mov	sp, r7
 801dc22:	bd80      	pop	{r7, pc}

0801dc24 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801dc24:	b580      	push	{r7, lr}
 801dc26:	b082      	sub	sp, #8
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	6078      	str	r0, [r7, #4]
 801dc2c:	460b      	mov	r3, r1
 801dc2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801dc30:	78fb      	ldrb	r3, [r7, #3]
 801dc32:	461a      	mov	r2, r3
 801dc34:	210b      	movs	r1, #11
 801dc36:	6878      	ldr	r0, [r7, #4]
 801dc38:	f000 f804 	bl	801dc44 <icmp_send_response>
}
 801dc3c:	bf00      	nop
 801dc3e:	3708      	adds	r7, #8
 801dc40:	46bd      	mov	sp, r7
 801dc42:	bd80      	pop	{r7, pc}

0801dc44 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801dc44:	b580      	push	{r7, lr}
 801dc46:	b08c      	sub	sp, #48	; 0x30
 801dc48:	af04      	add	r7, sp, #16
 801dc4a:	6078      	str	r0, [r7, #4]
 801dc4c:	460b      	mov	r3, r1
 801dc4e:	70fb      	strb	r3, [r7, #3]
 801dc50:	4613      	mov	r3, r2
 801dc52:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801dc54:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dc58:	2124      	movs	r1, #36	; 0x24
 801dc5a:	2022      	movs	r0, #34	; 0x22
 801dc5c:	f7f7 fe68 	bl	8015930 <pbuf_alloc>
 801dc60:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801dc62:	69fb      	ldr	r3, [r7, #28]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d04c      	beq.n	801dd02 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801dc68:	69fb      	ldr	r3, [r7, #28]
 801dc6a:	895b      	ldrh	r3, [r3, #10]
 801dc6c:	2b23      	cmp	r3, #35	; 0x23
 801dc6e:	d806      	bhi.n	801dc7e <icmp_send_response+0x3a>
 801dc70:	4b26      	ldr	r3, [pc, #152]	; (801dd0c <icmp_send_response+0xc8>)
 801dc72:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801dc76:	4926      	ldr	r1, [pc, #152]	; (801dd10 <icmp_send_response+0xcc>)
 801dc78:	4826      	ldr	r0, [pc, #152]	; (801dd14 <icmp_send_response+0xd0>)
 801dc7a:	f001 fbaf 	bl	801f3dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	685b      	ldr	r3, [r3, #4]
 801dc82:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801dc84:	69fb      	ldr	r3, [r7, #28]
 801dc86:	685b      	ldr	r3, [r3, #4]
 801dc88:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801dc8a:	697b      	ldr	r3, [r7, #20]
 801dc8c:	78fa      	ldrb	r2, [r7, #3]
 801dc8e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801dc90:	697b      	ldr	r3, [r7, #20]
 801dc92:	78ba      	ldrb	r2, [r7, #2]
 801dc94:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801dc96:	697b      	ldr	r3, [r7, #20]
 801dc98:	2200      	movs	r2, #0
 801dc9a:	711a      	strb	r2, [r3, #4]
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801dca0:	697b      	ldr	r3, [r7, #20]
 801dca2:	2200      	movs	r2, #0
 801dca4:	719a      	strb	r2, [r3, #6]
 801dca6:	2200      	movs	r2, #0
 801dca8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801dcaa:	69fb      	ldr	r3, [r7, #28]
 801dcac:	685b      	ldr	r3, [r3, #4]
 801dcae:	f103 0008 	add.w	r0, r3, #8
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	685b      	ldr	r3, [r3, #4]
 801dcb6:	221c      	movs	r2, #28
 801dcb8:	4619      	mov	r1, r3
 801dcba:	f001 fb5f 	bl	801f37c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801dcbe:	69bb      	ldr	r3, [r7, #24]
 801dcc0:	68db      	ldr	r3, [r3, #12]
 801dcc2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801dcc4:	f107 030c 	add.w	r3, r7, #12
 801dcc8:	4618      	mov	r0, r3
 801dcca:	f000 f825 	bl	801dd18 <ip4_route>
 801dcce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801dcd0:	693b      	ldr	r3, [r7, #16]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d011      	beq.n	801dcfa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801dcd6:	697b      	ldr	r3, [r7, #20]
 801dcd8:	2200      	movs	r2, #0
 801dcda:	709a      	strb	r2, [r3, #2]
 801dcdc:	2200      	movs	r2, #0
 801dcde:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801dce0:	f107 020c 	add.w	r2, r7, #12
 801dce4:	693b      	ldr	r3, [r7, #16]
 801dce6:	9302      	str	r3, [sp, #8]
 801dce8:	2301      	movs	r3, #1
 801dcea:	9301      	str	r3, [sp, #4]
 801dcec:	2300      	movs	r3, #0
 801dcee:	9300      	str	r3, [sp, #0]
 801dcf0:	23ff      	movs	r3, #255	; 0xff
 801dcf2:	2100      	movs	r1, #0
 801dcf4:	69f8      	ldr	r0, [r7, #28]
 801dcf6:	f000 f9cd 	bl	801e094 <ip4_output_if>
  }
  pbuf_free(q);
 801dcfa:	69f8      	ldr	r0, [r7, #28]
 801dcfc:	f7f8 f90e 	bl	8015f1c <pbuf_free>
 801dd00:	e000      	b.n	801dd04 <icmp_send_response+0xc0>
    return;
 801dd02:	bf00      	nop
}
 801dd04:	3720      	adds	r7, #32
 801dd06:	46bd      	mov	sp, r7
 801dd08:	bd80      	pop	{r7, pc}
 801dd0a:	bf00      	nop
 801dd0c:	08023edc 	.word	0x08023edc
 801dd10:	08023fa8 	.word	0x08023fa8
 801dd14:	08023f4c 	.word	0x08023f4c

0801dd18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801dd18:	b480      	push	{r7}
 801dd1a:	b085      	sub	sp, #20
 801dd1c:	af00      	add	r7, sp, #0
 801dd1e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801dd20:	4b33      	ldr	r3, [pc, #204]	; (801ddf0 <ip4_route+0xd8>)
 801dd22:	681b      	ldr	r3, [r3, #0]
 801dd24:	60fb      	str	r3, [r7, #12]
 801dd26:	e036      	b.n	801dd96 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dd28:	68fb      	ldr	r3, [r7, #12]
 801dd2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd2e:	f003 0301 	and.w	r3, r3, #1
 801dd32:	b2db      	uxtb	r3, r3
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d02b      	beq.n	801dd90 <ip4_route+0x78>
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd3e:	089b      	lsrs	r3, r3, #2
 801dd40:	f003 0301 	and.w	r3, r3, #1
 801dd44:	b2db      	uxtb	r3, r3
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d022      	beq.n	801dd90 <ip4_route+0x78>
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	3304      	adds	r3, #4
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d01d      	beq.n	801dd90 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	681a      	ldr	r2, [r3, #0]
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	3304      	adds	r3, #4
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	405a      	eors	r2, r3
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	3308      	adds	r3, #8
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	4013      	ands	r3, r2
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d101      	bne.n	801dd70 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	e038      	b.n	801dde2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd76:	f003 0302 	and.w	r3, r3, #2
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	d108      	bne.n	801dd90 <ip4_route+0x78>
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	681a      	ldr	r2, [r3, #0]
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	330c      	adds	r3, #12
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	429a      	cmp	r2, r3
 801dd8a:	d101      	bne.n	801dd90 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	e028      	b.n	801dde2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	60fb      	str	r3, [r7, #12]
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d1c5      	bne.n	801dd28 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801dd9c:	4b15      	ldr	r3, [pc, #84]	; (801ddf4 <ip4_route+0xdc>)
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d01a      	beq.n	801ddda <ip4_route+0xc2>
 801dda4:	4b13      	ldr	r3, [pc, #76]	; (801ddf4 <ip4_route+0xdc>)
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ddac:	f003 0301 	and.w	r3, r3, #1
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d012      	beq.n	801ddda <ip4_route+0xc2>
 801ddb4:	4b0f      	ldr	r3, [pc, #60]	; (801ddf4 <ip4_route+0xdc>)
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ddbc:	f003 0304 	and.w	r3, r3, #4
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d00a      	beq.n	801ddda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ddc4:	4b0b      	ldr	r3, [pc, #44]	; (801ddf4 <ip4_route+0xdc>)
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	3304      	adds	r3, #4
 801ddca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d004      	beq.n	801ddda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	b2db      	uxtb	r3, r3
 801ddd6:	2b7f      	cmp	r3, #127	; 0x7f
 801ddd8:	d101      	bne.n	801ddde <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ddda:	2300      	movs	r3, #0
 801dddc:	e001      	b.n	801dde2 <ip4_route+0xca>
  }

  return netif_default;
 801ddde:	4b05      	ldr	r3, [pc, #20]	; (801ddf4 <ip4_route+0xdc>)
 801dde0:	681b      	ldr	r3, [r3, #0]
}
 801dde2:	4618      	mov	r0, r3
 801dde4:	3714      	adds	r7, #20
 801dde6:	46bd      	mov	sp, r7
 801dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddec:	4770      	bx	lr
 801ddee:	bf00      	nop
 801ddf0:	20014ba4 	.word	0x20014ba4
 801ddf4:	20014ba8 	.word	0x20014ba8

0801ddf8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b082      	sub	sp, #8
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801de06:	f003 0301 	and.w	r3, r3, #1
 801de0a:	b2db      	uxtb	r3, r3
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d016      	beq.n	801de3e <ip4_input_accept+0x46>
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	3304      	adds	r3, #4
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d011      	beq.n	801de3e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801de1a:	4b0b      	ldr	r3, [pc, #44]	; (801de48 <ip4_input_accept+0x50>)
 801de1c:	695a      	ldr	r2, [r3, #20]
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	3304      	adds	r3, #4
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	429a      	cmp	r2, r3
 801de26:	d008      	beq.n	801de3a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801de28:	4b07      	ldr	r3, [pc, #28]	; (801de48 <ip4_input_accept+0x50>)
 801de2a:	695b      	ldr	r3, [r3, #20]
 801de2c:	6879      	ldr	r1, [r7, #4]
 801de2e:	4618      	mov	r0, r3
 801de30:	f000 fa08 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801de34:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801de36:	2b00      	cmp	r3, #0
 801de38:	d001      	beq.n	801de3e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801de3a:	2301      	movs	r3, #1
 801de3c:	e000      	b.n	801de40 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801de3e:	2300      	movs	r3, #0
}
 801de40:	4618      	mov	r0, r3
 801de42:	3708      	adds	r7, #8
 801de44:	46bd      	mov	sp, r7
 801de46:	bd80      	pop	{r7, pc}
 801de48:	200114a0 	.word	0x200114a0

0801de4c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801de4c:	b580      	push	{r7, lr}
 801de4e:	b086      	sub	sp, #24
 801de50:	af00      	add	r7, sp, #0
 801de52:	6078      	str	r0, [r7, #4]
 801de54:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	685b      	ldr	r3, [r3, #4]
 801de5a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801de5c:	697b      	ldr	r3, [r7, #20]
 801de5e:	781b      	ldrb	r3, [r3, #0]
 801de60:	091b      	lsrs	r3, r3, #4
 801de62:	b2db      	uxtb	r3, r3
 801de64:	2b04      	cmp	r3, #4
 801de66:	d004      	beq.n	801de72 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801de68:	6878      	ldr	r0, [r7, #4]
 801de6a:	f7f8 f857 	bl	8015f1c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801de6e:	2300      	movs	r3, #0
 801de70:	e107      	b.n	801e082 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801de72:	697b      	ldr	r3, [r7, #20]
 801de74:	781b      	ldrb	r3, [r3, #0]
 801de76:	f003 030f 	and.w	r3, r3, #15
 801de7a:	b2db      	uxtb	r3, r3
 801de7c:	009b      	lsls	r3, r3, #2
 801de7e:	b2db      	uxtb	r3, r3
 801de80:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801de82:	697b      	ldr	r3, [r7, #20]
 801de84:	885b      	ldrh	r3, [r3, #2]
 801de86:	b29b      	uxth	r3, r3
 801de88:	4618      	mov	r0, r3
 801de8a:	f7f6 fc53 	bl	8014734 <lwip_htons>
 801de8e:	4603      	mov	r3, r0
 801de90:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	891b      	ldrh	r3, [r3, #8]
 801de96:	89ba      	ldrh	r2, [r7, #12]
 801de98:	429a      	cmp	r2, r3
 801de9a:	d204      	bcs.n	801dea6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801de9c:	89bb      	ldrh	r3, [r7, #12]
 801de9e:	4619      	mov	r1, r3
 801dea0:	6878      	ldr	r0, [r7, #4]
 801dea2:	f7f7 fea3 	bl	8015bec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	895b      	ldrh	r3, [r3, #10]
 801deaa:	89fa      	ldrh	r2, [r7, #14]
 801deac:	429a      	cmp	r2, r3
 801deae:	d807      	bhi.n	801dec0 <ip4_input+0x74>
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	891b      	ldrh	r3, [r3, #8]
 801deb4:	89ba      	ldrh	r2, [r7, #12]
 801deb6:	429a      	cmp	r2, r3
 801deb8:	d802      	bhi.n	801dec0 <ip4_input+0x74>
 801deba:	89fb      	ldrh	r3, [r7, #14]
 801debc:	2b13      	cmp	r3, #19
 801debe:	d804      	bhi.n	801deca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801dec0:	6878      	ldr	r0, [r7, #4]
 801dec2:	f7f8 f82b 	bl	8015f1c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801dec6:	2300      	movs	r3, #0
 801dec8:	e0db      	b.n	801e082 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801deca:	697b      	ldr	r3, [r7, #20]
 801decc:	691b      	ldr	r3, [r3, #16]
 801dece:	4a6f      	ldr	r2, [pc, #444]	; (801e08c <ip4_input+0x240>)
 801ded0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ded2:	697b      	ldr	r3, [r7, #20]
 801ded4:	68db      	ldr	r3, [r3, #12]
 801ded6:	4a6d      	ldr	r2, [pc, #436]	; (801e08c <ip4_input+0x240>)
 801ded8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801deda:	4b6c      	ldr	r3, [pc, #432]	; (801e08c <ip4_input+0x240>)
 801dedc:	695b      	ldr	r3, [r3, #20]
 801dede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dee2:	2be0      	cmp	r3, #224	; 0xe0
 801dee4:	d112      	bne.n	801df0c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801dee6:	683b      	ldr	r3, [r7, #0]
 801dee8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801deec:	f003 0301 	and.w	r3, r3, #1
 801def0:	b2db      	uxtb	r3, r3
 801def2:	2b00      	cmp	r3, #0
 801def4:	d007      	beq.n	801df06 <ip4_input+0xba>
 801def6:	683b      	ldr	r3, [r7, #0]
 801def8:	3304      	adds	r3, #4
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	2b00      	cmp	r3, #0
 801defe:	d002      	beq.n	801df06 <ip4_input+0xba>
      netif = inp;
 801df00:	683b      	ldr	r3, [r7, #0]
 801df02:	613b      	str	r3, [r7, #16]
 801df04:	e02a      	b.n	801df5c <ip4_input+0x110>
    } else {
      netif = NULL;
 801df06:	2300      	movs	r3, #0
 801df08:	613b      	str	r3, [r7, #16]
 801df0a:	e027      	b.n	801df5c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801df0c:	6838      	ldr	r0, [r7, #0]
 801df0e:	f7ff ff73 	bl	801ddf8 <ip4_input_accept>
 801df12:	4603      	mov	r3, r0
 801df14:	2b00      	cmp	r3, #0
 801df16:	d002      	beq.n	801df1e <ip4_input+0xd2>
      netif = inp;
 801df18:	683b      	ldr	r3, [r7, #0]
 801df1a:	613b      	str	r3, [r7, #16]
 801df1c:	e01e      	b.n	801df5c <ip4_input+0x110>
    } else {
      netif = NULL;
 801df1e:	2300      	movs	r3, #0
 801df20:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801df22:	4b5a      	ldr	r3, [pc, #360]	; (801e08c <ip4_input+0x240>)
 801df24:	695b      	ldr	r3, [r3, #20]
 801df26:	b2db      	uxtb	r3, r3
 801df28:	2b7f      	cmp	r3, #127	; 0x7f
 801df2a:	d017      	beq.n	801df5c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801df2c:	4b58      	ldr	r3, [pc, #352]	; (801e090 <ip4_input+0x244>)
 801df2e:	681b      	ldr	r3, [r3, #0]
 801df30:	613b      	str	r3, [r7, #16]
 801df32:	e00e      	b.n	801df52 <ip4_input+0x106>
          if (netif == inp) {
 801df34:	693a      	ldr	r2, [r7, #16]
 801df36:	683b      	ldr	r3, [r7, #0]
 801df38:	429a      	cmp	r2, r3
 801df3a:	d006      	beq.n	801df4a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801df3c:	6938      	ldr	r0, [r7, #16]
 801df3e:	f7ff ff5b 	bl	801ddf8 <ip4_input_accept>
 801df42:	4603      	mov	r3, r0
 801df44:	2b00      	cmp	r3, #0
 801df46:	d108      	bne.n	801df5a <ip4_input+0x10e>
 801df48:	e000      	b.n	801df4c <ip4_input+0x100>
            continue;
 801df4a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801df4c:	693b      	ldr	r3, [r7, #16]
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	613b      	str	r3, [r7, #16]
 801df52:	693b      	ldr	r3, [r7, #16]
 801df54:	2b00      	cmp	r3, #0
 801df56:	d1ed      	bne.n	801df34 <ip4_input+0xe8>
 801df58:	e000      	b.n	801df5c <ip4_input+0x110>
            break;
 801df5a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801df5c:	4b4b      	ldr	r3, [pc, #300]	; (801e08c <ip4_input+0x240>)
 801df5e:	691b      	ldr	r3, [r3, #16]
 801df60:	6839      	ldr	r1, [r7, #0]
 801df62:	4618      	mov	r0, r3
 801df64:	f000 f96e 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801df68:	4603      	mov	r3, r0
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d105      	bne.n	801df7a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801df6e:	4b47      	ldr	r3, [pc, #284]	; (801e08c <ip4_input+0x240>)
 801df70:	691b      	ldr	r3, [r3, #16]
 801df72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801df76:	2be0      	cmp	r3, #224	; 0xe0
 801df78:	d104      	bne.n	801df84 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801df7a:	6878      	ldr	r0, [r7, #4]
 801df7c:	f7f7 ffce 	bl	8015f1c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801df80:	2300      	movs	r3, #0
 801df82:	e07e      	b.n	801e082 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801df84:	693b      	ldr	r3, [r7, #16]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d104      	bne.n	801df94 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801df8a:	6878      	ldr	r0, [r7, #4]
 801df8c:	f7f7 ffc6 	bl	8015f1c <pbuf_free>
    return ERR_OK;
 801df90:	2300      	movs	r3, #0
 801df92:	e076      	b.n	801e082 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801df94:	697b      	ldr	r3, [r7, #20]
 801df96:	88db      	ldrh	r3, [r3, #6]
 801df98:	b29b      	uxth	r3, r3
 801df9a:	461a      	mov	r2, r3
 801df9c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801dfa0:	4013      	ands	r3, r2
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d00b      	beq.n	801dfbe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801dfa6:	6878      	ldr	r0, [r7, #4]
 801dfa8:	f000 fc92 	bl	801e8d0 <ip4_reass>
 801dfac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d101      	bne.n	801dfb8 <ip4_input+0x16c>
      return ERR_OK;
 801dfb4:	2300      	movs	r3, #0
 801dfb6:	e064      	b.n	801e082 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	685b      	ldr	r3, [r3, #4]
 801dfbc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801dfbe:	4a33      	ldr	r2, [pc, #204]	; (801e08c <ip4_input+0x240>)
 801dfc0:	693b      	ldr	r3, [r7, #16]
 801dfc2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801dfc4:	4a31      	ldr	r2, [pc, #196]	; (801e08c <ip4_input+0x240>)
 801dfc6:	683b      	ldr	r3, [r7, #0]
 801dfc8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801dfca:	4a30      	ldr	r2, [pc, #192]	; (801e08c <ip4_input+0x240>)
 801dfcc:	697b      	ldr	r3, [r7, #20]
 801dfce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801dfd0:	697b      	ldr	r3, [r7, #20]
 801dfd2:	781b      	ldrb	r3, [r3, #0]
 801dfd4:	f003 030f 	and.w	r3, r3, #15
 801dfd8:	b2db      	uxtb	r3, r3
 801dfda:	009b      	lsls	r3, r3, #2
 801dfdc:	b2db      	uxtb	r3, r3
 801dfde:	b29a      	uxth	r2, r3
 801dfe0:	4b2a      	ldr	r3, [pc, #168]	; (801e08c <ip4_input+0x240>)
 801dfe2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801dfe4:	89fb      	ldrh	r3, [r7, #14]
 801dfe6:	4619      	mov	r1, r3
 801dfe8:	6878      	ldr	r0, [r7, #4]
 801dfea:	f7f7 feff 	bl	8015dec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801dfee:	697b      	ldr	r3, [r7, #20]
 801dff0:	7a5b      	ldrb	r3, [r3, #9]
 801dff2:	2b11      	cmp	r3, #17
 801dff4:	d006      	beq.n	801e004 <ip4_input+0x1b8>
 801dff6:	2b11      	cmp	r3, #17
 801dff8:	dc13      	bgt.n	801e022 <ip4_input+0x1d6>
 801dffa:	2b01      	cmp	r3, #1
 801dffc:	d00c      	beq.n	801e018 <ip4_input+0x1cc>
 801dffe:	2b06      	cmp	r3, #6
 801e000:	d005      	beq.n	801e00e <ip4_input+0x1c2>
 801e002:	e00e      	b.n	801e022 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801e004:	6839      	ldr	r1, [r7, #0]
 801e006:	6878      	ldr	r0, [r7, #4]
 801e008:	f7fe fc68 	bl	801c8dc <udp_input>
        break;
 801e00c:	e026      	b.n	801e05c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801e00e:	6839      	ldr	r1, [r7, #0]
 801e010:	6878      	ldr	r0, [r7, #4]
 801e012:	f7fa f85d 	bl	80180d0 <tcp_input>
        break;
 801e016:	e021      	b.n	801e05c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801e018:	6839      	ldr	r1, [r7, #0]
 801e01a:	6878      	ldr	r0, [r7, #4]
 801e01c:	f7ff fcee 	bl	801d9fc <icmp_input>
        break;
 801e020:	e01c      	b.n	801e05c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e022:	4b1a      	ldr	r3, [pc, #104]	; (801e08c <ip4_input+0x240>)
 801e024:	695b      	ldr	r3, [r3, #20]
 801e026:	6939      	ldr	r1, [r7, #16]
 801e028:	4618      	mov	r0, r3
 801e02a:	f000 f90b 	bl	801e244 <ip4_addr_isbroadcast_u32>
 801e02e:	4603      	mov	r3, r0
 801e030:	2b00      	cmp	r3, #0
 801e032:	d10f      	bne.n	801e054 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e034:	4b15      	ldr	r3, [pc, #84]	; (801e08c <ip4_input+0x240>)
 801e036:	695b      	ldr	r3, [r3, #20]
 801e038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e03c:	2be0      	cmp	r3, #224	; 0xe0
 801e03e:	d009      	beq.n	801e054 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801e044:	4619      	mov	r1, r3
 801e046:	6878      	ldr	r0, [r7, #4]
 801e048:	f7f7 ff55 	bl	8015ef6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e04c:	2102      	movs	r1, #2
 801e04e:	6878      	ldr	r0, [r7, #4]
 801e050:	f7ff fdd8 	bl	801dc04 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801e054:	6878      	ldr	r0, [r7, #4]
 801e056:	f7f7 ff61 	bl	8015f1c <pbuf_free>
        break;
 801e05a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e05c:	4b0b      	ldr	r3, [pc, #44]	; (801e08c <ip4_input+0x240>)
 801e05e:	2200      	movs	r2, #0
 801e060:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e062:	4b0a      	ldr	r3, [pc, #40]	; (801e08c <ip4_input+0x240>)
 801e064:	2200      	movs	r2, #0
 801e066:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e068:	4b08      	ldr	r3, [pc, #32]	; (801e08c <ip4_input+0x240>)
 801e06a:	2200      	movs	r2, #0
 801e06c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e06e:	4b07      	ldr	r3, [pc, #28]	; (801e08c <ip4_input+0x240>)
 801e070:	2200      	movs	r2, #0
 801e072:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e074:	4b05      	ldr	r3, [pc, #20]	; (801e08c <ip4_input+0x240>)
 801e076:	2200      	movs	r2, #0
 801e078:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e07a:	4b04      	ldr	r3, [pc, #16]	; (801e08c <ip4_input+0x240>)
 801e07c:	2200      	movs	r2, #0
 801e07e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e080:	2300      	movs	r3, #0
}
 801e082:	4618      	mov	r0, r3
 801e084:	3718      	adds	r7, #24
 801e086:	46bd      	mov	sp, r7
 801e088:	bd80      	pop	{r7, pc}
 801e08a:	bf00      	nop
 801e08c:	200114a0 	.word	0x200114a0
 801e090:	20014ba4 	.word	0x20014ba4

0801e094 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b08a      	sub	sp, #40	; 0x28
 801e098:	af04      	add	r7, sp, #16
 801e09a:	60f8      	str	r0, [r7, #12]
 801e09c:	60b9      	str	r1, [r7, #8]
 801e09e:	607a      	str	r2, [r7, #4]
 801e0a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e0a2:	68bb      	ldr	r3, [r7, #8]
 801e0a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d009      	beq.n	801e0c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e0ac:	68bb      	ldr	r3, [r7, #8]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d003      	beq.n	801e0ba <ip4_output_if+0x26>
 801e0b2:	68bb      	ldr	r3, [r7, #8]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d102      	bne.n	801e0c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0bc:	3304      	adds	r3, #4
 801e0be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e0c0:	78fa      	ldrb	r2, [r7, #3]
 801e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0c4:	9302      	str	r3, [sp, #8]
 801e0c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e0ca:	9301      	str	r3, [sp, #4]
 801e0cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e0d0:	9300      	str	r3, [sp, #0]
 801e0d2:	4613      	mov	r3, r2
 801e0d4:	687a      	ldr	r2, [r7, #4]
 801e0d6:	6979      	ldr	r1, [r7, #20]
 801e0d8:	68f8      	ldr	r0, [r7, #12]
 801e0da:	f000 f805 	bl	801e0e8 <ip4_output_if_src>
 801e0de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e0e0:	4618      	mov	r0, r3
 801e0e2:	3718      	adds	r7, #24
 801e0e4:	46bd      	mov	sp, r7
 801e0e6:	bd80      	pop	{r7, pc}

0801e0e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	b088      	sub	sp, #32
 801e0ec:	af00      	add	r7, sp, #0
 801e0ee:	60f8      	str	r0, [r7, #12]
 801e0f0:	60b9      	str	r1, [r7, #8]
 801e0f2:	607a      	str	r2, [r7, #4]
 801e0f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	7b9b      	ldrb	r3, [r3, #14]
 801e0fa:	2b01      	cmp	r3, #1
 801e0fc:	d006      	beq.n	801e10c <ip4_output_if_src+0x24>
 801e0fe:	4b4b      	ldr	r3, [pc, #300]	; (801e22c <ip4_output_if_src+0x144>)
 801e100:	f44f 7255 	mov.w	r2, #852	; 0x354
 801e104:	494a      	ldr	r1, [pc, #296]	; (801e230 <ip4_output_if_src+0x148>)
 801e106:	484b      	ldr	r0, [pc, #300]	; (801e234 <ip4_output_if_src+0x14c>)
 801e108:	f001 f968 	bl	801f3dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d060      	beq.n	801e1d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801e112:	2314      	movs	r3, #20
 801e114:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e116:	2114      	movs	r1, #20
 801e118:	68f8      	ldr	r0, [r7, #12]
 801e11a:	f7f7 fe57 	bl	8015dcc <pbuf_add_header>
 801e11e:	4603      	mov	r3, r0
 801e120:	2b00      	cmp	r3, #0
 801e122:	d002      	beq.n	801e12a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e124:	f06f 0301 	mvn.w	r3, #1
 801e128:	e07c      	b.n	801e224 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	685b      	ldr	r3, [r3, #4]
 801e12e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	895b      	ldrh	r3, [r3, #10]
 801e134:	2b13      	cmp	r3, #19
 801e136:	d806      	bhi.n	801e146 <ip4_output_if_src+0x5e>
 801e138:	4b3c      	ldr	r3, [pc, #240]	; (801e22c <ip4_output_if_src+0x144>)
 801e13a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801e13e:	493e      	ldr	r1, [pc, #248]	; (801e238 <ip4_output_if_src+0x150>)
 801e140:	483c      	ldr	r0, [pc, #240]	; (801e234 <ip4_output_if_src+0x14c>)
 801e142:	f001 f94b 	bl	801f3dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e146:	69fb      	ldr	r3, [r7, #28]
 801e148:	78fa      	ldrb	r2, [r7, #3]
 801e14a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e14c:	69fb      	ldr	r3, [r7, #28]
 801e14e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801e152:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	681a      	ldr	r2, [r3, #0]
 801e158:	69fb      	ldr	r3, [r7, #28]
 801e15a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e15c:	8b7b      	ldrh	r3, [r7, #26]
 801e15e:	089b      	lsrs	r3, r3, #2
 801e160:	b29b      	uxth	r3, r3
 801e162:	b2db      	uxtb	r3, r3
 801e164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e168:	b2da      	uxtb	r2, r3
 801e16a:	69fb      	ldr	r3, [r7, #28]
 801e16c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e16e:	69fb      	ldr	r3, [r7, #28]
 801e170:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801e174:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	891b      	ldrh	r3, [r3, #8]
 801e17a:	4618      	mov	r0, r3
 801e17c:	f7f6 fada 	bl	8014734 <lwip_htons>
 801e180:	4603      	mov	r3, r0
 801e182:	461a      	mov	r2, r3
 801e184:	69fb      	ldr	r3, [r7, #28]
 801e186:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e188:	69fb      	ldr	r3, [r7, #28]
 801e18a:	2200      	movs	r2, #0
 801e18c:	719a      	strb	r2, [r3, #6]
 801e18e:	2200      	movs	r2, #0
 801e190:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e192:	4b2a      	ldr	r3, [pc, #168]	; (801e23c <ip4_output_if_src+0x154>)
 801e194:	881b      	ldrh	r3, [r3, #0]
 801e196:	4618      	mov	r0, r3
 801e198:	f7f6 facc 	bl	8014734 <lwip_htons>
 801e19c:	4603      	mov	r3, r0
 801e19e:	461a      	mov	r2, r3
 801e1a0:	69fb      	ldr	r3, [r7, #28]
 801e1a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e1a4:	4b25      	ldr	r3, [pc, #148]	; (801e23c <ip4_output_if_src+0x154>)
 801e1a6:	881b      	ldrh	r3, [r3, #0]
 801e1a8:	3301      	adds	r3, #1
 801e1aa:	b29a      	uxth	r2, r3
 801e1ac:	4b23      	ldr	r3, [pc, #140]	; (801e23c <ip4_output_if_src+0x154>)
 801e1ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e1b0:	68bb      	ldr	r3, [r7, #8]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d104      	bne.n	801e1c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e1b6:	4b22      	ldr	r3, [pc, #136]	; (801e240 <ip4_output_if_src+0x158>)
 801e1b8:	681a      	ldr	r2, [r3, #0]
 801e1ba:	69fb      	ldr	r3, [r7, #28]
 801e1bc:	60da      	str	r2, [r3, #12]
 801e1be:	e003      	b.n	801e1c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e1c0:	68bb      	ldr	r3, [r7, #8]
 801e1c2:	681a      	ldr	r2, [r3, #0]
 801e1c4:	69fb      	ldr	r3, [r7, #28]
 801e1c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e1c8:	69fb      	ldr	r3, [r7, #28]
 801e1ca:	2200      	movs	r2, #0
 801e1cc:	729a      	strb	r2, [r3, #10]
 801e1ce:	2200      	movs	r2, #0
 801e1d0:	72da      	strb	r2, [r3, #11]
 801e1d2:	e00f      	b.n	801e1f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	895b      	ldrh	r3, [r3, #10]
 801e1d8:	2b13      	cmp	r3, #19
 801e1da:	d802      	bhi.n	801e1e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e1dc:	f06f 0301 	mvn.w	r3, #1
 801e1e0:	e020      	b.n	801e224 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	685b      	ldr	r3, [r3, #4]
 801e1e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e1e8:	69fb      	ldr	r3, [r7, #28]
 801e1ea:	691b      	ldr	r3, [r3, #16]
 801e1ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e1ee:	f107 0314 	add.w	r3, r7, #20
 801e1f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d00c      	beq.n	801e216 <ip4_output_if_src+0x12e>
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	891a      	ldrh	r2, [r3, #8]
 801e200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e202:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e204:	429a      	cmp	r2, r3
 801e206:	d906      	bls.n	801e216 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801e208:	687a      	ldr	r2, [r7, #4]
 801e20a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e20c:	68f8      	ldr	r0, [r7, #12]
 801e20e:	f000 fd4d 	bl	801ecac <ip4_frag>
 801e212:	4603      	mov	r3, r0
 801e214:	e006      	b.n	801e224 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e218:	695b      	ldr	r3, [r3, #20]
 801e21a:	687a      	ldr	r2, [r7, #4]
 801e21c:	68f9      	ldr	r1, [r7, #12]
 801e21e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e220:	4798      	blx	r3
 801e222:	4603      	mov	r3, r0
}
 801e224:	4618      	mov	r0, r3
 801e226:	3720      	adds	r7, #32
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd80      	pop	{r7, pc}
 801e22c:	08023fd4 	.word	0x08023fd4
 801e230:	08024008 	.word	0x08024008
 801e234:	08024014 	.word	0x08024014
 801e238:	0802403c 	.word	0x0802403c
 801e23c:	2000c92e 	.word	0x2000c92e
 801e240:	0807b168 	.word	0x0807b168

0801e244 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e244:	b480      	push	{r7}
 801e246:	b085      	sub	sp, #20
 801e248:	af00      	add	r7, sp, #0
 801e24a:	6078      	str	r0, [r7, #4]
 801e24c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e258:	d002      	beq.n	801e260 <ip4_addr_isbroadcast_u32+0x1c>
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d101      	bne.n	801e264 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e260:	2301      	movs	r3, #1
 801e262:	e02a      	b.n	801e2ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e264:	683b      	ldr	r3, [r7, #0]
 801e266:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e26a:	f003 0302 	and.w	r3, r3, #2
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d101      	bne.n	801e276 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e272:	2300      	movs	r3, #0
 801e274:	e021      	b.n	801e2ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e276:	683b      	ldr	r3, [r7, #0]
 801e278:	3304      	adds	r3, #4
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	687a      	ldr	r2, [r7, #4]
 801e27e:	429a      	cmp	r2, r3
 801e280:	d101      	bne.n	801e286 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e282:	2300      	movs	r3, #0
 801e284:	e019      	b.n	801e2ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e286:	68fa      	ldr	r2, [r7, #12]
 801e288:	683b      	ldr	r3, [r7, #0]
 801e28a:	3304      	adds	r3, #4
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	405a      	eors	r2, r3
 801e290:	683b      	ldr	r3, [r7, #0]
 801e292:	3308      	adds	r3, #8
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	4013      	ands	r3, r2
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d10d      	bne.n	801e2b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e29c:	683b      	ldr	r3, [r7, #0]
 801e29e:	3308      	adds	r3, #8
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	43da      	mvns	r2, r3
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e2a8:	683b      	ldr	r3, [r7, #0]
 801e2aa:	3308      	adds	r3, #8
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e2b0:	429a      	cmp	r2, r3
 801e2b2:	d101      	bne.n	801e2b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e2b4:	2301      	movs	r3, #1
 801e2b6:	e000      	b.n	801e2ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e2b8:	2300      	movs	r3, #0
  }
}
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	3714      	adds	r7, #20
 801e2be:	46bd      	mov	sp, r7
 801e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c4:	4770      	bx	lr
	...

0801e2c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801e2c8:	b580      	push	{r7, lr}
 801e2ca:	b084      	sub	sp, #16
 801e2cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801e2d2:	4b12      	ldr	r3, [pc, #72]	; (801e31c <ip_reass_tmr+0x54>)
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801e2d8:	e018      	b.n	801e30c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	7fdb      	ldrb	r3, [r3, #31]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d00b      	beq.n	801e2fa <ip_reass_tmr+0x32>
      r->timer--;
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	7fdb      	ldrb	r3, [r3, #31]
 801e2e6:	3b01      	subs	r3, #1
 801e2e8:	b2da      	uxtb	r2, r3
 801e2ea:	68fb      	ldr	r3, [r7, #12]
 801e2ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	60fb      	str	r3, [r7, #12]
 801e2f8:	e008      	b.n	801e30c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801e2fe:	68fb      	ldr	r3, [r7, #12]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801e304:	68b9      	ldr	r1, [r7, #8]
 801e306:	6878      	ldr	r0, [r7, #4]
 801e308:	f000 f80a 	bl	801e320 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d1e3      	bne.n	801e2da <ip_reass_tmr+0x12>
    }
  }
}
 801e312:	bf00      	nop
 801e314:	bf00      	nop
 801e316:	3710      	adds	r7, #16
 801e318:	46bd      	mov	sp, r7
 801e31a:	bd80      	pop	{r7, pc}
 801e31c:	2000c930 	.word	0x2000c930

0801e320 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e320:	b580      	push	{r7, lr}
 801e322:	b088      	sub	sp, #32
 801e324:	af00      	add	r7, sp, #0
 801e326:	6078      	str	r0, [r7, #4]
 801e328:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801e32a:	2300      	movs	r3, #0
 801e32c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e32e:	683a      	ldr	r2, [r7, #0]
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	429a      	cmp	r2, r3
 801e334:	d105      	bne.n	801e342 <ip_reass_free_complete_datagram+0x22>
 801e336:	4b45      	ldr	r3, [pc, #276]	; (801e44c <ip_reass_free_complete_datagram+0x12c>)
 801e338:	22ab      	movs	r2, #171	; 0xab
 801e33a:	4945      	ldr	r1, [pc, #276]	; (801e450 <ip_reass_free_complete_datagram+0x130>)
 801e33c:	4845      	ldr	r0, [pc, #276]	; (801e454 <ip_reass_free_complete_datagram+0x134>)
 801e33e:	f001 f84d 	bl	801f3dc <iprintf>
  if (prev != NULL) {
 801e342:	683b      	ldr	r3, [r7, #0]
 801e344:	2b00      	cmp	r3, #0
 801e346:	d00a      	beq.n	801e35e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e348:	683b      	ldr	r3, [r7, #0]
 801e34a:	681b      	ldr	r3, [r3, #0]
 801e34c:	687a      	ldr	r2, [r7, #4]
 801e34e:	429a      	cmp	r2, r3
 801e350:	d005      	beq.n	801e35e <ip_reass_free_complete_datagram+0x3e>
 801e352:	4b3e      	ldr	r3, [pc, #248]	; (801e44c <ip_reass_free_complete_datagram+0x12c>)
 801e354:	22ad      	movs	r2, #173	; 0xad
 801e356:	4940      	ldr	r1, [pc, #256]	; (801e458 <ip_reass_free_complete_datagram+0x138>)
 801e358:	483e      	ldr	r0, [pc, #248]	; (801e454 <ip_reass_free_complete_datagram+0x134>)
 801e35a:	f001 f83f 	bl	801f3dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	685b      	ldr	r3, [r3, #4]
 801e362:	685b      	ldr	r3, [r3, #4]
 801e364:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801e366:	697b      	ldr	r3, [r7, #20]
 801e368:	889b      	ldrh	r3, [r3, #4]
 801e36a:	b29b      	uxth	r3, r3
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d12a      	bne.n	801e3c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	685b      	ldr	r3, [r3, #4]
 801e374:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801e376:	697b      	ldr	r3, [r7, #20]
 801e378:	681a      	ldr	r2, [r3, #0]
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e37e:	69bb      	ldr	r3, [r7, #24]
 801e380:	6858      	ldr	r0, [r3, #4]
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	3308      	adds	r3, #8
 801e386:	2214      	movs	r2, #20
 801e388:	4619      	mov	r1, r3
 801e38a:	f000 fff7 	bl	801f37c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e38e:	2101      	movs	r1, #1
 801e390:	69b8      	ldr	r0, [r7, #24]
 801e392:	f7ff fc47 	bl	801dc24 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e396:	69b8      	ldr	r0, [r7, #24]
 801e398:	f7f7 fe4e 	bl	8016038 <pbuf_clen>
 801e39c:	4603      	mov	r3, r0
 801e39e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e3a0:	8bfa      	ldrh	r2, [r7, #30]
 801e3a2:	8a7b      	ldrh	r3, [r7, #18]
 801e3a4:	4413      	add	r3, r2
 801e3a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e3aa:	db05      	blt.n	801e3b8 <ip_reass_free_complete_datagram+0x98>
 801e3ac:	4b27      	ldr	r3, [pc, #156]	; (801e44c <ip_reass_free_complete_datagram+0x12c>)
 801e3ae:	22bc      	movs	r2, #188	; 0xbc
 801e3b0:	492a      	ldr	r1, [pc, #168]	; (801e45c <ip_reass_free_complete_datagram+0x13c>)
 801e3b2:	4828      	ldr	r0, [pc, #160]	; (801e454 <ip_reass_free_complete_datagram+0x134>)
 801e3b4:	f001 f812 	bl	801f3dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e3b8:	8bfa      	ldrh	r2, [r7, #30]
 801e3ba:	8a7b      	ldrh	r3, [r7, #18]
 801e3bc:	4413      	add	r3, r2
 801e3be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801e3c0:	69b8      	ldr	r0, [r7, #24]
 801e3c2:	f7f7 fdab 	bl	8015f1c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	685b      	ldr	r3, [r3, #4]
 801e3ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801e3cc:	e01f      	b.n	801e40e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801e3ce:	69bb      	ldr	r3, [r7, #24]
 801e3d0:	685b      	ldr	r3, [r3, #4]
 801e3d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801e3d4:	69bb      	ldr	r3, [r7, #24]
 801e3d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801e3d8:	697b      	ldr	r3, [r7, #20]
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801e3de:	68f8      	ldr	r0, [r7, #12]
 801e3e0:	f7f7 fe2a 	bl	8016038 <pbuf_clen>
 801e3e4:	4603      	mov	r3, r0
 801e3e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e3e8:	8bfa      	ldrh	r2, [r7, #30]
 801e3ea:	8a7b      	ldrh	r3, [r7, #18]
 801e3ec:	4413      	add	r3, r2
 801e3ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e3f2:	db05      	blt.n	801e400 <ip_reass_free_complete_datagram+0xe0>
 801e3f4:	4b15      	ldr	r3, [pc, #84]	; (801e44c <ip_reass_free_complete_datagram+0x12c>)
 801e3f6:	22cc      	movs	r2, #204	; 0xcc
 801e3f8:	4918      	ldr	r1, [pc, #96]	; (801e45c <ip_reass_free_complete_datagram+0x13c>)
 801e3fa:	4816      	ldr	r0, [pc, #88]	; (801e454 <ip_reass_free_complete_datagram+0x134>)
 801e3fc:	f000 ffee 	bl	801f3dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e400:	8bfa      	ldrh	r2, [r7, #30]
 801e402:	8a7b      	ldrh	r3, [r7, #18]
 801e404:	4413      	add	r3, r2
 801e406:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801e408:	68f8      	ldr	r0, [r7, #12]
 801e40a:	f7f7 fd87 	bl	8015f1c <pbuf_free>
  while (p != NULL) {
 801e40e:	69bb      	ldr	r3, [r7, #24]
 801e410:	2b00      	cmp	r3, #0
 801e412:	d1dc      	bne.n	801e3ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e414:	6839      	ldr	r1, [r7, #0]
 801e416:	6878      	ldr	r0, [r7, #4]
 801e418:	f000 f8c2 	bl	801e5a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e41c:	4b10      	ldr	r3, [pc, #64]	; (801e460 <ip_reass_free_complete_datagram+0x140>)
 801e41e:	881b      	ldrh	r3, [r3, #0]
 801e420:	8bfa      	ldrh	r2, [r7, #30]
 801e422:	429a      	cmp	r2, r3
 801e424:	d905      	bls.n	801e432 <ip_reass_free_complete_datagram+0x112>
 801e426:	4b09      	ldr	r3, [pc, #36]	; (801e44c <ip_reass_free_complete_datagram+0x12c>)
 801e428:	22d2      	movs	r2, #210	; 0xd2
 801e42a:	490e      	ldr	r1, [pc, #56]	; (801e464 <ip_reass_free_complete_datagram+0x144>)
 801e42c:	4809      	ldr	r0, [pc, #36]	; (801e454 <ip_reass_free_complete_datagram+0x134>)
 801e42e:	f000 ffd5 	bl	801f3dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e432:	4b0b      	ldr	r3, [pc, #44]	; (801e460 <ip_reass_free_complete_datagram+0x140>)
 801e434:	881a      	ldrh	r2, [r3, #0]
 801e436:	8bfb      	ldrh	r3, [r7, #30]
 801e438:	1ad3      	subs	r3, r2, r3
 801e43a:	b29a      	uxth	r2, r3
 801e43c:	4b08      	ldr	r3, [pc, #32]	; (801e460 <ip_reass_free_complete_datagram+0x140>)
 801e43e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e440:	8bfb      	ldrh	r3, [r7, #30]
}
 801e442:	4618      	mov	r0, r3
 801e444:	3720      	adds	r7, #32
 801e446:	46bd      	mov	sp, r7
 801e448:	bd80      	pop	{r7, pc}
 801e44a:	bf00      	nop
 801e44c:	0802406c 	.word	0x0802406c
 801e450:	080240a8 	.word	0x080240a8
 801e454:	080240b4 	.word	0x080240b4
 801e458:	080240dc 	.word	0x080240dc
 801e45c:	080240f0 	.word	0x080240f0
 801e460:	2000c934 	.word	0x2000c934
 801e464:	08024110 	.word	0x08024110

0801e468 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e468:	b580      	push	{r7, lr}
 801e46a:	b08a      	sub	sp, #40	; 0x28
 801e46c:	af00      	add	r7, sp, #0
 801e46e:	6078      	str	r0, [r7, #4]
 801e470:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e472:	2300      	movs	r3, #0
 801e474:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e476:	2300      	movs	r3, #0
 801e478:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e47a:	2300      	movs	r3, #0
 801e47c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e47e:	2300      	movs	r3, #0
 801e480:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e482:	2300      	movs	r3, #0
 801e484:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e486:	4b28      	ldr	r3, [pc, #160]	; (801e528 <ip_reass_remove_oldest_datagram+0xc0>)
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e48c:	e030      	b.n	801e4f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e490:	695a      	ldr	r2, [r3, #20]
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	68db      	ldr	r3, [r3, #12]
 801e496:	429a      	cmp	r2, r3
 801e498:	d10c      	bne.n	801e4b4 <ip_reass_remove_oldest_datagram+0x4c>
 801e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e49c:	699a      	ldr	r2, [r3, #24]
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	691b      	ldr	r3, [r3, #16]
 801e4a2:	429a      	cmp	r2, r3
 801e4a4:	d106      	bne.n	801e4b4 <ip_reass_remove_oldest_datagram+0x4c>
 801e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4a8:	899a      	ldrh	r2, [r3, #12]
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	889b      	ldrh	r3, [r3, #4]
 801e4ae:	b29b      	uxth	r3, r3
 801e4b0:	429a      	cmp	r2, r3
 801e4b2:	d014      	beq.n	801e4de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e4b4:	693b      	ldr	r3, [r7, #16]
 801e4b6:	3301      	adds	r3, #1
 801e4b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e4ba:	6a3b      	ldr	r3, [r7, #32]
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d104      	bne.n	801e4ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e4c4:	69fb      	ldr	r3, [r7, #28]
 801e4c6:	61bb      	str	r3, [r7, #24]
 801e4c8:	e009      	b.n	801e4de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4cc:	7fda      	ldrb	r2, [r3, #31]
 801e4ce:	6a3b      	ldr	r3, [r7, #32]
 801e4d0:	7fdb      	ldrb	r3, [r3, #31]
 801e4d2:	429a      	cmp	r2, r3
 801e4d4:	d803      	bhi.n	801e4de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e4da:	69fb      	ldr	r3, [r7, #28]
 801e4dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d001      	beq.n	801e4ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d1cb      	bne.n	801e48e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e4f6:	6a3b      	ldr	r3, [r7, #32]
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d008      	beq.n	801e50e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e4fc:	69b9      	ldr	r1, [r7, #24]
 801e4fe:	6a38      	ldr	r0, [r7, #32]
 801e500:	f7ff ff0e 	bl	801e320 <ip_reass_free_complete_datagram>
 801e504:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e506:	697a      	ldr	r2, [r7, #20]
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	4413      	add	r3, r2
 801e50c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e50e:	697a      	ldr	r2, [r7, #20]
 801e510:	683b      	ldr	r3, [r7, #0]
 801e512:	429a      	cmp	r2, r3
 801e514:	da02      	bge.n	801e51c <ip_reass_remove_oldest_datagram+0xb4>
 801e516:	693b      	ldr	r3, [r7, #16]
 801e518:	2b01      	cmp	r3, #1
 801e51a:	dcac      	bgt.n	801e476 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e51c:	697b      	ldr	r3, [r7, #20]
}
 801e51e:	4618      	mov	r0, r3
 801e520:	3728      	adds	r7, #40	; 0x28
 801e522:	46bd      	mov	sp, r7
 801e524:	bd80      	pop	{r7, pc}
 801e526:	bf00      	nop
 801e528:	2000c930 	.word	0x2000c930

0801e52c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b084      	sub	sp, #16
 801e530:	af00      	add	r7, sp, #0
 801e532:	6078      	str	r0, [r7, #4]
 801e534:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e536:	2004      	movs	r0, #4
 801e538:	f7f6 fde8 	bl	801510c <memp_malloc>
 801e53c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	2b00      	cmp	r3, #0
 801e542:	d110      	bne.n	801e566 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e544:	6839      	ldr	r1, [r7, #0]
 801e546:	6878      	ldr	r0, [r7, #4]
 801e548:	f7ff ff8e 	bl	801e468 <ip_reass_remove_oldest_datagram>
 801e54c:	4602      	mov	r2, r0
 801e54e:	683b      	ldr	r3, [r7, #0]
 801e550:	4293      	cmp	r3, r2
 801e552:	dc03      	bgt.n	801e55c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e554:	2004      	movs	r0, #4
 801e556:	f7f6 fdd9 	bl	801510c <memp_malloc>
 801e55a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d101      	bne.n	801e566 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e562:	2300      	movs	r3, #0
 801e564:	e016      	b.n	801e594 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e566:	2220      	movs	r2, #32
 801e568:	2100      	movs	r1, #0
 801e56a:	68f8      	ldr	r0, [r7, #12]
 801e56c:	f000 ff2e 	bl	801f3cc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e570:	68fb      	ldr	r3, [r7, #12]
 801e572:	220f      	movs	r2, #15
 801e574:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e576:	4b09      	ldr	r3, [pc, #36]	; (801e59c <ip_reass_enqueue_new_datagram+0x70>)
 801e578:	681a      	ldr	r2, [r3, #0]
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e57e:	4a07      	ldr	r2, [pc, #28]	; (801e59c <ip_reass_enqueue_new_datagram+0x70>)
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	3308      	adds	r3, #8
 801e588:	2214      	movs	r2, #20
 801e58a:	6879      	ldr	r1, [r7, #4]
 801e58c:	4618      	mov	r0, r3
 801e58e:	f000 fef5 	bl	801f37c <memcpy>
  return ipr;
 801e592:	68fb      	ldr	r3, [r7, #12]
}
 801e594:	4618      	mov	r0, r3
 801e596:	3710      	adds	r7, #16
 801e598:	46bd      	mov	sp, r7
 801e59a:	bd80      	pop	{r7, pc}
 801e59c:	2000c930 	.word	0x2000c930

0801e5a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b082      	sub	sp, #8
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	6078      	str	r0, [r7, #4]
 801e5a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e5aa:	4b10      	ldr	r3, [pc, #64]	; (801e5ec <ip_reass_dequeue_datagram+0x4c>)
 801e5ac:	681b      	ldr	r3, [r3, #0]
 801e5ae:	687a      	ldr	r2, [r7, #4]
 801e5b0:	429a      	cmp	r2, r3
 801e5b2:	d104      	bne.n	801e5be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	4a0c      	ldr	r2, [pc, #48]	; (801e5ec <ip_reass_dequeue_datagram+0x4c>)
 801e5ba:	6013      	str	r3, [r2, #0]
 801e5bc:	e00d      	b.n	801e5da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e5be:	683b      	ldr	r3, [r7, #0]
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d106      	bne.n	801e5d2 <ip_reass_dequeue_datagram+0x32>
 801e5c4:	4b0a      	ldr	r3, [pc, #40]	; (801e5f0 <ip_reass_dequeue_datagram+0x50>)
 801e5c6:	f240 1245 	movw	r2, #325	; 0x145
 801e5ca:	490a      	ldr	r1, [pc, #40]	; (801e5f4 <ip_reass_dequeue_datagram+0x54>)
 801e5cc:	480a      	ldr	r0, [pc, #40]	; (801e5f8 <ip_reass_dequeue_datagram+0x58>)
 801e5ce:	f000 ff05 	bl	801f3dc <iprintf>
    prev->next = ipr->next;
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681a      	ldr	r2, [r3, #0]
 801e5d6:	683b      	ldr	r3, [r7, #0]
 801e5d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e5da:	6879      	ldr	r1, [r7, #4]
 801e5dc:	2004      	movs	r0, #4
 801e5de:	f7f6 fde7 	bl	80151b0 <memp_free>
}
 801e5e2:	bf00      	nop
 801e5e4:	3708      	adds	r7, #8
 801e5e6:	46bd      	mov	sp, r7
 801e5e8:	bd80      	pop	{r7, pc}
 801e5ea:	bf00      	nop
 801e5ec:	2000c930 	.word	0x2000c930
 801e5f0:	0802406c 	.word	0x0802406c
 801e5f4:	08024134 	.word	0x08024134
 801e5f8:	080240b4 	.word	0x080240b4

0801e5fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e5fc:	b580      	push	{r7, lr}
 801e5fe:	b08c      	sub	sp, #48	; 0x30
 801e600:	af00      	add	r7, sp, #0
 801e602:	60f8      	str	r0, [r7, #12]
 801e604:	60b9      	str	r1, [r7, #8]
 801e606:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e608:	2300      	movs	r3, #0
 801e60a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e60c:	2301      	movs	r3, #1
 801e60e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e610:	68bb      	ldr	r3, [r7, #8]
 801e612:	685b      	ldr	r3, [r3, #4]
 801e614:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e616:	69fb      	ldr	r3, [r7, #28]
 801e618:	885b      	ldrh	r3, [r3, #2]
 801e61a:	b29b      	uxth	r3, r3
 801e61c:	4618      	mov	r0, r3
 801e61e:	f7f6 f889 	bl	8014734 <lwip_htons>
 801e622:	4603      	mov	r3, r0
 801e624:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e626:	69fb      	ldr	r3, [r7, #28]
 801e628:	781b      	ldrb	r3, [r3, #0]
 801e62a:	f003 030f 	and.w	r3, r3, #15
 801e62e:	b2db      	uxtb	r3, r3
 801e630:	009b      	lsls	r3, r3, #2
 801e632:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e634:	7e7b      	ldrb	r3, [r7, #25]
 801e636:	b29b      	uxth	r3, r3
 801e638:	8b7a      	ldrh	r2, [r7, #26]
 801e63a:	429a      	cmp	r2, r3
 801e63c:	d202      	bcs.n	801e644 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e63e:	f04f 33ff 	mov.w	r3, #4294967295
 801e642:	e135      	b.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e644:	7e7b      	ldrb	r3, [r7, #25]
 801e646:	b29b      	uxth	r3, r3
 801e648:	8b7a      	ldrh	r2, [r7, #26]
 801e64a:	1ad3      	subs	r3, r2, r3
 801e64c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e64e:	69fb      	ldr	r3, [r7, #28]
 801e650:	88db      	ldrh	r3, [r3, #6]
 801e652:	b29b      	uxth	r3, r3
 801e654:	4618      	mov	r0, r3
 801e656:	f7f6 f86d 	bl	8014734 <lwip_htons>
 801e65a:	4603      	mov	r3, r0
 801e65c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e660:	b29b      	uxth	r3, r3
 801e662:	00db      	lsls	r3, r3, #3
 801e664:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e666:	68bb      	ldr	r3, [r7, #8]
 801e668:	685b      	ldr	r3, [r3, #4]
 801e66a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e66e:	2200      	movs	r2, #0
 801e670:	701a      	strb	r2, [r3, #0]
 801e672:	2200      	movs	r2, #0
 801e674:	705a      	strb	r2, [r3, #1]
 801e676:	2200      	movs	r2, #0
 801e678:	709a      	strb	r2, [r3, #2]
 801e67a:	2200      	movs	r2, #0
 801e67c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e680:	8afa      	ldrh	r2, [r7, #22]
 801e682:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e684:	8afa      	ldrh	r2, [r7, #22]
 801e686:	8b7b      	ldrh	r3, [r7, #26]
 801e688:	4413      	add	r3, r2
 801e68a:	b29a      	uxth	r2, r3
 801e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e68e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e692:	88db      	ldrh	r3, [r3, #6]
 801e694:	b29b      	uxth	r3, r3
 801e696:	8afa      	ldrh	r2, [r7, #22]
 801e698:	429a      	cmp	r2, r3
 801e69a:	d902      	bls.n	801e6a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e69c:	f04f 33ff 	mov.w	r3, #4294967295
 801e6a0:	e106      	b.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e6a2:	68fb      	ldr	r3, [r7, #12]
 801e6a4:	685b      	ldr	r3, [r3, #4]
 801e6a6:	627b      	str	r3, [r7, #36]	; 0x24
 801e6a8:	e068      	b.n	801e77c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6ac:	685b      	ldr	r3, [r3, #4]
 801e6ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6b2:	889b      	ldrh	r3, [r3, #4]
 801e6b4:	b29a      	uxth	r2, r3
 801e6b6:	693b      	ldr	r3, [r7, #16]
 801e6b8:	889b      	ldrh	r3, [r3, #4]
 801e6ba:	b29b      	uxth	r3, r3
 801e6bc:	429a      	cmp	r2, r3
 801e6be:	d235      	bcs.n	801e72c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e6c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d020      	beq.n	801e70e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6ce:	889b      	ldrh	r3, [r3, #4]
 801e6d0:	b29a      	uxth	r2, r3
 801e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6d4:	88db      	ldrh	r3, [r3, #6]
 801e6d6:	b29b      	uxth	r3, r3
 801e6d8:	429a      	cmp	r2, r3
 801e6da:	d307      	bcc.n	801e6ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6de:	88db      	ldrh	r3, [r3, #6]
 801e6e0:	b29a      	uxth	r2, r3
 801e6e2:	693b      	ldr	r3, [r7, #16]
 801e6e4:	889b      	ldrh	r3, [r3, #4]
 801e6e6:	b29b      	uxth	r3, r3
 801e6e8:	429a      	cmp	r2, r3
 801e6ea:	d902      	bls.n	801e6f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e6ec:	f04f 33ff 	mov.w	r3, #4294967295
 801e6f0:	e0de      	b.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6f4:	68ba      	ldr	r2, [r7, #8]
 801e6f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6fa:	88db      	ldrh	r3, [r3, #6]
 801e6fc:	b29a      	uxth	r2, r3
 801e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e700:	889b      	ldrh	r3, [r3, #4]
 801e702:	b29b      	uxth	r3, r3
 801e704:	429a      	cmp	r2, r3
 801e706:	d03d      	beq.n	801e784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e708:	2300      	movs	r3, #0
 801e70a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e70c:	e03a      	b.n	801e784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e710:	88db      	ldrh	r3, [r3, #6]
 801e712:	b29a      	uxth	r2, r3
 801e714:	693b      	ldr	r3, [r7, #16]
 801e716:	889b      	ldrh	r3, [r3, #4]
 801e718:	b29b      	uxth	r3, r3
 801e71a:	429a      	cmp	r2, r3
 801e71c:	d902      	bls.n	801e724 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e71e:	f04f 33ff 	mov.w	r3, #4294967295
 801e722:	e0c5      	b.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	68ba      	ldr	r2, [r7, #8]
 801e728:	605a      	str	r2, [r3, #4]
      break;
 801e72a:	e02b      	b.n	801e784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e72e:	889b      	ldrh	r3, [r3, #4]
 801e730:	b29a      	uxth	r2, r3
 801e732:	693b      	ldr	r3, [r7, #16]
 801e734:	889b      	ldrh	r3, [r3, #4]
 801e736:	b29b      	uxth	r3, r3
 801e738:	429a      	cmp	r2, r3
 801e73a:	d102      	bne.n	801e742 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e73c:	f04f 33ff 	mov.w	r3, #4294967295
 801e740:	e0b6      	b.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e744:	889b      	ldrh	r3, [r3, #4]
 801e746:	b29a      	uxth	r2, r3
 801e748:	693b      	ldr	r3, [r7, #16]
 801e74a:	88db      	ldrh	r3, [r3, #6]
 801e74c:	b29b      	uxth	r3, r3
 801e74e:	429a      	cmp	r2, r3
 801e750:	d202      	bcs.n	801e758 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e752:	f04f 33ff 	mov.w	r3, #4294967295
 801e756:	e0ab      	b.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d009      	beq.n	801e772 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e760:	88db      	ldrh	r3, [r3, #6]
 801e762:	b29a      	uxth	r2, r3
 801e764:	693b      	ldr	r3, [r7, #16]
 801e766:	889b      	ldrh	r3, [r3, #4]
 801e768:	b29b      	uxth	r3, r3
 801e76a:	429a      	cmp	r2, r3
 801e76c:	d001      	beq.n	801e772 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e76e:	2300      	movs	r3, #0
 801e770:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e772:	693b      	ldr	r3, [r7, #16]
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e778:	693b      	ldr	r3, [r7, #16]
 801e77a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d193      	bne.n	801e6aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e782:	e000      	b.n	801e786 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e784:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d12d      	bne.n	801e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d01c      	beq.n	801e7cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e794:	88db      	ldrh	r3, [r3, #6]
 801e796:	b29a      	uxth	r2, r3
 801e798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e79a:	889b      	ldrh	r3, [r3, #4]
 801e79c:	b29b      	uxth	r3, r3
 801e79e:	429a      	cmp	r2, r3
 801e7a0:	d906      	bls.n	801e7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e7a2:	4b45      	ldr	r3, [pc, #276]	; (801e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e7a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e7a8:	4944      	ldr	r1, [pc, #272]	; (801e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e7aa:	4845      	ldr	r0, [pc, #276]	; (801e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e7ac:	f000 fe16 	bl	801f3dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b2:	68ba      	ldr	r2, [r7, #8]
 801e7b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b8:	88db      	ldrh	r3, [r3, #6]
 801e7ba:	b29a      	uxth	r2, r3
 801e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7be:	889b      	ldrh	r3, [r3, #4]
 801e7c0:	b29b      	uxth	r3, r3
 801e7c2:	429a      	cmp	r2, r3
 801e7c4:	d010      	beq.n	801e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e7c6:	2300      	movs	r3, #0
 801e7c8:	623b      	str	r3, [r7, #32]
 801e7ca:	e00d      	b.n	801e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e7cc:	68fb      	ldr	r3, [r7, #12]
 801e7ce:	685b      	ldr	r3, [r3, #4]
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	d006      	beq.n	801e7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e7d4:	4b38      	ldr	r3, [pc, #224]	; (801e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e7d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801e7da:	493a      	ldr	r1, [pc, #232]	; (801e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e7dc:	4838      	ldr	r0, [pc, #224]	; (801e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e7de:	f000 fdfd 	bl	801f3dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	68ba      	ldr	r2, [r7, #8]
 801e7e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d105      	bne.n	801e7fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e7ee:	68fb      	ldr	r3, [r7, #12]
 801e7f0:	7f9b      	ldrb	r3, [r3, #30]
 801e7f2:	f003 0301 	and.w	r3, r3, #1
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d059      	beq.n	801e8ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e7fa:	6a3b      	ldr	r3, [r7, #32]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d04f      	beq.n	801e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	685b      	ldr	r3, [r3, #4]
 801e804:	2b00      	cmp	r3, #0
 801e806:	d006      	beq.n	801e816 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	685b      	ldr	r3, [r3, #4]
 801e80c:	685b      	ldr	r3, [r3, #4]
 801e80e:	889b      	ldrh	r3, [r3, #4]
 801e810:	b29b      	uxth	r3, r3
 801e812:	2b00      	cmp	r3, #0
 801e814:	d002      	beq.n	801e81c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e816:	2300      	movs	r3, #0
 801e818:	623b      	str	r3, [r7, #32]
 801e81a:	e041      	b.n	801e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e81e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e826:	e012      	b.n	801e84e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e82a:	685b      	ldr	r3, [r3, #4]
 801e82c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e830:	88db      	ldrh	r3, [r3, #6]
 801e832:	b29a      	uxth	r2, r3
 801e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e836:	889b      	ldrh	r3, [r3, #4]
 801e838:	b29b      	uxth	r3, r3
 801e83a:	429a      	cmp	r2, r3
 801e83c:	d002      	beq.n	801e844 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e83e:	2300      	movs	r3, #0
 801e840:	623b      	str	r3, [r7, #32]
            break;
 801e842:	e007      	b.n	801e854 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e846:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e850:	2b00      	cmp	r3, #0
 801e852:	d1e9      	bne.n	801e828 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e854:	6a3b      	ldr	r3, [r7, #32]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d022      	beq.n	801e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	685b      	ldr	r3, [r3, #4]
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d106      	bne.n	801e870 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e862:	4b15      	ldr	r3, [pc, #84]	; (801e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e864:	f240 12df 	movw	r2, #479	; 0x1df
 801e868:	4917      	ldr	r1, [pc, #92]	; (801e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e86a:	4815      	ldr	r0, [pc, #84]	; (801e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e86c:	f000 fdb6 	bl	801f3dc <iprintf>
          LWIP_ASSERT("sanity check",
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	685b      	ldr	r3, [r3, #4]
 801e874:	685b      	ldr	r3, [r3, #4]
 801e876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e878:	429a      	cmp	r2, r3
 801e87a:	d106      	bne.n	801e88a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e87c:	4b0e      	ldr	r3, [pc, #56]	; (801e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e87e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e882:	4911      	ldr	r1, [pc, #68]	; (801e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e884:	480e      	ldr	r0, [pc, #56]	; (801e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e886:	f000 fda9 	bl	801f3dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	2b00      	cmp	r3, #0
 801e890:	d006      	beq.n	801e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e892:	4b09      	ldr	r3, [pc, #36]	; (801e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e894:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801e898:	490c      	ldr	r1, [pc, #48]	; (801e8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e89a:	4809      	ldr	r0, [pc, #36]	; (801e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e89c:	f000 fd9e 	bl	801f3dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e8a0:	6a3b      	ldr	r3, [r7, #32]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	bf14      	ite	ne
 801e8a6:	2301      	movne	r3, #1
 801e8a8:	2300      	moveq	r3, #0
 801e8aa:	b2db      	uxtb	r3, r3
 801e8ac:	e000      	b.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e8ae:	2300      	movs	r3, #0
}
 801e8b0:	4618      	mov	r0, r3
 801e8b2:	3730      	adds	r7, #48	; 0x30
 801e8b4:	46bd      	mov	sp, r7
 801e8b6:	bd80      	pop	{r7, pc}
 801e8b8:	0802406c 	.word	0x0802406c
 801e8bc:	08024150 	.word	0x08024150
 801e8c0:	080240b4 	.word	0x080240b4
 801e8c4:	08024170 	.word	0x08024170
 801e8c8:	080241a8 	.word	0x080241a8
 801e8cc:	080241b8 	.word	0x080241b8

0801e8d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e8d0:	b580      	push	{r7, lr}
 801e8d2:	b08e      	sub	sp, #56	; 0x38
 801e8d4:	af00      	add	r7, sp, #0
 801e8d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	685b      	ldr	r3, [r3, #4]
 801e8dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8e0:	781b      	ldrb	r3, [r3, #0]
 801e8e2:	f003 030f 	and.w	r3, r3, #15
 801e8e6:	b2db      	uxtb	r3, r3
 801e8e8:	009b      	lsls	r3, r3, #2
 801e8ea:	b2db      	uxtb	r3, r3
 801e8ec:	2b14      	cmp	r3, #20
 801e8ee:	f040 8167 	bne.w	801ebc0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8f4:	88db      	ldrh	r3, [r3, #6]
 801e8f6:	b29b      	uxth	r3, r3
 801e8f8:	4618      	mov	r0, r3
 801e8fa:	f7f5 ff1b 	bl	8014734 <lwip_htons>
 801e8fe:	4603      	mov	r3, r0
 801e900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e904:	b29b      	uxth	r3, r3
 801e906:	00db      	lsls	r3, r3, #3
 801e908:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e90c:	885b      	ldrh	r3, [r3, #2]
 801e90e:	b29b      	uxth	r3, r3
 801e910:	4618      	mov	r0, r3
 801e912:	f7f5 ff0f 	bl	8014734 <lwip_htons>
 801e916:	4603      	mov	r3, r0
 801e918:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e91c:	781b      	ldrb	r3, [r3, #0]
 801e91e:	f003 030f 	and.w	r3, r3, #15
 801e922:	b2db      	uxtb	r3, r3
 801e924:	009b      	lsls	r3, r3, #2
 801e926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e92e:	b29b      	uxth	r3, r3
 801e930:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e932:	429a      	cmp	r2, r3
 801e934:	f0c0 8146 	bcc.w	801ebc4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e93c:	b29b      	uxth	r3, r3
 801e93e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e940:	1ad3      	subs	r3, r2, r3
 801e942:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e944:	6878      	ldr	r0, [r7, #4]
 801e946:	f7f7 fb77 	bl	8016038 <pbuf_clen>
 801e94a:	4603      	mov	r3, r0
 801e94c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e94e:	4b9f      	ldr	r3, [pc, #636]	; (801ebcc <ip4_reass+0x2fc>)
 801e950:	881b      	ldrh	r3, [r3, #0]
 801e952:	461a      	mov	r2, r3
 801e954:	8c3b      	ldrh	r3, [r7, #32]
 801e956:	4413      	add	r3, r2
 801e958:	2b0a      	cmp	r3, #10
 801e95a:	dd10      	ble.n	801e97e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e95c:	8c3b      	ldrh	r3, [r7, #32]
 801e95e:	4619      	mov	r1, r3
 801e960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e962:	f7ff fd81 	bl	801e468 <ip_reass_remove_oldest_datagram>
 801e966:	4603      	mov	r3, r0
 801e968:	2b00      	cmp	r3, #0
 801e96a:	f000 812d 	beq.w	801ebc8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e96e:	4b97      	ldr	r3, [pc, #604]	; (801ebcc <ip4_reass+0x2fc>)
 801e970:	881b      	ldrh	r3, [r3, #0]
 801e972:	461a      	mov	r2, r3
 801e974:	8c3b      	ldrh	r3, [r7, #32]
 801e976:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e978:	2b0a      	cmp	r3, #10
 801e97a:	f300 8125 	bgt.w	801ebc8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e97e:	4b94      	ldr	r3, [pc, #592]	; (801ebd0 <ip4_reass+0x300>)
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	633b      	str	r3, [r7, #48]	; 0x30
 801e984:	e015      	b.n	801e9b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e988:	695a      	ldr	r2, [r3, #20]
 801e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e98c:	68db      	ldr	r3, [r3, #12]
 801e98e:	429a      	cmp	r2, r3
 801e990:	d10c      	bne.n	801e9ac <ip4_reass+0xdc>
 801e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e994:	699a      	ldr	r2, [r3, #24]
 801e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e998:	691b      	ldr	r3, [r3, #16]
 801e99a:	429a      	cmp	r2, r3
 801e99c:	d106      	bne.n	801e9ac <ip4_reass+0xdc>
 801e99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9a0:	899a      	ldrh	r2, [r3, #12]
 801e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9a4:	889b      	ldrh	r3, [r3, #4]
 801e9a6:	b29b      	uxth	r3, r3
 801e9a8:	429a      	cmp	r2, r3
 801e9aa:	d006      	beq.n	801e9ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	633b      	str	r3, [r7, #48]	; 0x30
 801e9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d1e6      	bne.n	801e986 <ip4_reass+0xb6>
 801e9b8:	e000      	b.n	801e9bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e9ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d109      	bne.n	801e9d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e9c2:	8c3b      	ldrh	r3, [r7, #32]
 801e9c4:	4619      	mov	r1, r3
 801e9c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e9c8:	f7ff fdb0 	bl	801e52c <ip_reass_enqueue_new_datagram>
 801e9cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d11c      	bne.n	801ea0e <ip4_reass+0x13e>
      goto nullreturn;
 801e9d4:	e109      	b.n	801ebea <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9d8:	88db      	ldrh	r3, [r3, #6]
 801e9da:	b29b      	uxth	r3, r3
 801e9dc:	4618      	mov	r0, r3
 801e9de:	f7f5 fea9 	bl	8014734 <lwip_htons>
 801e9e2:	4603      	mov	r3, r0
 801e9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d110      	bne.n	801ea0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9ee:	89db      	ldrh	r3, [r3, #14]
 801e9f0:	4618      	mov	r0, r3
 801e9f2:	f7f5 fe9f 	bl	8014734 <lwip_htons>
 801e9f6:	4603      	mov	r3, r0
 801e9f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d006      	beq.n	801ea0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea02:	3308      	adds	r3, #8
 801ea04:	2214      	movs	r2, #20
 801ea06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ea08:	4618      	mov	r0, r3
 801ea0a:	f000 fcb7 	bl	801f37c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea10:	88db      	ldrh	r3, [r3, #6]
 801ea12:	b29b      	uxth	r3, r3
 801ea14:	f003 0320 	and.w	r3, r3, #32
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	bf0c      	ite	eq
 801ea1c:	2301      	moveq	r3, #1
 801ea1e:	2300      	movne	r3, #0
 801ea20:	b2db      	uxtb	r3, r3
 801ea22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ea24:	69fb      	ldr	r3, [r7, #28]
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	d00e      	beq.n	801ea48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ea2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ea2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ea2e:	4413      	add	r3, r2
 801ea30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ea32:	8b7a      	ldrh	r2, [r7, #26]
 801ea34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ea36:	429a      	cmp	r2, r3
 801ea38:	f0c0 80a0 	bcc.w	801eb7c <ip4_reass+0x2ac>
 801ea3c:	8b7b      	ldrh	r3, [r7, #26]
 801ea3e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ea42:	4293      	cmp	r3, r2
 801ea44:	f200 809a 	bhi.w	801eb7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ea48:	69fa      	ldr	r2, [r7, #28]
 801ea4a:	6879      	ldr	r1, [r7, #4]
 801ea4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ea4e:	f7ff fdd5 	bl	801e5fc <ip_reass_chain_frag_into_datagram_and_validate>
 801ea52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ea54:	697b      	ldr	r3, [r7, #20]
 801ea56:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea5a:	f000 8091 	beq.w	801eb80 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ea5e:	4b5b      	ldr	r3, [pc, #364]	; (801ebcc <ip4_reass+0x2fc>)
 801ea60:	881a      	ldrh	r2, [r3, #0]
 801ea62:	8c3b      	ldrh	r3, [r7, #32]
 801ea64:	4413      	add	r3, r2
 801ea66:	b29a      	uxth	r2, r3
 801ea68:	4b58      	ldr	r3, [pc, #352]	; (801ebcc <ip4_reass+0x2fc>)
 801ea6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ea6c:	69fb      	ldr	r3, [r7, #28]
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d00d      	beq.n	801ea8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ea72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ea74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ea76:	4413      	add	r3, r2
 801ea78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea7c:	8a7a      	ldrh	r2, [r7, #18]
 801ea7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ea80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea82:	7f9b      	ldrb	r3, [r3, #30]
 801ea84:	f043 0301 	orr.w	r3, r3, #1
 801ea88:	b2da      	uxtb	r2, r3
 801ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ea8e:	697b      	ldr	r3, [r7, #20]
 801ea90:	2b01      	cmp	r3, #1
 801ea92:	d171      	bne.n	801eb78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ea94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea96:	8b9b      	ldrh	r3, [r3, #28]
 801ea98:	3314      	adds	r3, #20
 801ea9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea9e:	685b      	ldr	r3, [r3, #4]
 801eaa0:	685b      	ldr	r3, [r3, #4]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaa8:	685b      	ldr	r3, [r3, #4]
 801eaaa:	685b      	ldr	r3, [r3, #4]
 801eaac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eab0:	3308      	adds	r3, #8
 801eab2:	2214      	movs	r2, #20
 801eab4:	4619      	mov	r1, r3
 801eab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eab8:	f000 fc60 	bl	801f37c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801eabc:	8a3b      	ldrh	r3, [r7, #16]
 801eabe:	4618      	mov	r0, r3
 801eac0:	f7f5 fe38 	bl	8014734 <lwip_htons>
 801eac4:	4603      	mov	r3, r0
 801eac6:	461a      	mov	r2, r3
 801eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eaca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801eacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eace:	2200      	movs	r2, #0
 801ead0:	719a      	strb	r2, [r3, #6]
 801ead2:	2200      	movs	r2, #0
 801ead4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ead8:	2200      	movs	r2, #0
 801eada:	729a      	strb	r2, [r3, #10]
 801eadc:	2200      	movs	r2, #0
 801eade:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eae2:	685b      	ldr	r3, [r3, #4]
 801eae4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801eae6:	e00d      	b.n	801eb04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801eae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eaea:	685b      	ldr	r3, [r3, #4]
 801eaec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801eaee:	2114      	movs	r1, #20
 801eaf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801eaf2:	f7f7 f97b 	bl	8015dec <pbuf_remove_header>
      pbuf_cat(p, r);
 801eaf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801eaf8:	6878      	ldr	r0, [r7, #4]
 801eafa:	f7f7 fadd 	bl	80160b8 <pbuf_cat>
      r = iprh->next_pbuf;
 801eafe:	68fb      	ldr	r3, [r7, #12]
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801eb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d1ee      	bne.n	801eae8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801eb0a:	4b31      	ldr	r3, [pc, #196]	; (801ebd0 <ip4_reass+0x300>)
 801eb0c:	681b      	ldr	r3, [r3, #0]
 801eb0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eb10:	429a      	cmp	r2, r3
 801eb12:	d102      	bne.n	801eb1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801eb14:	2300      	movs	r3, #0
 801eb16:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eb18:	e010      	b.n	801eb3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801eb1a:	4b2d      	ldr	r3, [pc, #180]	; (801ebd0 <ip4_reass+0x300>)
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eb20:	e007      	b.n	801eb32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb24:	681b      	ldr	r3, [r3, #0]
 801eb26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eb28:	429a      	cmp	r2, r3
 801eb2a:	d006      	beq.n	801eb3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	d1f4      	bne.n	801eb22 <ip4_reass+0x252>
 801eb38:	e000      	b.n	801eb3c <ip4_reass+0x26c>
          break;
 801eb3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801eb3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eb3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801eb40:	f7ff fd2e 	bl	801e5a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801eb44:	6878      	ldr	r0, [r7, #4]
 801eb46:	f7f7 fa77 	bl	8016038 <pbuf_clen>
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801eb4e:	4b1f      	ldr	r3, [pc, #124]	; (801ebcc <ip4_reass+0x2fc>)
 801eb50:	881b      	ldrh	r3, [r3, #0]
 801eb52:	8c3a      	ldrh	r2, [r7, #32]
 801eb54:	429a      	cmp	r2, r3
 801eb56:	d906      	bls.n	801eb66 <ip4_reass+0x296>
 801eb58:	4b1e      	ldr	r3, [pc, #120]	; (801ebd4 <ip4_reass+0x304>)
 801eb5a:	f240 229b 	movw	r2, #667	; 0x29b
 801eb5e:	491e      	ldr	r1, [pc, #120]	; (801ebd8 <ip4_reass+0x308>)
 801eb60:	481e      	ldr	r0, [pc, #120]	; (801ebdc <ip4_reass+0x30c>)
 801eb62:	f000 fc3b 	bl	801f3dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801eb66:	4b19      	ldr	r3, [pc, #100]	; (801ebcc <ip4_reass+0x2fc>)
 801eb68:	881a      	ldrh	r2, [r3, #0]
 801eb6a:	8c3b      	ldrh	r3, [r7, #32]
 801eb6c:	1ad3      	subs	r3, r2, r3
 801eb6e:	b29a      	uxth	r2, r3
 801eb70:	4b16      	ldr	r3, [pc, #88]	; (801ebcc <ip4_reass+0x2fc>)
 801eb72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	e03c      	b.n	801ebf2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801eb78:	2300      	movs	r3, #0
 801eb7a:	e03a      	b.n	801ebf2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801eb7c:	bf00      	nop
 801eb7e:	e000      	b.n	801eb82 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801eb80:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d106      	bne.n	801eb96 <ip4_reass+0x2c6>
 801eb88:	4b12      	ldr	r3, [pc, #72]	; (801ebd4 <ip4_reass+0x304>)
 801eb8a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801eb8e:	4914      	ldr	r1, [pc, #80]	; (801ebe0 <ip4_reass+0x310>)
 801eb90:	4812      	ldr	r0, [pc, #72]	; (801ebdc <ip4_reass+0x30c>)
 801eb92:	f000 fc23 	bl	801f3dc <iprintf>
  if (ipr->p == NULL) {
 801eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb98:	685b      	ldr	r3, [r3, #4]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d124      	bne.n	801ebe8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801eb9e:	4b0c      	ldr	r3, [pc, #48]	; (801ebd0 <ip4_reass+0x300>)
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eba4:	429a      	cmp	r2, r3
 801eba6:	d006      	beq.n	801ebb6 <ip4_reass+0x2e6>
 801eba8:	4b0a      	ldr	r3, [pc, #40]	; (801ebd4 <ip4_reass+0x304>)
 801ebaa:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ebae:	490d      	ldr	r1, [pc, #52]	; (801ebe4 <ip4_reass+0x314>)
 801ebb0:	480a      	ldr	r0, [pc, #40]	; (801ebdc <ip4_reass+0x30c>)
 801ebb2:	f000 fc13 	bl	801f3dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ebb6:	2100      	movs	r1, #0
 801ebb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ebba:	f7ff fcf1 	bl	801e5a0 <ip_reass_dequeue_datagram>
 801ebbe:	e014      	b.n	801ebea <ip4_reass+0x31a>
    goto nullreturn;
 801ebc0:	bf00      	nop
 801ebc2:	e012      	b.n	801ebea <ip4_reass+0x31a>
    goto nullreturn;
 801ebc4:	bf00      	nop
 801ebc6:	e010      	b.n	801ebea <ip4_reass+0x31a>
      goto nullreturn;
 801ebc8:	bf00      	nop
 801ebca:	e00e      	b.n	801ebea <ip4_reass+0x31a>
 801ebcc:	2000c934 	.word	0x2000c934
 801ebd0:	2000c930 	.word	0x2000c930
 801ebd4:	0802406c 	.word	0x0802406c
 801ebd8:	080241dc 	.word	0x080241dc
 801ebdc:	080240b4 	.word	0x080240b4
 801ebe0:	080241f8 	.word	0x080241f8
 801ebe4:	08024204 	.word	0x08024204
  }

nullreturn:
 801ebe8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ebea:	6878      	ldr	r0, [r7, #4]
 801ebec:	f7f7 f996 	bl	8015f1c <pbuf_free>
  return NULL;
 801ebf0:	2300      	movs	r3, #0
}
 801ebf2:	4618      	mov	r0, r3
 801ebf4:	3738      	adds	r7, #56	; 0x38
 801ebf6:	46bd      	mov	sp, r7
 801ebf8:	bd80      	pop	{r7, pc}
 801ebfa:	bf00      	nop

0801ebfc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ebfc:	b580      	push	{r7, lr}
 801ebfe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ec00:	2005      	movs	r0, #5
 801ec02:	f7f6 fa83 	bl	801510c <memp_malloc>
 801ec06:	4603      	mov	r3, r0
}
 801ec08:	4618      	mov	r0, r3
 801ec0a:	bd80      	pop	{r7, pc}

0801ec0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ec0c:	b580      	push	{r7, lr}
 801ec0e:	b082      	sub	sp, #8
 801ec10:	af00      	add	r7, sp, #0
 801ec12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d106      	bne.n	801ec28 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ec1a:	4b07      	ldr	r3, [pc, #28]	; (801ec38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ec1c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ec20:	4906      	ldr	r1, [pc, #24]	; (801ec3c <ip_frag_free_pbuf_custom_ref+0x30>)
 801ec22:	4807      	ldr	r0, [pc, #28]	; (801ec40 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ec24:	f000 fbda 	bl	801f3dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ec28:	6879      	ldr	r1, [r7, #4]
 801ec2a:	2005      	movs	r0, #5
 801ec2c:	f7f6 fac0 	bl	80151b0 <memp_free>
}
 801ec30:	bf00      	nop
 801ec32:	3708      	adds	r7, #8
 801ec34:	46bd      	mov	sp, r7
 801ec36:	bd80      	pop	{r7, pc}
 801ec38:	0802406c 	.word	0x0802406c
 801ec3c:	08024224 	.word	0x08024224
 801ec40:	080240b4 	.word	0x080240b4

0801ec44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ec44:	b580      	push	{r7, lr}
 801ec46:	b084      	sub	sp, #16
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d106      	bne.n	801ec64 <ipfrag_free_pbuf_custom+0x20>
 801ec56:	4b11      	ldr	r3, [pc, #68]	; (801ec9c <ipfrag_free_pbuf_custom+0x58>)
 801ec58:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ec5c:	4910      	ldr	r1, [pc, #64]	; (801eca0 <ipfrag_free_pbuf_custom+0x5c>)
 801ec5e:	4811      	ldr	r0, [pc, #68]	; (801eca4 <ipfrag_free_pbuf_custom+0x60>)
 801ec60:	f000 fbbc 	bl	801f3dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ec64:	68fa      	ldr	r2, [r7, #12]
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	429a      	cmp	r2, r3
 801ec6a:	d006      	beq.n	801ec7a <ipfrag_free_pbuf_custom+0x36>
 801ec6c:	4b0b      	ldr	r3, [pc, #44]	; (801ec9c <ipfrag_free_pbuf_custom+0x58>)
 801ec6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ec72:	490d      	ldr	r1, [pc, #52]	; (801eca8 <ipfrag_free_pbuf_custom+0x64>)
 801ec74:	480b      	ldr	r0, [pc, #44]	; (801eca4 <ipfrag_free_pbuf_custom+0x60>)
 801ec76:	f000 fbb1 	bl	801f3dc <iprintf>
  if (pcr->original != NULL) {
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	695b      	ldr	r3, [r3, #20]
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d004      	beq.n	801ec8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	695b      	ldr	r3, [r3, #20]
 801ec86:	4618      	mov	r0, r3
 801ec88:	f7f7 f948 	bl	8015f1c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ec8c:	68f8      	ldr	r0, [r7, #12]
 801ec8e:	f7ff ffbd 	bl	801ec0c <ip_frag_free_pbuf_custom_ref>
}
 801ec92:	bf00      	nop
 801ec94:	3710      	adds	r7, #16
 801ec96:	46bd      	mov	sp, r7
 801ec98:	bd80      	pop	{r7, pc}
 801ec9a:	bf00      	nop
 801ec9c:	0802406c 	.word	0x0802406c
 801eca0:	08024230 	.word	0x08024230
 801eca4:	080240b4 	.word	0x080240b4
 801eca8:	0802423c 	.word	0x0802423c

0801ecac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ecac:	b580      	push	{r7, lr}
 801ecae:	b094      	sub	sp, #80	; 0x50
 801ecb0:	af02      	add	r7, sp, #8
 801ecb2:	60f8      	str	r0, [r7, #12]
 801ecb4:	60b9      	str	r1, [r7, #8]
 801ecb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ecb8:	2300      	movs	r3, #0
 801ecba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ecbe:	68bb      	ldr	r3, [r7, #8]
 801ecc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ecc2:	3b14      	subs	r3, #20
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	da00      	bge.n	801ecca <ip4_frag+0x1e>
 801ecc8:	3307      	adds	r3, #7
 801ecca:	10db      	asrs	r3, r3, #3
 801eccc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ecce:	2314      	movs	r3, #20
 801ecd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ecd2:	68fb      	ldr	r3, [r7, #12]
 801ecd4:	685b      	ldr	r3, [r3, #4]
 801ecd6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ecda:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ecde:	781b      	ldrb	r3, [r3, #0]
 801ece0:	f003 030f 	and.w	r3, r3, #15
 801ece4:	b2db      	uxtb	r3, r3
 801ece6:	009b      	lsls	r3, r3, #2
 801ece8:	b2db      	uxtb	r3, r3
 801ecea:	2b14      	cmp	r3, #20
 801ecec:	d002      	beq.n	801ecf4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ecee:	f06f 0305 	mvn.w	r3, #5
 801ecf2:	e110      	b.n	801ef16 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	895b      	ldrh	r3, [r3, #10]
 801ecf8:	2b13      	cmp	r3, #19
 801ecfa:	d809      	bhi.n	801ed10 <ip4_frag+0x64>
 801ecfc:	4b88      	ldr	r3, [pc, #544]	; (801ef20 <ip4_frag+0x274>)
 801ecfe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801ed02:	4988      	ldr	r1, [pc, #544]	; (801ef24 <ip4_frag+0x278>)
 801ed04:	4888      	ldr	r0, [pc, #544]	; (801ef28 <ip4_frag+0x27c>)
 801ed06:	f000 fb69 	bl	801f3dc <iprintf>
 801ed0a:	f06f 0305 	mvn.w	r3, #5
 801ed0e:	e102      	b.n	801ef16 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ed10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed12:	88db      	ldrh	r3, [r3, #6]
 801ed14:	b29b      	uxth	r3, r3
 801ed16:	4618      	mov	r0, r3
 801ed18:	f7f5 fd0c 	bl	8014734 <lwip_htons>
 801ed1c:	4603      	mov	r3, r0
 801ed1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801ed20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ed22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ed26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ed2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ed2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ed30:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ed32:	68fb      	ldr	r3, [r7, #12]
 801ed34:	891b      	ldrh	r3, [r3, #8]
 801ed36:	3b14      	subs	r3, #20
 801ed38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ed3c:	e0e1      	b.n	801ef02 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ed3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ed40:	00db      	lsls	r3, r3, #3
 801ed42:	b29b      	uxth	r3, r3
 801ed44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ed48:	4293      	cmp	r3, r2
 801ed4a:	bf28      	it	cs
 801ed4c:	4613      	movcs	r3, r2
 801ed4e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ed50:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ed54:	2114      	movs	r1, #20
 801ed56:	200e      	movs	r0, #14
 801ed58:	f7f6 fdea 	bl	8015930 <pbuf_alloc>
 801ed5c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	f000 80d5 	beq.w	801ef10 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed68:	895b      	ldrh	r3, [r3, #10]
 801ed6a:	2b13      	cmp	r3, #19
 801ed6c:	d806      	bhi.n	801ed7c <ip4_frag+0xd0>
 801ed6e:	4b6c      	ldr	r3, [pc, #432]	; (801ef20 <ip4_frag+0x274>)
 801ed70:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ed74:	496d      	ldr	r1, [pc, #436]	; (801ef2c <ip4_frag+0x280>)
 801ed76:	486c      	ldr	r0, [pc, #432]	; (801ef28 <ip4_frag+0x27c>)
 801ed78:	f000 fb30 	bl	801f3dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed7e:	685b      	ldr	r3, [r3, #4]
 801ed80:	2214      	movs	r2, #20
 801ed82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ed84:	4618      	mov	r0, r3
 801ed86:	f000 faf9 	bl	801f37c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed8c:	685b      	ldr	r3, [r3, #4]
 801ed8e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ed90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ed92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ed96:	e064      	b.n	801ee62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ed98:	68fb      	ldr	r3, [r7, #12]
 801ed9a:	895a      	ldrh	r2, [r3, #10]
 801ed9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ed9e:	1ad3      	subs	r3, r2, r3
 801eda0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801eda2:	68fb      	ldr	r3, [r7, #12]
 801eda4:	895b      	ldrh	r3, [r3, #10]
 801eda6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801eda8:	429a      	cmp	r2, r3
 801edaa:	d906      	bls.n	801edba <ip4_frag+0x10e>
 801edac:	4b5c      	ldr	r3, [pc, #368]	; (801ef20 <ip4_frag+0x274>)
 801edae:	f240 322d 	movw	r2, #813	; 0x32d
 801edb2:	495f      	ldr	r1, [pc, #380]	; (801ef30 <ip4_frag+0x284>)
 801edb4:	485c      	ldr	r0, [pc, #368]	; (801ef28 <ip4_frag+0x27c>)
 801edb6:	f000 fb11 	bl	801f3dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801edba:	8bfa      	ldrh	r2, [r7, #30]
 801edbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801edc0:	4293      	cmp	r3, r2
 801edc2:	bf28      	it	cs
 801edc4:	4613      	movcs	r3, r2
 801edc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801edca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d105      	bne.n	801edde <ip4_frag+0x132>
        poff = 0;
 801edd2:	2300      	movs	r3, #0
 801edd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	60fb      	str	r3, [r7, #12]
        continue;
 801eddc:	e041      	b.n	801ee62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801edde:	f7ff ff0d 	bl	801ebfc <ip_frag_alloc_pbuf_custom_ref>
 801ede2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ede4:	69bb      	ldr	r3, [r7, #24]
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d103      	bne.n	801edf2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801edea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801edec:	f7f7 f896 	bl	8015f1c <pbuf_free>
        goto memerr;
 801edf0:	e08f      	b.n	801ef12 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801edf2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801edf4:	68fb      	ldr	r3, [r7, #12]
 801edf6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801edf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801edfa:	4413      	add	r3, r2
 801edfc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ee00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ee04:	9201      	str	r2, [sp, #4]
 801ee06:	9300      	str	r3, [sp, #0]
 801ee08:	4603      	mov	r3, r0
 801ee0a:	2241      	movs	r2, #65	; 0x41
 801ee0c:	2000      	movs	r0, #0
 801ee0e:	f7f6 feb9 	bl	8015b84 <pbuf_alloced_custom>
 801ee12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ee14:	697b      	ldr	r3, [r7, #20]
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	d106      	bne.n	801ee28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ee1a:	69b8      	ldr	r0, [r7, #24]
 801ee1c:	f7ff fef6 	bl	801ec0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ee20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ee22:	f7f7 f87b 	bl	8015f1c <pbuf_free>
        goto memerr;
 801ee26:	e074      	b.n	801ef12 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ee28:	68f8      	ldr	r0, [r7, #12]
 801ee2a:	f7f7 f91d 	bl	8016068 <pbuf_ref>
      pcr->original = p;
 801ee2e:	69bb      	ldr	r3, [r7, #24]
 801ee30:	68fa      	ldr	r2, [r7, #12]
 801ee32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ee34:	69bb      	ldr	r3, [r7, #24]
 801ee36:	4a3f      	ldr	r2, [pc, #252]	; (801ef34 <ip4_frag+0x288>)
 801ee38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ee3a:	6979      	ldr	r1, [r7, #20]
 801ee3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ee3e:	f7f7 f93b 	bl	80160b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ee42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ee46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ee4a:	1ad3      	subs	r3, r2, r3
 801ee4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ee50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d004      	beq.n	801ee62 <ip4_frag+0x1b6>
        poff = 0;
 801ee58:	2300      	movs	r3, #0
 801ee5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ee5c:	68fb      	ldr	r3, [r7, #12]
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ee62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d196      	bne.n	801ed98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ee6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ee6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ee70:	4413      	add	r3, r2
 801ee72:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ee74:	68bb      	ldr	r3, [r7, #8]
 801ee76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ee78:	f1a3 0213 	sub.w	r2, r3, #19
 801ee7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ee80:	429a      	cmp	r2, r3
 801ee82:	bfcc      	ite	gt
 801ee84:	2301      	movgt	r3, #1
 801ee86:	2300      	movle	r3, #0
 801ee88:	b2db      	uxtb	r3, r3
 801ee8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ee8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ee90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ee94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ee96:	6a3b      	ldr	r3, [r7, #32]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	d002      	beq.n	801eea2 <ip4_frag+0x1f6>
 801ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d003      	beq.n	801eeaa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801eea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801eea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801eea8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801eeaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801eeac:	4618      	mov	r0, r3
 801eeae:	f7f5 fc41 	bl	8014734 <lwip_htons>
 801eeb2:	4603      	mov	r3, r0
 801eeb4:	461a      	mov	r2, r3
 801eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeb8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eeba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801eebc:	3314      	adds	r3, #20
 801eebe:	b29b      	uxth	r3, r3
 801eec0:	4618      	mov	r0, r3
 801eec2:	f7f5 fc37 	bl	8014734 <lwip_htons>
 801eec6:	4603      	mov	r3, r0
 801eec8:	461a      	mov	r2, r3
 801eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eecc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eed0:	2200      	movs	r2, #0
 801eed2:	729a      	strb	r2, [r3, #10]
 801eed4:	2200      	movs	r2, #0
 801eed6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801eed8:	68bb      	ldr	r3, [r7, #8]
 801eeda:	695b      	ldr	r3, [r3, #20]
 801eedc:	687a      	ldr	r2, [r7, #4]
 801eede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eee0:	68b8      	ldr	r0, [r7, #8]
 801eee2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801eee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eee6:	f7f7 f819 	bl	8015f1c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801eeea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801eeee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801eef0:	1ad3      	subs	r3, r2, r3
 801eef2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801eef6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801eefa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801eefc:	4413      	add	r3, r2
 801eefe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ef02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	f47f af19 	bne.w	801ed3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ef0c:	2300      	movs	r3, #0
 801ef0e:	e002      	b.n	801ef16 <ip4_frag+0x26a>
      goto memerr;
 801ef10:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ef12:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ef16:	4618      	mov	r0, r3
 801ef18:	3748      	adds	r7, #72	; 0x48
 801ef1a:	46bd      	mov	sp, r7
 801ef1c:	bd80      	pop	{r7, pc}
 801ef1e:	bf00      	nop
 801ef20:	0802406c 	.word	0x0802406c
 801ef24:	08024248 	.word	0x08024248
 801ef28:	080240b4 	.word	0x080240b4
 801ef2c:	08024264 	.word	0x08024264
 801ef30:	08024284 	.word	0x08024284
 801ef34:	0801ec45 	.word	0x0801ec45

0801ef38 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ef38:	b580      	push	{r7, lr}
 801ef3a:	b086      	sub	sp, #24
 801ef3c:	af00      	add	r7, sp, #0
 801ef3e:	6078      	str	r0, [r7, #4]
 801ef40:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ef42:	230e      	movs	r3, #14
 801ef44:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	895b      	ldrh	r3, [r3, #10]
 801ef4a:	2b0e      	cmp	r3, #14
 801ef4c:	d96e      	bls.n	801f02c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	7bdb      	ldrb	r3, [r3, #15]
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	d106      	bne.n	801ef64 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ef56:	683b      	ldr	r3, [r7, #0]
 801ef58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ef5c:	3301      	adds	r3, #1
 801ef5e:	b2da      	uxtb	r2, r3
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	685b      	ldr	r3, [r3, #4]
 801ef68:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ef6a:	693b      	ldr	r3, [r7, #16]
 801ef6c:	7b1a      	ldrb	r2, [r3, #12]
 801ef6e:	7b5b      	ldrb	r3, [r3, #13]
 801ef70:	021b      	lsls	r3, r3, #8
 801ef72:	4313      	orrs	r3, r2
 801ef74:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ef76:	693b      	ldr	r3, [r7, #16]
 801ef78:	781b      	ldrb	r3, [r3, #0]
 801ef7a:	f003 0301 	and.w	r3, r3, #1
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d023      	beq.n	801efca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ef82:	693b      	ldr	r3, [r7, #16]
 801ef84:	781b      	ldrb	r3, [r3, #0]
 801ef86:	2b01      	cmp	r3, #1
 801ef88:	d10f      	bne.n	801efaa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ef8a:	693b      	ldr	r3, [r7, #16]
 801ef8c:	785b      	ldrb	r3, [r3, #1]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d11b      	bne.n	801efca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ef92:	693b      	ldr	r3, [r7, #16]
 801ef94:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ef96:	2b5e      	cmp	r3, #94	; 0x5e
 801ef98:	d117      	bne.n	801efca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	7b5b      	ldrb	r3, [r3, #13]
 801ef9e:	f043 0310 	orr.w	r3, r3, #16
 801efa2:	b2da      	uxtb	r2, r3
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	735a      	strb	r2, [r3, #13]
 801efa8:	e00f      	b.n	801efca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801efaa:	693b      	ldr	r3, [r7, #16]
 801efac:	2206      	movs	r2, #6
 801efae:	4928      	ldr	r1, [pc, #160]	; (801f050 <ethernet_input+0x118>)
 801efb0:	4618      	mov	r0, r3
 801efb2:	f000 f9d5 	bl	801f360 <memcmp>
 801efb6:	4603      	mov	r3, r0
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d106      	bne.n	801efca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	7b5b      	ldrb	r3, [r3, #13]
 801efc0:	f043 0308 	orr.w	r3, r3, #8
 801efc4:	b2da      	uxtb	r2, r3
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801efca:	89fb      	ldrh	r3, [r7, #14]
 801efcc:	2b08      	cmp	r3, #8
 801efce:	d003      	beq.n	801efd8 <ethernet_input+0xa0>
 801efd0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801efd4:	d014      	beq.n	801f000 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801efd6:	e032      	b.n	801f03e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801efd8:	683b      	ldr	r3, [r7, #0]
 801efda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801efde:	f003 0308 	and.w	r3, r3, #8
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d024      	beq.n	801f030 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801efe6:	8afb      	ldrh	r3, [r7, #22]
 801efe8:	4619      	mov	r1, r3
 801efea:	6878      	ldr	r0, [r7, #4]
 801efec:	f7f6 fefe 	bl	8015dec <pbuf_remove_header>
 801eff0:	4603      	mov	r3, r0
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d11e      	bne.n	801f034 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801eff6:	6839      	ldr	r1, [r7, #0]
 801eff8:	6878      	ldr	r0, [r7, #4]
 801effa:	f7fe ff27 	bl	801de4c <ip4_input>
      break;
 801effe:	e013      	b.n	801f028 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f000:	683b      	ldr	r3, [r7, #0]
 801f002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f006:	f003 0308 	and.w	r3, r3, #8
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d014      	beq.n	801f038 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f00e:	8afb      	ldrh	r3, [r7, #22]
 801f010:	4619      	mov	r1, r3
 801f012:	6878      	ldr	r0, [r7, #4]
 801f014:	f7f6 feea 	bl	8015dec <pbuf_remove_header>
 801f018:	4603      	mov	r3, r0
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	d10e      	bne.n	801f03c <ethernet_input+0x104>
        etharp_input(p, netif);
 801f01e:	6839      	ldr	r1, [r7, #0]
 801f020:	6878      	ldr	r0, [r7, #4]
 801f022:	f7fe f8c7 	bl	801d1b4 <etharp_input>
      break;
 801f026:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f028:	2300      	movs	r3, #0
 801f02a:	e00c      	b.n	801f046 <ethernet_input+0x10e>
    goto free_and_return;
 801f02c:	bf00      	nop
 801f02e:	e006      	b.n	801f03e <ethernet_input+0x106>
        goto free_and_return;
 801f030:	bf00      	nop
 801f032:	e004      	b.n	801f03e <ethernet_input+0x106>
        goto free_and_return;
 801f034:	bf00      	nop
 801f036:	e002      	b.n	801f03e <ethernet_input+0x106>
        goto free_and_return;
 801f038:	bf00      	nop
 801f03a:	e000      	b.n	801f03e <ethernet_input+0x106>
        goto free_and_return;
 801f03c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f03e:	6878      	ldr	r0, [r7, #4]
 801f040:	f7f6 ff6c 	bl	8015f1c <pbuf_free>
  return ERR_OK;
 801f044:	2300      	movs	r3, #0
}
 801f046:	4618      	mov	r0, r3
 801f048:	3718      	adds	r7, #24
 801f04a:	46bd      	mov	sp, r7
 801f04c:	bd80      	pop	{r7, pc}
 801f04e:	bf00      	nop
 801f050:	0807b16c 	.word	0x0807b16c

0801f054 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f054:	b580      	push	{r7, lr}
 801f056:	b086      	sub	sp, #24
 801f058:	af00      	add	r7, sp, #0
 801f05a:	60f8      	str	r0, [r7, #12]
 801f05c:	60b9      	str	r1, [r7, #8]
 801f05e:	607a      	str	r2, [r7, #4]
 801f060:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f062:	8c3b      	ldrh	r3, [r7, #32]
 801f064:	4618      	mov	r0, r3
 801f066:	f7f5 fb65 	bl	8014734 <lwip_htons>
 801f06a:	4603      	mov	r3, r0
 801f06c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f06e:	210e      	movs	r1, #14
 801f070:	68b8      	ldr	r0, [r7, #8]
 801f072:	f7f6 feab 	bl	8015dcc <pbuf_add_header>
 801f076:	4603      	mov	r3, r0
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d125      	bne.n	801f0c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f07c:	68bb      	ldr	r3, [r7, #8]
 801f07e:	685b      	ldr	r3, [r3, #4]
 801f080:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f082:	693b      	ldr	r3, [r7, #16]
 801f084:	8afa      	ldrh	r2, [r7, #22]
 801f086:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f088:	693b      	ldr	r3, [r7, #16]
 801f08a:	2206      	movs	r2, #6
 801f08c:	6839      	ldr	r1, [r7, #0]
 801f08e:	4618      	mov	r0, r3
 801f090:	f000 f974 	bl	801f37c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f094:	693b      	ldr	r3, [r7, #16]
 801f096:	3306      	adds	r3, #6
 801f098:	2206      	movs	r2, #6
 801f09a:	6879      	ldr	r1, [r7, #4]
 801f09c:	4618      	mov	r0, r3
 801f09e:	f000 f96d 	bl	801f37c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f0a2:	68fb      	ldr	r3, [r7, #12]
 801f0a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801f0a8:	2b06      	cmp	r3, #6
 801f0aa:	d006      	beq.n	801f0ba <ethernet_output+0x66>
 801f0ac:	4b0a      	ldr	r3, [pc, #40]	; (801f0d8 <ethernet_output+0x84>)
 801f0ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 801f0b2:	490a      	ldr	r1, [pc, #40]	; (801f0dc <ethernet_output+0x88>)
 801f0b4:	480a      	ldr	r0, [pc, #40]	; (801f0e0 <ethernet_output+0x8c>)
 801f0b6:	f000 f991 	bl	801f3dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f0ba:	68fb      	ldr	r3, [r7, #12]
 801f0bc:	699b      	ldr	r3, [r3, #24]
 801f0be:	68b9      	ldr	r1, [r7, #8]
 801f0c0:	68f8      	ldr	r0, [r7, #12]
 801f0c2:	4798      	blx	r3
 801f0c4:	4603      	mov	r3, r0
 801f0c6:	e002      	b.n	801f0ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801f0c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801f0ca:	f06f 0301 	mvn.w	r3, #1
}
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	3718      	adds	r7, #24
 801f0d2:	46bd      	mov	sp, r7
 801f0d4:	bd80      	pop	{r7, pc}
 801f0d6:	bf00      	nop
 801f0d8:	08024294 	.word	0x08024294
 801f0dc:	080242cc 	.word	0x080242cc
 801f0e0:	08024300 	.word	0x08024300

0801f0e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f0e4:	b580      	push	{r7, lr}
 801f0e6:	b086      	sub	sp, #24
 801f0e8:	af00      	add	r7, sp, #0
 801f0ea:	6078      	str	r0, [r7, #4]
 801f0ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801f0ee:	683b      	ldr	r3, [r7, #0]
 801f0f0:	60bb      	str	r3, [r7, #8]
 801f0f2:	2304      	movs	r3, #4
 801f0f4:	60fb      	str	r3, [r7, #12]
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	613b      	str	r3, [r7, #16]
 801f0fa:	2300      	movs	r3, #0
 801f0fc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f0fe:	f107 0308 	add.w	r3, r7, #8
 801f102:	2100      	movs	r1, #0
 801f104:	4618      	mov	r0, r3
 801f106:	f7f0 fe28 	bl	800fd5a <osMessageCreate>
 801f10a:	4602      	mov	r2, r0
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	681b      	ldr	r3, [r3, #0]
 801f114:	2b00      	cmp	r3, #0
 801f116:	d102      	bne.n	801f11e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801f118:	f04f 33ff 	mov.w	r3, #4294967295
 801f11c:	e000      	b.n	801f120 <sys_mbox_new+0x3c>

  return ERR_OK;
 801f11e:	2300      	movs	r3, #0
}
 801f120:	4618      	mov	r0, r3
 801f122:	3718      	adds	r7, #24
 801f124:	46bd      	mov	sp, r7
 801f126:	bd80      	pop	{r7, pc}

0801f128 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f128:	b580      	push	{r7, lr}
 801f12a:	b084      	sub	sp, #16
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	6078      	str	r0, [r7, #4]
 801f130:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	6839      	ldr	r1, [r7, #0]
 801f138:	2200      	movs	r2, #0
 801f13a:	4618      	mov	r0, r3
 801f13c:	f7f0 fe36 	bl	800fdac <osMessagePut>
 801f140:	4603      	mov	r3, r0
 801f142:	2b00      	cmp	r3, #0
 801f144:	d102      	bne.n	801f14c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801f146:	2300      	movs	r3, #0
 801f148:	73fb      	strb	r3, [r7, #15]
 801f14a:	e001      	b.n	801f150 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801f14c:	23ff      	movs	r3, #255	; 0xff
 801f14e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801f150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f154:	4618      	mov	r0, r3
 801f156:	3710      	adds	r7, #16
 801f158:	46bd      	mov	sp, r7
 801f15a:	bd80      	pop	{r7, pc}

0801f15c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f15c:	b580      	push	{r7, lr}
 801f15e:	b08c      	sub	sp, #48	; 0x30
 801f160:	af00      	add	r7, sp, #0
 801f162:	61f8      	str	r0, [r7, #28]
 801f164:	61b9      	str	r1, [r7, #24]
 801f166:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801f168:	f7f0 fc21 	bl	800f9ae <osKernelSysTick>
 801f16c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801f16e:	697b      	ldr	r3, [r7, #20]
 801f170:	2b00      	cmp	r3, #0
 801f172:	d017      	beq.n	801f1a4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801f174:	69fb      	ldr	r3, [r7, #28]
 801f176:	6819      	ldr	r1, [r3, #0]
 801f178:	f107 0320 	add.w	r3, r7, #32
 801f17c:	697a      	ldr	r2, [r7, #20]
 801f17e:	4618      	mov	r0, r3
 801f180:	f7f0 fe54 	bl	800fe2c <osMessageGet>

    if(event.status == osEventMessage)
 801f184:	6a3b      	ldr	r3, [r7, #32]
 801f186:	2b10      	cmp	r3, #16
 801f188:	d109      	bne.n	801f19e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801f18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f18c:	461a      	mov	r2, r3
 801f18e:	69bb      	ldr	r3, [r7, #24]
 801f190:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801f192:	f7f0 fc0c 	bl	800f9ae <osKernelSysTick>
 801f196:	4602      	mov	r2, r0
 801f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f19a:	1ad3      	subs	r3, r2, r3
 801f19c:	e019      	b.n	801f1d2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f19e:	f04f 33ff 	mov.w	r3, #4294967295
 801f1a2:	e016      	b.n	801f1d2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801f1a4:	69fb      	ldr	r3, [r7, #28]
 801f1a6:	6819      	ldr	r1, [r3, #0]
 801f1a8:	463b      	mov	r3, r7
 801f1aa:	f04f 32ff 	mov.w	r2, #4294967295
 801f1ae:	4618      	mov	r0, r3
 801f1b0:	f7f0 fe3c 	bl	800fe2c <osMessageGet>
 801f1b4:	f107 0320 	add.w	r3, r7, #32
 801f1b8:	463a      	mov	r2, r7
 801f1ba:	ca07      	ldmia	r2, {r0, r1, r2}
 801f1bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801f1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1c2:	461a      	mov	r2, r3
 801f1c4:	69bb      	ldr	r3, [r7, #24]
 801f1c6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801f1c8:	f7f0 fbf1 	bl	800f9ae <osKernelSysTick>
 801f1cc:	4602      	mov	r2, r0
 801f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1d0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801f1d2:	4618      	mov	r0, r3
 801f1d4:	3730      	adds	r7, #48	; 0x30
 801f1d6:	46bd      	mov	sp, r7
 801f1d8:	bd80      	pop	{r7, pc}

0801f1da <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801f1da:	b480      	push	{r7}
 801f1dc:	b083      	sub	sp, #12
 801f1de:	af00      	add	r7, sp, #0
 801f1e0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d101      	bne.n	801f1ee <sys_mbox_valid+0x14>
    return 0;
 801f1ea:	2300      	movs	r3, #0
 801f1ec:	e000      	b.n	801f1f0 <sys_mbox_valid+0x16>
  else
    return 1;
 801f1ee:	2301      	movs	r3, #1
}
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	370c      	adds	r7, #12
 801f1f4:	46bd      	mov	sp, r7
 801f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1fa:	4770      	bx	lr

0801f1fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f1fc:	b580      	push	{r7, lr}
 801f1fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801f200:	4803      	ldr	r0, [pc, #12]	; (801f210 <sys_init+0x14>)
 801f202:	f7f0 fc44 	bl	800fa8e <osMutexCreate>
 801f206:	4603      	mov	r3, r0
 801f208:	4a02      	ldr	r2, [pc, #8]	; (801f214 <sys_init+0x18>)
 801f20a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801f20c:	bf00      	nop
 801f20e:	bd80      	pop	{r7, pc}
 801f210:	0807b17c 	.word	0x0807b17c
 801f214:	20014bd4 	.word	0x20014bd4

0801f218 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f218:	b580      	push	{r7, lr}
 801f21a:	b084      	sub	sp, #16
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801f220:	2300      	movs	r3, #0
 801f222:	60bb      	str	r3, [r7, #8]
 801f224:	2300      	movs	r3, #0
 801f226:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f228:	f107 0308 	add.w	r3, r7, #8
 801f22c:	4618      	mov	r0, r3
 801f22e:	f7f0 fc2e 	bl	800fa8e <osMutexCreate>
 801f232:	4602      	mov	r2, r0
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d102      	bne.n	801f246 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801f240:	f04f 33ff 	mov.w	r3, #4294967295
 801f244:	e000      	b.n	801f248 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f246:	2300      	movs	r3, #0
}
 801f248:	4618      	mov	r0, r3
 801f24a:	3710      	adds	r7, #16
 801f24c:	46bd      	mov	sp, r7
 801f24e:	bd80      	pop	{r7, pc}

0801f250 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f250:	b580      	push	{r7, lr}
 801f252:	b082      	sub	sp, #8
 801f254:	af00      	add	r7, sp, #0
 801f256:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	f04f 31ff 	mov.w	r1, #4294967295
 801f260:	4618      	mov	r0, r3
 801f262:	f7f0 fc2d 	bl	800fac0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801f266:	bf00      	nop
 801f268:	3708      	adds	r7, #8
 801f26a:	46bd      	mov	sp, r7
 801f26c:	bd80      	pop	{r7, pc}

0801f26e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f26e:	b580      	push	{r7, lr}
 801f270:	b082      	sub	sp, #8
 801f272:	af00      	add	r7, sp, #0
 801f274:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	681b      	ldr	r3, [r3, #0]
 801f27a:	4618      	mov	r0, r3
 801f27c:	f7f0 fc6e 	bl	800fb5c <osMutexRelease>
}
 801f280:	bf00      	nop
 801f282:	3708      	adds	r7, #8
 801f284:	46bd      	mov	sp, r7
 801f286:	bd80      	pop	{r7, pc}

0801f288 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f288:	b580      	push	{r7, lr}
 801f28a:	b08c      	sub	sp, #48	; 0x30
 801f28c:	af00      	add	r7, sp, #0
 801f28e:	60f8      	str	r0, [r7, #12]
 801f290:	60b9      	str	r1, [r7, #8]
 801f292:	607a      	str	r2, [r7, #4]
 801f294:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f296:	f107 0314 	add.w	r3, r7, #20
 801f29a:	2200      	movs	r2, #0
 801f29c:	601a      	str	r2, [r3, #0]
 801f29e:	605a      	str	r2, [r3, #4]
 801f2a0:	609a      	str	r2, [r3, #8]
 801f2a2:	60da      	str	r2, [r3, #12]
 801f2a4:	611a      	str	r2, [r3, #16]
 801f2a6:	615a      	str	r2, [r3, #20]
 801f2a8:	619a      	str	r2, [r3, #24]
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	617b      	str	r3, [r7, #20]
 801f2ae:	68bb      	ldr	r3, [r7, #8]
 801f2b0:	61bb      	str	r3, [r7, #24]
 801f2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2b4:	b21b      	sxth	r3, r3
 801f2b6:	83bb      	strh	r3, [r7, #28]
 801f2b8:	683b      	ldr	r3, [r7, #0]
 801f2ba:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801f2bc:	f107 0314 	add.w	r3, r7, #20
 801f2c0:	6879      	ldr	r1, [r7, #4]
 801f2c2:	4618      	mov	r0, r3
 801f2c4:	f7f0 fb83 	bl	800f9ce <osThreadCreate>
 801f2c8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801f2ca:	4618      	mov	r0, r3
 801f2cc:	3730      	adds	r7, #48	; 0x30
 801f2ce:	46bd      	mov	sp, r7
 801f2d0:	bd80      	pop	{r7, pc}
	...

0801f2d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f2d4:	b580      	push	{r7, lr}
 801f2d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801f2d8:	4b04      	ldr	r3, [pc, #16]	; (801f2ec <sys_arch_protect+0x18>)
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	f04f 31ff 	mov.w	r1, #4294967295
 801f2e0:	4618      	mov	r0, r3
 801f2e2:	f7f0 fbed 	bl	800fac0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801f2e6:	2301      	movs	r3, #1
}
 801f2e8:	4618      	mov	r0, r3
 801f2ea:	bd80      	pop	{r7, pc}
 801f2ec:	20014bd4 	.word	0x20014bd4

0801f2f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f2f0:	b580      	push	{r7, lr}
 801f2f2:	b082      	sub	sp, #8
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f2f8:	4b04      	ldr	r3, [pc, #16]	; (801f30c <sys_arch_unprotect+0x1c>)
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	4618      	mov	r0, r3
 801f2fe:	f7f0 fc2d 	bl	800fb5c <osMutexRelease>
}
 801f302:	bf00      	nop
 801f304:	3708      	adds	r7, #8
 801f306:	46bd      	mov	sp, r7
 801f308:	bd80      	pop	{r7, pc}
 801f30a:	bf00      	nop
 801f30c:	20014bd4 	.word	0x20014bd4

0801f310 <atoi>:
 801f310:	220a      	movs	r2, #10
 801f312:	2100      	movs	r1, #0
 801f314:	f000 bad2 	b.w	801f8bc <strtol>

0801f318 <__libc_init_array>:
 801f318:	b570      	push	{r4, r5, r6, lr}
 801f31a:	4d0d      	ldr	r5, [pc, #52]	; (801f350 <__libc_init_array+0x38>)
 801f31c:	4c0d      	ldr	r4, [pc, #52]	; (801f354 <__libc_init_array+0x3c>)
 801f31e:	1b64      	subs	r4, r4, r5
 801f320:	10a4      	asrs	r4, r4, #2
 801f322:	2600      	movs	r6, #0
 801f324:	42a6      	cmp	r6, r4
 801f326:	d109      	bne.n	801f33c <__libc_init_array+0x24>
 801f328:	4d0b      	ldr	r5, [pc, #44]	; (801f358 <__libc_init_array+0x40>)
 801f32a:	4c0c      	ldr	r4, [pc, #48]	; (801f35c <__libc_init_array+0x44>)
 801f32c:	f002 f816 	bl	802135c <_init>
 801f330:	1b64      	subs	r4, r4, r5
 801f332:	10a4      	asrs	r4, r4, #2
 801f334:	2600      	movs	r6, #0
 801f336:	42a6      	cmp	r6, r4
 801f338:	d105      	bne.n	801f346 <__libc_init_array+0x2e>
 801f33a:	bd70      	pop	{r4, r5, r6, pc}
 801f33c:	f855 3b04 	ldr.w	r3, [r5], #4
 801f340:	4798      	blx	r3
 801f342:	3601      	adds	r6, #1
 801f344:	e7ee      	b.n	801f324 <__libc_init_array+0xc>
 801f346:	f855 3b04 	ldr.w	r3, [r5], #4
 801f34a:	4798      	blx	r3
 801f34c:	3601      	adds	r6, #1
 801f34e:	e7f2      	b.n	801f336 <__libc_init_array+0x1e>
 801f350:	0807b3f8 	.word	0x0807b3f8
 801f354:	0807b3f8 	.word	0x0807b3f8
 801f358:	0807b3f8 	.word	0x0807b3f8
 801f35c:	0807b3fc 	.word	0x0807b3fc

0801f360 <memcmp>:
 801f360:	b530      	push	{r4, r5, lr}
 801f362:	3901      	subs	r1, #1
 801f364:	2400      	movs	r4, #0
 801f366:	42a2      	cmp	r2, r4
 801f368:	d101      	bne.n	801f36e <memcmp+0xe>
 801f36a:	2000      	movs	r0, #0
 801f36c:	e005      	b.n	801f37a <memcmp+0x1a>
 801f36e:	5d03      	ldrb	r3, [r0, r4]
 801f370:	3401      	adds	r4, #1
 801f372:	5d0d      	ldrb	r5, [r1, r4]
 801f374:	42ab      	cmp	r3, r5
 801f376:	d0f6      	beq.n	801f366 <memcmp+0x6>
 801f378:	1b58      	subs	r0, r3, r5
 801f37a:	bd30      	pop	{r4, r5, pc}

0801f37c <memcpy>:
 801f37c:	440a      	add	r2, r1
 801f37e:	4291      	cmp	r1, r2
 801f380:	f100 33ff 	add.w	r3, r0, #4294967295
 801f384:	d100      	bne.n	801f388 <memcpy+0xc>
 801f386:	4770      	bx	lr
 801f388:	b510      	push	{r4, lr}
 801f38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f392:	4291      	cmp	r1, r2
 801f394:	d1f9      	bne.n	801f38a <memcpy+0xe>
 801f396:	bd10      	pop	{r4, pc}

0801f398 <memmove>:
 801f398:	4288      	cmp	r0, r1
 801f39a:	b510      	push	{r4, lr}
 801f39c:	eb01 0402 	add.w	r4, r1, r2
 801f3a0:	d902      	bls.n	801f3a8 <memmove+0x10>
 801f3a2:	4284      	cmp	r4, r0
 801f3a4:	4623      	mov	r3, r4
 801f3a6:	d807      	bhi.n	801f3b8 <memmove+0x20>
 801f3a8:	1e43      	subs	r3, r0, #1
 801f3aa:	42a1      	cmp	r1, r4
 801f3ac:	d008      	beq.n	801f3c0 <memmove+0x28>
 801f3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f3b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f3b6:	e7f8      	b.n	801f3aa <memmove+0x12>
 801f3b8:	4402      	add	r2, r0
 801f3ba:	4601      	mov	r1, r0
 801f3bc:	428a      	cmp	r2, r1
 801f3be:	d100      	bne.n	801f3c2 <memmove+0x2a>
 801f3c0:	bd10      	pop	{r4, pc}
 801f3c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f3c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f3ca:	e7f7      	b.n	801f3bc <memmove+0x24>

0801f3cc <memset>:
 801f3cc:	4402      	add	r2, r0
 801f3ce:	4603      	mov	r3, r0
 801f3d0:	4293      	cmp	r3, r2
 801f3d2:	d100      	bne.n	801f3d6 <memset+0xa>
 801f3d4:	4770      	bx	lr
 801f3d6:	f803 1b01 	strb.w	r1, [r3], #1
 801f3da:	e7f9      	b.n	801f3d0 <memset+0x4>

0801f3dc <iprintf>:
 801f3dc:	b40f      	push	{r0, r1, r2, r3}
 801f3de:	4b0a      	ldr	r3, [pc, #40]	; (801f408 <iprintf+0x2c>)
 801f3e0:	b513      	push	{r0, r1, r4, lr}
 801f3e2:	681c      	ldr	r4, [r3, #0]
 801f3e4:	b124      	cbz	r4, 801f3f0 <iprintf+0x14>
 801f3e6:	69a3      	ldr	r3, [r4, #24]
 801f3e8:	b913      	cbnz	r3, 801f3f0 <iprintf+0x14>
 801f3ea:	4620      	mov	r0, r4
 801f3ec:	f000 fc90 	bl	801fd10 <__sinit>
 801f3f0:	ab05      	add	r3, sp, #20
 801f3f2:	9a04      	ldr	r2, [sp, #16]
 801f3f4:	68a1      	ldr	r1, [r4, #8]
 801f3f6:	9301      	str	r3, [sp, #4]
 801f3f8:	4620      	mov	r0, r4
 801f3fa:	f001 f9d5 	bl	80207a8 <_vfiprintf_r>
 801f3fe:	b002      	add	sp, #8
 801f400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f404:	b004      	add	sp, #16
 801f406:	4770      	bx	lr
 801f408:	20000040 	.word	0x20000040

0801f40c <_puts_r>:
 801f40c:	b570      	push	{r4, r5, r6, lr}
 801f40e:	460e      	mov	r6, r1
 801f410:	4605      	mov	r5, r0
 801f412:	b118      	cbz	r0, 801f41c <_puts_r+0x10>
 801f414:	6983      	ldr	r3, [r0, #24]
 801f416:	b90b      	cbnz	r3, 801f41c <_puts_r+0x10>
 801f418:	f000 fc7a 	bl	801fd10 <__sinit>
 801f41c:	69ab      	ldr	r3, [r5, #24]
 801f41e:	68ac      	ldr	r4, [r5, #8]
 801f420:	b913      	cbnz	r3, 801f428 <_puts_r+0x1c>
 801f422:	4628      	mov	r0, r5
 801f424:	f000 fc74 	bl	801fd10 <__sinit>
 801f428:	4b2c      	ldr	r3, [pc, #176]	; (801f4dc <_puts_r+0xd0>)
 801f42a:	429c      	cmp	r4, r3
 801f42c:	d120      	bne.n	801f470 <_puts_r+0x64>
 801f42e:	686c      	ldr	r4, [r5, #4]
 801f430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f432:	07db      	lsls	r3, r3, #31
 801f434:	d405      	bmi.n	801f442 <_puts_r+0x36>
 801f436:	89a3      	ldrh	r3, [r4, #12]
 801f438:	0598      	lsls	r0, r3, #22
 801f43a:	d402      	bmi.n	801f442 <_puts_r+0x36>
 801f43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f43e:	f000 fd17 	bl	801fe70 <__retarget_lock_acquire_recursive>
 801f442:	89a3      	ldrh	r3, [r4, #12]
 801f444:	0719      	lsls	r1, r3, #28
 801f446:	d51d      	bpl.n	801f484 <_puts_r+0x78>
 801f448:	6923      	ldr	r3, [r4, #16]
 801f44a:	b1db      	cbz	r3, 801f484 <_puts_r+0x78>
 801f44c:	3e01      	subs	r6, #1
 801f44e:	68a3      	ldr	r3, [r4, #8]
 801f450:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f454:	3b01      	subs	r3, #1
 801f456:	60a3      	str	r3, [r4, #8]
 801f458:	bb39      	cbnz	r1, 801f4aa <_puts_r+0x9e>
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	da38      	bge.n	801f4d0 <_puts_r+0xc4>
 801f45e:	4622      	mov	r2, r4
 801f460:	210a      	movs	r1, #10
 801f462:	4628      	mov	r0, r5
 801f464:	f000 fa34 	bl	801f8d0 <__swbuf_r>
 801f468:	3001      	adds	r0, #1
 801f46a:	d011      	beq.n	801f490 <_puts_r+0x84>
 801f46c:	250a      	movs	r5, #10
 801f46e:	e011      	b.n	801f494 <_puts_r+0x88>
 801f470:	4b1b      	ldr	r3, [pc, #108]	; (801f4e0 <_puts_r+0xd4>)
 801f472:	429c      	cmp	r4, r3
 801f474:	d101      	bne.n	801f47a <_puts_r+0x6e>
 801f476:	68ac      	ldr	r4, [r5, #8]
 801f478:	e7da      	b.n	801f430 <_puts_r+0x24>
 801f47a:	4b1a      	ldr	r3, [pc, #104]	; (801f4e4 <_puts_r+0xd8>)
 801f47c:	429c      	cmp	r4, r3
 801f47e:	bf08      	it	eq
 801f480:	68ec      	ldreq	r4, [r5, #12]
 801f482:	e7d5      	b.n	801f430 <_puts_r+0x24>
 801f484:	4621      	mov	r1, r4
 801f486:	4628      	mov	r0, r5
 801f488:	f000 fa86 	bl	801f998 <__swsetup_r>
 801f48c:	2800      	cmp	r0, #0
 801f48e:	d0dd      	beq.n	801f44c <_puts_r+0x40>
 801f490:	f04f 35ff 	mov.w	r5, #4294967295
 801f494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f496:	07da      	lsls	r2, r3, #31
 801f498:	d405      	bmi.n	801f4a6 <_puts_r+0x9a>
 801f49a:	89a3      	ldrh	r3, [r4, #12]
 801f49c:	059b      	lsls	r3, r3, #22
 801f49e:	d402      	bmi.n	801f4a6 <_puts_r+0x9a>
 801f4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f4a2:	f000 fce6 	bl	801fe72 <__retarget_lock_release_recursive>
 801f4a6:	4628      	mov	r0, r5
 801f4a8:	bd70      	pop	{r4, r5, r6, pc}
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	da04      	bge.n	801f4b8 <_puts_r+0xac>
 801f4ae:	69a2      	ldr	r2, [r4, #24]
 801f4b0:	429a      	cmp	r2, r3
 801f4b2:	dc06      	bgt.n	801f4c2 <_puts_r+0xb6>
 801f4b4:	290a      	cmp	r1, #10
 801f4b6:	d004      	beq.n	801f4c2 <_puts_r+0xb6>
 801f4b8:	6823      	ldr	r3, [r4, #0]
 801f4ba:	1c5a      	adds	r2, r3, #1
 801f4bc:	6022      	str	r2, [r4, #0]
 801f4be:	7019      	strb	r1, [r3, #0]
 801f4c0:	e7c5      	b.n	801f44e <_puts_r+0x42>
 801f4c2:	4622      	mov	r2, r4
 801f4c4:	4628      	mov	r0, r5
 801f4c6:	f000 fa03 	bl	801f8d0 <__swbuf_r>
 801f4ca:	3001      	adds	r0, #1
 801f4cc:	d1bf      	bne.n	801f44e <_puts_r+0x42>
 801f4ce:	e7df      	b.n	801f490 <_puts_r+0x84>
 801f4d0:	6823      	ldr	r3, [r4, #0]
 801f4d2:	250a      	movs	r5, #10
 801f4d4:	1c5a      	adds	r2, r3, #1
 801f4d6:	6022      	str	r2, [r4, #0]
 801f4d8:	701d      	strb	r5, [r3, #0]
 801f4da:	e7db      	b.n	801f494 <_puts_r+0x88>
 801f4dc:	0807b360 	.word	0x0807b360
 801f4e0:	0807b380 	.word	0x0807b380
 801f4e4:	0807b340 	.word	0x0807b340

0801f4e8 <puts>:
 801f4e8:	4b02      	ldr	r3, [pc, #8]	; (801f4f4 <puts+0xc>)
 801f4ea:	4601      	mov	r1, r0
 801f4ec:	6818      	ldr	r0, [r3, #0]
 801f4ee:	f7ff bf8d 	b.w	801f40c <_puts_r>
 801f4f2:	bf00      	nop
 801f4f4:	20000040 	.word	0x20000040

0801f4f8 <rand>:
 801f4f8:	4b17      	ldr	r3, [pc, #92]	; (801f558 <rand+0x60>)
 801f4fa:	b510      	push	{r4, lr}
 801f4fc:	681c      	ldr	r4, [r3, #0]
 801f4fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f500:	b9b3      	cbnz	r3, 801f530 <rand+0x38>
 801f502:	2018      	movs	r0, #24
 801f504:	f000 fd2c 	bl	801ff60 <malloc>
 801f508:	63a0      	str	r0, [r4, #56]	; 0x38
 801f50a:	b928      	cbnz	r0, 801f518 <rand+0x20>
 801f50c:	4602      	mov	r2, r0
 801f50e:	4b13      	ldr	r3, [pc, #76]	; (801f55c <rand+0x64>)
 801f510:	4813      	ldr	r0, [pc, #76]	; (801f560 <rand+0x68>)
 801f512:	214e      	movs	r1, #78	; 0x4e
 801f514:	f000 faae 	bl	801fa74 <__assert_func>
 801f518:	4a12      	ldr	r2, [pc, #72]	; (801f564 <rand+0x6c>)
 801f51a:	4b13      	ldr	r3, [pc, #76]	; (801f568 <rand+0x70>)
 801f51c:	e9c0 2300 	strd	r2, r3, [r0]
 801f520:	4b12      	ldr	r3, [pc, #72]	; (801f56c <rand+0x74>)
 801f522:	6083      	str	r3, [r0, #8]
 801f524:	230b      	movs	r3, #11
 801f526:	8183      	strh	r3, [r0, #12]
 801f528:	2201      	movs	r2, #1
 801f52a:	2300      	movs	r3, #0
 801f52c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f530:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f532:	480f      	ldr	r0, [pc, #60]	; (801f570 <rand+0x78>)
 801f534:	690a      	ldr	r2, [r1, #16]
 801f536:	694b      	ldr	r3, [r1, #20]
 801f538:	4c0e      	ldr	r4, [pc, #56]	; (801f574 <rand+0x7c>)
 801f53a:	4350      	muls	r0, r2
 801f53c:	fb04 0003 	mla	r0, r4, r3, r0
 801f540:	fba2 3404 	umull	r3, r4, r2, r4
 801f544:	1c5a      	adds	r2, r3, #1
 801f546:	4404      	add	r4, r0
 801f548:	f144 0000 	adc.w	r0, r4, #0
 801f54c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f550:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f554:	bd10      	pop	{r4, pc}
 801f556:	bf00      	nop
 801f558:	20000040 	.word	0x20000040
 801f55c:	0807b28c 	.word	0x0807b28c
 801f560:	0807b2a3 	.word	0x0807b2a3
 801f564:	abcd330e 	.word	0xabcd330e
 801f568:	e66d1234 	.word	0xe66d1234
 801f56c:	0005deec 	.word	0x0005deec
 801f570:	5851f42d 	.word	0x5851f42d
 801f574:	4c957f2d 	.word	0x4c957f2d

0801f578 <sniprintf>:
 801f578:	b40c      	push	{r2, r3}
 801f57a:	b530      	push	{r4, r5, lr}
 801f57c:	4b17      	ldr	r3, [pc, #92]	; (801f5dc <sniprintf+0x64>)
 801f57e:	1e0c      	subs	r4, r1, #0
 801f580:	681d      	ldr	r5, [r3, #0]
 801f582:	b09d      	sub	sp, #116	; 0x74
 801f584:	da08      	bge.n	801f598 <sniprintf+0x20>
 801f586:	238b      	movs	r3, #139	; 0x8b
 801f588:	602b      	str	r3, [r5, #0]
 801f58a:	f04f 30ff 	mov.w	r0, #4294967295
 801f58e:	b01d      	add	sp, #116	; 0x74
 801f590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f594:	b002      	add	sp, #8
 801f596:	4770      	bx	lr
 801f598:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f59c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f5a0:	bf14      	ite	ne
 801f5a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f5a6:	4623      	moveq	r3, r4
 801f5a8:	9304      	str	r3, [sp, #16]
 801f5aa:	9307      	str	r3, [sp, #28]
 801f5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f5b0:	9002      	str	r0, [sp, #8]
 801f5b2:	9006      	str	r0, [sp, #24]
 801f5b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f5b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f5ba:	ab21      	add	r3, sp, #132	; 0x84
 801f5bc:	a902      	add	r1, sp, #8
 801f5be:	4628      	mov	r0, r5
 801f5c0:	9301      	str	r3, [sp, #4]
 801f5c2:	f000 fdf5 	bl	80201b0 <_svfiprintf_r>
 801f5c6:	1c43      	adds	r3, r0, #1
 801f5c8:	bfbc      	itt	lt
 801f5ca:	238b      	movlt	r3, #139	; 0x8b
 801f5cc:	602b      	strlt	r3, [r5, #0]
 801f5ce:	2c00      	cmp	r4, #0
 801f5d0:	d0dd      	beq.n	801f58e <sniprintf+0x16>
 801f5d2:	9b02      	ldr	r3, [sp, #8]
 801f5d4:	2200      	movs	r2, #0
 801f5d6:	701a      	strb	r2, [r3, #0]
 801f5d8:	e7d9      	b.n	801f58e <sniprintf+0x16>
 801f5da:	bf00      	nop
 801f5dc:	20000040 	.word	0x20000040

0801f5e0 <siprintf>:
 801f5e0:	b40e      	push	{r1, r2, r3}
 801f5e2:	b500      	push	{lr}
 801f5e4:	b09c      	sub	sp, #112	; 0x70
 801f5e6:	ab1d      	add	r3, sp, #116	; 0x74
 801f5e8:	9002      	str	r0, [sp, #8]
 801f5ea:	9006      	str	r0, [sp, #24]
 801f5ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f5f0:	4809      	ldr	r0, [pc, #36]	; (801f618 <siprintf+0x38>)
 801f5f2:	9107      	str	r1, [sp, #28]
 801f5f4:	9104      	str	r1, [sp, #16]
 801f5f6:	4909      	ldr	r1, [pc, #36]	; (801f61c <siprintf+0x3c>)
 801f5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 801f5fc:	9105      	str	r1, [sp, #20]
 801f5fe:	6800      	ldr	r0, [r0, #0]
 801f600:	9301      	str	r3, [sp, #4]
 801f602:	a902      	add	r1, sp, #8
 801f604:	f000 fdd4 	bl	80201b0 <_svfiprintf_r>
 801f608:	9b02      	ldr	r3, [sp, #8]
 801f60a:	2200      	movs	r2, #0
 801f60c:	701a      	strb	r2, [r3, #0]
 801f60e:	b01c      	add	sp, #112	; 0x70
 801f610:	f85d eb04 	ldr.w	lr, [sp], #4
 801f614:	b003      	add	sp, #12
 801f616:	4770      	bx	lr
 801f618:	20000040 	.word	0x20000040
 801f61c:	ffff0208 	.word	0xffff0208

0801f620 <siscanf>:
 801f620:	b40e      	push	{r1, r2, r3}
 801f622:	b510      	push	{r4, lr}
 801f624:	b09f      	sub	sp, #124	; 0x7c
 801f626:	ac21      	add	r4, sp, #132	; 0x84
 801f628:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f62c:	f854 2b04 	ldr.w	r2, [r4], #4
 801f630:	9201      	str	r2, [sp, #4]
 801f632:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f636:	9004      	str	r0, [sp, #16]
 801f638:	9008      	str	r0, [sp, #32]
 801f63a:	f7e0 fdd3 	bl	80001e4 <strlen>
 801f63e:	4b0c      	ldr	r3, [pc, #48]	; (801f670 <siscanf+0x50>)
 801f640:	9005      	str	r0, [sp, #20]
 801f642:	9009      	str	r0, [sp, #36]	; 0x24
 801f644:	930d      	str	r3, [sp, #52]	; 0x34
 801f646:	480b      	ldr	r0, [pc, #44]	; (801f674 <siscanf+0x54>)
 801f648:	9a01      	ldr	r2, [sp, #4]
 801f64a:	6800      	ldr	r0, [r0, #0]
 801f64c:	9403      	str	r4, [sp, #12]
 801f64e:	2300      	movs	r3, #0
 801f650:	9311      	str	r3, [sp, #68]	; 0x44
 801f652:	9316      	str	r3, [sp, #88]	; 0x58
 801f654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f658:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f65c:	a904      	add	r1, sp, #16
 801f65e:	4623      	mov	r3, r4
 801f660:	f000 ff00 	bl	8020464 <__ssvfiscanf_r>
 801f664:	b01f      	add	sp, #124	; 0x7c
 801f666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f66a:	b003      	add	sp, #12
 801f66c:	4770      	bx	lr
 801f66e:	bf00      	nop
 801f670:	0801f69b 	.word	0x0801f69b
 801f674:	20000040 	.word	0x20000040

0801f678 <__sread>:
 801f678:	b510      	push	{r4, lr}
 801f67a:	460c      	mov	r4, r1
 801f67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f680:	f001 fca2 	bl	8020fc8 <_read_r>
 801f684:	2800      	cmp	r0, #0
 801f686:	bfab      	itete	ge
 801f688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f68a:	89a3      	ldrhlt	r3, [r4, #12]
 801f68c:	181b      	addge	r3, r3, r0
 801f68e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f692:	bfac      	ite	ge
 801f694:	6563      	strge	r3, [r4, #84]	; 0x54
 801f696:	81a3      	strhlt	r3, [r4, #12]
 801f698:	bd10      	pop	{r4, pc}

0801f69a <__seofread>:
 801f69a:	2000      	movs	r0, #0
 801f69c:	4770      	bx	lr

0801f69e <__swrite>:
 801f69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6a2:	461f      	mov	r7, r3
 801f6a4:	898b      	ldrh	r3, [r1, #12]
 801f6a6:	05db      	lsls	r3, r3, #23
 801f6a8:	4605      	mov	r5, r0
 801f6aa:	460c      	mov	r4, r1
 801f6ac:	4616      	mov	r6, r2
 801f6ae:	d505      	bpl.n	801f6bc <__swrite+0x1e>
 801f6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6b4:	2302      	movs	r3, #2
 801f6b6:	2200      	movs	r2, #0
 801f6b8:	f000 fbdc 	bl	801fe74 <_lseek_r>
 801f6bc:	89a3      	ldrh	r3, [r4, #12]
 801f6be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f6c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f6c6:	81a3      	strh	r3, [r4, #12]
 801f6c8:	4632      	mov	r2, r6
 801f6ca:	463b      	mov	r3, r7
 801f6cc:	4628      	mov	r0, r5
 801f6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f6d2:	f000 b94f 	b.w	801f974 <_write_r>

0801f6d6 <__sseek>:
 801f6d6:	b510      	push	{r4, lr}
 801f6d8:	460c      	mov	r4, r1
 801f6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6de:	f000 fbc9 	bl	801fe74 <_lseek_r>
 801f6e2:	1c43      	adds	r3, r0, #1
 801f6e4:	89a3      	ldrh	r3, [r4, #12]
 801f6e6:	bf15      	itete	ne
 801f6e8:	6560      	strne	r0, [r4, #84]	; 0x54
 801f6ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f6ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f6f2:	81a3      	strheq	r3, [r4, #12]
 801f6f4:	bf18      	it	ne
 801f6f6:	81a3      	strhne	r3, [r4, #12]
 801f6f8:	bd10      	pop	{r4, pc}

0801f6fa <__sclose>:
 801f6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6fe:	f000 b9d7 	b.w	801fab0 <_close_r>

0801f702 <strcat>:
 801f702:	b510      	push	{r4, lr}
 801f704:	4602      	mov	r2, r0
 801f706:	7814      	ldrb	r4, [r2, #0]
 801f708:	4613      	mov	r3, r2
 801f70a:	3201      	adds	r2, #1
 801f70c:	2c00      	cmp	r4, #0
 801f70e:	d1fa      	bne.n	801f706 <strcat+0x4>
 801f710:	3b01      	subs	r3, #1
 801f712:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f716:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f71a:	2a00      	cmp	r2, #0
 801f71c:	d1f9      	bne.n	801f712 <strcat+0x10>
 801f71e:	bd10      	pop	{r4, pc}

0801f720 <strchr>:
 801f720:	b2c9      	uxtb	r1, r1
 801f722:	4603      	mov	r3, r0
 801f724:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f728:	b11a      	cbz	r2, 801f732 <strchr+0x12>
 801f72a:	428a      	cmp	r2, r1
 801f72c:	d1f9      	bne.n	801f722 <strchr+0x2>
 801f72e:	4618      	mov	r0, r3
 801f730:	4770      	bx	lr
 801f732:	2900      	cmp	r1, #0
 801f734:	bf18      	it	ne
 801f736:	2300      	movne	r3, #0
 801f738:	e7f9      	b.n	801f72e <strchr+0xe>

0801f73a <strcpy>:
 801f73a:	4603      	mov	r3, r0
 801f73c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f740:	f803 2b01 	strb.w	r2, [r3], #1
 801f744:	2a00      	cmp	r2, #0
 801f746:	d1f9      	bne.n	801f73c <strcpy+0x2>
 801f748:	4770      	bx	lr

0801f74a <strncmp>:
 801f74a:	b510      	push	{r4, lr}
 801f74c:	b16a      	cbz	r2, 801f76a <strncmp+0x20>
 801f74e:	3901      	subs	r1, #1
 801f750:	1884      	adds	r4, r0, r2
 801f752:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f756:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f75a:	4293      	cmp	r3, r2
 801f75c:	d103      	bne.n	801f766 <strncmp+0x1c>
 801f75e:	42a0      	cmp	r0, r4
 801f760:	d001      	beq.n	801f766 <strncmp+0x1c>
 801f762:	2b00      	cmp	r3, #0
 801f764:	d1f5      	bne.n	801f752 <strncmp+0x8>
 801f766:	1a98      	subs	r0, r3, r2
 801f768:	bd10      	pop	{r4, pc}
 801f76a:	4610      	mov	r0, r2
 801f76c:	e7fc      	b.n	801f768 <strncmp+0x1e>

0801f76e <strnstr>:
 801f76e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f770:	460c      	mov	r4, r1
 801f772:	4605      	mov	r5, r0
 801f774:	4611      	mov	r1, r2
 801f776:	4620      	mov	r0, r4
 801f778:	9201      	str	r2, [sp, #4]
 801f77a:	f001 fc81 	bl	8021080 <strnlen>
 801f77e:	9901      	ldr	r1, [sp, #4]
 801f780:	4281      	cmp	r1, r0
 801f782:	d805      	bhi.n	801f790 <strnstr+0x22>
 801f784:	5c23      	ldrb	r3, [r4, r0]
 801f786:	b11b      	cbz	r3, 801f790 <strnstr+0x22>
 801f788:	2400      	movs	r4, #0
 801f78a:	4620      	mov	r0, r4
 801f78c:	b003      	add	sp, #12
 801f78e:	bd30      	pop	{r4, r5, pc}
 801f790:	4603      	mov	r3, r0
 801f792:	4622      	mov	r2, r4
 801f794:	4628      	mov	r0, r5
 801f796:	f000 fbeb 	bl	801ff70 <memmem>
 801f79a:	4604      	mov	r4, r0
 801f79c:	2800      	cmp	r0, #0
 801f79e:	d0f3      	beq.n	801f788 <strnstr+0x1a>
 801f7a0:	1b42      	subs	r2, r0, r5
 801f7a2:	2100      	movs	r1, #0
 801f7a4:	4628      	mov	r0, r5
 801f7a6:	f7e0 fd2b 	bl	8000200 <memchr>
 801f7aa:	2800      	cmp	r0, #0
 801f7ac:	d1ec      	bne.n	801f788 <strnstr+0x1a>
 801f7ae:	e7ec      	b.n	801f78a <strnstr+0x1c>

0801f7b0 <_strtol_l.isra.0>:
 801f7b0:	2b01      	cmp	r3, #1
 801f7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f7b6:	d001      	beq.n	801f7bc <_strtol_l.isra.0+0xc>
 801f7b8:	2b24      	cmp	r3, #36	; 0x24
 801f7ba:	d906      	bls.n	801f7ca <_strtol_l.isra.0+0x1a>
 801f7bc:	f000 f988 	bl	801fad0 <__errno>
 801f7c0:	2316      	movs	r3, #22
 801f7c2:	6003      	str	r3, [r0, #0]
 801f7c4:	2000      	movs	r0, #0
 801f7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7ca:	4f3a      	ldr	r7, [pc, #232]	; (801f8b4 <_strtol_l.isra.0+0x104>)
 801f7cc:	468e      	mov	lr, r1
 801f7ce:	4676      	mov	r6, lr
 801f7d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f7d4:	5de5      	ldrb	r5, [r4, r7]
 801f7d6:	f015 0508 	ands.w	r5, r5, #8
 801f7da:	d1f8      	bne.n	801f7ce <_strtol_l.isra.0+0x1e>
 801f7dc:	2c2d      	cmp	r4, #45	; 0x2d
 801f7de:	d134      	bne.n	801f84a <_strtol_l.isra.0+0x9a>
 801f7e0:	f89e 4000 	ldrb.w	r4, [lr]
 801f7e4:	f04f 0801 	mov.w	r8, #1
 801f7e8:	f106 0e02 	add.w	lr, r6, #2
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d05c      	beq.n	801f8aa <_strtol_l.isra.0+0xfa>
 801f7f0:	2b10      	cmp	r3, #16
 801f7f2:	d10c      	bne.n	801f80e <_strtol_l.isra.0+0x5e>
 801f7f4:	2c30      	cmp	r4, #48	; 0x30
 801f7f6:	d10a      	bne.n	801f80e <_strtol_l.isra.0+0x5e>
 801f7f8:	f89e 4000 	ldrb.w	r4, [lr]
 801f7fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f800:	2c58      	cmp	r4, #88	; 0x58
 801f802:	d14d      	bne.n	801f8a0 <_strtol_l.isra.0+0xf0>
 801f804:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f808:	2310      	movs	r3, #16
 801f80a:	f10e 0e02 	add.w	lr, lr, #2
 801f80e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f812:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f816:	2600      	movs	r6, #0
 801f818:	fbbc f9f3 	udiv	r9, ip, r3
 801f81c:	4635      	mov	r5, r6
 801f81e:	fb03 ca19 	mls	sl, r3, r9, ip
 801f822:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f826:	2f09      	cmp	r7, #9
 801f828:	d818      	bhi.n	801f85c <_strtol_l.isra.0+0xac>
 801f82a:	463c      	mov	r4, r7
 801f82c:	42a3      	cmp	r3, r4
 801f82e:	dd24      	ble.n	801f87a <_strtol_l.isra.0+0xca>
 801f830:	2e00      	cmp	r6, #0
 801f832:	db1f      	blt.n	801f874 <_strtol_l.isra.0+0xc4>
 801f834:	45a9      	cmp	r9, r5
 801f836:	d31d      	bcc.n	801f874 <_strtol_l.isra.0+0xc4>
 801f838:	d101      	bne.n	801f83e <_strtol_l.isra.0+0x8e>
 801f83a:	45a2      	cmp	sl, r4
 801f83c:	db1a      	blt.n	801f874 <_strtol_l.isra.0+0xc4>
 801f83e:	fb05 4503 	mla	r5, r5, r3, r4
 801f842:	2601      	movs	r6, #1
 801f844:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f848:	e7eb      	b.n	801f822 <_strtol_l.isra.0+0x72>
 801f84a:	2c2b      	cmp	r4, #43	; 0x2b
 801f84c:	bf08      	it	eq
 801f84e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f852:	46a8      	mov	r8, r5
 801f854:	bf08      	it	eq
 801f856:	f106 0e02 	addeq.w	lr, r6, #2
 801f85a:	e7c7      	b.n	801f7ec <_strtol_l.isra.0+0x3c>
 801f85c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f860:	2f19      	cmp	r7, #25
 801f862:	d801      	bhi.n	801f868 <_strtol_l.isra.0+0xb8>
 801f864:	3c37      	subs	r4, #55	; 0x37
 801f866:	e7e1      	b.n	801f82c <_strtol_l.isra.0+0x7c>
 801f868:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f86c:	2f19      	cmp	r7, #25
 801f86e:	d804      	bhi.n	801f87a <_strtol_l.isra.0+0xca>
 801f870:	3c57      	subs	r4, #87	; 0x57
 801f872:	e7db      	b.n	801f82c <_strtol_l.isra.0+0x7c>
 801f874:	f04f 36ff 	mov.w	r6, #4294967295
 801f878:	e7e4      	b.n	801f844 <_strtol_l.isra.0+0x94>
 801f87a:	2e00      	cmp	r6, #0
 801f87c:	da05      	bge.n	801f88a <_strtol_l.isra.0+0xda>
 801f87e:	2322      	movs	r3, #34	; 0x22
 801f880:	6003      	str	r3, [r0, #0]
 801f882:	4665      	mov	r5, ip
 801f884:	b942      	cbnz	r2, 801f898 <_strtol_l.isra.0+0xe8>
 801f886:	4628      	mov	r0, r5
 801f888:	e79d      	b.n	801f7c6 <_strtol_l.isra.0+0x16>
 801f88a:	f1b8 0f00 	cmp.w	r8, #0
 801f88e:	d000      	beq.n	801f892 <_strtol_l.isra.0+0xe2>
 801f890:	426d      	negs	r5, r5
 801f892:	2a00      	cmp	r2, #0
 801f894:	d0f7      	beq.n	801f886 <_strtol_l.isra.0+0xd6>
 801f896:	b10e      	cbz	r6, 801f89c <_strtol_l.isra.0+0xec>
 801f898:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f89c:	6011      	str	r1, [r2, #0]
 801f89e:	e7f2      	b.n	801f886 <_strtol_l.isra.0+0xd6>
 801f8a0:	2430      	movs	r4, #48	; 0x30
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d1b3      	bne.n	801f80e <_strtol_l.isra.0+0x5e>
 801f8a6:	2308      	movs	r3, #8
 801f8a8:	e7b1      	b.n	801f80e <_strtol_l.isra.0+0x5e>
 801f8aa:	2c30      	cmp	r4, #48	; 0x30
 801f8ac:	d0a4      	beq.n	801f7f8 <_strtol_l.isra.0+0x48>
 801f8ae:	230a      	movs	r3, #10
 801f8b0:	e7ad      	b.n	801f80e <_strtol_l.isra.0+0x5e>
 801f8b2:	bf00      	nop
 801f8b4:	0807b185 	.word	0x0807b185

0801f8b8 <_strtol_r>:
 801f8b8:	f7ff bf7a 	b.w	801f7b0 <_strtol_l.isra.0>

0801f8bc <strtol>:
 801f8bc:	4613      	mov	r3, r2
 801f8be:	460a      	mov	r2, r1
 801f8c0:	4601      	mov	r1, r0
 801f8c2:	4802      	ldr	r0, [pc, #8]	; (801f8cc <strtol+0x10>)
 801f8c4:	6800      	ldr	r0, [r0, #0]
 801f8c6:	f7ff bf73 	b.w	801f7b0 <_strtol_l.isra.0>
 801f8ca:	bf00      	nop
 801f8cc:	20000040 	.word	0x20000040

0801f8d0 <__swbuf_r>:
 801f8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8d2:	460e      	mov	r6, r1
 801f8d4:	4614      	mov	r4, r2
 801f8d6:	4605      	mov	r5, r0
 801f8d8:	b118      	cbz	r0, 801f8e2 <__swbuf_r+0x12>
 801f8da:	6983      	ldr	r3, [r0, #24]
 801f8dc:	b90b      	cbnz	r3, 801f8e2 <__swbuf_r+0x12>
 801f8de:	f000 fa17 	bl	801fd10 <__sinit>
 801f8e2:	4b21      	ldr	r3, [pc, #132]	; (801f968 <__swbuf_r+0x98>)
 801f8e4:	429c      	cmp	r4, r3
 801f8e6:	d12b      	bne.n	801f940 <__swbuf_r+0x70>
 801f8e8:	686c      	ldr	r4, [r5, #4]
 801f8ea:	69a3      	ldr	r3, [r4, #24]
 801f8ec:	60a3      	str	r3, [r4, #8]
 801f8ee:	89a3      	ldrh	r3, [r4, #12]
 801f8f0:	071a      	lsls	r2, r3, #28
 801f8f2:	d52f      	bpl.n	801f954 <__swbuf_r+0x84>
 801f8f4:	6923      	ldr	r3, [r4, #16]
 801f8f6:	b36b      	cbz	r3, 801f954 <__swbuf_r+0x84>
 801f8f8:	6923      	ldr	r3, [r4, #16]
 801f8fa:	6820      	ldr	r0, [r4, #0]
 801f8fc:	1ac0      	subs	r0, r0, r3
 801f8fe:	6963      	ldr	r3, [r4, #20]
 801f900:	b2f6      	uxtb	r6, r6
 801f902:	4283      	cmp	r3, r0
 801f904:	4637      	mov	r7, r6
 801f906:	dc04      	bgt.n	801f912 <__swbuf_r+0x42>
 801f908:	4621      	mov	r1, r4
 801f90a:	4628      	mov	r0, r5
 801f90c:	f000 f96c 	bl	801fbe8 <_fflush_r>
 801f910:	bb30      	cbnz	r0, 801f960 <__swbuf_r+0x90>
 801f912:	68a3      	ldr	r3, [r4, #8]
 801f914:	3b01      	subs	r3, #1
 801f916:	60a3      	str	r3, [r4, #8]
 801f918:	6823      	ldr	r3, [r4, #0]
 801f91a:	1c5a      	adds	r2, r3, #1
 801f91c:	6022      	str	r2, [r4, #0]
 801f91e:	701e      	strb	r6, [r3, #0]
 801f920:	6963      	ldr	r3, [r4, #20]
 801f922:	3001      	adds	r0, #1
 801f924:	4283      	cmp	r3, r0
 801f926:	d004      	beq.n	801f932 <__swbuf_r+0x62>
 801f928:	89a3      	ldrh	r3, [r4, #12]
 801f92a:	07db      	lsls	r3, r3, #31
 801f92c:	d506      	bpl.n	801f93c <__swbuf_r+0x6c>
 801f92e:	2e0a      	cmp	r6, #10
 801f930:	d104      	bne.n	801f93c <__swbuf_r+0x6c>
 801f932:	4621      	mov	r1, r4
 801f934:	4628      	mov	r0, r5
 801f936:	f000 f957 	bl	801fbe8 <_fflush_r>
 801f93a:	b988      	cbnz	r0, 801f960 <__swbuf_r+0x90>
 801f93c:	4638      	mov	r0, r7
 801f93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f940:	4b0a      	ldr	r3, [pc, #40]	; (801f96c <__swbuf_r+0x9c>)
 801f942:	429c      	cmp	r4, r3
 801f944:	d101      	bne.n	801f94a <__swbuf_r+0x7a>
 801f946:	68ac      	ldr	r4, [r5, #8]
 801f948:	e7cf      	b.n	801f8ea <__swbuf_r+0x1a>
 801f94a:	4b09      	ldr	r3, [pc, #36]	; (801f970 <__swbuf_r+0xa0>)
 801f94c:	429c      	cmp	r4, r3
 801f94e:	bf08      	it	eq
 801f950:	68ec      	ldreq	r4, [r5, #12]
 801f952:	e7ca      	b.n	801f8ea <__swbuf_r+0x1a>
 801f954:	4621      	mov	r1, r4
 801f956:	4628      	mov	r0, r5
 801f958:	f000 f81e 	bl	801f998 <__swsetup_r>
 801f95c:	2800      	cmp	r0, #0
 801f95e:	d0cb      	beq.n	801f8f8 <__swbuf_r+0x28>
 801f960:	f04f 37ff 	mov.w	r7, #4294967295
 801f964:	e7ea      	b.n	801f93c <__swbuf_r+0x6c>
 801f966:	bf00      	nop
 801f968:	0807b360 	.word	0x0807b360
 801f96c:	0807b380 	.word	0x0807b380
 801f970:	0807b340 	.word	0x0807b340

0801f974 <_write_r>:
 801f974:	b538      	push	{r3, r4, r5, lr}
 801f976:	4d07      	ldr	r5, [pc, #28]	; (801f994 <_write_r+0x20>)
 801f978:	4604      	mov	r4, r0
 801f97a:	4608      	mov	r0, r1
 801f97c:	4611      	mov	r1, r2
 801f97e:	2200      	movs	r2, #0
 801f980:	602a      	str	r2, [r5, #0]
 801f982:	461a      	mov	r2, r3
 801f984:	f7e2 fa43 	bl	8001e0e <_write>
 801f988:	1c43      	adds	r3, r0, #1
 801f98a:	d102      	bne.n	801f992 <_write_r+0x1e>
 801f98c:	682b      	ldr	r3, [r5, #0]
 801f98e:	b103      	cbz	r3, 801f992 <_write_r+0x1e>
 801f990:	6023      	str	r3, [r4, #0]
 801f992:	bd38      	pop	{r3, r4, r5, pc}
 801f994:	20014bd0 	.word	0x20014bd0

0801f998 <__swsetup_r>:
 801f998:	4b32      	ldr	r3, [pc, #200]	; (801fa64 <__swsetup_r+0xcc>)
 801f99a:	b570      	push	{r4, r5, r6, lr}
 801f99c:	681d      	ldr	r5, [r3, #0]
 801f99e:	4606      	mov	r6, r0
 801f9a0:	460c      	mov	r4, r1
 801f9a2:	b125      	cbz	r5, 801f9ae <__swsetup_r+0x16>
 801f9a4:	69ab      	ldr	r3, [r5, #24]
 801f9a6:	b913      	cbnz	r3, 801f9ae <__swsetup_r+0x16>
 801f9a8:	4628      	mov	r0, r5
 801f9aa:	f000 f9b1 	bl	801fd10 <__sinit>
 801f9ae:	4b2e      	ldr	r3, [pc, #184]	; (801fa68 <__swsetup_r+0xd0>)
 801f9b0:	429c      	cmp	r4, r3
 801f9b2:	d10f      	bne.n	801f9d4 <__swsetup_r+0x3c>
 801f9b4:	686c      	ldr	r4, [r5, #4]
 801f9b6:	89a3      	ldrh	r3, [r4, #12]
 801f9b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f9bc:	0719      	lsls	r1, r3, #28
 801f9be:	d42c      	bmi.n	801fa1a <__swsetup_r+0x82>
 801f9c0:	06dd      	lsls	r5, r3, #27
 801f9c2:	d411      	bmi.n	801f9e8 <__swsetup_r+0x50>
 801f9c4:	2309      	movs	r3, #9
 801f9c6:	6033      	str	r3, [r6, #0]
 801f9c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f9cc:	81a3      	strh	r3, [r4, #12]
 801f9ce:	f04f 30ff 	mov.w	r0, #4294967295
 801f9d2:	e03e      	b.n	801fa52 <__swsetup_r+0xba>
 801f9d4:	4b25      	ldr	r3, [pc, #148]	; (801fa6c <__swsetup_r+0xd4>)
 801f9d6:	429c      	cmp	r4, r3
 801f9d8:	d101      	bne.n	801f9de <__swsetup_r+0x46>
 801f9da:	68ac      	ldr	r4, [r5, #8]
 801f9dc:	e7eb      	b.n	801f9b6 <__swsetup_r+0x1e>
 801f9de:	4b24      	ldr	r3, [pc, #144]	; (801fa70 <__swsetup_r+0xd8>)
 801f9e0:	429c      	cmp	r4, r3
 801f9e2:	bf08      	it	eq
 801f9e4:	68ec      	ldreq	r4, [r5, #12]
 801f9e6:	e7e6      	b.n	801f9b6 <__swsetup_r+0x1e>
 801f9e8:	0758      	lsls	r0, r3, #29
 801f9ea:	d512      	bpl.n	801fa12 <__swsetup_r+0x7a>
 801f9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f9ee:	b141      	cbz	r1, 801fa02 <__swsetup_r+0x6a>
 801f9f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f9f4:	4299      	cmp	r1, r3
 801f9f6:	d002      	beq.n	801f9fe <__swsetup_r+0x66>
 801f9f8:	4630      	mov	r0, r6
 801f9fa:	f000 fad3 	bl	801ffa4 <_free_r>
 801f9fe:	2300      	movs	r3, #0
 801fa00:	6363      	str	r3, [r4, #52]	; 0x34
 801fa02:	89a3      	ldrh	r3, [r4, #12]
 801fa04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fa08:	81a3      	strh	r3, [r4, #12]
 801fa0a:	2300      	movs	r3, #0
 801fa0c:	6063      	str	r3, [r4, #4]
 801fa0e:	6923      	ldr	r3, [r4, #16]
 801fa10:	6023      	str	r3, [r4, #0]
 801fa12:	89a3      	ldrh	r3, [r4, #12]
 801fa14:	f043 0308 	orr.w	r3, r3, #8
 801fa18:	81a3      	strh	r3, [r4, #12]
 801fa1a:	6923      	ldr	r3, [r4, #16]
 801fa1c:	b94b      	cbnz	r3, 801fa32 <__swsetup_r+0x9a>
 801fa1e:	89a3      	ldrh	r3, [r4, #12]
 801fa20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fa24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fa28:	d003      	beq.n	801fa32 <__swsetup_r+0x9a>
 801fa2a:	4621      	mov	r1, r4
 801fa2c:	4630      	mov	r0, r6
 801fa2e:	f000 fa57 	bl	801fee0 <__smakebuf_r>
 801fa32:	89a0      	ldrh	r0, [r4, #12]
 801fa34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa38:	f010 0301 	ands.w	r3, r0, #1
 801fa3c:	d00a      	beq.n	801fa54 <__swsetup_r+0xbc>
 801fa3e:	2300      	movs	r3, #0
 801fa40:	60a3      	str	r3, [r4, #8]
 801fa42:	6963      	ldr	r3, [r4, #20]
 801fa44:	425b      	negs	r3, r3
 801fa46:	61a3      	str	r3, [r4, #24]
 801fa48:	6923      	ldr	r3, [r4, #16]
 801fa4a:	b943      	cbnz	r3, 801fa5e <__swsetup_r+0xc6>
 801fa4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fa50:	d1ba      	bne.n	801f9c8 <__swsetup_r+0x30>
 801fa52:	bd70      	pop	{r4, r5, r6, pc}
 801fa54:	0781      	lsls	r1, r0, #30
 801fa56:	bf58      	it	pl
 801fa58:	6963      	ldrpl	r3, [r4, #20]
 801fa5a:	60a3      	str	r3, [r4, #8]
 801fa5c:	e7f4      	b.n	801fa48 <__swsetup_r+0xb0>
 801fa5e:	2000      	movs	r0, #0
 801fa60:	e7f7      	b.n	801fa52 <__swsetup_r+0xba>
 801fa62:	bf00      	nop
 801fa64:	20000040 	.word	0x20000040
 801fa68:	0807b360 	.word	0x0807b360
 801fa6c:	0807b380 	.word	0x0807b380
 801fa70:	0807b340 	.word	0x0807b340

0801fa74 <__assert_func>:
 801fa74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fa76:	4614      	mov	r4, r2
 801fa78:	461a      	mov	r2, r3
 801fa7a:	4b09      	ldr	r3, [pc, #36]	; (801faa0 <__assert_func+0x2c>)
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	4605      	mov	r5, r0
 801fa80:	68d8      	ldr	r0, [r3, #12]
 801fa82:	b14c      	cbz	r4, 801fa98 <__assert_func+0x24>
 801fa84:	4b07      	ldr	r3, [pc, #28]	; (801faa4 <__assert_func+0x30>)
 801fa86:	9100      	str	r1, [sp, #0]
 801fa88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fa8c:	4906      	ldr	r1, [pc, #24]	; (801faa8 <__assert_func+0x34>)
 801fa8e:	462b      	mov	r3, r5
 801fa90:	f000 f9bc 	bl	801fe0c <fiprintf>
 801fa94:	f001 fbba 	bl	802120c <abort>
 801fa98:	4b04      	ldr	r3, [pc, #16]	; (801faac <__assert_func+0x38>)
 801fa9a:	461c      	mov	r4, r3
 801fa9c:	e7f3      	b.n	801fa86 <__assert_func+0x12>
 801fa9e:	bf00      	nop
 801faa0:	20000040 	.word	0x20000040
 801faa4:	0807b302 	.word	0x0807b302
 801faa8:	0807b30f 	.word	0x0807b30f
 801faac:	0807b33d 	.word	0x0807b33d

0801fab0 <_close_r>:
 801fab0:	b538      	push	{r3, r4, r5, lr}
 801fab2:	4d06      	ldr	r5, [pc, #24]	; (801facc <_close_r+0x1c>)
 801fab4:	2300      	movs	r3, #0
 801fab6:	4604      	mov	r4, r0
 801fab8:	4608      	mov	r0, r1
 801faba:	602b      	str	r3, [r5, #0]
 801fabc:	f7e2 f9c3 	bl	8001e46 <_close>
 801fac0:	1c43      	adds	r3, r0, #1
 801fac2:	d102      	bne.n	801faca <_close_r+0x1a>
 801fac4:	682b      	ldr	r3, [r5, #0]
 801fac6:	b103      	cbz	r3, 801faca <_close_r+0x1a>
 801fac8:	6023      	str	r3, [r4, #0]
 801faca:	bd38      	pop	{r3, r4, r5, pc}
 801facc:	20014bd0 	.word	0x20014bd0

0801fad0 <__errno>:
 801fad0:	4b01      	ldr	r3, [pc, #4]	; (801fad8 <__errno+0x8>)
 801fad2:	6818      	ldr	r0, [r3, #0]
 801fad4:	4770      	bx	lr
 801fad6:	bf00      	nop
 801fad8:	20000040 	.word	0x20000040

0801fadc <__sflush_r>:
 801fadc:	898a      	ldrh	r2, [r1, #12]
 801fade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fae2:	4605      	mov	r5, r0
 801fae4:	0710      	lsls	r0, r2, #28
 801fae6:	460c      	mov	r4, r1
 801fae8:	d458      	bmi.n	801fb9c <__sflush_r+0xc0>
 801faea:	684b      	ldr	r3, [r1, #4]
 801faec:	2b00      	cmp	r3, #0
 801faee:	dc05      	bgt.n	801fafc <__sflush_r+0x20>
 801faf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	dc02      	bgt.n	801fafc <__sflush_r+0x20>
 801faf6:	2000      	movs	r0, #0
 801faf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fafc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fafe:	2e00      	cmp	r6, #0
 801fb00:	d0f9      	beq.n	801faf6 <__sflush_r+0x1a>
 801fb02:	2300      	movs	r3, #0
 801fb04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fb08:	682f      	ldr	r7, [r5, #0]
 801fb0a:	602b      	str	r3, [r5, #0]
 801fb0c:	d032      	beq.n	801fb74 <__sflush_r+0x98>
 801fb0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fb10:	89a3      	ldrh	r3, [r4, #12]
 801fb12:	075a      	lsls	r2, r3, #29
 801fb14:	d505      	bpl.n	801fb22 <__sflush_r+0x46>
 801fb16:	6863      	ldr	r3, [r4, #4]
 801fb18:	1ac0      	subs	r0, r0, r3
 801fb1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fb1c:	b10b      	cbz	r3, 801fb22 <__sflush_r+0x46>
 801fb1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fb20:	1ac0      	subs	r0, r0, r3
 801fb22:	2300      	movs	r3, #0
 801fb24:	4602      	mov	r2, r0
 801fb26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fb28:	6a21      	ldr	r1, [r4, #32]
 801fb2a:	4628      	mov	r0, r5
 801fb2c:	47b0      	blx	r6
 801fb2e:	1c43      	adds	r3, r0, #1
 801fb30:	89a3      	ldrh	r3, [r4, #12]
 801fb32:	d106      	bne.n	801fb42 <__sflush_r+0x66>
 801fb34:	6829      	ldr	r1, [r5, #0]
 801fb36:	291d      	cmp	r1, #29
 801fb38:	d82c      	bhi.n	801fb94 <__sflush_r+0xb8>
 801fb3a:	4a2a      	ldr	r2, [pc, #168]	; (801fbe4 <__sflush_r+0x108>)
 801fb3c:	40ca      	lsrs	r2, r1
 801fb3e:	07d6      	lsls	r6, r2, #31
 801fb40:	d528      	bpl.n	801fb94 <__sflush_r+0xb8>
 801fb42:	2200      	movs	r2, #0
 801fb44:	6062      	str	r2, [r4, #4]
 801fb46:	04d9      	lsls	r1, r3, #19
 801fb48:	6922      	ldr	r2, [r4, #16]
 801fb4a:	6022      	str	r2, [r4, #0]
 801fb4c:	d504      	bpl.n	801fb58 <__sflush_r+0x7c>
 801fb4e:	1c42      	adds	r2, r0, #1
 801fb50:	d101      	bne.n	801fb56 <__sflush_r+0x7a>
 801fb52:	682b      	ldr	r3, [r5, #0]
 801fb54:	b903      	cbnz	r3, 801fb58 <__sflush_r+0x7c>
 801fb56:	6560      	str	r0, [r4, #84]	; 0x54
 801fb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb5a:	602f      	str	r7, [r5, #0]
 801fb5c:	2900      	cmp	r1, #0
 801fb5e:	d0ca      	beq.n	801faf6 <__sflush_r+0x1a>
 801fb60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb64:	4299      	cmp	r1, r3
 801fb66:	d002      	beq.n	801fb6e <__sflush_r+0x92>
 801fb68:	4628      	mov	r0, r5
 801fb6a:	f000 fa1b 	bl	801ffa4 <_free_r>
 801fb6e:	2000      	movs	r0, #0
 801fb70:	6360      	str	r0, [r4, #52]	; 0x34
 801fb72:	e7c1      	b.n	801faf8 <__sflush_r+0x1c>
 801fb74:	6a21      	ldr	r1, [r4, #32]
 801fb76:	2301      	movs	r3, #1
 801fb78:	4628      	mov	r0, r5
 801fb7a:	47b0      	blx	r6
 801fb7c:	1c41      	adds	r1, r0, #1
 801fb7e:	d1c7      	bne.n	801fb10 <__sflush_r+0x34>
 801fb80:	682b      	ldr	r3, [r5, #0]
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d0c4      	beq.n	801fb10 <__sflush_r+0x34>
 801fb86:	2b1d      	cmp	r3, #29
 801fb88:	d001      	beq.n	801fb8e <__sflush_r+0xb2>
 801fb8a:	2b16      	cmp	r3, #22
 801fb8c:	d101      	bne.n	801fb92 <__sflush_r+0xb6>
 801fb8e:	602f      	str	r7, [r5, #0]
 801fb90:	e7b1      	b.n	801faf6 <__sflush_r+0x1a>
 801fb92:	89a3      	ldrh	r3, [r4, #12]
 801fb94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb98:	81a3      	strh	r3, [r4, #12]
 801fb9a:	e7ad      	b.n	801faf8 <__sflush_r+0x1c>
 801fb9c:	690f      	ldr	r7, [r1, #16]
 801fb9e:	2f00      	cmp	r7, #0
 801fba0:	d0a9      	beq.n	801faf6 <__sflush_r+0x1a>
 801fba2:	0793      	lsls	r3, r2, #30
 801fba4:	680e      	ldr	r6, [r1, #0]
 801fba6:	bf08      	it	eq
 801fba8:	694b      	ldreq	r3, [r1, #20]
 801fbaa:	600f      	str	r7, [r1, #0]
 801fbac:	bf18      	it	ne
 801fbae:	2300      	movne	r3, #0
 801fbb0:	eba6 0807 	sub.w	r8, r6, r7
 801fbb4:	608b      	str	r3, [r1, #8]
 801fbb6:	f1b8 0f00 	cmp.w	r8, #0
 801fbba:	dd9c      	ble.n	801faf6 <__sflush_r+0x1a>
 801fbbc:	6a21      	ldr	r1, [r4, #32]
 801fbbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fbc0:	4643      	mov	r3, r8
 801fbc2:	463a      	mov	r2, r7
 801fbc4:	4628      	mov	r0, r5
 801fbc6:	47b0      	blx	r6
 801fbc8:	2800      	cmp	r0, #0
 801fbca:	dc06      	bgt.n	801fbda <__sflush_r+0xfe>
 801fbcc:	89a3      	ldrh	r3, [r4, #12]
 801fbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fbd2:	81a3      	strh	r3, [r4, #12]
 801fbd4:	f04f 30ff 	mov.w	r0, #4294967295
 801fbd8:	e78e      	b.n	801faf8 <__sflush_r+0x1c>
 801fbda:	4407      	add	r7, r0
 801fbdc:	eba8 0800 	sub.w	r8, r8, r0
 801fbe0:	e7e9      	b.n	801fbb6 <__sflush_r+0xda>
 801fbe2:	bf00      	nop
 801fbe4:	20400001 	.word	0x20400001

0801fbe8 <_fflush_r>:
 801fbe8:	b538      	push	{r3, r4, r5, lr}
 801fbea:	690b      	ldr	r3, [r1, #16]
 801fbec:	4605      	mov	r5, r0
 801fbee:	460c      	mov	r4, r1
 801fbf0:	b913      	cbnz	r3, 801fbf8 <_fflush_r+0x10>
 801fbf2:	2500      	movs	r5, #0
 801fbf4:	4628      	mov	r0, r5
 801fbf6:	bd38      	pop	{r3, r4, r5, pc}
 801fbf8:	b118      	cbz	r0, 801fc02 <_fflush_r+0x1a>
 801fbfa:	6983      	ldr	r3, [r0, #24]
 801fbfc:	b90b      	cbnz	r3, 801fc02 <_fflush_r+0x1a>
 801fbfe:	f000 f887 	bl	801fd10 <__sinit>
 801fc02:	4b14      	ldr	r3, [pc, #80]	; (801fc54 <_fflush_r+0x6c>)
 801fc04:	429c      	cmp	r4, r3
 801fc06:	d11b      	bne.n	801fc40 <_fflush_r+0x58>
 801fc08:	686c      	ldr	r4, [r5, #4]
 801fc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d0ef      	beq.n	801fbf2 <_fflush_r+0xa>
 801fc12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fc14:	07d0      	lsls	r0, r2, #31
 801fc16:	d404      	bmi.n	801fc22 <_fflush_r+0x3a>
 801fc18:	0599      	lsls	r1, r3, #22
 801fc1a:	d402      	bmi.n	801fc22 <_fflush_r+0x3a>
 801fc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc1e:	f000 f927 	bl	801fe70 <__retarget_lock_acquire_recursive>
 801fc22:	4628      	mov	r0, r5
 801fc24:	4621      	mov	r1, r4
 801fc26:	f7ff ff59 	bl	801fadc <__sflush_r>
 801fc2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fc2c:	07da      	lsls	r2, r3, #31
 801fc2e:	4605      	mov	r5, r0
 801fc30:	d4e0      	bmi.n	801fbf4 <_fflush_r+0xc>
 801fc32:	89a3      	ldrh	r3, [r4, #12]
 801fc34:	059b      	lsls	r3, r3, #22
 801fc36:	d4dd      	bmi.n	801fbf4 <_fflush_r+0xc>
 801fc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc3a:	f000 f91a 	bl	801fe72 <__retarget_lock_release_recursive>
 801fc3e:	e7d9      	b.n	801fbf4 <_fflush_r+0xc>
 801fc40:	4b05      	ldr	r3, [pc, #20]	; (801fc58 <_fflush_r+0x70>)
 801fc42:	429c      	cmp	r4, r3
 801fc44:	d101      	bne.n	801fc4a <_fflush_r+0x62>
 801fc46:	68ac      	ldr	r4, [r5, #8]
 801fc48:	e7df      	b.n	801fc0a <_fflush_r+0x22>
 801fc4a:	4b04      	ldr	r3, [pc, #16]	; (801fc5c <_fflush_r+0x74>)
 801fc4c:	429c      	cmp	r4, r3
 801fc4e:	bf08      	it	eq
 801fc50:	68ec      	ldreq	r4, [r5, #12]
 801fc52:	e7da      	b.n	801fc0a <_fflush_r+0x22>
 801fc54:	0807b360 	.word	0x0807b360
 801fc58:	0807b380 	.word	0x0807b380
 801fc5c:	0807b340 	.word	0x0807b340

0801fc60 <std>:
 801fc60:	2300      	movs	r3, #0
 801fc62:	b510      	push	{r4, lr}
 801fc64:	4604      	mov	r4, r0
 801fc66:	e9c0 3300 	strd	r3, r3, [r0]
 801fc6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fc6e:	6083      	str	r3, [r0, #8]
 801fc70:	8181      	strh	r1, [r0, #12]
 801fc72:	6643      	str	r3, [r0, #100]	; 0x64
 801fc74:	81c2      	strh	r2, [r0, #14]
 801fc76:	6183      	str	r3, [r0, #24]
 801fc78:	4619      	mov	r1, r3
 801fc7a:	2208      	movs	r2, #8
 801fc7c:	305c      	adds	r0, #92	; 0x5c
 801fc7e:	f7ff fba5 	bl	801f3cc <memset>
 801fc82:	4b05      	ldr	r3, [pc, #20]	; (801fc98 <std+0x38>)
 801fc84:	6263      	str	r3, [r4, #36]	; 0x24
 801fc86:	4b05      	ldr	r3, [pc, #20]	; (801fc9c <std+0x3c>)
 801fc88:	62a3      	str	r3, [r4, #40]	; 0x28
 801fc8a:	4b05      	ldr	r3, [pc, #20]	; (801fca0 <std+0x40>)
 801fc8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fc8e:	4b05      	ldr	r3, [pc, #20]	; (801fca4 <std+0x44>)
 801fc90:	6224      	str	r4, [r4, #32]
 801fc92:	6323      	str	r3, [r4, #48]	; 0x30
 801fc94:	bd10      	pop	{r4, pc}
 801fc96:	bf00      	nop
 801fc98:	0801f679 	.word	0x0801f679
 801fc9c:	0801f69f 	.word	0x0801f69f
 801fca0:	0801f6d7 	.word	0x0801f6d7
 801fca4:	0801f6fb 	.word	0x0801f6fb

0801fca8 <_cleanup_r>:
 801fca8:	4901      	ldr	r1, [pc, #4]	; (801fcb0 <_cleanup_r+0x8>)
 801fcaa:	f000 b8c1 	b.w	801fe30 <_fwalk_reent>
 801fcae:	bf00      	nop
 801fcb0:	0801fbe9 	.word	0x0801fbe9

0801fcb4 <__sfmoreglue>:
 801fcb4:	b570      	push	{r4, r5, r6, lr}
 801fcb6:	1e4a      	subs	r2, r1, #1
 801fcb8:	2568      	movs	r5, #104	; 0x68
 801fcba:	4355      	muls	r5, r2
 801fcbc:	460e      	mov	r6, r1
 801fcbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fcc2:	f000 f9bf 	bl	8020044 <_malloc_r>
 801fcc6:	4604      	mov	r4, r0
 801fcc8:	b140      	cbz	r0, 801fcdc <__sfmoreglue+0x28>
 801fcca:	2100      	movs	r1, #0
 801fccc:	e9c0 1600 	strd	r1, r6, [r0]
 801fcd0:	300c      	adds	r0, #12
 801fcd2:	60a0      	str	r0, [r4, #8]
 801fcd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fcd8:	f7ff fb78 	bl	801f3cc <memset>
 801fcdc:	4620      	mov	r0, r4
 801fcde:	bd70      	pop	{r4, r5, r6, pc}

0801fce0 <__sfp_lock_acquire>:
 801fce0:	4801      	ldr	r0, [pc, #4]	; (801fce8 <__sfp_lock_acquire+0x8>)
 801fce2:	f000 b8c5 	b.w	801fe70 <__retarget_lock_acquire_recursive>
 801fce6:	bf00      	nop
 801fce8:	20014be0 	.word	0x20014be0

0801fcec <__sfp_lock_release>:
 801fcec:	4801      	ldr	r0, [pc, #4]	; (801fcf4 <__sfp_lock_release+0x8>)
 801fcee:	f000 b8c0 	b.w	801fe72 <__retarget_lock_release_recursive>
 801fcf2:	bf00      	nop
 801fcf4:	20014be0 	.word	0x20014be0

0801fcf8 <__sinit_lock_acquire>:
 801fcf8:	4801      	ldr	r0, [pc, #4]	; (801fd00 <__sinit_lock_acquire+0x8>)
 801fcfa:	f000 b8b9 	b.w	801fe70 <__retarget_lock_acquire_recursive>
 801fcfe:	bf00      	nop
 801fd00:	20014bdb 	.word	0x20014bdb

0801fd04 <__sinit_lock_release>:
 801fd04:	4801      	ldr	r0, [pc, #4]	; (801fd0c <__sinit_lock_release+0x8>)
 801fd06:	f000 b8b4 	b.w	801fe72 <__retarget_lock_release_recursive>
 801fd0a:	bf00      	nop
 801fd0c:	20014bdb 	.word	0x20014bdb

0801fd10 <__sinit>:
 801fd10:	b510      	push	{r4, lr}
 801fd12:	4604      	mov	r4, r0
 801fd14:	f7ff fff0 	bl	801fcf8 <__sinit_lock_acquire>
 801fd18:	69a3      	ldr	r3, [r4, #24]
 801fd1a:	b11b      	cbz	r3, 801fd24 <__sinit+0x14>
 801fd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd20:	f7ff bff0 	b.w	801fd04 <__sinit_lock_release>
 801fd24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fd28:	6523      	str	r3, [r4, #80]	; 0x50
 801fd2a:	4b13      	ldr	r3, [pc, #76]	; (801fd78 <__sinit+0x68>)
 801fd2c:	4a13      	ldr	r2, [pc, #76]	; (801fd7c <__sinit+0x6c>)
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	62a2      	str	r2, [r4, #40]	; 0x28
 801fd32:	42a3      	cmp	r3, r4
 801fd34:	bf04      	itt	eq
 801fd36:	2301      	moveq	r3, #1
 801fd38:	61a3      	streq	r3, [r4, #24]
 801fd3a:	4620      	mov	r0, r4
 801fd3c:	f000 f820 	bl	801fd80 <__sfp>
 801fd40:	6060      	str	r0, [r4, #4]
 801fd42:	4620      	mov	r0, r4
 801fd44:	f000 f81c 	bl	801fd80 <__sfp>
 801fd48:	60a0      	str	r0, [r4, #8]
 801fd4a:	4620      	mov	r0, r4
 801fd4c:	f000 f818 	bl	801fd80 <__sfp>
 801fd50:	2200      	movs	r2, #0
 801fd52:	60e0      	str	r0, [r4, #12]
 801fd54:	2104      	movs	r1, #4
 801fd56:	6860      	ldr	r0, [r4, #4]
 801fd58:	f7ff ff82 	bl	801fc60 <std>
 801fd5c:	68a0      	ldr	r0, [r4, #8]
 801fd5e:	2201      	movs	r2, #1
 801fd60:	2109      	movs	r1, #9
 801fd62:	f7ff ff7d 	bl	801fc60 <std>
 801fd66:	68e0      	ldr	r0, [r4, #12]
 801fd68:	2202      	movs	r2, #2
 801fd6a:	2112      	movs	r1, #18
 801fd6c:	f7ff ff78 	bl	801fc60 <std>
 801fd70:	2301      	movs	r3, #1
 801fd72:	61a3      	str	r3, [r4, #24]
 801fd74:	e7d2      	b.n	801fd1c <__sinit+0xc>
 801fd76:	bf00      	nop
 801fd78:	0807b288 	.word	0x0807b288
 801fd7c:	0801fca9 	.word	0x0801fca9

0801fd80 <__sfp>:
 801fd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd82:	4607      	mov	r7, r0
 801fd84:	f7ff ffac 	bl	801fce0 <__sfp_lock_acquire>
 801fd88:	4b1e      	ldr	r3, [pc, #120]	; (801fe04 <__sfp+0x84>)
 801fd8a:	681e      	ldr	r6, [r3, #0]
 801fd8c:	69b3      	ldr	r3, [r6, #24]
 801fd8e:	b913      	cbnz	r3, 801fd96 <__sfp+0x16>
 801fd90:	4630      	mov	r0, r6
 801fd92:	f7ff ffbd 	bl	801fd10 <__sinit>
 801fd96:	3648      	adds	r6, #72	; 0x48
 801fd98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fd9c:	3b01      	subs	r3, #1
 801fd9e:	d503      	bpl.n	801fda8 <__sfp+0x28>
 801fda0:	6833      	ldr	r3, [r6, #0]
 801fda2:	b30b      	cbz	r3, 801fde8 <__sfp+0x68>
 801fda4:	6836      	ldr	r6, [r6, #0]
 801fda6:	e7f7      	b.n	801fd98 <__sfp+0x18>
 801fda8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fdac:	b9d5      	cbnz	r5, 801fde4 <__sfp+0x64>
 801fdae:	4b16      	ldr	r3, [pc, #88]	; (801fe08 <__sfp+0x88>)
 801fdb0:	60e3      	str	r3, [r4, #12]
 801fdb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fdb6:	6665      	str	r5, [r4, #100]	; 0x64
 801fdb8:	f000 f859 	bl	801fe6e <__retarget_lock_init_recursive>
 801fdbc:	f7ff ff96 	bl	801fcec <__sfp_lock_release>
 801fdc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fdc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fdc8:	6025      	str	r5, [r4, #0]
 801fdca:	61a5      	str	r5, [r4, #24]
 801fdcc:	2208      	movs	r2, #8
 801fdce:	4629      	mov	r1, r5
 801fdd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fdd4:	f7ff fafa 	bl	801f3cc <memset>
 801fdd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fde0:	4620      	mov	r0, r4
 801fde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fde4:	3468      	adds	r4, #104	; 0x68
 801fde6:	e7d9      	b.n	801fd9c <__sfp+0x1c>
 801fde8:	2104      	movs	r1, #4
 801fdea:	4638      	mov	r0, r7
 801fdec:	f7ff ff62 	bl	801fcb4 <__sfmoreglue>
 801fdf0:	4604      	mov	r4, r0
 801fdf2:	6030      	str	r0, [r6, #0]
 801fdf4:	2800      	cmp	r0, #0
 801fdf6:	d1d5      	bne.n	801fda4 <__sfp+0x24>
 801fdf8:	f7ff ff78 	bl	801fcec <__sfp_lock_release>
 801fdfc:	230c      	movs	r3, #12
 801fdfe:	603b      	str	r3, [r7, #0]
 801fe00:	e7ee      	b.n	801fde0 <__sfp+0x60>
 801fe02:	bf00      	nop
 801fe04:	0807b288 	.word	0x0807b288
 801fe08:	ffff0001 	.word	0xffff0001

0801fe0c <fiprintf>:
 801fe0c:	b40e      	push	{r1, r2, r3}
 801fe0e:	b503      	push	{r0, r1, lr}
 801fe10:	4601      	mov	r1, r0
 801fe12:	ab03      	add	r3, sp, #12
 801fe14:	4805      	ldr	r0, [pc, #20]	; (801fe2c <fiprintf+0x20>)
 801fe16:	f853 2b04 	ldr.w	r2, [r3], #4
 801fe1a:	6800      	ldr	r0, [r0, #0]
 801fe1c:	9301      	str	r3, [sp, #4]
 801fe1e:	f000 fcc3 	bl	80207a8 <_vfiprintf_r>
 801fe22:	b002      	add	sp, #8
 801fe24:	f85d eb04 	ldr.w	lr, [sp], #4
 801fe28:	b003      	add	sp, #12
 801fe2a:	4770      	bx	lr
 801fe2c:	20000040 	.word	0x20000040

0801fe30 <_fwalk_reent>:
 801fe30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe34:	4606      	mov	r6, r0
 801fe36:	4688      	mov	r8, r1
 801fe38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fe3c:	2700      	movs	r7, #0
 801fe3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fe42:	f1b9 0901 	subs.w	r9, r9, #1
 801fe46:	d505      	bpl.n	801fe54 <_fwalk_reent+0x24>
 801fe48:	6824      	ldr	r4, [r4, #0]
 801fe4a:	2c00      	cmp	r4, #0
 801fe4c:	d1f7      	bne.n	801fe3e <_fwalk_reent+0xe>
 801fe4e:	4638      	mov	r0, r7
 801fe50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe54:	89ab      	ldrh	r3, [r5, #12]
 801fe56:	2b01      	cmp	r3, #1
 801fe58:	d907      	bls.n	801fe6a <_fwalk_reent+0x3a>
 801fe5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fe5e:	3301      	adds	r3, #1
 801fe60:	d003      	beq.n	801fe6a <_fwalk_reent+0x3a>
 801fe62:	4629      	mov	r1, r5
 801fe64:	4630      	mov	r0, r6
 801fe66:	47c0      	blx	r8
 801fe68:	4307      	orrs	r7, r0
 801fe6a:	3568      	adds	r5, #104	; 0x68
 801fe6c:	e7e9      	b.n	801fe42 <_fwalk_reent+0x12>

0801fe6e <__retarget_lock_init_recursive>:
 801fe6e:	4770      	bx	lr

0801fe70 <__retarget_lock_acquire_recursive>:
 801fe70:	4770      	bx	lr

0801fe72 <__retarget_lock_release_recursive>:
 801fe72:	4770      	bx	lr

0801fe74 <_lseek_r>:
 801fe74:	b538      	push	{r3, r4, r5, lr}
 801fe76:	4d07      	ldr	r5, [pc, #28]	; (801fe94 <_lseek_r+0x20>)
 801fe78:	4604      	mov	r4, r0
 801fe7a:	4608      	mov	r0, r1
 801fe7c:	4611      	mov	r1, r2
 801fe7e:	2200      	movs	r2, #0
 801fe80:	602a      	str	r2, [r5, #0]
 801fe82:	461a      	mov	r2, r3
 801fe84:	f7e2 f806 	bl	8001e94 <_lseek>
 801fe88:	1c43      	adds	r3, r0, #1
 801fe8a:	d102      	bne.n	801fe92 <_lseek_r+0x1e>
 801fe8c:	682b      	ldr	r3, [r5, #0]
 801fe8e:	b103      	cbz	r3, 801fe92 <_lseek_r+0x1e>
 801fe90:	6023      	str	r3, [r4, #0]
 801fe92:	bd38      	pop	{r3, r4, r5, pc}
 801fe94:	20014bd0 	.word	0x20014bd0

0801fe98 <__swhatbuf_r>:
 801fe98:	b570      	push	{r4, r5, r6, lr}
 801fe9a:	460e      	mov	r6, r1
 801fe9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fea0:	2900      	cmp	r1, #0
 801fea2:	b096      	sub	sp, #88	; 0x58
 801fea4:	4614      	mov	r4, r2
 801fea6:	461d      	mov	r5, r3
 801fea8:	da07      	bge.n	801feba <__swhatbuf_r+0x22>
 801feaa:	2300      	movs	r3, #0
 801feac:	602b      	str	r3, [r5, #0]
 801feae:	89b3      	ldrh	r3, [r6, #12]
 801feb0:	061a      	lsls	r2, r3, #24
 801feb2:	d410      	bmi.n	801fed6 <__swhatbuf_r+0x3e>
 801feb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801feb8:	e00e      	b.n	801fed8 <__swhatbuf_r+0x40>
 801feba:	466a      	mov	r2, sp
 801febc:	f001 f9ae 	bl	802121c <_fstat_r>
 801fec0:	2800      	cmp	r0, #0
 801fec2:	dbf2      	blt.n	801feaa <__swhatbuf_r+0x12>
 801fec4:	9a01      	ldr	r2, [sp, #4]
 801fec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801feca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fece:	425a      	negs	r2, r3
 801fed0:	415a      	adcs	r2, r3
 801fed2:	602a      	str	r2, [r5, #0]
 801fed4:	e7ee      	b.n	801feb4 <__swhatbuf_r+0x1c>
 801fed6:	2340      	movs	r3, #64	; 0x40
 801fed8:	2000      	movs	r0, #0
 801feda:	6023      	str	r3, [r4, #0]
 801fedc:	b016      	add	sp, #88	; 0x58
 801fede:	bd70      	pop	{r4, r5, r6, pc}

0801fee0 <__smakebuf_r>:
 801fee0:	898b      	ldrh	r3, [r1, #12]
 801fee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fee4:	079d      	lsls	r5, r3, #30
 801fee6:	4606      	mov	r6, r0
 801fee8:	460c      	mov	r4, r1
 801feea:	d507      	bpl.n	801fefc <__smakebuf_r+0x1c>
 801feec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fef0:	6023      	str	r3, [r4, #0]
 801fef2:	6123      	str	r3, [r4, #16]
 801fef4:	2301      	movs	r3, #1
 801fef6:	6163      	str	r3, [r4, #20]
 801fef8:	b002      	add	sp, #8
 801fefa:	bd70      	pop	{r4, r5, r6, pc}
 801fefc:	ab01      	add	r3, sp, #4
 801fefe:	466a      	mov	r2, sp
 801ff00:	f7ff ffca 	bl	801fe98 <__swhatbuf_r>
 801ff04:	9900      	ldr	r1, [sp, #0]
 801ff06:	4605      	mov	r5, r0
 801ff08:	4630      	mov	r0, r6
 801ff0a:	f000 f89b 	bl	8020044 <_malloc_r>
 801ff0e:	b948      	cbnz	r0, 801ff24 <__smakebuf_r+0x44>
 801ff10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ff14:	059a      	lsls	r2, r3, #22
 801ff16:	d4ef      	bmi.n	801fef8 <__smakebuf_r+0x18>
 801ff18:	f023 0303 	bic.w	r3, r3, #3
 801ff1c:	f043 0302 	orr.w	r3, r3, #2
 801ff20:	81a3      	strh	r3, [r4, #12]
 801ff22:	e7e3      	b.n	801feec <__smakebuf_r+0xc>
 801ff24:	4b0d      	ldr	r3, [pc, #52]	; (801ff5c <__smakebuf_r+0x7c>)
 801ff26:	62b3      	str	r3, [r6, #40]	; 0x28
 801ff28:	89a3      	ldrh	r3, [r4, #12]
 801ff2a:	6020      	str	r0, [r4, #0]
 801ff2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ff30:	81a3      	strh	r3, [r4, #12]
 801ff32:	9b00      	ldr	r3, [sp, #0]
 801ff34:	6163      	str	r3, [r4, #20]
 801ff36:	9b01      	ldr	r3, [sp, #4]
 801ff38:	6120      	str	r0, [r4, #16]
 801ff3a:	b15b      	cbz	r3, 801ff54 <__smakebuf_r+0x74>
 801ff3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ff40:	4630      	mov	r0, r6
 801ff42:	f001 f97d 	bl	8021240 <_isatty_r>
 801ff46:	b128      	cbz	r0, 801ff54 <__smakebuf_r+0x74>
 801ff48:	89a3      	ldrh	r3, [r4, #12]
 801ff4a:	f023 0303 	bic.w	r3, r3, #3
 801ff4e:	f043 0301 	orr.w	r3, r3, #1
 801ff52:	81a3      	strh	r3, [r4, #12]
 801ff54:	89a0      	ldrh	r0, [r4, #12]
 801ff56:	4305      	orrs	r5, r0
 801ff58:	81a5      	strh	r5, [r4, #12]
 801ff5a:	e7cd      	b.n	801fef8 <__smakebuf_r+0x18>
 801ff5c:	0801fca9 	.word	0x0801fca9

0801ff60 <malloc>:
 801ff60:	4b02      	ldr	r3, [pc, #8]	; (801ff6c <malloc+0xc>)
 801ff62:	4601      	mov	r1, r0
 801ff64:	6818      	ldr	r0, [r3, #0]
 801ff66:	f000 b86d 	b.w	8020044 <_malloc_r>
 801ff6a:	bf00      	nop
 801ff6c:	20000040 	.word	0x20000040

0801ff70 <memmem>:
 801ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff72:	b17b      	cbz	r3, 801ff94 <memmem+0x24>
 801ff74:	1ac9      	subs	r1, r1, r3
 801ff76:	7816      	ldrb	r6, [r2, #0]
 801ff78:	4401      	add	r1, r0
 801ff7a:	4605      	mov	r5, r0
 801ff7c:	428d      	cmp	r5, r1
 801ff7e:	4628      	mov	r0, r5
 801ff80:	d901      	bls.n	801ff86 <memmem+0x16>
 801ff82:	2000      	movs	r0, #0
 801ff84:	e006      	b.n	801ff94 <memmem+0x24>
 801ff86:	7804      	ldrb	r4, [r0, #0]
 801ff88:	42b4      	cmp	r4, r6
 801ff8a:	f105 0501 	add.w	r5, r5, #1
 801ff8e:	d1f5      	bne.n	801ff7c <memmem+0xc>
 801ff90:	1e5c      	subs	r4, r3, #1
 801ff92:	b904      	cbnz	r4, 801ff96 <memmem+0x26>
 801ff94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff96:	f810 c004 	ldrb.w	ip, [r0, r4]
 801ff9a:	5d17      	ldrb	r7, [r2, r4]
 801ff9c:	45bc      	cmp	ip, r7
 801ff9e:	d1ed      	bne.n	801ff7c <memmem+0xc>
 801ffa0:	3c01      	subs	r4, #1
 801ffa2:	e7f6      	b.n	801ff92 <memmem+0x22>

0801ffa4 <_free_r>:
 801ffa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ffa6:	2900      	cmp	r1, #0
 801ffa8:	d048      	beq.n	802003c <_free_r+0x98>
 801ffaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ffae:	9001      	str	r0, [sp, #4]
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	f1a1 0404 	sub.w	r4, r1, #4
 801ffb6:	bfb8      	it	lt
 801ffb8:	18e4      	addlt	r4, r4, r3
 801ffba:	f001 f951 	bl	8021260 <__malloc_lock>
 801ffbe:	4a20      	ldr	r2, [pc, #128]	; (8020040 <_free_r+0x9c>)
 801ffc0:	9801      	ldr	r0, [sp, #4]
 801ffc2:	6813      	ldr	r3, [r2, #0]
 801ffc4:	4615      	mov	r5, r2
 801ffc6:	b933      	cbnz	r3, 801ffd6 <_free_r+0x32>
 801ffc8:	6063      	str	r3, [r4, #4]
 801ffca:	6014      	str	r4, [r2, #0]
 801ffcc:	b003      	add	sp, #12
 801ffce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ffd2:	f001 b94b 	b.w	802126c <__malloc_unlock>
 801ffd6:	42a3      	cmp	r3, r4
 801ffd8:	d90b      	bls.n	801fff2 <_free_r+0x4e>
 801ffda:	6821      	ldr	r1, [r4, #0]
 801ffdc:	1862      	adds	r2, r4, r1
 801ffde:	4293      	cmp	r3, r2
 801ffe0:	bf04      	itt	eq
 801ffe2:	681a      	ldreq	r2, [r3, #0]
 801ffe4:	685b      	ldreq	r3, [r3, #4]
 801ffe6:	6063      	str	r3, [r4, #4]
 801ffe8:	bf04      	itt	eq
 801ffea:	1852      	addeq	r2, r2, r1
 801ffec:	6022      	streq	r2, [r4, #0]
 801ffee:	602c      	str	r4, [r5, #0]
 801fff0:	e7ec      	b.n	801ffcc <_free_r+0x28>
 801fff2:	461a      	mov	r2, r3
 801fff4:	685b      	ldr	r3, [r3, #4]
 801fff6:	b10b      	cbz	r3, 801fffc <_free_r+0x58>
 801fff8:	42a3      	cmp	r3, r4
 801fffa:	d9fa      	bls.n	801fff2 <_free_r+0x4e>
 801fffc:	6811      	ldr	r1, [r2, #0]
 801fffe:	1855      	adds	r5, r2, r1
 8020000:	42a5      	cmp	r5, r4
 8020002:	d10b      	bne.n	802001c <_free_r+0x78>
 8020004:	6824      	ldr	r4, [r4, #0]
 8020006:	4421      	add	r1, r4
 8020008:	1854      	adds	r4, r2, r1
 802000a:	42a3      	cmp	r3, r4
 802000c:	6011      	str	r1, [r2, #0]
 802000e:	d1dd      	bne.n	801ffcc <_free_r+0x28>
 8020010:	681c      	ldr	r4, [r3, #0]
 8020012:	685b      	ldr	r3, [r3, #4]
 8020014:	6053      	str	r3, [r2, #4]
 8020016:	4421      	add	r1, r4
 8020018:	6011      	str	r1, [r2, #0]
 802001a:	e7d7      	b.n	801ffcc <_free_r+0x28>
 802001c:	d902      	bls.n	8020024 <_free_r+0x80>
 802001e:	230c      	movs	r3, #12
 8020020:	6003      	str	r3, [r0, #0]
 8020022:	e7d3      	b.n	801ffcc <_free_r+0x28>
 8020024:	6825      	ldr	r5, [r4, #0]
 8020026:	1961      	adds	r1, r4, r5
 8020028:	428b      	cmp	r3, r1
 802002a:	bf04      	itt	eq
 802002c:	6819      	ldreq	r1, [r3, #0]
 802002e:	685b      	ldreq	r3, [r3, #4]
 8020030:	6063      	str	r3, [r4, #4]
 8020032:	bf04      	itt	eq
 8020034:	1949      	addeq	r1, r1, r5
 8020036:	6021      	streq	r1, [r4, #0]
 8020038:	6054      	str	r4, [r2, #4]
 802003a:	e7c7      	b.n	801ffcc <_free_r+0x28>
 802003c:	b003      	add	sp, #12
 802003e:	bd30      	pop	{r4, r5, pc}
 8020040:	2000c938 	.word	0x2000c938

08020044 <_malloc_r>:
 8020044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020046:	1ccd      	adds	r5, r1, #3
 8020048:	f025 0503 	bic.w	r5, r5, #3
 802004c:	3508      	adds	r5, #8
 802004e:	2d0c      	cmp	r5, #12
 8020050:	bf38      	it	cc
 8020052:	250c      	movcc	r5, #12
 8020054:	2d00      	cmp	r5, #0
 8020056:	4606      	mov	r6, r0
 8020058:	db01      	blt.n	802005e <_malloc_r+0x1a>
 802005a:	42a9      	cmp	r1, r5
 802005c:	d903      	bls.n	8020066 <_malloc_r+0x22>
 802005e:	230c      	movs	r3, #12
 8020060:	6033      	str	r3, [r6, #0]
 8020062:	2000      	movs	r0, #0
 8020064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020066:	f001 f8fb 	bl	8021260 <__malloc_lock>
 802006a:	4921      	ldr	r1, [pc, #132]	; (80200f0 <_malloc_r+0xac>)
 802006c:	680a      	ldr	r2, [r1, #0]
 802006e:	4614      	mov	r4, r2
 8020070:	b99c      	cbnz	r4, 802009a <_malloc_r+0x56>
 8020072:	4f20      	ldr	r7, [pc, #128]	; (80200f4 <_malloc_r+0xb0>)
 8020074:	683b      	ldr	r3, [r7, #0]
 8020076:	b923      	cbnz	r3, 8020082 <_malloc_r+0x3e>
 8020078:	4621      	mov	r1, r4
 802007a:	4630      	mov	r0, r6
 802007c:	f000 ffb6 	bl	8020fec <_sbrk_r>
 8020080:	6038      	str	r0, [r7, #0]
 8020082:	4629      	mov	r1, r5
 8020084:	4630      	mov	r0, r6
 8020086:	f000 ffb1 	bl	8020fec <_sbrk_r>
 802008a:	1c43      	adds	r3, r0, #1
 802008c:	d123      	bne.n	80200d6 <_malloc_r+0x92>
 802008e:	230c      	movs	r3, #12
 8020090:	6033      	str	r3, [r6, #0]
 8020092:	4630      	mov	r0, r6
 8020094:	f001 f8ea 	bl	802126c <__malloc_unlock>
 8020098:	e7e3      	b.n	8020062 <_malloc_r+0x1e>
 802009a:	6823      	ldr	r3, [r4, #0]
 802009c:	1b5b      	subs	r3, r3, r5
 802009e:	d417      	bmi.n	80200d0 <_malloc_r+0x8c>
 80200a0:	2b0b      	cmp	r3, #11
 80200a2:	d903      	bls.n	80200ac <_malloc_r+0x68>
 80200a4:	6023      	str	r3, [r4, #0]
 80200a6:	441c      	add	r4, r3
 80200a8:	6025      	str	r5, [r4, #0]
 80200aa:	e004      	b.n	80200b6 <_malloc_r+0x72>
 80200ac:	6863      	ldr	r3, [r4, #4]
 80200ae:	42a2      	cmp	r2, r4
 80200b0:	bf0c      	ite	eq
 80200b2:	600b      	streq	r3, [r1, #0]
 80200b4:	6053      	strne	r3, [r2, #4]
 80200b6:	4630      	mov	r0, r6
 80200b8:	f001 f8d8 	bl	802126c <__malloc_unlock>
 80200bc:	f104 000b 	add.w	r0, r4, #11
 80200c0:	1d23      	adds	r3, r4, #4
 80200c2:	f020 0007 	bic.w	r0, r0, #7
 80200c6:	1ac2      	subs	r2, r0, r3
 80200c8:	d0cc      	beq.n	8020064 <_malloc_r+0x20>
 80200ca:	1a1b      	subs	r3, r3, r0
 80200cc:	50a3      	str	r3, [r4, r2]
 80200ce:	e7c9      	b.n	8020064 <_malloc_r+0x20>
 80200d0:	4622      	mov	r2, r4
 80200d2:	6864      	ldr	r4, [r4, #4]
 80200d4:	e7cc      	b.n	8020070 <_malloc_r+0x2c>
 80200d6:	1cc4      	adds	r4, r0, #3
 80200d8:	f024 0403 	bic.w	r4, r4, #3
 80200dc:	42a0      	cmp	r0, r4
 80200de:	d0e3      	beq.n	80200a8 <_malloc_r+0x64>
 80200e0:	1a21      	subs	r1, r4, r0
 80200e2:	4630      	mov	r0, r6
 80200e4:	f000 ff82 	bl	8020fec <_sbrk_r>
 80200e8:	3001      	adds	r0, #1
 80200ea:	d1dd      	bne.n	80200a8 <_malloc_r+0x64>
 80200ec:	e7cf      	b.n	802008e <_malloc_r+0x4a>
 80200ee:	bf00      	nop
 80200f0:	2000c938 	.word	0x2000c938
 80200f4:	2000c93c 	.word	0x2000c93c

080200f8 <__ssputs_r>:
 80200f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200fc:	688e      	ldr	r6, [r1, #8]
 80200fe:	429e      	cmp	r6, r3
 8020100:	4682      	mov	sl, r0
 8020102:	460c      	mov	r4, r1
 8020104:	4690      	mov	r8, r2
 8020106:	461f      	mov	r7, r3
 8020108:	d838      	bhi.n	802017c <__ssputs_r+0x84>
 802010a:	898a      	ldrh	r2, [r1, #12]
 802010c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020110:	d032      	beq.n	8020178 <__ssputs_r+0x80>
 8020112:	6825      	ldr	r5, [r4, #0]
 8020114:	6909      	ldr	r1, [r1, #16]
 8020116:	eba5 0901 	sub.w	r9, r5, r1
 802011a:	6965      	ldr	r5, [r4, #20]
 802011c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020124:	3301      	adds	r3, #1
 8020126:	444b      	add	r3, r9
 8020128:	106d      	asrs	r5, r5, #1
 802012a:	429d      	cmp	r5, r3
 802012c:	bf38      	it	cc
 802012e:	461d      	movcc	r5, r3
 8020130:	0553      	lsls	r3, r2, #21
 8020132:	d531      	bpl.n	8020198 <__ssputs_r+0xa0>
 8020134:	4629      	mov	r1, r5
 8020136:	f7ff ff85 	bl	8020044 <_malloc_r>
 802013a:	4606      	mov	r6, r0
 802013c:	b950      	cbnz	r0, 8020154 <__ssputs_r+0x5c>
 802013e:	230c      	movs	r3, #12
 8020140:	f8ca 3000 	str.w	r3, [sl]
 8020144:	89a3      	ldrh	r3, [r4, #12]
 8020146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802014a:	81a3      	strh	r3, [r4, #12]
 802014c:	f04f 30ff 	mov.w	r0, #4294967295
 8020150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020154:	6921      	ldr	r1, [r4, #16]
 8020156:	464a      	mov	r2, r9
 8020158:	f7ff f910 	bl	801f37c <memcpy>
 802015c:	89a3      	ldrh	r3, [r4, #12]
 802015e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020166:	81a3      	strh	r3, [r4, #12]
 8020168:	6126      	str	r6, [r4, #16]
 802016a:	6165      	str	r5, [r4, #20]
 802016c:	444e      	add	r6, r9
 802016e:	eba5 0509 	sub.w	r5, r5, r9
 8020172:	6026      	str	r6, [r4, #0]
 8020174:	60a5      	str	r5, [r4, #8]
 8020176:	463e      	mov	r6, r7
 8020178:	42be      	cmp	r6, r7
 802017a:	d900      	bls.n	802017e <__ssputs_r+0x86>
 802017c:	463e      	mov	r6, r7
 802017e:	4632      	mov	r2, r6
 8020180:	6820      	ldr	r0, [r4, #0]
 8020182:	4641      	mov	r1, r8
 8020184:	f7ff f908 	bl	801f398 <memmove>
 8020188:	68a3      	ldr	r3, [r4, #8]
 802018a:	6822      	ldr	r2, [r4, #0]
 802018c:	1b9b      	subs	r3, r3, r6
 802018e:	4432      	add	r2, r6
 8020190:	60a3      	str	r3, [r4, #8]
 8020192:	6022      	str	r2, [r4, #0]
 8020194:	2000      	movs	r0, #0
 8020196:	e7db      	b.n	8020150 <__ssputs_r+0x58>
 8020198:	462a      	mov	r2, r5
 802019a:	f001 f86d 	bl	8021278 <_realloc_r>
 802019e:	4606      	mov	r6, r0
 80201a0:	2800      	cmp	r0, #0
 80201a2:	d1e1      	bne.n	8020168 <__ssputs_r+0x70>
 80201a4:	6921      	ldr	r1, [r4, #16]
 80201a6:	4650      	mov	r0, sl
 80201a8:	f7ff fefc 	bl	801ffa4 <_free_r>
 80201ac:	e7c7      	b.n	802013e <__ssputs_r+0x46>
	...

080201b0 <_svfiprintf_r>:
 80201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b4:	4698      	mov	r8, r3
 80201b6:	898b      	ldrh	r3, [r1, #12]
 80201b8:	061b      	lsls	r3, r3, #24
 80201ba:	b09d      	sub	sp, #116	; 0x74
 80201bc:	4607      	mov	r7, r0
 80201be:	460d      	mov	r5, r1
 80201c0:	4614      	mov	r4, r2
 80201c2:	d50e      	bpl.n	80201e2 <_svfiprintf_r+0x32>
 80201c4:	690b      	ldr	r3, [r1, #16]
 80201c6:	b963      	cbnz	r3, 80201e2 <_svfiprintf_r+0x32>
 80201c8:	2140      	movs	r1, #64	; 0x40
 80201ca:	f7ff ff3b 	bl	8020044 <_malloc_r>
 80201ce:	6028      	str	r0, [r5, #0]
 80201d0:	6128      	str	r0, [r5, #16]
 80201d2:	b920      	cbnz	r0, 80201de <_svfiprintf_r+0x2e>
 80201d4:	230c      	movs	r3, #12
 80201d6:	603b      	str	r3, [r7, #0]
 80201d8:	f04f 30ff 	mov.w	r0, #4294967295
 80201dc:	e0d1      	b.n	8020382 <_svfiprintf_r+0x1d2>
 80201de:	2340      	movs	r3, #64	; 0x40
 80201e0:	616b      	str	r3, [r5, #20]
 80201e2:	2300      	movs	r3, #0
 80201e4:	9309      	str	r3, [sp, #36]	; 0x24
 80201e6:	2320      	movs	r3, #32
 80201e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80201ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80201f0:	2330      	movs	r3, #48	; 0x30
 80201f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802039c <_svfiprintf_r+0x1ec>
 80201f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80201fa:	f04f 0901 	mov.w	r9, #1
 80201fe:	4623      	mov	r3, r4
 8020200:	469a      	mov	sl, r3
 8020202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020206:	b10a      	cbz	r2, 802020c <_svfiprintf_r+0x5c>
 8020208:	2a25      	cmp	r2, #37	; 0x25
 802020a:	d1f9      	bne.n	8020200 <_svfiprintf_r+0x50>
 802020c:	ebba 0b04 	subs.w	fp, sl, r4
 8020210:	d00b      	beq.n	802022a <_svfiprintf_r+0x7a>
 8020212:	465b      	mov	r3, fp
 8020214:	4622      	mov	r2, r4
 8020216:	4629      	mov	r1, r5
 8020218:	4638      	mov	r0, r7
 802021a:	f7ff ff6d 	bl	80200f8 <__ssputs_r>
 802021e:	3001      	adds	r0, #1
 8020220:	f000 80aa 	beq.w	8020378 <_svfiprintf_r+0x1c8>
 8020224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020226:	445a      	add	r2, fp
 8020228:	9209      	str	r2, [sp, #36]	; 0x24
 802022a:	f89a 3000 	ldrb.w	r3, [sl]
 802022e:	2b00      	cmp	r3, #0
 8020230:	f000 80a2 	beq.w	8020378 <_svfiprintf_r+0x1c8>
 8020234:	2300      	movs	r3, #0
 8020236:	f04f 32ff 	mov.w	r2, #4294967295
 802023a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802023e:	f10a 0a01 	add.w	sl, sl, #1
 8020242:	9304      	str	r3, [sp, #16]
 8020244:	9307      	str	r3, [sp, #28]
 8020246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802024a:	931a      	str	r3, [sp, #104]	; 0x68
 802024c:	4654      	mov	r4, sl
 802024e:	2205      	movs	r2, #5
 8020250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020254:	4851      	ldr	r0, [pc, #324]	; (802039c <_svfiprintf_r+0x1ec>)
 8020256:	f7df ffd3 	bl	8000200 <memchr>
 802025a:	9a04      	ldr	r2, [sp, #16]
 802025c:	b9d8      	cbnz	r0, 8020296 <_svfiprintf_r+0xe6>
 802025e:	06d0      	lsls	r0, r2, #27
 8020260:	bf44      	itt	mi
 8020262:	2320      	movmi	r3, #32
 8020264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020268:	0711      	lsls	r1, r2, #28
 802026a:	bf44      	itt	mi
 802026c:	232b      	movmi	r3, #43	; 0x2b
 802026e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020272:	f89a 3000 	ldrb.w	r3, [sl]
 8020276:	2b2a      	cmp	r3, #42	; 0x2a
 8020278:	d015      	beq.n	80202a6 <_svfiprintf_r+0xf6>
 802027a:	9a07      	ldr	r2, [sp, #28]
 802027c:	4654      	mov	r4, sl
 802027e:	2000      	movs	r0, #0
 8020280:	f04f 0c0a 	mov.w	ip, #10
 8020284:	4621      	mov	r1, r4
 8020286:	f811 3b01 	ldrb.w	r3, [r1], #1
 802028a:	3b30      	subs	r3, #48	; 0x30
 802028c:	2b09      	cmp	r3, #9
 802028e:	d94e      	bls.n	802032e <_svfiprintf_r+0x17e>
 8020290:	b1b0      	cbz	r0, 80202c0 <_svfiprintf_r+0x110>
 8020292:	9207      	str	r2, [sp, #28]
 8020294:	e014      	b.n	80202c0 <_svfiprintf_r+0x110>
 8020296:	eba0 0308 	sub.w	r3, r0, r8
 802029a:	fa09 f303 	lsl.w	r3, r9, r3
 802029e:	4313      	orrs	r3, r2
 80202a0:	9304      	str	r3, [sp, #16]
 80202a2:	46a2      	mov	sl, r4
 80202a4:	e7d2      	b.n	802024c <_svfiprintf_r+0x9c>
 80202a6:	9b03      	ldr	r3, [sp, #12]
 80202a8:	1d19      	adds	r1, r3, #4
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	9103      	str	r1, [sp, #12]
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	bfbb      	ittet	lt
 80202b2:	425b      	neglt	r3, r3
 80202b4:	f042 0202 	orrlt.w	r2, r2, #2
 80202b8:	9307      	strge	r3, [sp, #28]
 80202ba:	9307      	strlt	r3, [sp, #28]
 80202bc:	bfb8      	it	lt
 80202be:	9204      	strlt	r2, [sp, #16]
 80202c0:	7823      	ldrb	r3, [r4, #0]
 80202c2:	2b2e      	cmp	r3, #46	; 0x2e
 80202c4:	d10c      	bne.n	80202e0 <_svfiprintf_r+0x130>
 80202c6:	7863      	ldrb	r3, [r4, #1]
 80202c8:	2b2a      	cmp	r3, #42	; 0x2a
 80202ca:	d135      	bne.n	8020338 <_svfiprintf_r+0x188>
 80202cc:	9b03      	ldr	r3, [sp, #12]
 80202ce:	1d1a      	adds	r2, r3, #4
 80202d0:	681b      	ldr	r3, [r3, #0]
 80202d2:	9203      	str	r2, [sp, #12]
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	bfb8      	it	lt
 80202d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80202dc:	3402      	adds	r4, #2
 80202de:	9305      	str	r3, [sp, #20]
 80202e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80203ac <_svfiprintf_r+0x1fc>
 80202e4:	7821      	ldrb	r1, [r4, #0]
 80202e6:	2203      	movs	r2, #3
 80202e8:	4650      	mov	r0, sl
 80202ea:	f7df ff89 	bl	8000200 <memchr>
 80202ee:	b140      	cbz	r0, 8020302 <_svfiprintf_r+0x152>
 80202f0:	2340      	movs	r3, #64	; 0x40
 80202f2:	eba0 000a 	sub.w	r0, r0, sl
 80202f6:	fa03 f000 	lsl.w	r0, r3, r0
 80202fa:	9b04      	ldr	r3, [sp, #16]
 80202fc:	4303      	orrs	r3, r0
 80202fe:	3401      	adds	r4, #1
 8020300:	9304      	str	r3, [sp, #16]
 8020302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020306:	4826      	ldr	r0, [pc, #152]	; (80203a0 <_svfiprintf_r+0x1f0>)
 8020308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802030c:	2206      	movs	r2, #6
 802030e:	f7df ff77 	bl	8000200 <memchr>
 8020312:	2800      	cmp	r0, #0
 8020314:	d038      	beq.n	8020388 <_svfiprintf_r+0x1d8>
 8020316:	4b23      	ldr	r3, [pc, #140]	; (80203a4 <_svfiprintf_r+0x1f4>)
 8020318:	bb1b      	cbnz	r3, 8020362 <_svfiprintf_r+0x1b2>
 802031a:	9b03      	ldr	r3, [sp, #12]
 802031c:	3307      	adds	r3, #7
 802031e:	f023 0307 	bic.w	r3, r3, #7
 8020322:	3308      	adds	r3, #8
 8020324:	9303      	str	r3, [sp, #12]
 8020326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020328:	4433      	add	r3, r6
 802032a:	9309      	str	r3, [sp, #36]	; 0x24
 802032c:	e767      	b.n	80201fe <_svfiprintf_r+0x4e>
 802032e:	fb0c 3202 	mla	r2, ip, r2, r3
 8020332:	460c      	mov	r4, r1
 8020334:	2001      	movs	r0, #1
 8020336:	e7a5      	b.n	8020284 <_svfiprintf_r+0xd4>
 8020338:	2300      	movs	r3, #0
 802033a:	3401      	adds	r4, #1
 802033c:	9305      	str	r3, [sp, #20]
 802033e:	4619      	mov	r1, r3
 8020340:	f04f 0c0a 	mov.w	ip, #10
 8020344:	4620      	mov	r0, r4
 8020346:	f810 2b01 	ldrb.w	r2, [r0], #1
 802034a:	3a30      	subs	r2, #48	; 0x30
 802034c:	2a09      	cmp	r2, #9
 802034e:	d903      	bls.n	8020358 <_svfiprintf_r+0x1a8>
 8020350:	2b00      	cmp	r3, #0
 8020352:	d0c5      	beq.n	80202e0 <_svfiprintf_r+0x130>
 8020354:	9105      	str	r1, [sp, #20]
 8020356:	e7c3      	b.n	80202e0 <_svfiprintf_r+0x130>
 8020358:	fb0c 2101 	mla	r1, ip, r1, r2
 802035c:	4604      	mov	r4, r0
 802035e:	2301      	movs	r3, #1
 8020360:	e7f0      	b.n	8020344 <_svfiprintf_r+0x194>
 8020362:	ab03      	add	r3, sp, #12
 8020364:	9300      	str	r3, [sp, #0]
 8020366:	462a      	mov	r2, r5
 8020368:	4b0f      	ldr	r3, [pc, #60]	; (80203a8 <_svfiprintf_r+0x1f8>)
 802036a:	a904      	add	r1, sp, #16
 802036c:	4638      	mov	r0, r7
 802036e:	f3af 8000 	nop.w
 8020372:	1c42      	adds	r2, r0, #1
 8020374:	4606      	mov	r6, r0
 8020376:	d1d6      	bne.n	8020326 <_svfiprintf_r+0x176>
 8020378:	89ab      	ldrh	r3, [r5, #12]
 802037a:	065b      	lsls	r3, r3, #25
 802037c:	f53f af2c 	bmi.w	80201d8 <_svfiprintf_r+0x28>
 8020380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020382:	b01d      	add	sp, #116	; 0x74
 8020384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020388:	ab03      	add	r3, sp, #12
 802038a:	9300      	str	r3, [sp, #0]
 802038c:	462a      	mov	r2, r5
 802038e:	4b06      	ldr	r3, [pc, #24]	; (80203a8 <_svfiprintf_r+0x1f8>)
 8020390:	a904      	add	r1, sp, #16
 8020392:	4638      	mov	r0, r7
 8020394:	f000 fba6 	bl	8020ae4 <_printf_i>
 8020398:	e7eb      	b.n	8020372 <_svfiprintf_r+0x1c2>
 802039a:	bf00      	nop
 802039c:	0807b3a0 	.word	0x0807b3a0
 80203a0:	0807b3aa 	.word	0x0807b3aa
 80203a4:	00000000 	.word	0x00000000
 80203a8:	080200f9 	.word	0x080200f9
 80203ac:	0807b3a6 	.word	0x0807b3a6

080203b0 <_sungetc_r>:
 80203b0:	b538      	push	{r3, r4, r5, lr}
 80203b2:	1c4b      	adds	r3, r1, #1
 80203b4:	4614      	mov	r4, r2
 80203b6:	d103      	bne.n	80203c0 <_sungetc_r+0x10>
 80203b8:	f04f 35ff 	mov.w	r5, #4294967295
 80203bc:	4628      	mov	r0, r5
 80203be:	bd38      	pop	{r3, r4, r5, pc}
 80203c0:	8993      	ldrh	r3, [r2, #12]
 80203c2:	f023 0320 	bic.w	r3, r3, #32
 80203c6:	8193      	strh	r3, [r2, #12]
 80203c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80203ca:	6852      	ldr	r2, [r2, #4]
 80203cc:	b2cd      	uxtb	r5, r1
 80203ce:	b18b      	cbz	r3, 80203f4 <_sungetc_r+0x44>
 80203d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80203d2:	4293      	cmp	r3, r2
 80203d4:	dd08      	ble.n	80203e8 <_sungetc_r+0x38>
 80203d6:	6823      	ldr	r3, [r4, #0]
 80203d8:	1e5a      	subs	r2, r3, #1
 80203da:	6022      	str	r2, [r4, #0]
 80203dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80203e0:	6863      	ldr	r3, [r4, #4]
 80203e2:	3301      	adds	r3, #1
 80203e4:	6063      	str	r3, [r4, #4]
 80203e6:	e7e9      	b.n	80203bc <_sungetc_r+0xc>
 80203e8:	4621      	mov	r1, r4
 80203ea:	f000 fed5 	bl	8021198 <__submore>
 80203ee:	2800      	cmp	r0, #0
 80203f0:	d0f1      	beq.n	80203d6 <_sungetc_r+0x26>
 80203f2:	e7e1      	b.n	80203b8 <_sungetc_r+0x8>
 80203f4:	6921      	ldr	r1, [r4, #16]
 80203f6:	6823      	ldr	r3, [r4, #0]
 80203f8:	b151      	cbz	r1, 8020410 <_sungetc_r+0x60>
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d208      	bcs.n	8020410 <_sungetc_r+0x60>
 80203fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020402:	42a9      	cmp	r1, r5
 8020404:	d104      	bne.n	8020410 <_sungetc_r+0x60>
 8020406:	3b01      	subs	r3, #1
 8020408:	3201      	adds	r2, #1
 802040a:	6023      	str	r3, [r4, #0]
 802040c:	6062      	str	r2, [r4, #4]
 802040e:	e7d5      	b.n	80203bc <_sungetc_r+0xc>
 8020410:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020418:	6363      	str	r3, [r4, #52]	; 0x34
 802041a:	2303      	movs	r3, #3
 802041c:	63a3      	str	r3, [r4, #56]	; 0x38
 802041e:	4623      	mov	r3, r4
 8020420:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020424:	6023      	str	r3, [r4, #0]
 8020426:	2301      	movs	r3, #1
 8020428:	e7dc      	b.n	80203e4 <_sungetc_r+0x34>

0802042a <__ssrefill_r>:
 802042a:	b510      	push	{r4, lr}
 802042c:	460c      	mov	r4, r1
 802042e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020430:	b169      	cbz	r1, 802044e <__ssrefill_r+0x24>
 8020432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020436:	4299      	cmp	r1, r3
 8020438:	d001      	beq.n	802043e <__ssrefill_r+0x14>
 802043a:	f7ff fdb3 	bl	801ffa4 <_free_r>
 802043e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020440:	6063      	str	r3, [r4, #4]
 8020442:	2000      	movs	r0, #0
 8020444:	6360      	str	r0, [r4, #52]	; 0x34
 8020446:	b113      	cbz	r3, 802044e <__ssrefill_r+0x24>
 8020448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802044a:	6023      	str	r3, [r4, #0]
 802044c:	bd10      	pop	{r4, pc}
 802044e:	6923      	ldr	r3, [r4, #16]
 8020450:	6023      	str	r3, [r4, #0]
 8020452:	2300      	movs	r3, #0
 8020454:	6063      	str	r3, [r4, #4]
 8020456:	89a3      	ldrh	r3, [r4, #12]
 8020458:	f043 0320 	orr.w	r3, r3, #32
 802045c:	81a3      	strh	r3, [r4, #12]
 802045e:	f04f 30ff 	mov.w	r0, #4294967295
 8020462:	e7f3      	b.n	802044c <__ssrefill_r+0x22>

08020464 <__ssvfiscanf_r>:
 8020464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020468:	460c      	mov	r4, r1
 802046a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802046e:	2100      	movs	r1, #0
 8020470:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020474:	49b2      	ldr	r1, [pc, #712]	; (8020740 <__ssvfiscanf_r+0x2dc>)
 8020476:	91a0      	str	r1, [sp, #640]	; 0x280
 8020478:	f10d 0804 	add.w	r8, sp, #4
 802047c:	49b1      	ldr	r1, [pc, #708]	; (8020744 <__ssvfiscanf_r+0x2e0>)
 802047e:	4fb2      	ldr	r7, [pc, #712]	; (8020748 <__ssvfiscanf_r+0x2e4>)
 8020480:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802074c <__ssvfiscanf_r+0x2e8>
 8020484:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020488:	4606      	mov	r6, r0
 802048a:	91a1      	str	r1, [sp, #644]	; 0x284
 802048c:	9300      	str	r3, [sp, #0]
 802048e:	f892 a000 	ldrb.w	sl, [r2]
 8020492:	f1ba 0f00 	cmp.w	sl, #0
 8020496:	f000 8151 	beq.w	802073c <__ssvfiscanf_r+0x2d8>
 802049a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802049e:	f013 0308 	ands.w	r3, r3, #8
 80204a2:	f102 0501 	add.w	r5, r2, #1
 80204a6:	d019      	beq.n	80204dc <__ssvfiscanf_r+0x78>
 80204a8:	6863      	ldr	r3, [r4, #4]
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	dd0f      	ble.n	80204ce <__ssvfiscanf_r+0x6a>
 80204ae:	6823      	ldr	r3, [r4, #0]
 80204b0:	781a      	ldrb	r2, [r3, #0]
 80204b2:	5cba      	ldrb	r2, [r7, r2]
 80204b4:	0712      	lsls	r2, r2, #28
 80204b6:	d401      	bmi.n	80204bc <__ssvfiscanf_r+0x58>
 80204b8:	462a      	mov	r2, r5
 80204ba:	e7e8      	b.n	802048e <__ssvfiscanf_r+0x2a>
 80204bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80204be:	3201      	adds	r2, #1
 80204c0:	9245      	str	r2, [sp, #276]	; 0x114
 80204c2:	6862      	ldr	r2, [r4, #4]
 80204c4:	3301      	adds	r3, #1
 80204c6:	3a01      	subs	r2, #1
 80204c8:	6062      	str	r2, [r4, #4]
 80204ca:	6023      	str	r3, [r4, #0]
 80204cc:	e7ec      	b.n	80204a8 <__ssvfiscanf_r+0x44>
 80204ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80204d0:	4621      	mov	r1, r4
 80204d2:	4630      	mov	r0, r6
 80204d4:	4798      	blx	r3
 80204d6:	2800      	cmp	r0, #0
 80204d8:	d0e9      	beq.n	80204ae <__ssvfiscanf_r+0x4a>
 80204da:	e7ed      	b.n	80204b8 <__ssvfiscanf_r+0x54>
 80204dc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80204e0:	f040 8083 	bne.w	80205ea <__ssvfiscanf_r+0x186>
 80204e4:	9341      	str	r3, [sp, #260]	; 0x104
 80204e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80204e8:	7853      	ldrb	r3, [r2, #1]
 80204ea:	2b2a      	cmp	r3, #42	; 0x2a
 80204ec:	bf02      	ittt	eq
 80204ee:	2310      	moveq	r3, #16
 80204f0:	1c95      	addeq	r5, r2, #2
 80204f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80204f4:	220a      	movs	r2, #10
 80204f6:	46ab      	mov	fp, r5
 80204f8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80204fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020500:	2b09      	cmp	r3, #9
 8020502:	d91d      	bls.n	8020540 <__ssvfiscanf_r+0xdc>
 8020504:	4891      	ldr	r0, [pc, #580]	; (802074c <__ssvfiscanf_r+0x2e8>)
 8020506:	2203      	movs	r2, #3
 8020508:	f7df fe7a 	bl	8000200 <memchr>
 802050c:	b140      	cbz	r0, 8020520 <__ssvfiscanf_r+0xbc>
 802050e:	2301      	movs	r3, #1
 8020510:	eba0 0009 	sub.w	r0, r0, r9
 8020514:	fa03 f000 	lsl.w	r0, r3, r0
 8020518:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802051a:	4318      	orrs	r0, r3
 802051c:	9041      	str	r0, [sp, #260]	; 0x104
 802051e:	465d      	mov	r5, fp
 8020520:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020524:	2b78      	cmp	r3, #120	; 0x78
 8020526:	d806      	bhi.n	8020536 <__ssvfiscanf_r+0xd2>
 8020528:	2b57      	cmp	r3, #87	; 0x57
 802052a:	d810      	bhi.n	802054e <__ssvfiscanf_r+0xea>
 802052c:	2b25      	cmp	r3, #37	; 0x25
 802052e:	d05c      	beq.n	80205ea <__ssvfiscanf_r+0x186>
 8020530:	d856      	bhi.n	80205e0 <__ssvfiscanf_r+0x17c>
 8020532:	2b00      	cmp	r3, #0
 8020534:	d074      	beq.n	8020620 <__ssvfiscanf_r+0x1bc>
 8020536:	2303      	movs	r3, #3
 8020538:	9347      	str	r3, [sp, #284]	; 0x11c
 802053a:	230a      	movs	r3, #10
 802053c:	9342      	str	r3, [sp, #264]	; 0x108
 802053e:	e081      	b.n	8020644 <__ssvfiscanf_r+0x1e0>
 8020540:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020542:	fb02 1303 	mla	r3, r2, r3, r1
 8020546:	3b30      	subs	r3, #48	; 0x30
 8020548:	9343      	str	r3, [sp, #268]	; 0x10c
 802054a:	465d      	mov	r5, fp
 802054c:	e7d3      	b.n	80204f6 <__ssvfiscanf_r+0x92>
 802054e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020552:	2a20      	cmp	r2, #32
 8020554:	d8ef      	bhi.n	8020536 <__ssvfiscanf_r+0xd2>
 8020556:	a101      	add	r1, pc, #4	; (adr r1, 802055c <__ssvfiscanf_r+0xf8>)
 8020558:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802055c:	0802062f 	.word	0x0802062f
 8020560:	08020537 	.word	0x08020537
 8020564:	08020537 	.word	0x08020537
 8020568:	0802068d 	.word	0x0802068d
 802056c:	08020537 	.word	0x08020537
 8020570:	08020537 	.word	0x08020537
 8020574:	08020537 	.word	0x08020537
 8020578:	08020537 	.word	0x08020537
 802057c:	08020537 	.word	0x08020537
 8020580:	08020537 	.word	0x08020537
 8020584:	08020537 	.word	0x08020537
 8020588:	080206a3 	.word	0x080206a3
 802058c:	08020679 	.word	0x08020679
 8020590:	080205e7 	.word	0x080205e7
 8020594:	080205e7 	.word	0x080205e7
 8020598:	080205e7 	.word	0x080205e7
 802059c:	08020537 	.word	0x08020537
 80205a0:	0802067d 	.word	0x0802067d
 80205a4:	08020537 	.word	0x08020537
 80205a8:	08020537 	.word	0x08020537
 80205ac:	08020537 	.word	0x08020537
 80205b0:	08020537 	.word	0x08020537
 80205b4:	080206b3 	.word	0x080206b3
 80205b8:	08020685 	.word	0x08020685
 80205bc:	08020627 	.word	0x08020627
 80205c0:	08020537 	.word	0x08020537
 80205c4:	08020537 	.word	0x08020537
 80205c8:	080206af 	.word	0x080206af
 80205cc:	08020537 	.word	0x08020537
 80205d0:	08020679 	.word	0x08020679
 80205d4:	08020537 	.word	0x08020537
 80205d8:	08020537 	.word	0x08020537
 80205dc:	0802062f 	.word	0x0802062f
 80205e0:	3b45      	subs	r3, #69	; 0x45
 80205e2:	2b02      	cmp	r3, #2
 80205e4:	d8a7      	bhi.n	8020536 <__ssvfiscanf_r+0xd2>
 80205e6:	2305      	movs	r3, #5
 80205e8:	e02b      	b.n	8020642 <__ssvfiscanf_r+0x1de>
 80205ea:	6863      	ldr	r3, [r4, #4]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	dd0d      	ble.n	802060c <__ssvfiscanf_r+0x1a8>
 80205f0:	6823      	ldr	r3, [r4, #0]
 80205f2:	781a      	ldrb	r2, [r3, #0]
 80205f4:	4552      	cmp	r2, sl
 80205f6:	f040 80a1 	bne.w	802073c <__ssvfiscanf_r+0x2d8>
 80205fa:	3301      	adds	r3, #1
 80205fc:	6862      	ldr	r2, [r4, #4]
 80205fe:	6023      	str	r3, [r4, #0]
 8020600:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020602:	3a01      	subs	r2, #1
 8020604:	3301      	adds	r3, #1
 8020606:	6062      	str	r2, [r4, #4]
 8020608:	9345      	str	r3, [sp, #276]	; 0x114
 802060a:	e755      	b.n	80204b8 <__ssvfiscanf_r+0x54>
 802060c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802060e:	4621      	mov	r1, r4
 8020610:	4630      	mov	r0, r6
 8020612:	4798      	blx	r3
 8020614:	2800      	cmp	r0, #0
 8020616:	d0eb      	beq.n	80205f0 <__ssvfiscanf_r+0x18c>
 8020618:	9844      	ldr	r0, [sp, #272]	; 0x110
 802061a:	2800      	cmp	r0, #0
 802061c:	f040 8084 	bne.w	8020728 <__ssvfiscanf_r+0x2c4>
 8020620:	f04f 30ff 	mov.w	r0, #4294967295
 8020624:	e086      	b.n	8020734 <__ssvfiscanf_r+0x2d0>
 8020626:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020628:	f042 0220 	orr.w	r2, r2, #32
 802062c:	9241      	str	r2, [sp, #260]	; 0x104
 802062e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020634:	9241      	str	r2, [sp, #260]	; 0x104
 8020636:	2210      	movs	r2, #16
 8020638:	2b6f      	cmp	r3, #111	; 0x6f
 802063a:	9242      	str	r2, [sp, #264]	; 0x108
 802063c:	bf34      	ite	cc
 802063e:	2303      	movcc	r3, #3
 8020640:	2304      	movcs	r3, #4
 8020642:	9347      	str	r3, [sp, #284]	; 0x11c
 8020644:	6863      	ldr	r3, [r4, #4]
 8020646:	2b00      	cmp	r3, #0
 8020648:	dd41      	ble.n	80206ce <__ssvfiscanf_r+0x26a>
 802064a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802064c:	0659      	lsls	r1, r3, #25
 802064e:	d404      	bmi.n	802065a <__ssvfiscanf_r+0x1f6>
 8020650:	6823      	ldr	r3, [r4, #0]
 8020652:	781a      	ldrb	r2, [r3, #0]
 8020654:	5cba      	ldrb	r2, [r7, r2]
 8020656:	0712      	lsls	r2, r2, #28
 8020658:	d440      	bmi.n	80206dc <__ssvfiscanf_r+0x278>
 802065a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802065c:	2b02      	cmp	r3, #2
 802065e:	dc4f      	bgt.n	8020700 <__ssvfiscanf_r+0x29c>
 8020660:	466b      	mov	r3, sp
 8020662:	4622      	mov	r2, r4
 8020664:	a941      	add	r1, sp, #260	; 0x104
 8020666:	4630      	mov	r0, r6
 8020668:	f000 fb62 	bl	8020d30 <_scanf_chars>
 802066c:	2801      	cmp	r0, #1
 802066e:	d065      	beq.n	802073c <__ssvfiscanf_r+0x2d8>
 8020670:	2802      	cmp	r0, #2
 8020672:	f47f af21 	bne.w	80204b8 <__ssvfiscanf_r+0x54>
 8020676:	e7cf      	b.n	8020618 <__ssvfiscanf_r+0x1b4>
 8020678:	220a      	movs	r2, #10
 802067a:	e7dd      	b.n	8020638 <__ssvfiscanf_r+0x1d4>
 802067c:	2300      	movs	r3, #0
 802067e:	9342      	str	r3, [sp, #264]	; 0x108
 8020680:	2303      	movs	r3, #3
 8020682:	e7de      	b.n	8020642 <__ssvfiscanf_r+0x1de>
 8020684:	2308      	movs	r3, #8
 8020686:	9342      	str	r3, [sp, #264]	; 0x108
 8020688:	2304      	movs	r3, #4
 802068a:	e7da      	b.n	8020642 <__ssvfiscanf_r+0x1de>
 802068c:	4629      	mov	r1, r5
 802068e:	4640      	mov	r0, r8
 8020690:	f000 fcbc 	bl	802100c <__sccl>
 8020694:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802069a:	9341      	str	r3, [sp, #260]	; 0x104
 802069c:	4605      	mov	r5, r0
 802069e:	2301      	movs	r3, #1
 80206a0:	e7cf      	b.n	8020642 <__ssvfiscanf_r+0x1de>
 80206a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80206a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80206a8:	9341      	str	r3, [sp, #260]	; 0x104
 80206aa:	2300      	movs	r3, #0
 80206ac:	e7c9      	b.n	8020642 <__ssvfiscanf_r+0x1de>
 80206ae:	2302      	movs	r3, #2
 80206b0:	e7c7      	b.n	8020642 <__ssvfiscanf_r+0x1de>
 80206b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80206b4:	06c3      	lsls	r3, r0, #27
 80206b6:	f53f aeff 	bmi.w	80204b8 <__ssvfiscanf_r+0x54>
 80206ba:	9b00      	ldr	r3, [sp, #0]
 80206bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80206be:	1d19      	adds	r1, r3, #4
 80206c0:	9100      	str	r1, [sp, #0]
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	07c0      	lsls	r0, r0, #31
 80206c6:	bf4c      	ite	mi
 80206c8:	801a      	strhmi	r2, [r3, #0]
 80206ca:	601a      	strpl	r2, [r3, #0]
 80206cc:	e6f4      	b.n	80204b8 <__ssvfiscanf_r+0x54>
 80206ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80206d0:	4621      	mov	r1, r4
 80206d2:	4630      	mov	r0, r6
 80206d4:	4798      	blx	r3
 80206d6:	2800      	cmp	r0, #0
 80206d8:	d0b7      	beq.n	802064a <__ssvfiscanf_r+0x1e6>
 80206da:	e79d      	b.n	8020618 <__ssvfiscanf_r+0x1b4>
 80206dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80206de:	3201      	adds	r2, #1
 80206e0:	9245      	str	r2, [sp, #276]	; 0x114
 80206e2:	6862      	ldr	r2, [r4, #4]
 80206e4:	3a01      	subs	r2, #1
 80206e6:	2a00      	cmp	r2, #0
 80206e8:	6062      	str	r2, [r4, #4]
 80206ea:	dd02      	ble.n	80206f2 <__ssvfiscanf_r+0x28e>
 80206ec:	3301      	adds	r3, #1
 80206ee:	6023      	str	r3, [r4, #0]
 80206f0:	e7ae      	b.n	8020650 <__ssvfiscanf_r+0x1ec>
 80206f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80206f4:	4621      	mov	r1, r4
 80206f6:	4630      	mov	r0, r6
 80206f8:	4798      	blx	r3
 80206fa:	2800      	cmp	r0, #0
 80206fc:	d0a8      	beq.n	8020650 <__ssvfiscanf_r+0x1ec>
 80206fe:	e78b      	b.n	8020618 <__ssvfiscanf_r+0x1b4>
 8020700:	2b04      	cmp	r3, #4
 8020702:	dc06      	bgt.n	8020712 <__ssvfiscanf_r+0x2ae>
 8020704:	466b      	mov	r3, sp
 8020706:	4622      	mov	r2, r4
 8020708:	a941      	add	r1, sp, #260	; 0x104
 802070a:	4630      	mov	r0, r6
 802070c:	f000 fb68 	bl	8020de0 <_scanf_i>
 8020710:	e7ac      	b.n	802066c <__ssvfiscanf_r+0x208>
 8020712:	4b0f      	ldr	r3, [pc, #60]	; (8020750 <__ssvfiscanf_r+0x2ec>)
 8020714:	2b00      	cmp	r3, #0
 8020716:	f43f aecf 	beq.w	80204b8 <__ssvfiscanf_r+0x54>
 802071a:	466b      	mov	r3, sp
 802071c:	4622      	mov	r2, r4
 802071e:	a941      	add	r1, sp, #260	; 0x104
 8020720:	4630      	mov	r0, r6
 8020722:	f3af 8000 	nop.w
 8020726:	e7a1      	b.n	802066c <__ssvfiscanf_r+0x208>
 8020728:	89a3      	ldrh	r3, [r4, #12]
 802072a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802072e:	bf18      	it	ne
 8020730:	f04f 30ff 	movne.w	r0, #4294967295
 8020734:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8020738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802073c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802073e:	e7f9      	b.n	8020734 <__ssvfiscanf_r+0x2d0>
 8020740:	080203b1 	.word	0x080203b1
 8020744:	0802042b 	.word	0x0802042b
 8020748:	0807b185 	.word	0x0807b185
 802074c:	0807b3a6 	.word	0x0807b3a6
 8020750:	00000000 	.word	0x00000000

08020754 <__sfputc_r>:
 8020754:	6893      	ldr	r3, [r2, #8]
 8020756:	3b01      	subs	r3, #1
 8020758:	2b00      	cmp	r3, #0
 802075a:	b410      	push	{r4}
 802075c:	6093      	str	r3, [r2, #8]
 802075e:	da08      	bge.n	8020772 <__sfputc_r+0x1e>
 8020760:	6994      	ldr	r4, [r2, #24]
 8020762:	42a3      	cmp	r3, r4
 8020764:	db01      	blt.n	802076a <__sfputc_r+0x16>
 8020766:	290a      	cmp	r1, #10
 8020768:	d103      	bne.n	8020772 <__sfputc_r+0x1e>
 802076a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802076e:	f7ff b8af 	b.w	801f8d0 <__swbuf_r>
 8020772:	6813      	ldr	r3, [r2, #0]
 8020774:	1c58      	adds	r0, r3, #1
 8020776:	6010      	str	r0, [r2, #0]
 8020778:	7019      	strb	r1, [r3, #0]
 802077a:	4608      	mov	r0, r1
 802077c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020780:	4770      	bx	lr

08020782 <__sfputs_r>:
 8020782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020784:	4606      	mov	r6, r0
 8020786:	460f      	mov	r7, r1
 8020788:	4614      	mov	r4, r2
 802078a:	18d5      	adds	r5, r2, r3
 802078c:	42ac      	cmp	r4, r5
 802078e:	d101      	bne.n	8020794 <__sfputs_r+0x12>
 8020790:	2000      	movs	r0, #0
 8020792:	e007      	b.n	80207a4 <__sfputs_r+0x22>
 8020794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020798:	463a      	mov	r2, r7
 802079a:	4630      	mov	r0, r6
 802079c:	f7ff ffda 	bl	8020754 <__sfputc_r>
 80207a0:	1c43      	adds	r3, r0, #1
 80207a2:	d1f3      	bne.n	802078c <__sfputs_r+0xa>
 80207a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080207a8 <_vfiprintf_r>:
 80207a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207ac:	460d      	mov	r5, r1
 80207ae:	b09d      	sub	sp, #116	; 0x74
 80207b0:	4614      	mov	r4, r2
 80207b2:	4698      	mov	r8, r3
 80207b4:	4606      	mov	r6, r0
 80207b6:	b118      	cbz	r0, 80207c0 <_vfiprintf_r+0x18>
 80207b8:	6983      	ldr	r3, [r0, #24]
 80207ba:	b90b      	cbnz	r3, 80207c0 <_vfiprintf_r+0x18>
 80207bc:	f7ff faa8 	bl	801fd10 <__sinit>
 80207c0:	4b89      	ldr	r3, [pc, #548]	; (80209e8 <_vfiprintf_r+0x240>)
 80207c2:	429d      	cmp	r5, r3
 80207c4:	d11b      	bne.n	80207fe <_vfiprintf_r+0x56>
 80207c6:	6875      	ldr	r5, [r6, #4]
 80207c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80207ca:	07d9      	lsls	r1, r3, #31
 80207cc:	d405      	bmi.n	80207da <_vfiprintf_r+0x32>
 80207ce:	89ab      	ldrh	r3, [r5, #12]
 80207d0:	059a      	lsls	r2, r3, #22
 80207d2:	d402      	bmi.n	80207da <_vfiprintf_r+0x32>
 80207d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80207d6:	f7ff fb4b 	bl	801fe70 <__retarget_lock_acquire_recursive>
 80207da:	89ab      	ldrh	r3, [r5, #12]
 80207dc:	071b      	lsls	r3, r3, #28
 80207de:	d501      	bpl.n	80207e4 <_vfiprintf_r+0x3c>
 80207e0:	692b      	ldr	r3, [r5, #16]
 80207e2:	b9eb      	cbnz	r3, 8020820 <_vfiprintf_r+0x78>
 80207e4:	4629      	mov	r1, r5
 80207e6:	4630      	mov	r0, r6
 80207e8:	f7ff f8d6 	bl	801f998 <__swsetup_r>
 80207ec:	b1c0      	cbz	r0, 8020820 <_vfiprintf_r+0x78>
 80207ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80207f0:	07dc      	lsls	r4, r3, #31
 80207f2:	d50e      	bpl.n	8020812 <_vfiprintf_r+0x6a>
 80207f4:	f04f 30ff 	mov.w	r0, #4294967295
 80207f8:	b01d      	add	sp, #116	; 0x74
 80207fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207fe:	4b7b      	ldr	r3, [pc, #492]	; (80209ec <_vfiprintf_r+0x244>)
 8020800:	429d      	cmp	r5, r3
 8020802:	d101      	bne.n	8020808 <_vfiprintf_r+0x60>
 8020804:	68b5      	ldr	r5, [r6, #8]
 8020806:	e7df      	b.n	80207c8 <_vfiprintf_r+0x20>
 8020808:	4b79      	ldr	r3, [pc, #484]	; (80209f0 <_vfiprintf_r+0x248>)
 802080a:	429d      	cmp	r5, r3
 802080c:	bf08      	it	eq
 802080e:	68f5      	ldreq	r5, [r6, #12]
 8020810:	e7da      	b.n	80207c8 <_vfiprintf_r+0x20>
 8020812:	89ab      	ldrh	r3, [r5, #12]
 8020814:	0598      	lsls	r0, r3, #22
 8020816:	d4ed      	bmi.n	80207f4 <_vfiprintf_r+0x4c>
 8020818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802081a:	f7ff fb2a 	bl	801fe72 <__retarget_lock_release_recursive>
 802081e:	e7e9      	b.n	80207f4 <_vfiprintf_r+0x4c>
 8020820:	2300      	movs	r3, #0
 8020822:	9309      	str	r3, [sp, #36]	; 0x24
 8020824:	2320      	movs	r3, #32
 8020826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802082a:	f8cd 800c 	str.w	r8, [sp, #12]
 802082e:	2330      	movs	r3, #48	; 0x30
 8020830:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80209f4 <_vfiprintf_r+0x24c>
 8020834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020838:	f04f 0901 	mov.w	r9, #1
 802083c:	4623      	mov	r3, r4
 802083e:	469a      	mov	sl, r3
 8020840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020844:	b10a      	cbz	r2, 802084a <_vfiprintf_r+0xa2>
 8020846:	2a25      	cmp	r2, #37	; 0x25
 8020848:	d1f9      	bne.n	802083e <_vfiprintf_r+0x96>
 802084a:	ebba 0b04 	subs.w	fp, sl, r4
 802084e:	d00b      	beq.n	8020868 <_vfiprintf_r+0xc0>
 8020850:	465b      	mov	r3, fp
 8020852:	4622      	mov	r2, r4
 8020854:	4629      	mov	r1, r5
 8020856:	4630      	mov	r0, r6
 8020858:	f7ff ff93 	bl	8020782 <__sfputs_r>
 802085c:	3001      	adds	r0, #1
 802085e:	f000 80aa 	beq.w	80209b6 <_vfiprintf_r+0x20e>
 8020862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020864:	445a      	add	r2, fp
 8020866:	9209      	str	r2, [sp, #36]	; 0x24
 8020868:	f89a 3000 	ldrb.w	r3, [sl]
 802086c:	2b00      	cmp	r3, #0
 802086e:	f000 80a2 	beq.w	80209b6 <_vfiprintf_r+0x20e>
 8020872:	2300      	movs	r3, #0
 8020874:	f04f 32ff 	mov.w	r2, #4294967295
 8020878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802087c:	f10a 0a01 	add.w	sl, sl, #1
 8020880:	9304      	str	r3, [sp, #16]
 8020882:	9307      	str	r3, [sp, #28]
 8020884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020888:	931a      	str	r3, [sp, #104]	; 0x68
 802088a:	4654      	mov	r4, sl
 802088c:	2205      	movs	r2, #5
 802088e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020892:	4858      	ldr	r0, [pc, #352]	; (80209f4 <_vfiprintf_r+0x24c>)
 8020894:	f7df fcb4 	bl	8000200 <memchr>
 8020898:	9a04      	ldr	r2, [sp, #16]
 802089a:	b9d8      	cbnz	r0, 80208d4 <_vfiprintf_r+0x12c>
 802089c:	06d1      	lsls	r1, r2, #27
 802089e:	bf44      	itt	mi
 80208a0:	2320      	movmi	r3, #32
 80208a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80208a6:	0713      	lsls	r3, r2, #28
 80208a8:	bf44      	itt	mi
 80208aa:	232b      	movmi	r3, #43	; 0x2b
 80208ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80208b0:	f89a 3000 	ldrb.w	r3, [sl]
 80208b4:	2b2a      	cmp	r3, #42	; 0x2a
 80208b6:	d015      	beq.n	80208e4 <_vfiprintf_r+0x13c>
 80208b8:	9a07      	ldr	r2, [sp, #28]
 80208ba:	4654      	mov	r4, sl
 80208bc:	2000      	movs	r0, #0
 80208be:	f04f 0c0a 	mov.w	ip, #10
 80208c2:	4621      	mov	r1, r4
 80208c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80208c8:	3b30      	subs	r3, #48	; 0x30
 80208ca:	2b09      	cmp	r3, #9
 80208cc:	d94e      	bls.n	802096c <_vfiprintf_r+0x1c4>
 80208ce:	b1b0      	cbz	r0, 80208fe <_vfiprintf_r+0x156>
 80208d0:	9207      	str	r2, [sp, #28]
 80208d2:	e014      	b.n	80208fe <_vfiprintf_r+0x156>
 80208d4:	eba0 0308 	sub.w	r3, r0, r8
 80208d8:	fa09 f303 	lsl.w	r3, r9, r3
 80208dc:	4313      	orrs	r3, r2
 80208de:	9304      	str	r3, [sp, #16]
 80208e0:	46a2      	mov	sl, r4
 80208e2:	e7d2      	b.n	802088a <_vfiprintf_r+0xe2>
 80208e4:	9b03      	ldr	r3, [sp, #12]
 80208e6:	1d19      	adds	r1, r3, #4
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	9103      	str	r1, [sp, #12]
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	bfbb      	ittet	lt
 80208f0:	425b      	neglt	r3, r3
 80208f2:	f042 0202 	orrlt.w	r2, r2, #2
 80208f6:	9307      	strge	r3, [sp, #28]
 80208f8:	9307      	strlt	r3, [sp, #28]
 80208fa:	bfb8      	it	lt
 80208fc:	9204      	strlt	r2, [sp, #16]
 80208fe:	7823      	ldrb	r3, [r4, #0]
 8020900:	2b2e      	cmp	r3, #46	; 0x2e
 8020902:	d10c      	bne.n	802091e <_vfiprintf_r+0x176>
 8020904:	7863      	ldrb	r3, [r4, #1]
 8020906:	2b2a      	cmp	r3, #42	; 0x2a
 8020908:	d135      	bne.n	8020976 <_vfiprintf_r+0x1ce>
 802090a:	9b03      	ldr	r3, [sp, #12]
 802090c:	1d1a      	adds	r2, r3, #4
 802090e:	681b      	ldr	r3, [r3, #0]
 8020910:	9203      	str	r2, [sp, #12]
 8020912:	2b00      	cmp	r3, #0
 8020914:	bfb8      	it	lt
 8020916:	f04f 33ff 	movlt.w	r3, #4294967295
 802091a:	3402      	adds	r4, #2
 802091c:	9305      	str	r3, [sp, #20]
 802091e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020a04 <_vfiprintf_r+0x25c>
 8020922:	7821      	ldrb	r1, [r4, #0]
 8020924:	2203      	movs	r2, #3
 8020926:	4650      	mov	r0, sl
 8020928:	f7df fc6a 	bl	8000200 <memchr>
 802092c:	b140      	cbz	r0, 8020940 <_vfiprintf_r+0x198>
 802092e:	2340      	movs	r3, #64	; 0x40
 8020930:	eba0 000a 	sub.w	r0, r0, sl
 8020934:	fa03 f000 	lsl.w	r0, r3, r0
 8020938:	9b04      	ldr	r3, [sp, #16]
 802093a:	4303      	orrs	r3, r0
 802093c:	3401      	adds	r4, #1
 802093e:	9304      	str	r3, [sp, #16]
 8020940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020944:	482c      	ldr	r0, [pc, #176]	; (80209f8 <_vfiprintf_r+0x250>)
 8020946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802094a:	2206      	movs	r2, #6
 802094c:	f7df fc58 	bl	8000200 <memchr>
 8020950:	2800      	cmp	r0, #0
 8020952:	d03f      	beq.n	80209d4 <_vfiprintf_r+0x22c>
 8020954:	4b29      	ldr	r3, [pc, #164]	; (80209fc <_vfiprintf_r+0x254>)
 8020956:	bb1b      	cbnz	r3, 80209a0 <_vfiprintf_r+0x1f8>
 8020958:	9b03      	ldr	r3, [sp, #12]
 802095a:	3307      	adds	r3, #7
 802095c:	f023 0307 	bic.w	r3, r3, #7
 8020960:	3308      	adds	r3, #8
 8020962:	9303      	str	r3, [sp, #12]
 8020964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020966:	443b      	add	r3, r7
 8020968:	9309      	str	r3, [sp, #36]	; 0x24
 802096a:	e767      	b.n	802083c <_vfiprintf_r+0x94>
 802096c:	fb0c 3202 	mla	r2, ip, r2, r3
 8020970:	460c      	mov	r4, r1
 8020972:	2001      	movs	r0, #1
 8020974:	e7a5      	b.n	80208c2 <_vfiprintf_r+0x11a>
 8020976:	2300      	movs	r3, #0
 8020978:	3401      	adds	r4, #1
 802097a:	9305      	str	r3, [sp, #20]
 802097c:	4619      	mov	r1, r3
 802097e:	f04f 0c0a 	mov.w	ip, #10
 8020982:	4620      	mov	r0, r4
 8020984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020988:	3a30      	subs	r2, #48	; 0x30
 802098a:	2a09      	cmp	r2, #9
 802098c:	d903      	bls.n	8020996 <_vfiprintf_r+0x1ee>
 802098e:	2b00      	cmp	r3, #0
 8020990:	d0c5      	beq.n	802091e <_vfiprintf_r+0x176>
 8020992:	9105      	str	r1, [sp, #20]
 8020994:	e7c3      	b.n	802091e <_vfiprintf_r+0x176>
 8020996:	fb0c 2101 	mla	r1, ip, r1, r2
 802099a:	4604      	mov	r4, r0
 802099c:	2301      	movs	r3, #1
 802099e:	e7f0      	b.n	8020982 <_vfiprintf_r+0x1da>
 80209a0:	ab03      	add	r3, sp, #12
 80209a2:	9300      	str	r3, [sp, #0]
 80209a4:	462a      	mov	r2, r5
 80209a6:	4b16      	ldr	r3, [pc, #88]	; (8020a00 <_vfiprintf_r+0x258>)
 80209a8:	a904      	add	r1, sp, #16
 80209aa:	4630      	mov	r0, r6
 80209ac:	f3af 8000 	nop.w
 80209b0:	4607      	mov	r7, r0
 80209b2:	1c78      	adds	r0, r7, #1
 80209b4:	d1d6      	bne.n	8020964 <_vfiprintf_r+0x1bc>
 80209b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80209b8:	07d9      	lsls	r1, r3, #31
 80209ba:	d405      	bmi.n	80209c8 <_vfiprintf_r+0x220>
 80209bc:	89ab      	ldrh	r3, [r5, #12]
 80209be:	059a      	lsls	r2, r3, #22
 80209c0:	d402      	bmi.n	80209c8 <_vfiprintf_r+0x220>
 80209c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80209c4:	f7ff fa55 	bl	801fe72 <__retarget_lock_release_recursive>
 80209c8:	89ab      	ldrh	r3, [r5, #12]
 80209ca:	065b      	lsls	r3, r3, #25
 80209cc:	f53f af12 	bmi.w	80207f4 <_vfiprintf_r+0x4c>
 80209d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80209d2:	e711      	b.n	80207f8 <_vfiprintf_r+0x50>
 80209d4:	ab03      	add	r3, sp, #12
 80209d6:	9300      	str	r3, [sp, #0]
 80209d8:	462a      	mov	r2, r5
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <_vfiprintf_r+0x258>)
 80209dc:	a904      	add	r1, sp, #16
 80209de:	4630      	mov	r0, r6
 80209e0:	f000 f880 	bl	8020ae4 <_printf_i>
 80209e4:	e7e4      	b.n	80209b0 <_vfiprintf_r+0x208>
 80209e6:	bf00      	nop
 80209e8:	0807b360 	.word	0x0807b360
 80209ec:	0807b380 	.word	0x0807b380
 80209f0:	0807b340 	.word	0x0807b340
 80209f4:	0807b3a0 	.word	0x0807b3a0
 80209f8:	0807b3aa 	.word	0x0807b3aa
 80209fc:	00000000 	.word	0x00000000
 8020a00:	08020783 	.word	0x08020783
 8020a04:	0807b3a6 	.word	0x0807b3a6

08020a08 <_printf_common>:
 8020a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a0c:	4616      	mov	r6, r2
 8020a0e:	4699      	mov	r9, r3
 8020a10:	688a      	ldr	r2, [r1, #8]
 8020a12:	690b      	ldr	r3, [r1, #16]
 8020a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020a18:	4293      	cmp	r3, r2
 8020a1a:	bfb8      	it	lt
 8020a1c:	4613      	movlt	r3, r2
 8020a1e:	6033      	str	r3, [r6, #0]
 8020a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020a24:	4607      	mov	r7, r0
 8020a26:	460c      	mov	r4, r1
 8020a28:	b10a      	cbz	r2, 8020a2e <_printf_common+0x26>
 8020a2a:	3301      	adds	r3, #1
 8020a2c:	6033      	str	r3, [r6, #0]
 8020a2e:	6823      	ldr	r3, [r4, #0]
 8020a30:	0699      	lsls	r1, r3, #26
 8020a32:	bf42      	ittt	mi
 8020a34:	6833      	ldrmi	r3, [r6, #0]
 8020a36:	3302      	addmi	r3, #2
 8020a38:	6033      	strmi	r3, [r6, #0]
 8020a3a:	6825      	ldr	r5, [r4, #0]
 8020a3c:	f015 0506 	ands.w	r5, r5, #6
 8020a40:	d106      	bne.n	8020a50 <_printf_common+0x48>
 8020a42:	f104 0a19 	add.w	sl, r4, #25
 8020a46:	68e3      	ldr	r3, [r4, #12]
 8020a48:	6832      	ldr	r2, [r6, #0]
 8020a4a:	1a9b      	subs	r3, r3, r2
 8020a4c:	42ab      	cmp	r3, r5
 8020a4e:	dc26      	bgt.n	8020a9e <_printf_common+0x96>
 8020a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020a54:	1e13      	subs	r3, r2, #0
 8020a56:	6822      	ldr	r2, [r4, #0]
 8020a58:	bf18      	it	ne
 8020a5a:	2301      	movne	r3, #1
 8020a5c:	0692      	lsls	r2, r2, #26
 8020a5e:	d42b      	bmi.n	8020ab8 <_printf_common+0xb0>
 8020a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020a64:	4649      	mov	r1, r9
 8020a66:	4638      	mov	r0, r7
 8020a68:	47c0      	blx	r8
 8020a6a:	3001      	adds	r0, #1
 8020a6c:	d01e      	beq.n	8020aac <_printf_common+0xa4>
 8020a6e:	6823      	ldr	r3, [r4, #0]
 8020a70:	68e5      	ldr	r5, [r4, #12]
 8020a72:	6832      	ldr	r2, [r6, #0]
 8020a74:	f003 0306 	and.w	r3, r3, #6
 8020a78:	2b04      	cmp	r3, #4
 8020a7a:	bf08      	it	eq
 8020a7c:	1aad      	subeq	r5, r5, r2
 8020a7e:	68a3      	ldr	r3, [r4, #8]
 8020a80:	6922      	ldr	r2, [r4, #16]
 8020a82:	bf0c      	ite	eq
 8020a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020a88:	2500      	movne	r5, #0
 8020a8a:	4293      	cmp	r3, r2
 8020a8c:	bfc4      	itt	gt
 8020a8e:	1a9b      	subgt	r3, r3, r2
 8020a90:	18ed      	addgt	r5, r5, r3
 8020a92:	2600      	movs	r6, #0
 8020a94:	341a      	adds	r4, #26
 8020a96:	42b5      	cmp	r5, r6
 8020a98:	d11a      	bne.n	8020ad0 <_printf_common+0xc8>
 8020a9a:	2000      	movs	r0, #0
 8020a9c:	e008      	b.n	8020ab0 <_printf_common+0xa8>
 8020a9e:	2301      	movs	r3, #1
 8020aa0:	4652      	mov	r2, sl
 8020aa2:	4649      	mov	r1, r9
 8020aa4:	4638      	mov	r0, r7
 8020aa6:	47c0      	blx	r8
 8020aa8:	3001      	adds	r0, #1
 8020aaa:	d103      	bne.n	8020ab4 <_printf_common+0xac>
 8020aac:	f04f 30ff 	mov.w	r0, #4294967295
 8020ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ab4:	3501      	adds	r5, #1
 8020ab6:	e7c6      	b.n	8020a46 <_printf_common+0x3e>
 8020ab8:	18e1      	adds	r1, r4, r3
 8020aba:	1c5a      	adds	r2, r3, #1
 8020abc:	2030      	movs	r0, #48	; 0x30
 8020abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020ac2:	4422      	add	r2, r4
 8020ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020acc:	3302      	adds	r3, #2
 8020ace:	e7c7      	b.n	8020a60 <_printf_common+0x58>
 8020ad0:	2301      	movs	r3, #1
 8020ad2:	4622      	mov	r2, r4
 8020ad4:	4649      	mov	r1, r9
 8020ad6:	4638      	mov	r0, r7
 8020ad8:	47c0      	blx	r8
 8020ada:	3001      	adds	r0, #1
 8020adc:	d0e6      	beq.n	8020aac <_printf_common+0xa4>
 8020ade:	3601      	adds	r6, #1
 8020ae0:	e7d9      	b.n	8020a96 <_printf_common+0x8e>
	...

08020ae4 <_printf_i>:
 8020ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020ae8:	460c      	mov	r4, r1
 8020aea:	4691      	mov	r9, r2
 8020aec:	7e27      	ldrb	r7, [r4, #24]
 8020aee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020af0:	2f78      	cmp	r7, #120	; 0x78
 8020af2:	4680      	mov	r8, r0
 8020af4:	469a      	mov	sl, r3
 8020af6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020afa:	d807      	bhi.n	8020b0c <_printf_i+0x28>
 8020afc:	2f62      	cmp	r7, #98	; 0x62
 8020afe:	d80a      	bhi.n	8020b16 <_printf_i+0x32>
 8020b00:	2f00      	cmp	r7, #0
 8020b02:	f000 80d8 	beq.w	8020cb6 <_printf_i+0x1d2>
 8020b06:	2f58      	cmp	r7, #88	; 0x58
 8020b08:	f000 80a3 	beq.w	8020c52 <_printf_i+0x16e>
 8020b0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020b14:	e03a      	b.n	8020b8c <_printf_i+0xa8>
 8020b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020b1a:	2b15      	cmp	r3, #21
 8020b1c:	d8f6      	bhi.n	8020b0c <_printf_i+0x28>
 8020b1e:	a001      	add	r0, pc, #4	; (adr r0, 8020b24 <_printf_i+0x40>)
 8020b20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020b24:	08020b7d 	.word	0x08020b7d
 8020b28:	08020b91 	.word	0x08020b91
 8020b2c:	08020b0d 	.word	0x08020b0d
 8020b30:	08020b0d 	.word	0x08020b0d
 8020b34:	08020b0d 	.word	0x08020b0d
 8020b38:	08020b0d 	.word	0x08020b0d
 8020b3c:	08020b91 	.word	0x08020b91
 8020b40:	08020b0d 	.word	0x08020b0d
 8020b44:	08020b0d 	.word	0x08020b0d
 8020b48:	08020b0d 	.word	0x08020b0d
 8020b4c:	08020b0d 	.word	0x08020b0d
 8020b50:	08020c9d 	.word	0x08020c9d
 8020b54:	08020bc1 	.word	0x08020bc1
 8020b58:	08020c7f 	.word	0x08020c7f
 8020b5c:	08020b0d 	.word	0x08020b0d
 8020b60:	08020b0d 	.word	0x08020b0d
 8020b64:	08020cbf 	.word	0x08020cbf
 8020b68:	08020b0d 	.word	0x08020b0d
 8020b6c:	08020bc1 	.word	0x08020bc1
 8020b70:	08020b0d 	.word	0x08020b0d
 8020b74:	08020b0d 	.word	0x08020b0d
 8020b78:	08020c87 	.word	0x08020c87
 8020b7c:	680b      	ldr	r3, [r1, #0]
 8020b7e:	1d1a      	adds	r2, r3, #4
 8020b80:	681b      	ldr	r3, [r3, #0]
 8020b82:	600a      	str	r2, [r1, #0]
 8020b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020b8c:	2301      	movs	r3, #1
 8020b8e:	e0a3      	b.n	8020cd8 <_printf_i+0x1f4>
 8020b90:	6825      	ldr	r5, [r4, #0]
 8020b92:	6808      	ldr	r0, [r1, #0]
 8020b94:	062e      	lsls	r6, r5, #24
 8020b96:	f100 0304 	add.w	r3, r0, #4
 8020b9a:	d50a      	bpl.n	8020bb2 <_printf_i+0xce>
 8020b9c:	6805      	ldr	r5, [r0, #0]
 8020b9e:	600b      	str	r3, [r1, #0]
 8020ba0:	2d00      	cmp	r5, #0
 8020ba2:	da03      	bge.n	8020bac <_printf_i+0xc8>
 8020ba4:	232d      	movs	r3, #45	; 0x2d
 8020ba6:	426d      	negs	r5, r5
 8020ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020bac:	485e      	ldr	r0, [pc, #376]	; (8020d28 <_printf_i+0x244>)
 8020bae:	230a      	movs	r3, #10
 8020bb0:	e019      	b.n	8020be6 <_printf_i+0x102>
 8020bb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020bb6:	6805      	ldr	r5, [r0, #0]
 8020bb8:	600b      	str	r3, [r1, #0]
 8020bba:	bf18      	it	ne
 8020bbc:	b22d      	sxthne	r5, r5
 8020bbe:	e7ef      	b.n	8020ba0 <_printf_i+0xbc>
 8020bc0:	680b      	ldr	r3, [r1, #0]
 8020bc2:	6825      	ldr	r5, [r4, #0]
 8020bc4:	1d18      	adds	r0, r3, #4
 8020bc6:	6008      	str	r0, [r1, #0]
 8020bc8:	0628      	lsls	r0, r5, #24
 8020bca:	d501      	bpl.n	8020bd0 <_printf_i+0xec>
 8020bcc:	681d      	ldr	r5, [r3, #0]
 8020bce:	e002      	b.n	8020bd6 <_printf_i+0xf2>
 8020bd0:	0669      	lsls	r1, r5, #25
 8020bd2:	d5fb      	bpl.n	8020bcc <_printf_i+0xe8>
 8020bd4:	881d      	ldrh	r5, [r3, #0]
 8020bd6:	4854      	ldr	r0, [pc, #336]	; (8020d28 <_printf_i+0x244>)
 8020bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8020bda:	bf0c      	ite	eq
 8020bdc:	2308      	moveq	r3, #8
 8020bde:	230a      	movne	r3, #10
 8020be0:	2100      	movs	r1, #0
 8020be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020be6:	6866      	ldr	r6, [r4, #4]
 8020be8:	60a6      	str	r6, [r4, #8]
 8020bea:	2e00      	cmp	r6, #0
 8020bec:	bfa2      	ittt	ge
 8020bee:	6821      	ldrge	r1, [r4, #0]
 8020bf0:	f021 0104 	bicge.w	r1, r1, #4
 8020bf4:	6021      	strge	r1, [r4, #0]
 8020bf6:	b90d      	cbnz	r5, 8020bfc <_printf_i+0x118>
 8020bf8:	2e00      	cmp	r6, #0
 8020bfa:	d04d      	beq.n	8020c98 <_printf_i+0x1b4>
 8020bfc:	4616      	mov	r6, r2
 8020bfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8020c02:	fb03 5711 	mls	r7, r3, r1, r5
 8020c06:	5dc7      	ldrb	r7, [r0, r7]
 8020c08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020c0c:	462f      	mov	r7, r5
 8020c0e:	42bb      	cmp	r3, r7
 8020c10:	460d      	mov	r5, r1
 8020c12:	d9f4      	bls.n	8020bfe <_printf_i+0x11a>
 8020c14:	2b08      	cmp	r3, #8
 8020c16:	d10b      	bne.n	8020c30 <_printf_i+0x14c>
 8020c18:	6823      	ldr	r3, [r4, #0]
 8020c1a:	07df      	lsls	r7, r3, #31
 8020c1c:	d508      	bpl.n	8020c30 <_printf_i+0x14c>
 8020c1e:	6923      	ldr	r3, [r4, #16]
 8020c20:	6861      	ldr	r1, [r4, #4]
 8020c22:	4299      	cmp	r1, r3
 8020c24:	bfde      	ittt	le
 8020c26:	2330      	movle	r3, #48	; 0x30
 8020c28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020c2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020c30:	1b92      	subs	r2, r2, r6
 8020c32:	6122      	str	r2, [r4, #16]
 8020c34:	f8cd a000 	str.w	sl, [sp]
 8020c38:	464b      	mov	r3, r9
 8020c3a:	aa03      	add	r2, sp, #12
 8020c3c:	4621      	mov	r1, r4
 8020c3e:	4640      	mov	r0, r8
 8020c40:	f7ff fee2 	bl	8020a08 <_printf_common>
 8020c44:	3001      	adds	r0, #1
 8020c46:	d14c      	bne.n	8020ce2 <_printf_i+0x1fe>
 8020c48:	f04f 30ff 	mov.w	r0, #4294967295
 8020c4c:	b004      	add	sp, #16
 8020c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c52:	4835      	ldr	r0, [pc, #212]	; (8020d28 <_printf_i+0x244>)
 8020c54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020c58:	6823      	ldr	r3, [r4, #0]
 8020c5a:	680e      	ldr	r6, [r1, #0]
 8020c5c:	061f      	lsls	r7, r3, #24
 8020c5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8020c62:	600e      	str	r6, [r1, #0]
 8020c64:	d514      	bpl.n	8020c90 <_printf_i+0x1ac>
 8020c66:	07d9      	lsls	r1, r3, #31
 8020c68:	bf44      	itt	mi
 8020c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8020c6e:	6023      	strmi	r3, [r4, #0]
 8020c70:	b91d      	cbnz	r5, 8020c7a <_printf_i+0x196>
 8020c72:	6823      	ldr	r3, [r4, #0]
 8020c74:	f023 0320 	bic.w	r3, r3, #32
 8020c78:	6023      	str	r3, [r4, #0]
 8020c7a:	2310      	movs	r3, #16
 8020c7c:	e7b0      	b.n	8020be0 <_printf_i+0xfc>
 8020c7e:	6823      	ldr	r3, [r4, #0]
 8020c80:	f043 0320 	orr.w	r3, r3, #32
 8020c84:	6023      	str	r3, [r4, #0]
 8020c86:	2378      	movs	r3, #120	; 0x78
 8020c88:	4828      	ldr	r0, [pc, #160]	; (8020d2c <_printf_i+0x248>)
 8020c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020c8e:	e7e3      	b.n	8020c58 <_printf_i+0x174>
 8020c90:	065e      	lsls	r6, r3, #25
 8020c92:	bf48      	it	mi
 8020c94:	b2ad      	uxthmi	r5, r5
 8020c96:	e7e6      	b.n	8020c66 <_printf_i+0x182>
 8020c98:	4616      	mov	r6, r2
 8020c9a:	e7bb      	b.n	8020c14 <_printf_i+0x130>
 8020c9c:	680b      	ldr	r3, [r1, #0]
 8020c9e:	6826      	ldr	r6, [r4, #0]
 8020ca0:	6960      	ldr	r0, [r4, #20]
 8020ca2:	1d1d      	adds	r5, r3, #4
 8020ca4:	600d      	str	r5, [r1, #0]
 8020ca6:	0635      	lsls	r5, r6, #24
 8020ca8:	681b      	ldr	r3, [r3, #0]
 8020caa:	d501      	bpl.n	8020cb0 <_printf_i+0x1cc>
 8020cac:	6018      	str	r0, [r3, #0]
 8020cae:	e002      	b.n	8020cb6 <_printf_i+0x1d2>
 8020cb0:	0671      	lsls	r1, r6, #25
 8020cb2:	d5fb      	bpl.n	8020cac <_printf_i+0x1c8>
 8020cb4:	8018      	strh	r0, [r3, #0]
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	6123      	str	r3, [r4, #16]
 8020cba:	4616      	mov	r6, r2
 8020cbc:	e7ba      	b.n	8020c34 <_printf_i+0x150>
 8020cbe:	680b      	ldr	r3, [r1, #0]
 8020cc0:	1d1a      	adds	r2, r3, #4
 8020cc2:	600a      	str	r2, [r1, #0]
 8020cc4:	681e      	ldr	r6, [r3, #0]
 8020cc6:	6862      	ldr	r2, [r4, #4]
 8020cc8:	2100      	movs	r1, #0
 8020cca:	4630      	mov	r0, r6
 8020ccc:	f7df fa98 	bl	8000200 <memchr>
 8020cd0:	b108      	cbz	r0, 8020cd6 <_printf_i+0x1f2>
 8020cd2:	1b80      	subs	r0, r0, r6
 8020cd4:	6060      	str	r0, [r4, #4]
 8020cd6:	6863      	ldr	r3, [r4, #4]
 8020cd8:	6123      	str	r3, [r4, #16]
 8020cda:	2300      	movs	r3, #0
 8020cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020ce0:	e7a8      	b.n	8020c34 <_printf_i+0x150>
 8020ce2:	6923      	ldr	r3, [r4, #16]
 8020ce4:	4632      	mov	r2, r6
 8020ce6:	4649      	mov	r1, r9
 8020ce8:	4640      	mov	r0, r8
 8020cea:	47d0      	blx	sl
 8020cec:	3001      	adds	r0, #1
 8020cee:	d0ab      	beq.n	8020c48 <_printf_i+0x164>
 8020cf0:	6823      	ldr	r3, [r4, #0]
 8020cf2:	079b      	lsls	r3, r3, #30
 8020cf4:	d413      	bmi.n	8020d1e <_printf_i+0x23a>
 8020cf6:	68e0      	ldr	r0, [r4, #12]
 8020cf8:	9b03      	ldr	r3, [sp, #12]
 8020cfa:	4298      	cmp	r0, r3
 8020cfc:	bfb8      	it	lt
 8020cfe:	4618      	movlt	r0, r3
 8020d00:	e7a4      	b.n	8020c4c <_printf_i+0x168>
 8020d02:	2301      	movs	r3, #1
 8020d04:	4632      	mov	r2, r6
 8020d06:	4649      	mov	r1, r9
 8020d08:	4640      	mov	r0, r8
 8020d0a:	47d0      	blx	sl
 8020d0c:	3001      	adds	r0, #1
 8020d0e:	d09b      	beq.n	8020c48 <_printf_i+0x164>
 8020d10:	3501      	adds	r5, #1
 8020d12:	68e3      	ldr	r3, [r4, #12]
 8020d14:	9903      	ldr	r1, [sp, #12]
 8020d16:	1a5b      	subs	r3, r3, r1
 8020d18:	42ab      	cmp	r3, r5
 8020d1a:	dcf2      	bgt.n	8020d02 <_printf_i+0x21e>
 8020d1c:	e7eb      	b.n	8020cf6 <_printf_i+0x212>
 8020d1e:	2500      	movs	r5, #0
 8020d20:	f104 0619 	add.w	r6, r4, #25
 8020d24:	e7f5      	b.n	8020d12 <_printf_i+0x22e>
 8020d26:	bf00      	nop
 8020d28:	0807b3b1 	.word	0x0807b3b1
 8020d2c:	0807b3c2 	.word	0x0807b3c2

08020d30 <_scanf_chars>:
 8020d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020d34:	4615      	mov	r5, r2
 8020d36:	688a      	ldr	r2, [r1, #8]
 8020d38:	4680      	mov	r8, r0
 8020d3a:	460c      	mov	r4, r1
 8020d3c:	b932      	cbnz	r2, 8020d4c <_scanf_chars+0x1c>
 8020d3e:	698a      	ldr	r2, [r1, #24]
 8020d40:	2a00      	cmp	r2, #0
 8020d42:	bf0c      	ite	eq
 8020d44:	2201      	moveq	r2, #1
 8020d46:	f04f 32ff 	movne.w	r2, #4294967295
 8020d4a:	608a      	str	r2, [r1, #8]
 8020d4c:	6822      	ldr	r2, [r4, #0]
 8020d4e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020ddc <_scanf_chars+0xac>
 8020d52:	06d1      	lsls	r1, r2, #27
 8020d54:	bf5f      	itttt	pl
 8020d56:	681a      	ldrpl	r2, [r3, #0]
 8020d58:	1d11      	addpl	r1, r2, #4
 8020d5a:	6019      	strpl	r1, [r3, #0]
 8020d5c:	6816      	ldrpl	r6, [r2, #0]
 8020d5e:	2700      	movs	r7, #0
 8020d60:	69a0      	ldr	r0, [r4, #24]
 8020d62:	b188      	cbz	r0, 8020d88 <_scanf_chars+0x58>
 8020d64:	2801      	cmp	r0, #1
 8020d66:	d107      	bne.n	8020d78 <_scanf_chars+0x48>
 8020d68:	682b      	ldr	r3, [r5, #0]
 8020d6a:	781a      	ldrb	r2, [r3, #0]
 8020d6c:	6963      	ldr	r3, [r4, #20]
 8020d6e:	5c9b      	ldrb	r3, [r3, r2]
 8020d70:	b953      	cbnz	r3, 8020d88 <_scanf_chars+0x58>
 8020d72:	bb27      	cbnz	r7, 8020dbe <_scanf_chars+0x8e>
 8020d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d78:	2802      	cmp	r0, #2
 8020d7a:	d120      	bne.n	8020dbe <_scanf_chars+0x8e>
 8020d7c:	682b      	ldr	r3, [r5, #0]
 8020d7e:	781b      	ldrb	r3, [r3, #0]
 8020d80:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020d84:	071b      	lsls	r3, r3, #28
 8020d86:	d41a      	bmi.n	8020dbe <_scanf_chars+0x8e>
 8020d88:	6823      	ldr	r3, [r4, #0]
 8020d8a:	06da      	lsls	r2, r3, #27
 8020d8c:	bf5e      	ittt	pl
 8020d8e:	682b      	ldrpl	r3, [r5, #0]
 8020d90:	781b      	ldrbpl	r3, [r3, #0]
 8020d92:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020d96:	682a      	ldr	r2, [r5, #0]
 8020d98:	686b      	ldr	r3, [r5, #4]
 8020d9a:	3201      	adds	r2, #1
 8020d9c:	602a      	str	r2, [r5, #0]
 8020d9e:	68a2      	ldr	r2, [r4, #8]
 8020da0:	3b01      	subs	r3, #1
 8020da2:	3a01      	subs	r2, #1
 8020da4:	606b      	str	r3, [r5, #4]
 8020da6:	3701      	adds	r7, #1
 8020da8:	60a2      	str	r2, [r4, #8]
 8020daa:	b142      	cbz	r2, 8020dbe <_scanf_chars+0x8e>
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	dcd7      	bgt.n	8020d60 <_scanf_chars+0x30>
 8020db0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020db4:	4629      	mov	r1, r5
 8020db6:	4640      	mov	r0, r8
 8020db8:	4798      	blx	r3
 8020dba:	2800      	cmp	r0, #0
 8020dbc:	d0d0      	beq.n	8020d60 <_scanf_chars+0x30>
 8020dbe:	6823      	ldr	r3, [r4, #0]
 8020dc0:	f013 0310 	ands.w	r3, r3, #16
 8020dc4:	d105      	bne.n	8020dd2 <_scanf_chars+0xa2>
 8020dc6:	68e2      	ldr	r2, [r4, #12]
 8020dc8:	3201      	adds	r2, #1
 8020dca:	60e2      	str	r2, [r4, #12]
 8020dcc:	69a2      	ldr	r2, [r4, #24]
 8020dce:	b102      	cbz	r2, 8020dd2 <_scanf_chars+0xa2>
 8020dd0:	7033      	strb	r3, [r6, #0]
 8020dd2:	6923      	ldr	r3, [r4, #16]
 8020dd4:	441f      	add	r7, r3
 8020dd6:	6127      	str	r7, [r4, #16]
 8020dd8:	2000      	movs	r0, #0
 8020dda:	e7cb      	b.n	8020d74 <_scanf_chars+0x44>
 8020ddc:	0807b185 	.word	0x0807b185

08020de0 <_scanf_i>:
 8020de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020de4:	4698      	mov	r8, r3
 8020de6:	4b74      	ldr	r3, [pc, #464]	; (8020fb8 <_scanf_i+0x1d8>)
 8020de8:	460c      	mov	r4, r1
 8020dea:	4682      	mov	sl, r0
 8020dec:	4616      	mov	r6, r2
 8020dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020df2:	b087      	sub	sp, #28
 8020df4:	ab03      	add	r3, sp, #12
 8020df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020dfa:	4b70      	ldr	r3, [pc, #448]	; (8020fbc <_scanf_i+0x1dc>)
 8020dfc:	69a1      	ldr	r1, [r4, #24]
 8020dfe:	4a70      	ldr	r2, [pc, #448]	; (8020fc0 <_scanf_i+0x1e0>)
 8020e00:	2903      	cmp	r1, #3
 8020e02:	bf18      	it	ne
 8020e04:	461a      	movne	r2, r3
 8020e06:	68a3      	ldr	r3, [r4, #8]
 8020e08:	9201      	str	r2, [sp, #4]
 8020e0a:	1e5a      	subs	r2, r3, #1
 8020e0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020e10:	bf88      	it	hi
 8020e12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020e16:	4627      	mov	r7, r4
 8020e18:	bf82      	ittt	hi
 8020e1a:	eb03 0905 	addhi.w	r9, r3, r5
 8020e1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020e22:	60a3      	strhi	r3, [r4, #8]
 8020e24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020e28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020e2c:	bf98      	it	ls
 8020e2e:	f04f 0900 	movls.w	r9, #0
 8020e32:	6023      	str	r3, [r4, #0]
 8020e34:	463d      	mov	r5, r7
 8020e36:	f04f 0b00 	mov.w	fp, #0
 8020e3a:	6831      	ldr	r1, [r6, #0]
 8020e3c:	ab03      	add	r3, sp, #12
 8020e3e:	7809      	ldrb	r1, [r1, #0]
 8020e40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020e44:	2202      	movs	r2, #2
 8020e46:	f7df f9db 	bl	8000200 <memchr>
 8020e4a:	b328      	cbz	r0, 8020e98 <_scanf_i+0xb8>
 8020e4c:	f1bb 0f01 	cmp.w	fp, #1
 8020e50:	d159      	bne.n	8020f06 <_scanf_i+0x126>
 8020e52:	6862      	ldr	r2, [r4, #4]
 8020e54:	b92a      	cbnz	r2, 8020e62 <_scanf_i+0x82>
 8020e56:	6822      	ldr	r2, [r4, #0]
 8020e58:	2308      	movs	r3, #8
 8020e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020e5e:	6063      	str	r3, [r4, #4]
 8020e60:	6022      	str	r2, [r4, #0]
 8020e62:	6822      	ldr	r2, [r4, #0]
 8020e64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020e68:	6022      	str	r2, [r4, #0]
 8020e6a:	68a2      	ldr	r2, [r4, #8]
 8020e6c:	1e51      	subs	r1, r2, #1
 8020e6e:	60a1      	str	r1, [r4, #8]
 8020e70:	b192      	cbz	r2, 8020e98 <_scanf_i+0xb8>
 8020e72:	6832      	ldr	r2, [r6, #0]
 8020e74:	1c51      	adds	r1, r2, #1
 8020e76:	6031      	str	r1, [r6, #0]
 8020e78:	7812      	ldrb	r2, [r2, #0]
 8020e7a:	f805 2b01 	strb.w	r2, [r5], #1
 8020e7e:	6872      	ldr	r2, [r6, #4]
 8020e80:	3a01      	subs	r2, #1
 8020e82:	2a00      	cmp	r2, #0
 8020e84:	6072      	str	r2, [r6, #4]
 8020e86:	dc07      	bgt.n	8020e98 <_scanf_i+0xb8>
 8020e88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020e8c:	4631      	mov	r1, r6
 8020e8e:	4650      	mov	r0, sl
 8020e90:	4790      	blx	r2
 8020e92:	2800      	cmp	r0, #0
 8020e94:	f040 8085 	bne.w	8020fa2 <_scanf_i+0x1c2>
 8020e98:	f10b 0b01 	add.w	fp, fp, #1
 8020e9c:	f1bb 0f03 	cmp.w	fp, #3
 8020ea0:	d1cb      	bne.n	8020e3a <_scanf_i+0x5a>
 8020ea2:	6863      	ldr	r3, [r4, #4]
 8020ea4:	b90b      	cbnz	r3, 8020eaa <_scanf_i+0xca>
 8020ea6:	230a      	movs	r3, #10
 8020ea8:	6063      	str	r3, [r4, #4]
 8020eaa:	6863      	ldr	r3, [r4, #4]
 8020eac:	4945      	ldr	r1, [pc, #276]	; (8020fc4 <_scanf_i+0x1e4>)
 8020eae:	6960      	ldr	r0, [r4, #20]
 8020eb0:	1ac9      	subs	r1, r1, r3
 8020eb2:	f000 f8ab 	bl	802100c <__sccl>
 8020eb6:	f04f 0b00 	mov.w	fp, #0
 8020eba:	68a3      	ldr	r3, [r4, #8]
 8020ebc:	6822      	ldr	r2, [r4, #0]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d03d      	beq.n	8020f3e <_scanf_i+0x15e>
 8020ec2:	6831      	ldr	r1, [r6, #0]
 8020ec4:	6960      	ldr	r0, [r4, #20]
 8020ec6:	f891 c000 	ldrb.w	ip, [r1]
 8020eca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020ece:	2800      	cmp	r0, #0
 8020ed0:	d035      	beq.n	8020f3e <_scanf_i+0x15e>
 8020ed2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020ed6:	d124      	bne.n	8020f22 <_scanf_i+0x142>
 8020ed8:	0510      	lsls	r0, r2, #20
 8020eda:	d522      	bpl.n	8020f22 <_scanf_i+0x142>
 8020edc:	f10b 0b01 	add.w	fp, fp, #1
 8020ee0:	f1b9 0f00 	cmp.w	r9, #0
 8020ee4:	d003      	beq.n	8020eee <_scanf_i+0x10e>
 8020ee6:	3301      	adds	r3, #1
 8020ee8:	f109 39ff 	add.w	r9, r9, #4294967295
 8020eec:	60a3      	str	r3, [r4, #8]
 8020eee:	6873      	ldr	r3, [r6, #4]
 8020ef0:	3b01      	subs	r3, #1
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	6073      	str	r3, [r6, #4]
 8020ef6:	dd1b      	ble.n	8020f30 <_scanf_i+0x150>
 8020ef8:	6833      	ldr	r3, [r6, #0]
 8020efa:	3301      	adds	r3, #1
 8020efc:	6033      	str	r3, [r6, #0]
 8020efe:	68a3      	ldr	r3, [r4, #8]
 8020f00:	3b01      	subs	r3, #1
 8020f02:	60a3      	str	r3, [r4, #8]
 8020f04:	e7d9      	b.n	8020eba <_scanf_i+0xda>
 8020f06:	f1bb 0f02 	cmp.w	fp, #2
 8020f0a:	d1ae      	bne.n	8020e6a <_scanf_i+0x8a>
 8020f0c:	6822      	ldr	r2, [r4, #0]
 8020f0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020f12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020f16:	d1bf      	bne.n	8020e98 <_scanf_i+0xb8>
 8020f18:	2310      	movs	r3, #16
 8020f1a:	6063      	str	r3, [r4, #4]
 8020f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020f20:	e7a2      	b.n	8020e68 <_scanf_i+0x88>
 8020f22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020f26:	6022      	str	r2, [r4, #0]
 8020f28:	780b      	ldrb	r3, [r1, #0]
 8020f2a:	f805 3b01 	strb.w	r3, [r5], #1
 8020f2e:	e7de      	b.n	8020eee <_scanf_i+0x10e>
 8020f30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020f34:	4631      	mov	r1, r6
 8020f36:	4650      	mov	r0, sl
 8020f38:	4798      	blx	r3
 8020f3a:	2800      	cmp	r0, #0
 8020f3c:	d0df      	beq.n	8020efe <_scanf_i+0x11e>
 8020f3e:	6823      	ldr	r3, [r4, #0]
 8020f40:	05d9      	lsls	r1, r3, #23
 8020f42:	d50d      	bpl.n	8020f60 <_scanf_i+0x180>
 8020f44:	42bd      	cmp	r5, r7
 8020f46:	d909      	bls.n	8020f5c <_scanf_i+0x17c>
 8020f48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020f50:	4632      	mov	r2, r6
 8020f52:	4650      	mov	r0, sl
 8020f54:	4798      	blx	r3
 8020f56:	f105 39ff 	add.w	r9, r5, #4294967295
 8020f5a:	464d      	mov	r5, r9
 8020f5c:	42bd      	cmp	r5, r7
 8020f5e:	d028      	beq.n	8020fb2 <_scanf_i+0x1d2>
 8020f60:	6822      	ldr	r2, [r4, #0]
 8020f62:	f012 0210 	ands.w	r2, r2, #16
 8020f66:	d113      	bne.n	8020f90 <_scanf_i+0x1b0>
 8020f68:	702a      	strb	r2, [r5, #0]
 8020f6a:	6863      	ldr	r3, [r4, #4]
 8020f6c:	9e01      	ldr	r6, [sp, #4]
 8020f6e:	4639      	mov	r1, r7
 8020f70:	4650      	mov	r0, sl
 8020f72:	47b0      	blx	r6
 8020f74:	f8d8 3000 	ldr.w	r3, [r8]
 8020f78:	6821      	ldr	r1, [r4, #0]
 8020f7a:	1d1a      	adds	r2, r3, #4
 8020f7c:	f8c8 2000 	str.w	r2, [r8]
 8020f80:	f011 0f20 	tst.w	r1, #32
 8020f84:	681b      	ldr	r3, [r3, #0]
 8020f86:	d00f      	beq.n	8020fa8 <_scanf_i+0x1c8>
 8020f88:	6018      	str	r0, [r3, #0]
 8020f8a:	68e3      	ldr	r3, [r4, #12]
 8020f8c:	3301      	adds	r3, #1
 8020f8e:	60e3      	str	r3, [r4, #12]
 8020f90:	1bed      	subs	r5, r5, r7
 8020f92:	44ab      	add	fp, r5
 8020f94:	6925      	ldr	r5, [r4, #16]
 8020f96:	445d      	add	r5, fp
 8020f98:	6125      	str	r5, [r4, #16]
 8020f9a:	2000      	movs	r0, #0
 8020f9c:	b007      	add	sp, #28
 8020f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fa2:	f04f 0b00 	mov.w	fp, #0
 8020fa6:	e7ca      	b.n	8020f3e <_scanf_i+0x15e>
 8020fa8:	07ca      	lsls	r2, r1, #31
 8020faa:	bf4c      	ite	mi
 8020fac:	8018      	strhmi	r0, [r3, #0]
 8020fae:	6018      	strpl	r0, [r3, #0]
 8020fb0:	e7eb      	b.n	8020f8a <_scanf_i+0x1aa>
 8020fb2:	2001      	movs	r0, #1
 8020fb4:	e7f2      	b.n	8020f9c <_scanf_i+0x1bc>
 8020fb6:	bf00      	nop
 8020fb8:	08024328 	.word	0x08024328
 8020fbc:	08021195 	.word	0x08021195
 8020fc0:	0801f8b9 	.word	0x0801f8b9
 8020fc4:	0807b3ec 	.word	0x0807b3ec

08020fc8 <_read_r>:
 8020fc8:	b538      	push	{r3, r4, r5, lr}
 8020fca:	4d07      	ldr	r5, [pc, #28]	; (8020fe8 <_read_r+0x20>)
 8020fcc:	4604      	mov	r4, r0
 8020fce:	4608      	mov	r0, r1
 8020fd0:	4611      	mov	r1, r2
 8020fd2:	2200      	movs	r2, #0
 8020fd4:	602a      	str	r2, [r5, #0]
 8020fd6:	461a      	mov	r2, r3
 8020fd8:	f7e0 fefc 	bl	8001dd4 <_read>
 8020fdc:	1c43      	adds	r3, r0, #1
 8020fde:	d102      	bne.n	8020fe6 <_read_r+0x1e>
 8020fe0:	682b      	ldr	r3, [r5, #0]
 8020fe2:	b103      	cbz	r3, 8020fe6 <_read_r+0x1e>
 8020fe4:	6023      	str	r3, [r4, #0]
 8020fe6:	bd38      	pop	{r3, r4, r5, pc}
 8020fe8:	20014bd0 	.word	0x20014bd0

08020fec <_sbrk_r>:
 8020fec:	b538      	push	{r3, r4, r5, lr}
 8020fee:	4d06      	ldr	r5, [pc, #24]	; (8021008 <_sbrk_r+0x1c>)
 8020ff0:	2300      	movs	r3, #0
 8020ff2:	4604      	mov	r4, r0
 8020ff4:	4608      	mov	r0, r1
 8020ff6:	602b      	str	r3, [r5, #0]
 8020ff8:	f7e0 ff5a 	bl	8001eb0 <_sbrk>
 8020ffc:	1c43      	adds	r3, r0, #1
 8020ffe:	d102      	bne.n	8021006 <_sbrk_r+0x1a>
 8021000:	682b      	ldr	r3, [r5, #0]
 8021002:	b103      	cbz	r3, 8021006 <_sbrk_r+0x1a>
 8021004:	6023      	str	r3, [r4, #0]
 8021006:	bd38      	pop	{r3, r4, r5, pc}
 8021008:	20014bd0 	.word	0x20014bd0

0802100c <__sccl>:
 802100c:	b570      	push	{r4, r5, r6, lr}
 802100e:	780b      	ldrb	r3, [r1, #0]
 8021010:	4604      	mov	r4, r0
 8021012:	2b5e      	cmp	r3, #94	; 0x5e
 8021014:	bf0b      	itete	eq
 8021016:	784b      	ldrbeq	r3, [r1, #1]
 8021018:	1c48      	addne	r0, r1, #1
 802101a:	1c88      	addeq	r0, r1, #2
 802101c:	2200      	movne	r2, #0
 802101e:	bf08      	it	eq
 8021020:	2201      	moveq	r2, #1
 8021022:	1e61      	subs	r1, r4, #1
 8021024:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021028:	f801 2f01 	strb.w	r2, [r1, #1]!
 802102c:	42a9      	cmp	r1, r5
 802102e:	d1fb      	bne.n	8021028 <__sccl+0x1c>
 8021030:	b90b      	cbnz	r3, 8021036 <__sccl+0x2a>
 8021032:	3801      	subs	r0, #1
 8021034:	bd70      	pop	{r4, r5, r6, pc}
 8021036:	f082 0101 	eor.w	r1, r2, #1
 802103a:	54e1      	strb	r1, [r4, r3]
 802103c:	1c42      	adds	r2, r0, #1
 802103e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8021042:	2d2d      	cmp	r5, #45	; 0x2d
 8021044:	f102 36ff 	add.w	r6, r2, #4294967295
 8021048:	4610      	mov	r0, r2
 802104a:	d006      	beq.n	802105a <__sccl+0x4e>
 802104c:	2d5d      	cmp	r5, #93	; 0x5d
 802104e:	d0f1      	beq.n	8021034 <__sccl+0x28>
 8021050:	b90d      	cbnz	r5, 8021056 <__sccl+0x4a>
 8021052:	4630      	mov	r0, r6
 8021054:	e7ee      	b.n	8021034 <__sccl+0x28>
 8021056:	462b      	mov	r3, r5
 8021058:	e7ef      	b.n	802103a <__sccl+0x2e>
 802105a:	7816      	ldrb	r6, [r2, #0]
 802105c:	2e5d      	cmp	r6, #93	; 0x5d
 802105e:	d0fa      	beq.n	8021056 <__sccl+0x4a>
 8021060:	42b3      	cmp	r3, r6
 8021062:	dcf8      	bgt.n	8021056 <__sccl+0x4a>
 8021064:	4618      	mov	r0, r3
 8021066:	3001      	adds	r0, #1
 8021068:	4286      	cmp	r6, r0
 802106a:	5421      	strb	r1, [r4, r0]
 802106c:	dcfb      	bgt.n	8021066 <__sccl+0x5a>
 802106e:	43d8      	mvns	r0, r3
 8021070:	4430      	add	r0, r6
 8021072:	1c5d      	adds	r5, r3, #1
 8021074:	42b3      	cmp	r3, r6
 8021076:	bfa8      	it	ge
 8021078:	2000      	movge	r0, #0
 802107a:	182b      	adds	r3, r5, r0
 802107c:	3202      	adds	r2, #2
 802107e:	e7de      	b.n	802103e <__sccl+0x32>

08021080 <strnlen>:
 8021080:	b510      	push	{r4, lr}
 8021082:	4602      	mov	r2, r0
 8021084:	4401      	add	r1, r0
 8021086:	428a      	cmp	r2, r1
 8021088:	4613      	mov	r3, r2
 802108a:	d101      	bne.n	8021090 <strnlen+0x10>
 802108c:	1a18      	subs	r0, r3, r0
 802108e:	bd10      	pop	{r4, pc}
 8021090:	781c      	ldrb	r4, [r3, #0]
 8021092:	3201      	adds	r2, #1
 8021094:	2c00      	cmp	r4, #0
 8021096:	d1f6      	bne.n	8021086 <strnlen+0x6>
 8021098:	e7f8      	b.n	802108c <strnlen+0xc>
	...

0802109c <_strtoul_l.isra.0>:
 802109c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80210a0:	4e3b      	ldr	r6, [pc, #236]	; (8021190 <_strtoul_l.isra.0+0xf4>)
 80210a2:	4686      	mov	lr, r0
 80210a4:	468c      	mov	ip, r1
 80210a6:	4660      	mov	r0, ip
 80210a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80210ac:	5da5      	ldrb	r5, [r4, r6]
 80210ae:	f015 0508 	ands.w	r5, r5, #8
 80210b2:	d1f8      	bne.n	80210a6 <_strtoul_l.isra.0+0xa>
 80210b4:	2c2d      	cmp	r4, #45	; 0x2d
 80210b6:	d134      	bne.n	8021122 <_strtoul_l.isra.0+0x86>
 80210b8:	f89c 4000 	ldrb.w	r4, [ip]
 80210bc:	f04f 0801 	mov.w	r8, #1
 80210c0:	f100 0c02 	add.w	ip, r0, #2
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d05e      	beq.n	8021186 <_strtoul_l.isra.0+0xea>
 80210c8:	2b10      	cmp	r3, #16
 80210ca:	d10c      	bne.n	80210e6 <_strtoul_l.isra.0+0x4a>
 80210cc:	2c30      	cmp	r4, #48	; 0x30
 80210ce:	d10a      	bne.n	80210e6 <_strtoul_l.isra.0+0x4a>
 80210d0:	f89c 0000 	ldrb.w	r0, [ip]
 80210d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80210d8:	2858      	cmp	r0, #88	; 0x58
 80210da:	d14f      	bne.n	802117c <_strtoul_l.isra.0+0xe0>
 80210dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80210e0:	2310      	movs	r3, #16
 80210e2:	f10c 0c02 	add.w	ip, ip, #2
 80210e6:	f04f 37ff 	mov.w	r7, #4294967295
 80210ea:	2500      	movs	r5, #0
 80210ec:	fbb7 f7f3 	udiv	r7, r7, r3
 80210f0:	fb03 f907 	mul.w	r9, r3, r7
 80210f4:	ea6f 0909 	mvn.w	r9, r9
 80210f8:	4628      	mov	r0, r5
 80210fa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80210fe:	2e09      	cmp	r6, #9
 8021100:	d818      	bhi.n	8021134 <_strtoul_l.isra.0+0x98>
 8021102:	4634      	mov	r4, r6
 8021104:	42a3      	cmp	r3, r4
 8021106:	dd24      	ble.n	8021152 <_strtoul_l.isra.0+0xb6>
 8021108:	2d00      	cmp	r5, #0
 802110a:	db1f      	blt.n	802114c <_strtoul_l.isra.0+0xb0>
 802110c:	4287      	cmp	r7, r0
 802110e:	d31d      	bcc.n	802114c <_strtoul_l.isra.0+0xb0>
 8021110:	d101      	bne.n	8021116 <_strtoul_l.isra.0+0x7a>
 8021112:	45a1      	cmp	r9, r4
 8021114:	db1a      	blt.n	802114c <_strtoul_l.isra.0+0xb0>
 8021116:	fb00 4003 	mla	r0, r0, r3, r4
 802111a:	2501      	movs	r5, #1
 802111c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021120:	e7eb      	b.n	80210fa <_strtoul_l.isra.0+0x5e>
 8021122:	2c2b      	cmp	r4, #43	; 0x2b
 8021124:	bf08      	it	eq
 8021126:	f89c 4000 	ldrbeq.w	r4, [ip]
 802112a:	46a8      	mov	r8, r5
 802112c:	bf08      	it	eq
 802112e:	f100 0c02 	addeq.w	ip, r0, #2
 8021132:	e7c7      	b.n	80210c4 <_strtoul_l.isra.0+0x28>
 8021134:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8021138:	2e19      	cmp	r6, #25
 802113a:	d801      	bhi.n	8021140 <_strtoul_l.isra.0+0xa4>
 802113c:	3c37      	subs	r4, #55	; 0x37
 802113e:	e7e1      	b.n	8021104 <_strtoul_l.isra.0+0x68>
 8021140:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8021144:	2e19      	cmp	r6, #25
 8021146:	d804      	bhi.n	8021152 <_strtoul_l.isra.0+0xb6>
 8021148:	3c57      	subs	r4, #87	; 0x57
 802114a:	e7db      	b.n	8021104 <_strtoul_l.isra.0+0x68>
 802114c:	f04f 35ff 	mov.w	r5, #4294967295
 8021150:	e7e4      	b.n	802111c <_strtoul_l.isra.0+0x80>
 8021152:	2d00      	cmp	r5, #0
 8021154:	da07      	bge.n	8021166 <_strtoul_l.isra.0+0xca>
 8021156:	2322      	movs	r3, #34	; 0x22
 8021158:	f8ce 3000 	str.w	r3, [lr]
 802115c:	f04f 30ff 	mov.w	r0, #4294967295
 8021160:	b942      	cbnz	r2, 8021174 <_strtoul_l.isra.0+0xd8>
 8021162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021166:	f1b8 0f00 	cmp.w	r8, #0
 802116a:	d000      	beq.n	802116e <_strtoul_l.isra.0+0xd2>
 802116c:	4240      	negs	r0, r0
 802116e:	2a00      	cmp	r2, #0
 8021170:	d0f7      	beq.n	8021162 <_strtoul_l.isra.0+0xc6>
 8021172:	b10d      	cbz	r5, 8021178 <_strtoul_l.isra.0+0xdc>
 8021174:	f10c 31ff 	add.w	r1, ip, #4294967295
 8021178:	6011      	str	r1, [r2, #0]
 802117a:	e7f2      	b.n	8021162 <_strtoul_l.isra.0+0xc6>
 802117c:	2430      	movs	r4, #48	; 0x30
 802117e:	2b00      	cmp	r3, #0
 8021180:	d1b1      	bne.n	80210e6 <_strtoul_l.isra.0+0x4a>
 8021182:	2308      	movs	r3, #8
 8021184:	e7af      	b.n	80210e6 <_strtoul_l.isra.0+0x4a>
 8021186:	2c30      	cmp	r4, #48	; 0x30
 8021188:	d0a2      	beq.n	80210d0 <_strtoul_l.isra.0+0x34>
 802118a:	230a      	movs	r3, #10
 802118c:	e7ab      	b.n	80210e6 <_strtoul_l.isra.0+0x4a>
 802118e:	bf00      	nop
 8021190:	0807b185 	.word	0x0807b185

08021194 <_strtoul_r>:
 8021194:	f7ff bf82 	b.w	802109c <_strtoul_l.isra.0>

08021198 <__submore>:
 8021198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802119c:	460c      	mov	r4, r1
 802119e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80211a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80211a4:	4299      	cmp	r1, r3
 80211a6:	d11d      	bne.n	80211e4 <__submore+0x4c>
 80211a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80211ac:	f7fe ff4a 	bl	8020044 <_malloc_r>
 80211b0:	b918      	cbnz	r0, 80211ba <__submore+0x22>
 80211b2:	f04f 30ff 	mov.w	r0, #4294967295
 80211b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80211be:	63a3      	str	r3, [r4, #56]	; 0x38
 80211c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80211c4:	6360      	str	r0, [r4, #52]	; 0x34
 80211c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80211ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80211ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80211d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80211d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80211da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80211de:	6020      	str	r0, [r4, #0]
 80211e0:	2000      	movs	r0, #0
 80211e2:	e7e8      	b.n	80211b6 <__submore+0x1e>
 80211e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80211e6:	0077      	lsls	r7, r6, #1
 80211e8:	463a      	mov	r2, r7
 80211ea:	f000 f845 	bl	8021278 <_realloc_r>
 80211ee:	4605      	mov	r5, r0
 80211f0:	2800      	cmp	r0, #0
 80211f2:	d0de      	beq.n	80211b2 <__submore+0x1a>
 80211f4:	eb00 0806 	add.w	r8, r0, r6
 80211f8:	4601      	mov	r1, r0
 80211fa:	4632      	mov	r2, r6
 80211fc:	4640      	mov	r0, r8
 80211fe:	f7fe f8bd 	bl	801f37c <memcpy>
 8021202:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8021206:	f8c4 8000 	str.w	r8, [r4]
 802120a:	e7e9      	b.n	80211e0 <__submore+0x48>

0802120c <abort>:
 802120c:	b508      	push	{r3, lr}
 802120e:	2006      	movs	r0, #6
 8021210:	f000 f880 	bl	8021314 <raise>
 8021214:	2001      	movs	r0, #1
 8021216:	f7e0 fdd3 	bl	8001dc0 <_exit>
	...

0802121c <_fstat_r>:
 802121c:	b538      	push	{r3, r4, r5, lr}
 802121e:	4d07      	ldr	r5, [pc, #28]	; (802123c <_fstat_r+0x20>)
 8021220:	2300      	movs	r3, #0
 8021222:	4604      	mov	r4, r0
 8021224:	4608      	mov	r0, r1
 8021226:	4611      	mov	r1, r2
 8021228:	602b      	str	r3, [r5, #0]
 802122a:	f7e0 fe18 	bl	8001e5e <_fstat>
 802122e:	1c43      	adds	r3, r0, #1
 8021230:	d102      	bne.n	8021238 <_fstat_r+0x1c>
 8021232:	682b      	ldr	r3, [r5, #0]
 8021234:	b103      	cbz	r3, 8021238 <_fstat_r+0x1c>
 8021236:	6023      	str	r3, [r4, #0]
 8021238:	bd38      	pop	{r3, r4, r5, pc}
 802123a:	bf00      	nop
 802123c:	20014bd0 	.word	0x20014bd0

08021240 <_isatty_r>:
 8021240:	b538      	push	{r3, r4, r5, lr}
 8021242:	4d06      	ldr	r5, [pc, #24]	; (802125c <_isatty_r+0x1c>)
 8021244:	2300      	movs	r3, #0
 8021246:	4604      	mov	r4, r0
 8021248:	4608      	mov	r0, r1
 802124a:	602b      	str	r3, [r5, #0]
 802124c:	f7e0 fe17 	bl	8001e7e <_isatty>
 8021250:	1c43      	adds	r3, r0, #1
 8021252:	d102      	bne.n	802125a <_isatty_r+0x1a>
 8021254:	682b      	ldr	r3, [r5, #0]
 8021256:	b103      	cbz	r3, 802125a <_isatty_r+0x1a>
 8021258:	6023      	str	r3, [r4, #0]
 802125a:	bd38      	pop	{r3, r4, r5, pc}
 802125c:	20014bd0 	.word	0x20014bd0

08021260 <__malloc_lock>:
 8021260:	4801      	ldr	r0, [pc, #4]	; (8021268 <__malloc_lock+0x8>)
 8021262:	f7fe be05 	b.w	801fe70 <__retarget_lock_acquire_recursive>
 8021266:	bf00      	nop
 8021268:	20014bdc 	.word	0x20014bdc

0802126c <__malloc_unlock>:
 802126c:	4801      	ldr	r0, [pc, #4]	; (8021274 <__malloc_unlock+0x8>)
 802126e:	f7fe be00 	b.w	801fe72 <__retarget_lock_release_recursive>
 8021272:	bf00      	nop
 8021274:	20014bdc 	.word	0x20014bdc

08021278 <_realloc_r>:
 8021278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802127a:	4607      	mov	r7, r0
 802127c:	4614      	mov	r4, r2
 802127e:	460e      	mov	r6, r1
 8021280:	b921      	cbnz	r1, 802128c <_realloc_r+0x14>
 8021282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021286:	4611      	mov	r1, r2
 8021288:	f7fe bedc 	b.w	8020044 <_malloc_r>
 802128c:	b922      	cbnz	r2, 8021298 <_realloc_r+0x20>
 802128e:	f7fe fe89 	bl	801ffa4 <_free_r>
 8021292:	4625      	mov	r5, r4
 8021294:	4628      	mov	r0, r5
 8021296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021298:	f000 f858 	bl	802134c <_malloc_usable_size_r>
 802129c:	42a0      	cmp	r0, r4
 802129e:	d20f      	bcs.n	80212c0 <_realloc_r+0x48>
 80212a0:	4621      	mov	r1, r4
 80212a2:	4638      	mov	r0, r7
 80212a4:	f7fe fece 	bl	8020044 <_malloc_r>
 80212a8:	4605      	mov	r5, r0
 80212aa:	2800      	cmp	r0, #0
 80212ac:	d0f2      	beq.n	8021294 <_realloc_r+0x1c>
 80212ae:	4631      	mov	r1, r6
 80212b0:	4622      	mov	r2, r4
 80212b2:	f7fe f863 	bl	801f37c <memcpy>
 80212b6:	4631      	mov	r1, r6
 80212b8:	4638      	mov	r0, r7
 80212ba:	f7fe fe73 	bl	801ffa4 <_free_r>
 80212be:	e7e9      	b.n	8021294 <_realloc_r+0x1c>
 80212c0:	4635      	mov	r5, r6
 80212c2:	e7e7      	b.n	8021294 <_realloc_r+0x1c>

080212c4 <_raise_r>:
 80212c4:	291f      	cmp	r1, #31
 80212c6:	b538      	push	{r3, r4, r5, lr}
 80212c8:	4604      	mov	r4, r0
 80212ca:	460d      	mov	r5, r1
 80212cc:	d904      	bls.n	80212d8 <_raise_r+0x14>
 80212ce:	2316      	movs	r3, #22
 80212d0:	6003      	str	r3, [r0, #0]
 80212d2:	f04f 30ff 	mov.w	r0, #4294967295
 80212d6:	bd38      	pop	{r3, r4, r5, pc}
 80212d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80212da:	b112      	cbz	r2, 80212e2 <_raise_r+0x1e>
 80212dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80212e0:	b94b      	cbnz	r3, 80212f6 <_raise_r+0x32>
 80212e2:	4620      	mov	r0, r4
 80212e4:	f000 f830 	bl	8021348 <_getpid_r>
 80212e8:	462a      	mov	r2, r5
 80212ea:	4601      	mov	r1, r0
 80212ec:	4620      	mov	r0, r4
 80212ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80212f2:	f000 b817 	b.w	8021324 <_kill_r>
 80212f6:	2b01      	cmp	r3, #1
 80212f8:	d00a      	beq.n	8021310 <_raise_r+0x4c>
 80212fa:	1c59      	adds	r1, r3, #1
 80212fc:	d103      	bne.n	8021306 <_raise_r+0x42>
 80212fe:	2316      	movs	r3, #22
 8021300:	6003      	str	r3, [r0, #0]
 8021302:	2001      	movs	r0, #1
 8021304:	e7e7      	b.n	80212d6 <_raise_r+0x12>
 8021306:	2400      	movs	r4, #0
 8021308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802130c:	4628      	mov	r0, r5
 802130e:	4798      	blx	r3
 8021310:	2000      	movs	r0, #0
 8021312:	e7e0      	b.n	80212d6 <_raise_r+0x12>

08021314 <raise>:
 8021314:	4b02      	ldr	r3, [pc, #8]	; (8021320 <raise+0xc>)
 8021316:	4601      	mov	r1, r0
 8021318:	6818      	ldr	r0, [r3, #0]
 802131a:	f7ff bfd3 	b.w	80212c4 <_raise_r>
 802131e:	bf00      	nop
 8021320:	20000040 	.word	0x20000040

08021324 <_kill_r>:
 8021324:	b538      	push	{r3, r4, r5, lr}
 8021326:	4d07      	ldr	r5, [pc, #28]	; (8021344 <_kill_r+0x20>)
 8021328:	2300      	movs	r3, #0
 802132a:	4604      	mov	r4, r0
 802132c:	4608      	mov	r0, r1
 802132e:	4611      	mov	r1, r2
 8021330:	602b      	str	r3, [r5, #0]
 8021332:	f7e0 fd33 	bl	8001d9c <_kill>
 8021336:	1c43      	adds	r3, r0, #1
 8021338:	d102      	bne.n	8021340 <_kill_r+0x1c>
 802133a:	682b      	ldr	r3, [r5, #0]
 802133c:	b103      	cbz	r3, 8021340 <_kill_r+0x1c>
 802133e:	6023      	str	r3, [r4, #0]
 8021340:	bd38      	pop	{r3, r4, r5, pc}
 8021342:	bf00      	nop
 8021344:	20014bd0 	.word	0x20014bd0

08021348 <_getpid_r>:
 8021348:	f7e0 bd20 	b.w	8001d8c <_getpid>

0802134c <_malloc_usable_size_r>:
 802134c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021350:	1f18      	subs	r0, r3, #4
 8021352:	2b00      	cmp	r3, #0
 8021354:	bfbc      	itt	lt
 8021356:	580b      	ldrlt	r3, [r1, r0]
 8021358:	18c0      	addlt	r0, r0, r3
 802135a:	4770      	bx	lr

0802135c <_init>:
 802135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802135e:	bf00      	nop
 8021360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021362:	bc08      	pop	{r3}
 8021364:	469e      	mov	lr, r3
 8021366:	4770      	bx	lr

08021368 <_fini>:
 8021368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802136a:	bf00      	nop
 802136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802136e:	bc08      	pop	{r3}
 8021370:	469e      	mov	lr, r3
 8021372:	4770      	bx	lr
